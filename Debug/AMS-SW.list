
AMS-SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106a0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08010828  08010828  00011828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b04  08010b04  00012024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010b04  08010b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b0c  08010b0c  00012024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b0c  08010b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b10  08010b10  00011b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08010b14  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012024  2**0
                  CONTENTS
 10 .bss          00000814  20000028  20000028  00012028  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000083c  2000083c  00012028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004056b  00000000  00000000  00012054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c5  00000000  00000000  000525bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000085a8  00000000  00000000  00054788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000065a7  00000000  00000000  0005cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026609  00000000  00000000  000632d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c031  00000000  00000000  000898e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00120908  00000000  00000000  000c5911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e6219  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0002695c  00000000  00000000  001e625c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0020cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010810 	.word	0x08010810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08010810 	.word	0x08010810

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b988 	b.w	8000e2c <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	468e      	mov	lr, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	4688      	mov	r8, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d962      	bls.n	8000c10 <__udivmoddi4+0xdc>
 8000b4a:	fab2 f682 	clz	r6, r2
 8000b4e:	b14e      	cbz	r6, 8000b64 <__udivmoddi4+0x30>
 8000b50:	f1c6 0320 	rsb	r3, r6, #32
 8000b54:	fa01 f806 	lsl.w	r8, r1, r6
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	40b7      	lsls	r7, r6
 8000b5e:	ea43 0808 	orr.w	r8, r3, r8
 8000b62:	40b4      	lsls	r4, r6
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	fa1f fc87 	uxth.w	ip, r7
 8000b6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b70:	0c23      	lsrs	r3, r4, #16
 8000b72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b88:	f080 80ea 	bcs.w	8000d60 <__udivmoddi4+0x22c>
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f240 80e7 	bls.w	8000d60 <__udivmoddi4+0x22c>
 8000b92:	3902      	subs	r1, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	1a9a      	subs	r2, r3, r2
 8000b98:	b2a3      	uxth	r3, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000baa:	459c      	cmp	ip, r3
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x8e>
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb4:	f080 80d6 	bcs.w	8000d64 <__udivmoddi4+0x230>
 8000bb8:	459c      	cmp	ip, r3
 8000bba:	f240 80d3 	bls.w	8000d64 <__udivmoddi4+0x230>
 8000bbe:	443b      	add	r3, r7
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc6:	eba3 030c 	sub.w	r3, r3, ip
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40f3      	lsrs	r3, r6
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xb6>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb0>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x14c>
 8000bf2:	4573      	cmp	r3, lr
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xc8>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 8105 	bhi.w	8000e06 <__udivmoddi4+0x2d2>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4690      	mov	r8, r2
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0e5      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c0e:	e7e2      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f000 8090 	beq.w	8000d36 <__udivmoddi4+0x202>
 8000c16:	fab2 f682 	clz	r6, r2
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f040 80a4 	bne.w	8000d68 <__udivmoddi4+0x234>
 8000c20:	1a8a      	subs	r2, r1, r2
 8000c22:	0c03      	lsrs	r3, r0, #16
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	b2bc      	uxth	r4, r7
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x11e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x11c>
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	f200 80e0 	bhi.w	8000e10 <__udivmoddi4+0x2dc>
 8000c50:	46c4      	mov	ip, r8
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c60:	fb02 f404 	mul.w	r4, r2, r4
 8000c64:	429c      	cmp	r4, r3
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x144>
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x142>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f200 80ca 	bhi.w	8000e0a <__udivmoddi4+0x2d6>
 8000c76:	4602      	mov	r2, r0
 8000c78:	1b1b      	subs	r3, r3, r4
 8000c7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c90:	fa20 f306 	lsr.w	r3, r0, r6
 8000c94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	fa1f fc87 	uxth.w	ip, r7
 8000ca6:	fbbe f0f9 	udiv	r0, lr, r9
 8000caa:	0c1c      	lsrs	r4, r3, #16
 8000cac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x1a0>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cc6:	f080 809c 	bcs.w	8000e02 <__udivmoddi4+0x2ce>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8099 	bls.w	8000e02 <__udivmoddi4+0x2ce>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	eba4 040e 	sub.w	r4, r4, lr
 8000cd8:	fa1f fe83 	uxth.w	lr, r3
 8000cdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1ce>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cf6:	f080 8082 	bcs.w	8000dfe <__udivmoddi4+0x2ca>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d97f      	bls.n	8000dfe <__udivmoddi4+0x2ca>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d0e:	4564      	cmp	r4, ip
 8000d10:	4673      	mov	r3, lr
 8000d12:	46e1      	mov	r9, ip
 8000d14:	d362      	bcc.n	8000ddc <__udivmoddi4+0x2a8>
 8000d16:	d05f      	beq.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x1fe>
 8000d1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	fa22 f301 	lsr.w	r3, r2, r1
 8000d2a:	431e      	orrs	r6, r3
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d32:	2100      	movs	r1, #0
 8000d34:	e74f      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000d36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d3a:	0c01      	lsrs	r1, r0, #16
 8000d3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d40:	b280      	uxth	r0, r0
 8000d42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d46:	463b      	mov	r3, r7
 8000d48:	4638      	mov	r0, r7
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	46b8      	mov	r8, r7
 8000d4e:	46be      	mov	lr, r7
 8000d50:	2620      	movs	r6, #32
 8000d52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d56:	eba2 0208 	sub.w	r2, r2, r8
 8000d5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d5e:	e766      	b.n	8000c2e <__udivmoddi4+0xfa>
 8000d60:	4601      	mov	r1, r0
 8000d62:	e718      	b.n	8000b96 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e72c      	b.n	8000bc2 <__udivmoddi4+0x8e>
 8000d68:	f1c6 0220 	rsb	r2, r6, #32
 8000d6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d70:	40b7      	lsls	r7, r6
 8000d72:	40b1      	lsls	r1, r6
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d88:	0c11      	lsrs	r1, r2, #16
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb08 f904 	mul.w	r9, r8, r4
 8000d92:	40b0      	lsls	r0, r6
 8000d94:	4589      	cmp	r9, r1
 8000d96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d9a:	b280      	uxth	r0, r0
 8000d9c:	d93e      	bls.n	8000e1c <__udivmoddi4+0x2e8>
 8000d9e:	1879      	adds	r1, r7, r1
 8000da0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000da4:	d201      	bcs.n	8000daa <__udivmoddi4+0x276>
 8000da6:	4589      	cmp	r9, r1
 8000da8:	d81f      	bhi.n	8000dea <__udivmoddi4+0x2b6>
 8000daa:	eba1 0109 	sub.w	r1, r1, r9
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fb09 f804 	mul.w	r8, r9, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc0:	4542      	cmp	r2, r8
 8000dc2:	d229      	bcs.n	8000e18 <__udivmoddi4+0x2e4>
 8000dc4:	18ba      	adds	r2, r7, r2
 8000dc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dca:	d2c4      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dcc:	4542      	cmp	r2, r8
 8000dce:	d2c2      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000dd4:	443a      	add	r2, r7
 8000dd6:	e7be      	b.n	8000d56 <__udivmoddi4+0x222>
 8000dd8:	45f0      	cmp	r8, lr
 8000dda:	d29d      	bcs.n	8000d18 <__udivmoddi4+0x1e4>
 8000ddc:	ebbe 0302 	subs.w	r3, lr, r2
 8000de0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000de4:	3801      	subs	r0, #1
 8000de6:	46e1      	mov	r9, ip
 8000de8:	e796      	b.n	8000d18 <__udivmoddi4+0x1e4>
 8000dea:	eba7 0909 	sub.w	r9, r7, r9
 8000dee:	4449      	add	r1, r9
 8000df0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000df4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df8:	fb09 f804 	mul.w	r8, r9, r4
 8000dfc:	e7db      	b.n	8000db6 <__udivmoddi4+0x282>
 8000dfe:	4673      	mov	r3, lr
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1ce>
 8000e02:	4650      	mov	r0, sl
 8000e04:	e766      	b.n	8000cd4 <__udivmoddi4+0x1a0>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e6fd      	b.n	8000c06 <__udivmoddi4+0xd2>
 8000e0a:	443b      	add	r3, r7
 8000e0c:	3a02      	subs	r2, #2
 8000e0e:	e733      	b.n	8000c78 <__udivmoddi4+0x144>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	443b      	add	r3, r7
 8000e16:	e71c      	b.n	8000c52 <__udivmoddi4+0x11e>
 8000e18:	4649      	mov	r1, r9
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x222>
 8000e1c:	eba1 0109 	sub.w	r1, r1, r9
 8000e20:	46c4      	mov	ip, r8
 8000e22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e26:	fb09 f804 	mul.w	r8, r9, r4
 8000e2a:	e7c4      	b.n	8000db6 <__udivmoddi4+0x282>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <pec15_calc>:
 * @param len Length of the data buffer.
 * @param data Pointer to the data buffer.
 * @return Calculated PEC15 checksum.
 */
uint16_t pec15_calc(uint8_t len, uint8_t *data)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;
  remainder = 16;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	737b      	strb	r3, [r7, #13]
 8000e44:	e019      	b.n	8000e7a <pec15_calc+0x4a>
    {
      addr = ((remainder >> 7) ^ data[i]) & 0xff;
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	09db      	lsrs	r3, r3, #7
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	7b7a      	ldrb	r2, [r7, #13]
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	440a      	add	r2, r1
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	4053      	eors	r3, r2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	817b      	strh	r3, [r7, #10]
      remainder = (remainder << 8) ^ crc15Table[addr];
 8000e5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	897b      	ldrh	r3, [r7, #10]
 8000e66:	490b      	ldr	r1, [pc, #44]	@ (8000e94 <pec15_calc+0x64>)
 8000e68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4053      	eors	r3, r2
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++)
 8000e74:	7b7b      	ldrb	r3, [r7, #13]
 8000e76:	3301      	adds	r3, #1
 8000e78:	737b      	strb	r3, [r7, #13]
 8000e7a:	7b7a      	ldrb	r2, [r7, #13]
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3e1      	bcc.n	8000e46 <pec15_calc+0x16>
    }
  return (remainder * 2);
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	b29b      	uxth	r3, r3
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	08010828 	.word	0x08010828

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f005 f8fc 	bl	8006098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f89e 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fb74 	bl	8001590 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ea8:	f000 f9fa 	bl	80012a0 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000eac:	f000 fa64 	bl	8001378 <MX_SPI1_Init>
  MX_CAN2_Init();
 8000eb0:	f000 fa2c 	bl	800130c <MX_CAN2_Init>
  MX_ADC1_Init();
 8000eb4:	f000 f8fe 	bl	80010b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000eb8:	f000 f94e 	bl	8001158 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ebc:	f000 f99e 	bl	80011fc <MX_ADC3_Init>
  MX_TIM1_Init();
 8000ec0:	f000 fa90 	bl	80013e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ec4:	f000 fb12 	bl	80014ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  configCan1Filters();
 8000ec8:	f000 fc52 	bl	8001770 <configCan1Filters>
  configCan2Filters();
 8000ecc:	f000 fc76 	bl	80017bc <configCan2Filters>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // set all output pins to the "safe" state
  HAL_GPIO_WritePin(MCU_STATUS_LED1_GPIO_Port, MCU_STATUS_LED1_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	483a      	ldr	r0, [pc, #232]	@ (8000fc0 <main+0x128>)
 8000ed6:	f006 fa65 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_STATUS_LED2_GPIO_Port, MCU_STATUS_LED2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2108      	movs	r1, #8
 8000ede:	4838      	ldr	r0, [pc, #224]	@ (8000fc0 <main+0x128>)
 8000ee0:	f006 fa60 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_STATUS_LED3_GPIO_Port, MCU_STATUS_LED3_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4836      	ldr	r0, [pc, #216]	@ (8000fc4 <main+0x12c>)
 8000eea:	f006 fa5b 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_STATUS_LED4_GPIO_Port, MCU_STATUS_LED4_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4835      	ldr	r0, [pc, #212]	@ (8000fc8 <main+0x130>)
 8000ef4:	f006 fa56 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WATCHDOG_INPUT_GPIO_Port, WATCHDOG_INPUT_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2110      	movs	r1, #16
 8000efc:	4830      	ldr	r0, [pc, #192]	@ (8000fc0 <main+0x128>)
 8000efe:	f006 fa51 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2180      	movs	r1, #128	@ 0x80
 8000f06:	482e      	ldr	r0, [pc, #184]	@ (8000fc0 <main+0x128>)
 8000f08:	f006 fa4c 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f12:	482b      	ldr	r0, [pc, #172]	@ (8000fc0 <main+0x128>)
 8000f14:	f006 fa46 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f1e:	4828      	ldr	r0, [pc, #160]	@ (8000fc0 <main+0x128>)
 8000f20:	f006 fa40 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2a:	4828      	ldr	r0, [pc, #160]	@ (8000fcc <main+0x134>)
 8000f2c:	f006 fa3a 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SC_RESET_GPIO_Port, SC_RESET_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f36:	4822      	ldr	r0, [pc, #136]	@ (8000fc0 <main+0x128>)
 8000f38:	f006 fa34 	bl	80073a4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    tick = HAL_GetTick();
 8000f3c:	f005 f912 	bl	8006164 <HAL_GetTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a23      	ldr	r2, [pc, #140]	@ (8000fd0 <main+0x138>)
 8000f44:	6013      	str	r3, [r2, #0]

    voltageConversions();
 8000f46:	f000 fc7f 	bl	8001848 <voltageConversions>
    HAL_Delay(3); // Wait for conversion to complete (2.3ms)
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f005 f916 	bl	800617c <HAL_Delay>
    temperatureConversions();
 8000f50:	f000 fcbc 	bl	80018cc <temperatureConversions>
    HAL_Delay(3);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f005 f911 	bl	800617c <HAL_Delay>
    voltageReadings();
 8000f5a:	f000 fcf9 	bl	8001950 <voltageReadings>
    temperatureReadings();
 8000f5e:	f000 fe9f 	bl	8001ca0 <temperatureReadings>

    // send voltages and temperatures, on alternate passes
    if (cellOrTemp)
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <main+0x13c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00f      	beq.n	8000f8a <main+0xf2>
    {
      voltageSendCan();
 8000f6a:	f001 f815 	bl	8001f98 <voltageSendCan>
      if (++amsTxMessageCounter >= 24)
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <main+0x140>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <main+0x140>)
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <main+0x140>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b17      	cmp	r3, #23
 8000f80:	d905      	bls.n	8000f8e <main+0xf6>
        amsTxMessageCounter = 0; // Reset counter after sending all messages
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <main+0x140>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e001      	b.n	8000f8e <main+0xf6>
    }
    else // Temperatures
    {
      temperatureSendCan();
 8000f8a:	f003 faeb 	bl	8004564 <temperatureSendCan>
    }
    cellOrTemp = !cellOrTemp; // Toggle between cells and temperatures on each pass
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <main+0x13c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <main+0x13c>)
 8000fa0:	701a      	strb	r2, [r3, #0]


    // TODO: Consider moving this to an interrupt if IVT messages are more frequent and FIFO overflows
    // In general IVT overflows should not matter much since we will read the latest message
    // read can 1
    readCanMessages();
 8000fa2:	f004 f9dd 	bl	8005360 <readCanMessages>

    stepStateMachine();
 8000fa6:	f004 fb93 	bl	80056d0 <stepStateMachine>

    // find max and min voltages and temperatures
    deltaTick = HAL_GetTick() - tick;
 8000faa:	f005 f8db 	bl	8006164 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <main+0x138>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <main+0x144>)
 8000fb8:	6013      	str	r3, [r2, #0]
    sendStatus();
 8000fba:	f004 fa85 	bl	80054c8 <sendStatus>
    tick = HAL_GetTick();
 8000fbe:	e7bd      	b.n	8000f3c <main+0xa4>
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	20000820 	.word	0x20000820
 8000fd4:	20000802 	.word	0x20000802
 8000fd8:	20000801 	.word	0x20000801
 8000fdc:	20000824 	.word	0x20000824

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	@ 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	@ 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00f fbe2 	bl	80107b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b28      	ldr	r3, [pc, #160]	@ (80010ac <SystemClock_Config+0xcc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a27      	ldr	r2, [pc, #156]	@ (80010ac <SystemClock_Config+0xcc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <SystemClock_Config+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <SystemClock_Config+0xd0>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2310      	movs	r3, #16
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001050:	2308      	movs	r3, #8
 8001052:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800105c:	2304      	movs	r3, #4
 800105e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f006 f9b7 	bl	80073d8 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001070:	f004 fcc0 	bl	80059f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001080:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2104      	movs	r1, #4
 8001092:	4618      	mov	r0, r3
 8001094:	f006 fc18 	bl	80078c8 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800109e:	f004 fca9 	bl	80059f4 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	@ 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <MX_ADC1_Init+0x98>)
 80010c8:	4a21      	ldr	r2, [pc, #132]	@ (8001150 <MX_ADC1_Init+0x9c>)
 80010ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <MX_ADC1_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <MX_ADC1_Init+0x98>)
 80010f4:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <MX_ADC1_Init+0xa0>)
 80010f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_ADC1_Init+0x98>)
 8001100:	2201      	movs	r2, #1
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_ADC1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_ADC1_Init+0x98>)
 800110e:	2201      	movs	r2, #1
 8001110:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	@ (800114c <MX_ADC1_Init+0x98>)
 8001114:	f005 f856 	bl	80061c4 <HAL_ADC_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800111e:	f004 fc69 	bl	80059f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001122:	230a      	movs	r3, #10
 8001124:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	@ (800114c <MX_ADC1_Init+0x98>)
 8001134:	f005 f88a 	bl	800624c <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800113e:	f004 fc59 	bl	80059f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000044 	.word	0x20000044
 8001150:	40012000 	.word	0x40012000
 8001154:	0f000001 	.word	0x0f000001

08001158 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800116a:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <MX_ADC2_Init+0x98>)
 800116c:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <MX_ADC2_Init+0x9c>)
 800116e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <MX_ADC2_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_ADC2_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_ADC2_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_ADC2_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_ADC2_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_ADC2_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <MX_ADC2_Init+0x98>)
 8001198:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <MX_ADC2_Init+0xa0>)
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_ADC2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <MX_ADC2_Init+0x98>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_ADC2_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_ADC2_Init+0x98>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011b6:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <MX_ADC2_Init+0x98>)
 80011b8:	f005 f804 	bl	80061c4 <HAL_ADC_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80011c2:	f004 fc17 	bl	80059f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011c6:	230b      	movs	r3, #11
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <MX_ADC2_Init+0x98>)
 80011d8:	f005 f838 	bl	800624c <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80011e2:	f004 fc07 	bl	80059f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000008c 	.word	0x2000008c
 80011f4:	40012100 	.word	0x40012100
 80011f8:	0f000001 	.word	0x0f000001

080011fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <MX_ADC3_Init+0x98>)
 8001210:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <MX_ADC3_Init+0x9c>)
 8001212:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <MX_ADC3_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <MX_ADC3_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001220:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <MX_ADC3_Init+0x98>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <MX_ADC3_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <MX_ADC3_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_ADC3_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <MX_ADC3_Init+0x98>)
 800123c:	4a17      	ldr	r2, [pc, #92]	@ (800129c <MX_ADC3_Init+0xa0>)
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_ADC3_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_ADC3_Init+0x98>)
 8001248:	2201      	movs	r2, #1
 800124a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_ADC3_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_ADC3_Init+0x98>)
 8001256:	2201      	movs	r2, #1
 8001258:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800125a:	480e      	ldr	r0, [pc, #56]	@ (8001294 <MX_ADC3_Init+0x98>)
 800125c:	f004 ffb2 	bl	80061c4 <HAL_ADC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001266:	f004 fbc5 	bl	80059f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800126a:	230d      	movs	r3, #13
 800126c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800126e:	2301      	movs	r3, #1
 8001270:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <MX_ADC3_Init+0x98>)
 800127c:	f004 ffe6 	bl	800624c <HAL_ADC_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001286:	f004 fbb5 	bl	80059f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000d4 	.word	0x200000d4
 8001298:	40012200 	.word	0x40012200
 800129c:	0f000001 	.word	0x0f000001

080012a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012a4:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012a6:	4a18      	ldr	r2, [pc, #96]	@ (8001308 <MX_CAN1_Init+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012be:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80012c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80012ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_CAN1_Init+0x64>)
 80012f2:	f005 f9c9 	bl	8006688 <HAL_CAN_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80012fc:	f004 fb7a 	bl	80059f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000011c 	.word	0x2000011c
 8001308:	40006400 	.word	0x40006400

0800130c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_CAN2_Init+0x64>)
 8001312:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <MX_CAN2_Init+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_CAN2_Init+0x64>)
 8001318:	2202      	movs	r2, #2
 800131a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_CAN2_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <MX_CAN2_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_CAN2_Init+0x64>)
 800132a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800132e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_CAN2_Init+0x64>)
 8001332:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001336:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001338:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <MX_CAN2_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_CAN2_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <MX_CAN2_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_CAN2_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <MX_CAN2_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_CAN2_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_CAN2_Init+0x64>)
 800135e:	f005 f993 	bl	8006688 <HAL_CAN_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001368:	f004 fb44 	bl	80059f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000144 	.word	0x20000144
 8001374:	40006800 	.word	0x40006800

08001378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <MX_SPI1_Init+0x64>)
 800137e:	4a18      	ldr	r2, [pc, #96]	@ (80013e0 <MX_SPI1_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_SPI1_Init+0x64>)
 8001384:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <MX_SPI1_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_SPI1_Init+0x64>)
 80013a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_SPI1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_SPI1_Init+0x64>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_SPI1_Init+0x64>)
 80013ca:	f006 fc29 	bl	8007c20 <HAL_SPI_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d4:	f004 fb0e 	bl	80059f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000016c 	.word	0x2000016c
 80013e0:	40013000 	.word	0x40013000

080013e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b092      	sub	sp, #72	@ 0x48
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2220      	movs	r2, #32
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00f f9d2 	bl	80107b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001414:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <MX_TIM1_Init+0x100>)
 8001416:	4a34      	ldr	r2, [pc, #208]	@ (80014e8 <MX_TIM1_Init+0x104>)
 8001418:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800141a:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <MX_TIM1_Init+0x100>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b30      	ldr	r3, [pc, #192]	@ (80014e4 <MX_TIM1_Init+0x100>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001426:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <MX_TIM1_Init+0x100>)
 8001428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800142c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b2d      	ldr	r3, [pc, #180]	@ (80014e4 <MX_TIM1_Init+0x100>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001434:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <MX_TIM1_Init+0x100>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <MX_TIM1_Init+0x100>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001440:	4828      	ldr	r0, [pc, #160]	@ (80014e4 <MX_TIM1_Init+0x100>)
 8001442:	f007 f83f 	bl	80084c4 <HAL_TIM_PWM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800144c:	f004 fad2 	bl	80059f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001458:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800145c:	4619      	mov	r1, r3
 800145e:	4821      	ldr	r0, [pc, #132]	@ (80014e4 <MX_TIM1_Init+0x100>)
 8001460:	f007 fdac 	bl	8008fbc <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800146a:	f004 fac3 	bl	80059f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	@ 0x60
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800148a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148e:	2208      	movs	r2, #8
 8001490:	4619      	mov	r1, r3
 8001492:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <MX_TIM1_Init+0x100>)
 8001494:	f007 f950 	bl	8008738 <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800149e:	f004 faa9 	bl	80059f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <MX_TIM1_Init+0x100>)
 80014c6:	f007 fdf5 	bl	80090b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80014d0:	f004 fa90 	bl	80059f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d4:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <MX_TIM1_Init+0x100>)
 80014d6:	f004 fcb1 	bl	8005e3c <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3748      	adds	r7, #72	@ 0x48
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001c4 	.word	0x200001c4
 80014e8:	40010000 	.word	0x40010000

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001508:	4b20      	ldr	r3, [pc, #128]	@ (800158c <MX_TIM2_Init+0xa0>)
 800150a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001510:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <MX_TIM2_Init+0xa0>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <MX_TIM2_Init+0xa0>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <MX_TIM2_Init+0xa0>)
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <MX_TIM2_Init+0xa0>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_TIM2_Init+0xa0>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001530:	4816      	ldr	r0, [pc, #88]	@ (800158c <MX_TIM2_Init+0xa0>)
 8001532:	f007 f816 	bl	8008562 <HAL_TIM_IC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800153c:	f004 fa5a 	bl	80059f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	480f      	ldr	r0, [pc, #60]	@ (800158c <MX_TIM2_Init+0xa0>)
 8001550:	f007 fd34 	bl	8008fbc <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800155a:	f004 fa4b 	bl	80059f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001562:	2301      	movs	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_TIM2_Init+0xa0>)
 8001576:	f007 f843 	bl	8008600 <HAL_TIM_IC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001580:	f004 fa38 	bl	80059f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000020c 	.word	0x2000020c

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	@ 0x30
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	4b6c      	ldr	r3, [pc, #432]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a6b      	ldr	r2, [pc, #428]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b69      	ldr	r3, [pc, #420]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4b65      	ldr	r3, [pc, #404]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a64      	ldr	r2, [pc, #400]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b62      	ldr	r3, [pc, #392]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a5d      	ldr	r2, [pc, #372]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b5b      	ldr	r3, [pc, #364]	@ (800175c <MX_GPIO_Init+0x1cc>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b57      	ldr	r3, [pc, #348]	@ (800175c <MX_GPIO_Init+0x1cc>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a56      	ldr	r2, [pc, #344]	@ (800175c <MX_GPIO_Init+0x1cc>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b54      	ldr	r3, [pc, #336]	@ (800175c <MX_GPIO_Init+0x1cc>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b50      	ldr	r3, [pc, #320]	@ (800175c <MX_GPIO_Init+0x1cc>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a4f      	ldr	r2, [pc, #316]	@ (800175c <MX_GPIO_Init+0x1cc>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b4d      	ldr	r3, [pc, #308]	@ (800175c <MX_GPIO_Init+0x1cc>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <MX_GPIO_Init+0x1cc>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a48      	ldr	r2, [pc, #288]	@ (800175c <MX_GPIO_Init+0x1cc>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b46      	ldr	r3, [pc, #280]	@ (800175c <MX_GPIO_Init+0x1cc>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MCU_STATUS_LED1_Pin|MCU_STATUS_LED2_Pin|WATCHDOG_INPUT_Pin|AIR_P_ENABLE_Pin
 800164e:	2200      	movs	r2, #0
 8001650:	f641 419c 	movw	r1, #7324	@ 0x1c9c
 8001654:	4842      	ldr	r0, [pc, #264]	@ (8001760 <MX_GPIO_Init+0x1d0>)
 8001656:	f005 fea5 	bl	80073a4 <HAL_GPIO_WritePin>
                          |PRECHARGE_ENABLE_Pin|AIR_N_ENABLE_Pin|SC_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_SSN_Pin|MCU_STATUS_LED3_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2130      	movs	r1, #48	@ 0x30
 800165e:	4841      	ldr	r0, [pc, #260]	@ (8001764 <MX_GPIO_Init+0x1d4>)
 8001660:	f005 fea0 	bl	80073a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_STATUS_LED4_GPIO_Port, MCU_STATUS_LED4_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2101      	movs	r1, #1
 8001668:	483f      	ldr	r0, [pc, #252]	@ (8001768 <MX_GPIO_Init+0x1d8>)
 800166a:	f005 fe9b 	bl	80073a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MCU_AMS_ERROR_N_Pin|RST_OUT_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001674:	483d      	ldr	r0, [pc, #244]	@ (800176c <MX_GPIO_Init+0x1dc>)
 8001676:	f005 fe95 	bl	80073a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_STATUS_LED1_Pin MCU_STATUS_LED2_Pin WATCHDOG_INPUT_Pin AIR_P_ENABLE_Pin
                           PRECHARGE_ENABLE_Pin AIR_N_ENABLE_Pin SC_RESET_Pin */
  GPIO_InitStruct.Pin = MCU_STATUS_LED1_Pin|MCU_STATUS_LED2_Pin|WATCHDOG_INPUT_Pin|AIR_P_ENABLE_Pin
 800167a:	f641 439c 	movw	r3, #7324	@ 0x1c9c
 800167e:	61fb      	str	r3, [r7, #28]
                          |PRECHARGE_ENABLE_Pin|AIR_N_ENABLE_Pin|SC_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4833      	ldr	r0, [pc, #204]	@ (8001760 <MX_GPIO_Init+0x1d0>)
 8001694:	f005 fcd2 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SSN_Pin MCU_STATUS_LED3_Pin */
  GPIO_InitStruct.Pin = SPI1_SSN_Pin|MCU_STATUS_LED3_Pin;
 8001698:	2330      	movs	r3, #48	@ 0x30
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	482d      	ldr	r0, [pc, #180]	@ (8001764 <MX_GPIO_Init+0x1d4>)
 80016b0:	f005 fcc4 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_STATUS_LED4_Pin */
  GPIO_InitStruct.Pin = MCU_STATUS_LED4_Pin;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MCU_STATUS_LED4_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	4827      	ldr	r0, [pc, #156]	@ (8001768 <MX_GPIO_Init+0x1d8>)
 80016cc:	f005 fcb6 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_ERROR_LATCHED_Pin */
  GPIO_InitStruct.Pin = AMS_ERROR_LATCHED_Pin;
 80016d0:	2304      	movs	r3, #4
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AMS_ERROR_LATCHED_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	4821      	ldr	r0, [pc, #132]	@ (8001768 <MX_GPIO_Init+0x1d8>)
 80016e4:	f005 fcaa 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_N_CLOSED_Pin AIR_P_CLOSED_Pin IMD_ERROR_LATCHED_Pin */
  GPIO_InitStruct.Pin = AIR_N_CLOSED_Pin|AIR_P_CLOSED_Pin|IMD_ERROR_LATCHED_Pin;
 80016e8:	f44f 4386 	mov.w	r3, #17152	@ 0x4300
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4818      	ldr	r0, [pc, #96]	@ (8001760 <MX_GPIO_Init+0x1d0>)
 80016fe:	f005 fc9d 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_AMS_ERROR_N_Pin RST_OUT_Pin */
  GPIO_InitStruct.Pin = MCU_AMS_ERROR_N_Pin|RST_OUT_Pin;
 8001702:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4814      	ldr	r0, [pc, #80]	@ (800176c <MX_GPIO_Init+0x1dc>)
 800171c:	f005 fc8e 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_CLOSED_SIGNAL_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_CLOSED_SIGNAL_Pin;
 8001720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PRECHARGE_CLOSED_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	480d      	ldr	r0, [pc, #52]	@ (800176c <MX_GPIO_Init+0x1dc>)
 8001736:	f005 fc81 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pin : SC_PROBE_Pin */
  GPIO_InitStruct.Pin = SC_PROBE_Pin;
 800173a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_PROBE_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_GPIO_Init+0x1d4>)
 8001750:	f005 fc74 	bl	800703c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	@ 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40020800 	.word	0x40020800
 8001768:	40020400 	.word	0x40020400
 800176c:	40020c00 	.word	0x40020c00

08001770 <configCan1Filters>:

/* USER CODE BEGIN 4 */
static void configCan1Filters(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef canFilter;

  canFilter.FilterBank = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  canFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
  canFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  canFilter.FilterActivation = ENABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	623b      	str	r3, [r7, #32]
  canFilter.SlaveStartFilterBank = 14;
 800178a:	230e      	movs	r3, #14
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24

  canFilter.FilterIdHigh = CAN1_DBU_STATUS_1_FRAME_ID << 5; // Shift ID to match filter format;
 800178e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001792:	603b      	str	r3, [r7, #0]
  canFilter.FilterIdLow = CAN1_ECU_STATUS_FRAME_ID << 5;
 8001794:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001798:	607b      	str	r3, [r7, #4]
  canFilter.FilterMaskIdHigh = CAN1_AMS_PARAMETERS_SET_FRAME_ID << 5;
 800179a:	f44f 5349 	mov.w	r3, #12864	@ 0x3240
 800179e:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdLow = 0xFFFF; // Unused
 80017a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017a4:	60fb      	str	r3, [r7, #12]

  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 80017a6:	463b      	mov	r3, r7
 80017a8:	4619      	mov	r1, r3
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <configCan1Filters+0x48>)
 80017ac:	f005 f868 	bl	8006880 <HAL_CAN_ConfigFilter>
}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	@ 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000011c 	.word	0x2000011c

080017bc <configCan2Filters>:

static void configCan2Filters(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef canFilter;

  canFilter.FilterBank = 14;
 80017c2:	230e      	movs	r3, #14
 80017c4:	617b      	str	r3, [r7, #20]
  canFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  canFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  canFilter.FilterActivation = ENABLE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
  canFilter.SlaveStartFilterBank = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24

  canFilter.FilterBank = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  canFilter.FilterIdHigh = CAN2_IVT_MSG_RESULT_U2_FRAME_ID << 5; // Shift ID to match filter format
 80017de:	f24a 4360 	movw	r3, #42080	@ 0xa460
 80017e2:	603b      	str	r3, [r7, #0]
  canFilter.FilterIdLow = CAN2_IVT_MSG_RESULT_U1_FRAME_ID << 5;
 80017e4:	f24a 4340 	movw	r3, #42048	@ 0xa440
 80017e8:	607b      	str	r3, [r7, #4]
  canFilter.FilterMaskIdHigh = CAN2_IVT_MSG_RESULT_T_FRAME_ID << 5;
 80017ea:	f24a 43a0 	movw	r3, #42144	@ 0xa4a0
 80017ee:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdLow = CAN2_IVT_MSG_RESULT_W_FRAME_ID << 5;
 80017f0:	f24a 43c0 	movw	r3, #42176	@ 0xa4c0
 80017f4:	60fb      	str	r3, [r7, #12]
  if (HAL_CAN_ConfigFilter(&hcan2, &canFilter) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	4619      	mov	r1, r3
 80017fa:	4812      	ldr	r0, [pc, #72]	@ (8001844 <configCan2Filters+0x88>)
 80017fc:	f005 f840 	bl	8006880 <HAL_CAN_ConfigFilter>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <configCan2Filters+0x4e>
  {
    Error_Handler();
 8001806:	f004 f8f5 	bl	80059f4 <Error_Handler>
  }

  canFilter.FilterBank = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  canFilter.FilterIdHigh = CAN2_IVT_MSG_RESULT_WH_FRAME_ID << 5; // Shift ID to match filter format
 800180e:	f44f 4325 	mov.w	r3, #42240	@ 0xa500
 8001812:	603b      	str	r3, [r7, #0]
  canFilter.FilterIdLow = CAN2_IVT_MSG_RESULT_I_FRAME_ID << 5;
 8001814:	f24a 4320 	movw	r3, #42016	@ 0xa420
 8001818:	607b      	str	r3, [r7, #4]
  canFilter.FilterMaskIdHigh = CAN2_IVT_MSG_RESULT_U3_FRAME_ID << 5;
 800181a:	f24a 4380 	movw	r3, #42112	@ 0xa480
 800181e:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdLow = CAN2_IVT_MSG_RESULT_AS_FRAME_ID << 5;
 8001820:	f24a 43e0 	movw	r3, #42208	@ 0xa4e0
 8001824:	60fb      	str	r3, [r7, #12]
  if (HAL_CAN_ConfigFilter(&hcan2, &canFilter) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	@ (8001844 <configCan2Filters+0x88>)
 800182c:	f005 f828 	bl	8006880 <HAL_CAN_ConfigFilter>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <configCan2Filters+0x7e>
  {
    Error_Handler();
 8001836:	f004 f8dd 	bl	80059f4 <Error_Handler>
  }
}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	@ 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000144 	.word	0x20000144

08001848 <voltageConversions>:

static void voltageConversions(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  command = MAKEBROADCASTCMD(ADCV(MD_NORMAL, DCP_NOT_PERMITTED, CH_ALL_CELLS));
 800184c:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <voltageConversions+0x70>)
 800184e:	2263      	movs	r2, #99	@ 0x63
 8001850:	801a      	strh	r2, [r3, #0]
  spiTxData[0] = command >> 8;
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <voltageConversions+0x70>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b29b      	uxth	r3, r3
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <voltageConversions+0x74>)
 800185e:	701a      	strb	r2, [r3, #0]
  spiTxData[1] = command & 0xFF;
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <voltageConversions+0x70>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <voltageConversions+0x74>)
 8001868:	705a      	strb	r2, [r3, #1]
  pec = pec15_calc(2, spiTxData);
 800186a:	4914      	ldr	r1, [pc, #80]	@ (80018bc <voltageConversions+0x74>)
 800186c:	2002      	movs	r0, #2
 800186e:	f7ff fadf 	bl	8000e30 <pec15_calc>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <voltageConversions+0x78>)
 8001878:	801a      	strh	r2, [r3, #0]
  spiTxData[2] = pec >> 8;
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <voltageConversions+0x78>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <voltageConversions+0x74>)
 8001886:	709a      	strb	r2, [r3, #2]
  spiTxData[3] = pec & 0xFF;
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <voltageConversions+0x78>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <voltageConversions+0x74>)
 8001890:	70da      	strb	r2, [r3, #3]
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2110      	movs	r1, #16
 8001896:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <voltageConversions+0x7c>)
 8001898:	f005 fd84 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, spiTxData, 4, HAL_MAX_DELAY);
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	2204      	movs	r2, #4
 80018a2:	4906      	ldr	r1, [pc, #24]	@ (80018bc <voltageConversions+0x74>)
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <voltageConversions+0x80>)
 80018a6:	f006 fa44 	bl	8007d32 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	2110      	movs	r1, #16
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <voltageConversions+0x7c>)
 80018b0:	f005 fd78 	bl	80073a4 <HAL_GPIO_WritePin>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000816 	.word	0x20000816
 80018bc:	20000804 	.word	0x20000804
 80018c0:	20000818 	.word	0x20000818
 80018c4:	40020800 	.word	0x40020800
 80018c8:	2000016c 	.word	0x2000016c

080018cc <temperatureConversions>:

static void temperatureConversions(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  command = MAKEBROADCASTCMD(ADAX(MD_NORMAL, CH_ALL_CELLS));
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <temperatureConversions+0x70>)
 80018d2:	2265      	movs	r2, #101	@ 0x65
 80018d4:	801a      	strh	r2, [r3, #0]
  spiTxData[0] = command >> 8;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <temperatureConversions+0x70>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	b29b      	uxth	r3, r3
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <temperatureConversions+0x74>)
 80018e2:	701a      	strb	r2, [r3, #0]
  spiTxData[1] = command & 0xFF;
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <temperatureConversions+0x70>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <temperatureConversions+0x74>)
 80018ec:	705a      	strb	r2, [r3, #1]
  pec = pec15_calc(2, spiTxData);
 80018ee:	4914      	ldr	r1, [pc, #80]	@ (8001940 <temperatureConversions+0x74>)
 80018f0:	2002      	movs	r0, #2
 80018f2:	f7ff fa9d 	bl	8000e30 <pec15_calc>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <temperatureConversions+0x78>)
 80018fc:	801a      	strh	r2, [r3, #0]
  spiTxData[2] = pec >> 8;
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <temperatureConversions+0x78>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b29b      	uxth	r3, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <temperatureConversions+0x74>)
 800190a:	709a      	strb	r2, [r3, #2]
  spiTxData[3] = pec & 0xFF;
 800190c:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <temperatureConversions+0x78>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <temperatureConversions+0x74>)
 8001914:	70da      	strb	r2, [r3, #3]
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2110      	movs	r1, #16
 800191a:	480b      	ldr	r0, [pc, #44]	@ (8001948 <temperatureConversions+0x7c>)
 800191c:	f005 fd42 	bl	80073a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, spiTxData, 4, HAL_MAX_DELAY);
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	2204      	movs	r2, #4
 8001926:	4906      	ldr	r1, [pc, #24]	@ (8001940 <temperatureConversions+0x74>)
 8001928:	4808      	ldr	r0, [pc, #32]	@ (800194c <temperatureConversions+0x80>)
 800192a:	f006 fa02 	bl	8007d32 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2110      	movs	r1, #16
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <temperatureConversions+0x7c>)
 8001934:	f005 fd36 	bl	80073a4 <HAL_GPIO_WritePin>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000816 	.word	0x20000816
 8001940:	20000804 	.word	0x20000804
 8001944:	20000818 	.word	0x20000818
 8001948:	40020800 	.word	0x40020800
 800194c:	2000016c 	.word	0x2000016c

08001950 <voltageReadings>:

static void voltageReadings(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af02      	add	r7, sp, #8
  for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8001956:	2300      	movs	r3, #0
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	e192      	b.n	8001c82 <voltageReadings+0x332>
  {
    for (uint8_t j = 0; j < 4; j++) // foreach register (4 registers per slave)
 800195c:	2300      	movs	r3, #0
 800195e:	71bb      	strb	r3, [r7, #6]
 8001960:	e188      	b.n	8001c74 <voltageReadings+0x324>
    {
      switch (j)
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d84b      	bhi.n	8001a00 <voltageReadings+0xb0>
 8001968:	a201      	add	r2, pc, #4	@ (adr r2, 8001970 <voltageReadings+0x20>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001981 	.word	0x08001981
 8001974:	080019a1 	.word	0x080019a1
 8001978:	080019c1 	.word	0x080019c1
 800197c:	080019e1 	.word	0x080019e1
      {
      case 0: // Cell voltages
        command = MAKEADDRCMD(i, RDCVA);
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	b21b      	sxth	r3, r3
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	b21b      	sxth	r3, r3
 8001988:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800198c:	b21b      	sxth	r3, r3
 800198e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	b21b      	sxth	r3, r3
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b99      	ldr	r3, [pc, #612]	@ (8001c00 <voltageReadings+0x2b0>)
 800199c:	801a      	strh	r2, [r3, #0]
        break;
 800199e:	e02f      	b.n	8001a00 <voltageReadings+0xb0>
      case 1: // Cell voltages
        command = MAKEADDRCMD(i, RDCVB);
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b2:	f043 0306 	orr.w	r3, r3, #6
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b91      	ldr	r3, [pc, #580]	@ (8001c00 <voltageReadings+0x2b0>)
 80019bc:	801a      	strh	r2, [r3, #0]
        break;
 80019be:	e01f      	b.n	8001a00 <voltageReadings+0xb0>
      case 2: // Cell voltages
        command = MAKEADDRCMD(i, RDCVC);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b89      	ldr	r3, [pc, #548]	@ (8001c00 <voltageReadings+0x2b0>)
 80019dc:	801a      	strh	r2, [r3, #0]
        break;
 80019de:	e00f      	b.n	8001a00 <voltageReadings+0xb0>
      case 3: // Cell voltages
        command = MAKEADDRCMD(i, RDCVD);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f2:	f043 030a 	orr.w	r3, r3, #10
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b81      	ldr	r3, [pc, #516]	@ (8001c00 <voltageReadings+0x2b0>)
 80019fc:	801a      	strh	r2, [r3, #0]
        break;
 80019fe:	bf00      	nop
      }
      spiTxData[0] = command >> 8;
 8001a00:	4b7f      	ldr	r3, [pc, #508]	@ (8001c00 <voltageReadings+0x2b0>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c04 <voltageReadings+0x2b4>)
 8001a0c:	701a      	strb	r2, [r3, #0]
      spiTxData[1] = command & 0xFF;
 8001a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c00 <voltageReadings+0x2b0>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b7b      	ldr	r3, [pc, #492]	@ (8001c04 <voltageReadings+0x2b4>)
 8001a16:	705a      	strb	r2, [r3, #1]
      pec = pec15_calc(2, spiTxData);
 8001a18:	497a      	ldr	r1, [pc, #488]	@ (8001c04 <voltageReadings+0x2b4>)
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f7ff fa08 	bl	8000e30 <pec15_calc>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b78      	ldr	r3, [pc, #480]	@ (8001c08 <voltageReadings+0x2b8>)
 8001a26:	801a      	strh	r2, [r3, #0]
      spiTxData[2] = pec >> 8;
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <voltageReadings+0x2b8>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b74      	ldr	r3, [pc, #464]	@ (8001c04 <voltageReadings+0x2b4>)
 8001a34:	709a      	strb	r2, [r3, #2]
      spiTxData[3] = pec & 0xFF;
 8001a36:	4b74      	ldr	r3, [pc, #464]	@ (8001c08 <voltageReadings+0x2b8>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b71      	ldr	r3, [pc, #452]	@ (8001c04 <voltageReadings+0x2b4>)
 8001a3e:	70da      	strb	r2, [r3, #3]
      HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2110      	movs	r1, #16
 8001a44:	4871      	ldr	r0, [pc, #452]	@ (8001c0c <voltageReadings+0x2bc>)
 8001a46:	f005 fcad 	bl	80073a4 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, spiTxData, spiRxData, 4+8, HAL_MAX_DELAY);
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	230c      	movs	r3, #12
 8001a52:	4a6f      	ldr	r2, [pc, #444]	@ (8001c10 <voltageReadings+0x2c0>)
 8001a54:	496b      	ldr	r1, [pc, #428]	@ (8001c04 <voltageReadings+0x2b4>)
 8001a56:	486f      	ldr	r0, [pc, #444]	@ (8001c14 <voltageReadings+0x2c4>)
 8001a58:	f006 faaf 	bl	8007fba <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2110      	movs	r1, #16
 8001a60:	486a      	ldr	r0, [pc, #424]	@ (8001c0c <voltageReadings+0x2bc>)
 8001a62:	f005 fc9f 	bl	80073a4 <HAL_GPIO_WritePin>
      // check PEC
      pec = (0xFF00 & (spiRxData[6] << 8)) | (0xFF & spiRxData[7]);
 8001a66:	4b6a      	ldr	r3, [pc, #424]	@ (8001c10 <voltageReadings+0x2c0>)
 8001a68:	799b      	ldrb	r3, [r3, #6]
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	b21a      	sxth	r2, r3
 8001a70:	4b67      	ldr	r3, [pc, #412]	@ (8001c10 <voltageReadings+0x2c0>)
 8001a72:	79db      	ldrb	r3, [r3, #7]
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b62      	ldr	r3, [pc, #392]	@ (8001c08 <voltageReadings+0x2b8>)
 8001a7e:	801a      	strh	r2, [r3, #0]
      if (pec != pec15_calc(6, spiRxData))
 8001a80:	4963      	ldr	r1, [pc, #396]	@ (8001c10 <voltageReadings+0x2c0>)
 8001a82:	2006      	movs	r0, #6
 8001a84:	f7ff f9d4 	bl	8000e30 <pec15_calc>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c08 <voltageReadings+0x2b8>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d023      	beq.n	8001adc <voltageReadings+0x18c>
      {
        spiErrorCounter[i]++;
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	4a60      	ldr	r2, [pc, #384]	@ (8001c18 <voltageReadings+0x2c8>)
 8001a98:	5cd2      	ldrb	r2, [r2, r3]
 8001a9a:	3201      	adds	r2, #1
 8001a9c:	b2d1      	uxtb	r1, r2
 8001a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001c18 <voltageReadings+0x2c8>)
 8001aa0:	54d1      	strb	r1, [r2, r3]
        if (spiErrorCounter[i] >= SPI_ERROR_COUNT_THRESHOLD)
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	4a5c      	ldr	r2, [pc, #368]	@ (8001c18 <voltageReadings+0x2c8>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d902      	bls.n	8001ab2 <voltageReadings+0x162>
        {
          spiError = 1; // Set SPI error
 8001aac:	4b5b      	ldr	r3, [pc, #364]	@ (8001c1c <voltageReadings+0x2cc>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
        }
        for (uint8_t k = 0; k < 4; k++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	717b      	strb	r3, [r7, #5]
 8001ab6:	e00d      	b.n	8001ad4 <voltageReadings+0x184>
        {
          rawVoltages[cellBaseNum[i] + k] = 0xFFFF; // Set to invalid value]
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4a59      	ldr	r2, [pc, #356]	@ (8001c20 <voltageReadings+0x2d0>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	797b      	ldrb	r3, [r7, #5]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a57      	ldr	r2, [pc, #348]	@ (8001c24 <voltageReadings+0x2d4>)
 8001ac6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t k = 0; k < 4; k++)
 8001ace:	797b      	ldrb	r3, [r7, #5]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	717b      	strb	r3, [r7, #5]
 8001ad4:	797b      	ldrb	r3, [r7, #5]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d9ee      	bls.n	8001ab8 <voltageReadings+0x168>
 8001ada:	e0c8      	b.n	8001c6e <voltageReadings+0x31e>
        }
      }
      else
      {
        spiErrorCounter[i] = 0; // Reset error counter
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	4a4e      	ldr	r2, [pc, #312]	@ (8001c18 <voltageReadings+0x2c8>)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	54d1      	strb	r1, [r2, r3]

        // check how many cells we should read from this register
        if (j == 4) // Last register
 8001ae4:	79bb      	ldrb	r3, [r7, #6]
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d10c      	bne.n	8001b04 <voltageReadings+0x1b4>
        {
          if (nrOfCells[i] == 10) // Last register and 10 cells
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	@ (8001c28 <voltageReadings+0x2d8>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	2b0a      	cmp	r3, #10
 8001af2:	d103      	bne.n	8001afc <voltageReadings+0x1ac>
          {
            voltagesPerRegister = 1;
 8001af4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c2c <voltageReadings+0x2dc>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e006      	b.n	8001b0a <voltageReadings+0x1ba>
          }
          else // Last register and 11 cells
          {
            voltagesPerRegister = 2;
 8001afc:	4b4b      	ldr	r3, [pc, #300]	@ (8001c2c <voltageReadings+0x2dc>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e002      	b.n	8001b0a <voltageReadings+0x1ba>
          }
        }
        else // Not last register
        {
          voltagesPerRegister = 3;
 8001b04:	4b49      	ldr	r3, [pc, #292]	@ (8001c2c <voltageReadings+0x2dc>)
 8001b06:	2203      	movs	r2, #3
 8001b08:	701a      	strb	r2, [r3, #0]
        }

        for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach cell (in a register)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	713b      	strb	r3, [r7, #4]
 8001b0e:	e0a8      	b.n	8001c62 <voltageReadings+0x312>
        {
          rawVoltage = (spiRxData[2 * k + 1] << 8) | spiRxData[2*k];
 8001b10:	793b      	ldrb	r3, [r7, #4]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a3e      	ldr	r2, [pc, #248]	@ (8001c10 <voltageReadings+0x2c0>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	493a      	ldr	r1, [pc, #232]	@ (8001c10 <voltageReadings+0x2c0>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b3f      	ldr	r3, [pc, #252]	@ (8001c30 <voltageReadings+0x2e0>)
 8001b32:	801a      	strh	r2, [r3, #0]
          rawVoltages[cellBaseNum[i] + j * 4 + k] = rawVoltage;
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4a3a      	ldr	r2, [pc, #232]	@ (8001c20 <voltageReadings+0x2d0>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	441a      	add	r2, r3
 8001b42:	793b      	ldrb	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	4a3a      	ldr	r2, [pc, #232]	@ (8001c30 <voltageReadings+0x2e0>)
 8001b48:	8811      	ldrh	r1, [r2, #0]
 8001b4a:	4a36      	ldr	r2, [pc, #216]	@ (8001c24 <voltageReadings+0x2d4>)
 8001b4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

          // Check for OVP and UVP
          if (rawVoltage > OVP)
 8001b50:	4b37      	ldr	r3, [pc, #220]	@ (8001c30 <voltageReadings+0x2e0>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d91f      	bls.n	8001b9c <voltageReadings+0x24c>
          {
            ovpCounter[cellBaseNum[i] + j * 4 + k]++;
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4a30      	ldr	r2, [pc, #192]	@ (8001c20 <voltageReadings+0x2d0>)
 8001b60:	5cd3      	ldrb	r3, [r2, r3]
 8001b62:	461a      	mov	r2, r3
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	441a      	add	r2, r3
 8001b6a:	793b      	ldrb	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a31      	ldr	r2, [pc, #196]	@ (8001c34 <voltageReadings+0x2e4>)
 8001b70:	5cd2      	ldrb	r2, [r2, r3]
 8001b72:	3201      	adds	r2, #1
 8001b74:	b2d1      	uxtb	r1, r2
 8001b76:	4a2f      	ldr	r2, [pc, #188]	@ (8001c34 <voltageReadings+0x2e4>)
 8001b78:	54d1      	strb	r1, [r2, r3]
            if (ovpCounter[cellBaseNum[i] + j * 4 + k] >= OVP_COUNT_THRESHOLD)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4a28      	ldr	r2, [pc, #160]	@ (8001c20 <voltageReadings+0x2d0>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	461a      	mov	r2, r3
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	441a      	add	r2, r3
 8001b88:	793b      	ldrb	r3, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a29      	ldr	r2, [pc, #164]	@ (8001c34 <voltageReadings+0x2e4>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d90f      	bls.n	8001bb4 <voltageReadings+0x264>
            {
              ovpError = 1; // Set OVP error
 8001b94:	4b28      	ldr	r3, [pc, #160]	@ (8001c38 <voltageReadings+0x2e8>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e00b      	b.n	8001bb4 <voltageReadings+0x264>
            }
          }
          else
          {
            ovpCounter[cellBaseNum[i] + j * 4 + k] = 0; // Reset counter
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4a20      	ldr	r2, [pc, #128]	@ (8001c20 <voltageReadings+0x2d0>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	79bb      	ldrb	r3, [r7, #6]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	441a      	add	r2, r3
 8001baa:	793b      	ldrb	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <voltageReadings+0x2e4>)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	54d1      	strb	r1, [r2, r3]
          }

          if (rawVoltage < UVP)
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <voltageReadings+0x2e0>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d841      	bhi.n	8001c44 <voltageReadings+0x2f4>
          {
            uvpCounter[cellBaseNum[i] + j * 4 + k]++;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <voltageReadings+0x2d0>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	441a      	add	r2, r3
 8001bce:	793b      	ldrb	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c3c <voltageReadings+0x2ec>)
 8001bd4:	5cd2      	ldrb	r2, [r2, r3]
 8001bd6:	3201      	adds	r2, #1
 8001bd8:	b2d1      	uxtb	r1, r2
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <voltageReadings+0x2ec>)
 8001bdc:	54d1      	strb	r1, [r2, r3]
            if (uvpCounter[cellBaseNum[i] + j * 4 + k] >= UVP_COUNT_THRESHOLD)
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c20 <voltageReadings+0x2d0>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	461a      	mov	r2, r3
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	441a      	add	r2, r3
 8001bec:	793b      	ldrb	r3, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <voltageReadings+0x2ec>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	d931      	bls.n	8001c5c <voltageReadings+0x30c>
            {
              uvpError = 1; // Set UVP error
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <voltageReadings+0x2f0>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e02d      	b.n	8001c5c <voltageReadings+0x30c>
 8001c00:	20000816 	.word	0x20000816
 8001c04:	20000804 	.word	0x20000804
 8001c08:	20000818 	.word	0x20000818
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	2000080c 	.word	0x2000080c
 8001c14:	2000016c 	.word	0x2000016c
 8001c18:	200007f4 	.word	0x200007f4
 8001c1c:	20000800 	.word	0x20000800
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	20000480 	.word	0x20000480
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000814 	.word	0x20000814
 8001c30:	2000081a 	.word	0x2000081a
 8001c34:	200005f4 	.word	0x200005f4
 8001c38:	20000672 	.word	0x20000672
 8001c3c:	20000674 	.word	0x20000674
 8001c40:	200006f2 	.word	0x200006f2
            }
          }
          else
          {
            uvpCounter[cellBaseNum[i] + j * 4 + k] = 0; // Reset counter
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	4a13      	ldr	r2, [pc, #76]	@ (8001c94 <voltageReadings+0x344>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	79bb      	ldrb	r3, [r7, #6]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	441a      	add	r2, r3
 8001c52:	793b      	ldrb	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <voltageReadings+0x348>)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	54d1      	strb	r1, [r2, r3]
        for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach cell (in a register)
 8001c5c:	793b      	ldrb	r3, [r7, #4]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	713b      	strb	r3, [r7, #4]
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <voltageReadings+0x34c>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	793a      	ldrb	r2, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f4ff af51 	bcc.w	8001b10 <voltageReadings+0x1c0>
    for (uint8_t j = 0; j < 4; j++) // foreach register (4 registers per slave)
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	3301      	adds	r3, #1
 8001c72:	71bb      	strb	r3, [r7, #6]
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	f67f ae73 	bls.w	8001962 <voltageReadings+0x12>
  for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b0b      	cmp	r3, #11
 8001c86:	f67f ae69 	bls.w	800195c <voltageReadings+0xc>
          }
        } // End foreach cell in register
      } // End check PEC
    } // End foreach register
  } // End foreach slave
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000000c 	.word	0x2000000c
 8001c98:	20000674 	.word	0x20000674
 8001c9c:	20000814 	.word	0x20000814

08001ca0 <temperatureReadings>:

static void temperatureReadings(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af02      	add	r7, sp, #8
  for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	e14a      	b.n	8001f42 <temperatureReadings+0x2a2>
  {
    for (uint8_t j = 0; j < 2; j++) // foreach register (2 registers per slave)
 8001cac:	2300      	movs	r3, #0
 8001cae:	71bb      	strb	r3, [r7, #6]
 8001cb0:	e140      	b.n	8001f34 <temperatureReadings+0x294>
    {
      switch (j)
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <temperatureReadings+0x1e>
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d010      	beq.n	8001cde <temperatureReadings+0x3e>
 8001cbc:	e01f      	b.n	8001cfe <temperatureReadings+0x5e>
      {
      case 0:
        command = MAKEADDRCMD(i, RDAUXA);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	f043 030c 	orr.w	r3, r3, #12
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b9e      	ldr	r3, [pc, #632]	@ (8001f54 <temperatureReadings+0x2b4>)
 8001cda:	801a      	strh	r2, [r3, #0]
        break;
 8001cdc:	e00f      	b.n	8001cfe <temperatureReadings+0x5e>
      case 1:
        command = MAKEADDRCMD(i, RDAUXB);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf0:	f043 030e 	orr.w	r3, r3, #14
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b96      	ldr	r3, [pc, #600]	@ (8001f54 <temperatureReadings+0x2b4>)
 8001cfa:	801a      	strh	r2, [r3, #0]
        break;
 8001cfc:	bf00      	nop
      }
      spiTxData[0] = command >> 8;
 8001cfe:	4b95      	ldr	r3, [pc, #596]	@ (8001f54 <temperatureReadings+0x2b4>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b93      	ldr	r3, [pc, #588]	@ (8001f58 <temperatureReadings+0x2b8>)
 8001d0a:	701a      	strb	r2, [r3, #0]
      spiTxData[1] = command & 0xFF;
 8001d0c:	4b91      	ldr	r3, [pc, #580]	@ (8001f54 <temperatureReadings+0x2b4>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b91      	ldr	r3, [pc, #580]	@ (8001f58 <temperatureReadings+0x2b8>)
 8001d14:	705a      	strb	r2, [r3, #1]
      pec = pec15_calc(2, spiTxData);
 8001d16:	4990      	ldr	r1, [pc, #576]	@ (8001f58 <temperatureReadings+0x2b8>)
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f7ff f889 	bl	8000e30 <pec15_calc>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b8e      	ldr	r3, [pc, #568]	@ (8001f5c <temperatureReadings+0x2bc>)
 8001d24:	801a      	strh	r2, [r3, #0]
      spiTxData[2] = pec >> 8;
 8001d26:	4b8d      	ldr	r3, [pc, #564]	@ (8001f5c <temperatureReadings+0x2bc>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b89      	ldr	r3, [pc, #548]	@ (8001f58 <temperatureReadings+0x2b8>)
 8001d32:	709a      	strb	r2, [r3, #2]
      spiTxData[3] = pec & 0xFF;
 8001d34:	4b89      	ldr	r3, [pc, #548]	@ (8001f5c <temperatureReadings+0x2bc>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b87      	ldr	r3, [pc, #540]	@ (8001f58 <temperatureReadings+0x2b8>)
 8001d3c:	70da      	strb	r2, [r3, #3]
      HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2110      	movs	r1, #16
 8001d42:	4887      	ldr	r0, [pc, #540]	@ (8001f60 <temperatureReadings+0x2c0>)
 8001d44:	f005 fb2e 	bl	80073a4 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, spiTxData, spiRxData, 4+8, HAL_MAX_DELAY);
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	230c      	movs	r3, #12
 8001d50:	4a84      	ldr	r2, [pc, #528]	@ (8001f64 <temperatureReadings+0x2c4>)
 8001d52:	4981      	ldr	r1, [pc, #516]	@ (8001f58 <temperatureReadings+0x2b8>)
 8001d54:	4884      	ldr	r0, [pc, #528]	@ (8001f68 <temperatureReadings+0x2c8>)
 8001d56:	f006 f930 	bl	8007fba <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	4880      	ldr	r0, [pc, #512]	@ (8001f60 <temperatureReadings+0x2c0>)
 8001d60:	f005 fb20 	bl	80073a4 <HAL_GPIO_WritePin>
      // check PEC
      pec = (0xFF00 & (spiRxData[6] << 8)) | (0xFF & spiRxData[7]);
 8001d64:	4b7f      	ldr	r3, [pc, #508]	@ (8001f64 <temperatureReadings+0x2c4>)
 8001d66:	799b      	ldrb	r3, [r3, #6]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f64 <temperatureReadings+0x2c4>)
 8001d70:	79db      	ldrb	r3, [r3, #7]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b78      	ldr	r3, [pc, #480]	@ (8001f5c <temperatureReadings+0x2bc>)
 8001d7c:	801a      	strh	r2, [r3, #0]
      if (pec != pec15_calc(6, spiRxData))
 8001d7e:	4979      	ldr	r1, [pc, #484]	@ (8001f64 <temperatureReadings+0x2c4>)
 8001d80:	2006      	movs	r0, #6
 8001d82:	f7ff f855 	bl	8000e30 <pec15_calc>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b74      	ldr	r3, [pc, #464]	@ (8001f5c <temperatureReadings+0x2bc>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d023      	beq.n	8001dda <temperatureReadings+0x13a>
      {
        spiErrorCounter[i]++;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4a75      	ldr	r2, [pc, #468]	@ (8001f6c <temperatureReadings+0x2cc>)
 8001d96:	5cd2      	ldrb	r2, [r2, r3]
 8001d98:	3201      	adds	r2, #1
 8001d9a:	b2d1      	uxtb	r1, r2
 8001d9c:	4a73      	ldr	r2, [pc, #460]	@ (8001f6c <temperatureReadings+0x2cc>)
 8001d9e:	54d1      	strb	r1, [r2, r3]
        if (spiErrorCounter[i] >= SPI_ERROR_COUNT_THRESHOLD)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4a72      	ldr	r2, [pc, #456]	@ (8001f6c <temperatureReadings+0x2cc>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d902      	bls.n	8001db0 <temperatureReadings+0x110>
        {
          spiError = 1; // Set SPI error
 8001daa:	4b71      	ldr	r3, [pc, #452]	@ (8001f70 <temperatureReadings+0x2d0>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
        }
        for (uint8_t k = 0; k < 4; k++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	717b      	strb	r3, [r7, #5]
 8001db4:	e00d      	b.n	8001dd2 <temperatureReadings+0x132>
        {
          rawTemps[cellBaseNum[i] + k] = 0xFFFF; // Set to invalid value
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	@ (8001f74 <temperatureReadings+0x2d4>)
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	797b      	ldrb	r3, [r7, #5]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a6d      	ldr	r2, [pc, #436]	@ (8001f78 <temperatureReadings+0x2d8>)
 8001dc4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t k = 0; k < 4; k++)
 8001dcc:	797b      	ldrb	r3, [r7, #5]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	717b      	strb	r3, [r7, #5]
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d9ee      	bls.n	8001db6 <temperatureReadings+0x116>
 8001dd8:	e0a9      	b.n	8001f2e <temperatureReadings+0x28e>
        }
      } else
      {
        spiErrorCounter[i] = 0; // Reset error counter
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a63      	ldr	r2, [pc, #396]	@ (8001f6c <temperatureReadings+0x2cc>)
 8001dde:	2100      	movs	r1, #0
 8001de0:	54d1      	strb	r1, [r2, r3]
        // check how many temperatures we should read from this register
        voltagesPerRegister = (j ==0) ? 3 : 2;
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <temperatureReadings+0x14c>
 8001de8:	2203      	movs	r2, #3
 8001dea:	e000      	b.n	8001dee <temperatureReadings+0x14e>
 8001dec:	2202      	movs	r2, #2
 8001dee:	4b63      	ldr	r3, [pc, #396]	@ (8001f7c <temperatureReadings+0x2dc>)
 8001df0:	701a      	strb	r2, [r3, #0]
        for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach temperature in register
 8001df2:	2300      	movs	r3, #0
 8001df4:	713b      	strb	r3, [r7, #4]
 8001df6:	e094      	b.n	8001f22 <temperatureReadings+0x282>
        {
          rawTemp = (spiRxData[2 * k + 1] << 8) | spiRxData[2 * k];
 8001df8:	793b      	ldrb	r3, [r7, #4]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a59      	ldr	r2, [pc, #356]	@ (8001f64 <temperatureReadings+0x2c4>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	793b      	ldrb	r3, [r7, #4]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4955      	ldr	r1, [pc, #340]	@ (8001f64 <temperatureReadings+0x2c4>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b59      	ldr	r3, [pc, #356]	@ (8001f80 <temperatureReadings+0x2e0>)
 8001e1a:	801a      	strh	r2, [r3, #0]
          rawTemps[i * 12 + j * 2 + k] = rawTemp;
 8001e1c:	79fa      	ldrb	r2, [r7, #7]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	461a      	mov	r2, r3
 8001e28:	79bb      	ldrb	r3, [r7, #6]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	005a      	lsls	r2, r3, #1
 8001e2e:	793b      	ldrb	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a53      	ldr	r2, [pc, #332]	@ (8001f80 <temperatureReadings+0x2e0>)
 8001e34:	8811      	ldrh	r1, [r2, #0]
 8001e36:	4a50      	ldr	r2, [pc, #320]	@ (8001f78 <temperatureReadings+0x2d8>)
 8001e38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

          // Check for OTP and UTP
          if (rawTemp > OTP)
 8001e3c:	4b50      	ldr	r3, [pc, #320]	@ (8001f80 <temperatureReadings+0x2e0>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	f641 2270 	movw	r2, #6768	@ 0x1a70
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d923      	bls.n	8001e90 <temperatureReadings+0x1f0>
          {
            otpCounter[i * 12 + j * 2 + k]++;
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	461a      	mov	r2, r3
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	4413      	add	r3, r2
 8001e58:	005a      	lsls	r2, r3, #1
 8001e5a:	793b      	ldrb	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a49      	ldr	r2, [pc, #292]	@ (8001f84 <temperatureReadings+0x2e4>)
 8001e60:	5cd2      	ldrb	r2, [r2, r3]
 8001e62:	3201      	adds	r2, #1
 8001e64:	b2d1      	uxtb	r1, r2
 8001e66:	4a47      	ldr	r2, [pc, #284]	@ (8001f84 <temperatureReadings+0x2e4>)
 8001e68:	54d1      	strb	r1, [r2, r3]
            if (otpCounter[i * 12 + j * 2 + k] >= OTP_COUNT_THRESHOLD)
 8001e6a:	79fa      	ldrb	r2, [r7, #7]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	461a      	mov	r2, r3
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	4413      	add	r3, r2
 8001e7a:	005a      	lsls	r2, r3, #1
 8001e7c:	793b      	ldrb	r3, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a40      	ldr	r2, [pc, #256]	@ (8001f84 <temperatureReadings+0x2e4>)
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	2b09      	cmp	r3, #9
 8001e86:	d911      	bls.n	8001eac <temperatureReadings+0x20c>
            {
              otpError = 1; // Set OTP error
 8001e88:	4b3f      	ldr	r3, [pc, #252]	@ (8001f88 <temperatureReadings+0x2e8>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e00d      	b.n	8001eac <temperatureReadings+0x20c>
            }
          } else
          {
            otpCounter[i * 12 + j * 2 + k] = 0; // Reset counter
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005a      	lsls	r2, r3, #1
 8001ea2:	793b      	ldrb	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a37      	ldr	r2, [pc, #220]	@ (8001f84 <temperatureReadings+0x2e4>)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	54d1      	strb	r1, [r2, r3]
          }

          if (rawTemp < UTP)
 8001eac:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <temperatureReadings+0x2e0>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	f246 02db 	movw	r2, #24795	@ 0x60db
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d823      	bhi.n	8001f00 <temperatureReadings+0x260>
          {
            utpCounter[i * 12 + j * 2 + k]++;
 8001eb8:	79fa      	ldrb	r2, [r7, #7]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005a      	lsls	r2, r3, #1
 8001eca:	793b      	ldrb	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a2f      	ldr	r2, [pc, #188]	@ (8001f8c <temperatureReadings+0x2ec>)
 8001ed0:	5cd2      	ldrb	r2, [r2, r3]
 8001ed2:	3201      	adds	r2, #1
 8001ed4:	b2d1      	uxtb	r1, r2
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f8c <temperatureReadings+0x2ec>)
 8001ed8:	54d1      	strb	r1, [r2, r3]
            if (utpCounter[i * 12 + j * 2 + k] >= UTP_COUNT_THRESHOLD)
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	4413      	add	r3, r2
 8001eea:	005a      	lsls	r2, r3, #1
 8001eec:	793b      	ldrb	r3, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <temperatureReadings+0x2ec>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d911      	bls.n	8001f1c <temperatureReadings+0x27c>
            {
              utpError = 1; // Set UTP error
 8001ef8:	4b25      	ldr	r3, [pc, #148]	@ (8001f90 <temperatureReadings+0x2f0>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e00d      	b.n	8001f1c <temperatureReadings+0x27c>
            }
          } else
          {
            utpCounter[i * 12 + j * 2 + k] = 0; // Reset counter
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	4413      	add	r3, r2
 8001f10:	005a      	lsls	r2, r3, #1
 8001f12:	793b      	ldrb	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a1d      	ldr	r2, [pc, #116]	@ (8001f8c <temperatureReadings+0x2ec>)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	54d1      	strb	r1, [r2, r3]
        for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach temperature in register
 8001f1c:	793b      	ldrb	r3, [r7, #4]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	713b      	strb	r3, [r7, #4]
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <temperatureReadings+0x2dc>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	793a      	ldrb	r2, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f4ff af65 	bcc.w	8001df8 <temperatureReadings+0x158>
    for (uint8_t j = 0; j < 2; j++) // foreach register (2 registers per slave)
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	3301      	adds	r3, #1
 8001f32:	71bb      	strb	r3, [r7, #6]
 8001f34:	79bb      	ldrb	r3, [r7, #6]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	f67f aebb 	bls.w	8001cb2 <temperatureReadings+0x12>
  for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b0b      	cmp	r3, #11
 8001f46:	f67f aeb1 	bls.w	8001cac <temperatureReadings+0xc>
        } // End foreach temperature in register
      } // End check PEC
    } // End foreach register
  } // End foreach slave

}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000816 	.word	0x20000816
 8001f58:	20000804 	.word	0x20000804
 8001f5c:	20000818 	.word	0x20000818
 8001f60:	40020800 	.word	0x40020800
 8001f64:	2000080c 	.word	0x2000080c
 8001f68:	2000016c 	.word	0x2000016c
 8001f6c:	200007f4 	.word	0x200007f4
 8001f70:	20000800 	.word	0x20000800
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	2000057c 	.word	0x2000057c
 8001f7c:	20000814 	.word	0x20000814
 8001f80:	2000081c 	.word	0x2000081c
 8001f84:	200006f4 	.word	0x200006f4
 8001f88:	20000772 	.word	0x20000772
 8001f8c:	20000774 	.word	0x20000774
 8001f90:	200007f2 	.word	0x200007f2
 8001f94:	00000000 	.word	0x00000000

08001f98 <voltageSendCan>:

static void voltageSendCan(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  switch (amsTxMessageCounter)
 8001f9c:	4b84      	ldr	r3, [pc, #528]	@ (80021b0 <voltageSendCan+0x218>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b17      	cmp	r3, #23
 8001fa2:	f202 82ce 	bhi.w	8004542 <voltageSendCan+0x25aa>
 8001fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fac <voltageSendCan+0x14>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	0800200d 	.word	0x0800200d
 8001fb0:	080021c9 	.word	0x080021c9
 8001fb4:	0800232b 	.word	0x0800232b
 8001fb8:	080024e9 	.word	0x080024e9
 8001fbc:	08002611 	.word	0x08002611
 8001fc0:	080027d1 	.word	0x080027d1
 8001fc4:	08002933 	.word	0x08002933
 8001fc8:	08002b01 	.word	0x08002b01
 8001fcc:	08002c31 	.word	0x08002c31
 8001fd0:	08002df9 	.word	0x08002df9
 8001fd4:	08002f65 	.word	0x08002f65
 8001fd8:	08003131 	.word	0x08003131
 8001fdc:	08003261 	.word	0x08003261
 8001fe0:	08003429 	.word	0x08003429
 8001fe4:	08003595 	.word	0x08003595
 8001fe8:	08003761 	.word	0x08003761
 8001fec:	08003891 	.word	0x08003891
 8001ff0:	08003a59 	.word	0x08003a59
 8001ff4:	08003bc5 	.word	0x08003bc5
 8001ff8:	08003d91 	.word	0x08003d91
 8001ffc:	08003ebf 	.word	0x08003ebf
 8002000:	08004089 	.word	0x08004089
 8002004:	080041f3 	.word	0x080041f3
 8002008:	080043b9 	.word	0x080043b9
  {
  case 0:
    can1_ams_s01_voltages_1.s01v01 = can1_ams_s01_voltages_1_s01v01_encode((float)rawVoltages[0] / 10000.0);
 800200c:	4b69      	ldr	r3, [pc, #420]	@ (80021b4 <voltageSendCan+0x21c>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002018:	ee17 0a90 	vmov	r0, s15
 800201c:	f7fe fa38 	bl	8000490 <__aeabi_f2d>
 8002020:	a361      	add	r3, pc, #388	@ (adr r3, 80021a8 <voltageSendCan+0x210>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fbb5 	bl	8000794 <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	ec43 2b17 	vmov	d7, r2, r3
 8002032:	eeb0 0a47 	vmov.f32	s0, s14
 8002036:	eef0 0a67 	vmov.f32	s1, s15
 800203a:	f009 fef5 	bl	800be28 <can1_ams_s01_voltages_1_s01v01_encode>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4b5d      	ldr	r3, [pc, #372]	@ (80021b8 <voltageSendCan+0x220>)
 8002044:	701a      	strb	r2, [r3, #0]
    can1_ams_s01_voltages_1.s01v02 = can1_ams_s01_voltages_1_s01v02_encode((float)rawVoltages[1] / 10000.0);
 8002046:	4b5b      	ldr	r3, [pc, #364]	@ (80021b4 <voltageSendCan+0x21c>)
 8002048:	885b      	ldrh	r3, [r3, #2]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002052:	ee17 0a90 	vmov	r0, s15
 8002056:	f7fe fa1b 	bl	8000490 <__aeabi_f2d>
 800205a:	a353      	add	r3, pc, #332	@ (adr r3, 80021a8 <voltageSendCan+0x210>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fb98 	bl	8000794 <__aeabi_ddiv>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	ec43 2b17 	vmov	d7, r2, r3
 800206c:	eeb0 0a47 	vmov.f32	s0, s14
 8002070:	eef0 0a67 	vmov.f32	s1, s15
 8002074:	f009 ff04 	bl	800be80 <can1_ams_s01_voltages_1_s01v02_encode>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <voltageSendCan+0x220>)
 800207e:	705a      	strb	r2, [r3, #1]
    can1_ams_s01_voltages_1.s01v03 = can1_ams_s01_voltages_1_s01v03_encode((float)rawVoltages[2] / 10000.0);
 8002080:	4b4c      	ldr	r3, [pc, #304]	@ (80021b4 <voltageSendCan+0x21c>)
 8002082:	889b      	ldrh	r3, [r3, #4]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208c:	ee17 0a90 	vmov	r0, s15
 8002090:	f7fe f9fe 	bl	8000490 <__aeabi_f2d>
 8002094:	a344      	add	r3, pc, #272	@ (adr r3, 80021a8 <voltageSendCan+0x210>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fb7b 	bl	8000794 <__aeabi_ddiv>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	ec43 2b17 	vmov	d7, r2, r3
 80020a6:	eeb0 0a47 	vmov.f32	s0, s14
 80020aa:	eef0 0a67 	vmov.f32	s1, s15
 80020ae:	f009 ff13 	bl	800bed8 <can1_ams_s01_voltages_1_s01v03_encode>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b40      	ldr	r3, [pc, #256]	@ (80021b8 <voltageSendCan+0x220>)
 80020b8:	709a      	strb	r2, [r3, #2]
    can1_ams_s01_voltages_1.s01v04 = can1_ams_s01_voltages_1_s01v04_encode((float)rawVoltages[3] / 10000.0);
 80020ba:	4b3e      	ldr	r3, [pc, #248]	@ (80021b4 <voltageSendCan+0x21c>)
 80020bc:	88db      	ldrh	r3, [r3, #6]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	ee17 0a90 	vmov	r0, s15
 80020ca:	f7fe f9e1 	bl	8000490 <__aeabi_f2d>
 80020ce:	a336      	add	r3, pc, #216	@ (adr r3, 80021a8 <voltageSendCan+0x210>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fb5e 	bl	8000794 <__aeabi_ddiv>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	ec43 2b17 	vmov	d7, r2, r3
 80020e0:	eeb0 0a47 	vmov.f32	s0, s14
 80020e4:	eef0 0a67 	vmov.f32	s1, s15
 80020e8:	f009 ff22 	bl	800bf30 <can1_ams_s01_voltages_1_s01v04_encode>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b31      	ldr	r3, [pc, #196]	@ (80021b8 <voltageSendCan+0x220>)
 80020f2:	70da      	strb	r2, [r3, #3]
    can1_ams_s01_voltages_1.s01v05 = can1_ams_s01_voltages_1_s01v05_encode((float)rawVoltages[4] / 10000.0);
 80020f4:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <voltageSendCan+0x21c>)
 80020f6:	891b      	ldrh	r3, [r3, #8]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002100:	ee17 0a90 	vmov	r0, s15
 8002104:	f7fe f9c4 	bl	8000490 <__aeabi_f2d>
 8002108:	a327      	add	r3, pc, #156	@ (adr r3, 80021a8 <voltageSendCan+0x210>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe fb41 	bl	8000794 <__aeabi_ddiv>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	ec43 2b17 	vmov	d7, r2, r3
 800211a:	eeb0 0a47 	vmov.f32	s0, s14
 800211e:	eef0 0a67 	vmov.f32	s1, s15
 8002122:	f009 ff31 	bl	800bf88 <can1_ams_s01_voltages_1_s01v05_encode>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	4b23      	ldr	r3, [pc, #140]	@ (80021b8 <voltageSendCan+0x220>)
 800212c:	711a      	strb	r2, [r3, #4]
    can1_ams_s01_voltages_1.s01v06 = can1_ams_s01_voltages_1_s01v06_encode((float)rawVoltages[5] / 10000.0);
 800212e:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <voltageSendCan+0x21c>)
 8002130:	895b      	ldrh	r3, [r3, #10]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213a:	ee17 0a90 	vmov	r0, s15
 800213e:	f7fe f9a7 	bl	8000490 <__aeabi_f2d>
 8002142:	a319      	add	r3, pc, #100	@ (adr r3, 80021a8 <voltageSendCan+0x210>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe fb24 	bl	8000794 <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	ec43 2b17 	vmov	d7, r2, r3
 8002154:	eeb0 0a47 	vmov.f32	s0, s14
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	f009 ff40 	bl	800bfe0 <can1_ams_s01_voltages_1_s01v06_encode>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <voltageSendCan+0x220>)
 8002166:	715a      	strb	r2, [r3, #5]

    can1_ams_s01_voltages_1_pack(txData, &can1_ams_s01_voltages_1, CAN1_AMS_S01_VOLTAGES_1_LENGTH);
 8002168:	2206      	movs	r2, #6
 800216a:	4913      	ldr	r1, [pc, #76]	@ (80021b8 <voltageSendCan+0x220>)
 800216c:	4813      	ldr	r0, [pc, #76]	@ (80021bc <voltageSendCan+0x224>)
 800216e:	f009 fdde 	bl	800bd2e <can1_ams_s01_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S01_VOLTAGES_1_FRAME_ID;
 8002172:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <voltageSendCan+0x228>)
 8002174:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002178:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S01_VOLTAGES_1_LENGTH;
 800217a:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <voltageSendCan+0x228>)
 800217c:	2206      	movs	r2, #6
 800217e:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <voltageSendCan+0x228>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <voltageSendCan+0x228>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800218c:	2300      	movs	r3, #0
 800218e:	4a0b      	ldr	r2, [pc, #44]	@ (80021bc <voltageSendCan+0x224>)
 8002190:	490b      	ldr	r1, [pc, #44]	@ (80021c0 <voltageSendCan+0x228>)
 8002192:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <voltageSendCan+0x22c>)
 8002194:	f004 fc52 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f002 81a2 	beq.w	80044e4 <voltageSendCan+0x254c>
      Error_Handler();
 80021a0:	f003 fc28 	bl	80059f4 <Error_Handler>
    break;
 80021a4:	f002 b99e 	b.w	80044e4 <voltageSendCan+0x254c>
 80021a8:	00000000 	.word	0x00000000
 80021ac:	40c38800 	.word	0x40c38800
 80021b0:	20000801 	.word	0x20000801
 80021b4:	20000480 	.word	0x20000480
 80021b8:	200002d0 	.word	0x200002d0
 80021bc:	20000288 	.word	0x20000288
 80021c0:	20000254 	.word	0x20000254
 80021c4:	2000011c 	.word	0x2000011c

  case 1:
    can1_ams_s01_voltages_2.s01v07 = can1_ams_s01_voltages_2_s01v07_encode((float) rawVoltages[6] / 10000.0);
 80021c8:	4bc1      	ldr	r3, [pc, #772]	@ (80024d0 <voltageSendCan+0x538>)
 80021ca:	899b      	ldrh	r3, [r3, #12]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d4:	ee17 0a90 	vmov	r0, s15
 80021d8:	f7fe f95a 	bl	8000490 <__aeabi_f2d>
 80021dc:	a3ba      	add	r3, pc, #744	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	f7fe fad7 	bl	8000794 <__aeabi_ddiv>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	ec43 2b17 	vmov	d7, r2, r3
 80021ee:	eeb0 0a47 	vmov.f32	s0, s14
 80021f2:	eef0 0a67 	vmov.f32	s1, s15
 80021f6:	f009 ff87 	bl	800c108 <can1_ams_s01_voltages_2_s01v07_encode>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4bb5      	ldr	r3, [pc, #724]	@ (80024d4 <voltageSendCan+0x53c>)
 8002200:	701a      	strb	r2, [r3, #0]
    can1_ams_s01_voltages_2.s01v08 = can1_ams_s01_voltages_2_s01v08_encode((float) rawVoltages[7] / 10000.0);
 8002202:	4bb3      	ldr	r3, [pc, #716]	@ (80024d0 <voltageSendCan+0x538>)
 8002204:	89db      	ldrh	r3, [r3, #14]
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220e:	ee17 0a90 	vmov	r0, s15
 8002212:	f7fe f93d 	bl	8000490 <__aeabi_f2d>
 8002216:	a3ac      	add	r3, pc, #688	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 8002218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221c:	f7fe faba 	bl	8000794 <__aeabi_ddiv>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	ec43 2b17 	vmov	d7, r2, r3
 8002228:	eeb0 0a47 	vmov.f32	s0, s14
 800222c:	eef0 0a67 	vmov.f32	s1, s15
 8002230:	f009 ff96 	bl	800c160 <can1_ams_s01_voltages_2_s01v08_encode>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	4ba6      	ldr	r3, [pc, #664]	@ (80024d4 <voltageSendCan+0x53c>)
 800223a:	705a      	strb	r2, [r3, #1]
    can1_ams_s01_voltages_2.s01v09 = can1_ams_s01_voltages_2_s01v09_encode((float) rawVoltages[8] / 10000.0);
 800223c:	4ba4      	ldr	r3, [pc, #656]	@ (80024d0 <voltageSendCan+0x538>)
 800223e:	8a1b      	ldrh	r3, [r3, #16]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002248:	ee17 0a90 	vmov	r0, s15
 800224c:	f7fe f920 	bl	8000490 <__aeabi_f2d>
 8002250:	a39d      	add	r3, pc, #628	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe fa9d 	bl	8000794 <__aeabi_ddiv>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	ec43 2b17 	vmov	d7, r2, r3
 8002262:	eeb0 0a47 	vmov.f32	s0, s14
 8002266:	eef0 0a67 	vmov.f32	s1, s15
 800226a:	f009 ffa5 	bl	800c1b8 <can1_ams_s01_voltages_2_s01v09_encode>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	4b98      	ldr	r3, [pc, #608]	@ (80024d4 <voltageSendCan+0x53c>)
 8002274:	709a      	strb	r2, [r3, #2]
    can1_ams_s01_voltages_2.s01v10 = can1_ams_s01_voltages_2_s01v10_encode((float) rawVoltages[9] / 10000.0);
 8002276:	4b96      	ldr	r3, [pc, #600]	@ (80024d0 <voltageSendCan+0x538>)
 8002278:	8a5b      	ldrh	r3, [r3, #18]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002282:	ee17 0a90 	vmov	r0, s15
 8002286:	f7fe f903 	bl	8000490 <__aeabi_f2d>
 800228a:	a38f      	add	r3, pc, #572	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	f7fe fa80 	bl	8000794 <__aeabi_ddiv>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	ec43 2b17 	vmov	d7, r2, r3
 800229c:	eeb0 0a47 	vmov.f32	s0, s14
 80022a0:	eef0 0a67 	vmov.f32	s1, s15
 80022a4:	f009 ffb4 	bl	800c210 <can1_ams_s01_voltages_2_s01v10_encode>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b89      	ldr	r3, [pc, #548]	@ (80024d4 <voltageSendCan+0x53c>)
 80022ae:	70da      	strb	r2, [r3, #3]
    can1_ams_s01_voltages_2.s01v11 = can1_ams_s01_voltages_2_s01v11_encode((float) rawVoltages[10] / 10000.0);
 80022b0:	4b87      	ldr	r3, [pc, #540]	@ (80024d0 <voltageSendCan+0x538>)
 80022b2:	8a9b      	ldrh	r3, [r3, #20]
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022bc:	ee17 0a90 	vmov	r0, s15
 80022c0:	f7fe f8e6 	bl	8000490 <__aeabi_f2d>
 80022c4:	a380      	add	r3, pc, #512	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe fa63 	bl	8000794 <__aeabi_ddiv>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	ec43 2b17 	vmov	d7, r2, r3
 80022d6:	eeb0 0a47 	vmov.f32	s0, s14
 80022da:	eef0 0a67 	vmov.f32	s1, s15
 80022de:	f009 ffc3 	bl	800c268 <can1_ams_s01_voltages_2_s01v11_encode>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b7b      	ldr	r3, [pc, #492]	@ (80024d4 <voltageSendCan+0x53c>)
 80022e8:	711a      	strb	r2, [r3, #4]

    can1_ams_s01_voltages_2_pack(txData, &can1_ams_s01_voltages_2, CAN1_AMS_S01_VOLTAGES_2_LENGTH);
 80022ea:	2205      	movs	r2, #5
 80022ec:	4979      	ldr	r1, [pc, #484]	@ (80024d4 <voltageSendCan+0x53c>)
 80022ee:	487a      	ldr	r0, [pc, #488]	@ (80024d8 <voltageSendCan+0x540>)
 80022f0:	f009 fea0 	bl	800c034 <can1_ams_s01_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S01_VOLTAGES_2_FRAME_ID;
 80022f4:	4b79      	ldr	r3, [pc, #484]	@ (80024dc <voltageSendCan+0x544>)
 80022f6:	f240 2259 	movw	r2, #601	@ 0x259
 80022fa:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S01_VOLTAGES_2_LENGTH;
 80022fc:	4b77      	ldr	r3, [pc, #476]	@ (80024dc <voltageSendCan+0x544>)
 80022fe:	2205      	movs	r2, #5
 8002300:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002302:	4b76      	ldr	r3, [pc, #472]	@ (80024dc <voltageSendCan+0x544>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002308:	4b74      	ldr	r3, [pc, #464]	@ (80024dc <voltageSendCan+0x544>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800230e:	2300      	movs	r3, #0
 8002310:	4a71      	ldr	r2, [pc, #452]	@ (80024d8 <voltageSendCan+0x540>)
 8002312:	4972      	ldr	r1, [pc, #456]	@ (80024dc <voltageSendCan+0x544>)
 8002314:	4872      	ldr	r0, [pc, #456]	@ (80024e0 <voltageSendCan+0x548>)
 8002316:	f004 fb91 	bl	8006a3c <HAL_CAN_AddTxMessage>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f002 80e3 	beq.w	80044e8 <voltageSendCan+0x2550>
      Error_Handler();
 8002322:	f003 fb67 	bl	80059f4 <Error_Handler>
    break;
 8002326:	f002 b8df 	b.w	80044e8 <voltageSendCan+0x2550>

  case 2:
    can1_ams_s02_voltages_1.s02v01 = can1_ams_s02_voltages_1_s02v01_encode((float) rawVoltages[11] / 10000.0);
 800232a:	4b69      	ldr	r3, [pc, #420]	@ (80024d0 <voltageSendCan+0x538>)
 800232c:	8adb      	ldrh	r3, [r3, #22]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002336:	ee17 0a90 	vmov	r0, s15
 800233a:	f7fe f8a9 	bl	8000490 <__aeabi_f2d>
 800233e:	a362      	add	r3, pc, #392	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe fa26 	bl	8000794 <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	ec43 2b17 	vmov	d7, r2, r3
 8002350:	eeb0 0a47 	vmov.f32	s0, s14
 8002354:	eef0 0a67 	vmov.f32	s1, s15
 8002358:	f00a f82a 	bl	800c3b0 <can1_ams_s02_voltages_1_s02v01_encode>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	4b60      	ldr	r3, [pc, #384]	@ (80024e4 <voltageSendCan+0x54c>)
 8002362:	701a      	strb	r2, [r3, #0]
    can1_ams_s02_voltages_1.s02v02 = can1_ams_s02_voltages_1_s02v02_encode((float) rawVoltages[12] / 10000.0);
 8002364:	4b5a      	ldr	r3, [pc, #360]	@ (80024d0 <voltageSendCan+0x538>)
 8002366:	8b1b      	ldrh	r3, [r3, #24]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002370:	ee17 0a90 	vmov	r0, s15
 8002374:	f7fe f88c 	bl	8000490 <__aeabi_f2d>
 8002378:	a353      	add	r3, pc, #332	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe fa09 	bl	8000794 <__aeabi_ddiv>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	ec43 2b17 	vmov	d7, r2, r3
 800238a:	eeb0 0a47 	vmov.f32	s0, s14
 800238e:	eef0 0a67 	vmov.f32	s1, s15
 8002392:	f00a f839 	bl	800c408 <can1_ams_s02_voltages_1_s02v02_encode>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	4b52      	ldr	r3, [pc, #328]	@ (80024e4 <voltageSendCan+0x54c>)
 800239c:	705a      	strb	r2, [r3, #1]
    can1_ams_s02_voltages_1.s02v03 = can1_ams_s02_voltages_1_s02v03_encode((float) rawVoltages[13] / 10000.0);
 800239e:	4b4c      	ldr	r3, [pc, #304]	@ (80024d0 <voltageSendCan+0x538>)
 80023a0:	8b5b      	ldrh	r3, [r3, #26]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023aa:	ee17 0a90 	vmov	r0, s15
 80023ae:	f7fe f86f 	bl	8000490 <__aeabi_f2d>
 80023b2:	a345      	add	r3, pc, #276	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f9ec 	bl	8000794 <__aeabi_ddiv>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	ec43 2b17 	vmov	d7, r2, r3
 80023c4:	eeb0 0a47 	vmov.f32	s0, s14
 80023c8:	eef0 0a67 	vmov.f32	s1, s15
 80023cc:	f00a f848 	bl	800c460 <can1_ams_s02_voltages_1_s02v03_encode>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <voltageSendCan+0x54c>)
 80023d6:	709a      	strb	r2, [r3, #2]
    can1_ams_s02_voltages_1.s02v04 = can1_ams_s02_voltages_1_s02v04_encode((float) rawVoltages[14] / 10000.0);
 80023d8:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <voltageSendCan+0x538>)
 80023da:	8b9b      	ldrh	r3, [r3, #28]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e4:	ee17 0a90 	vmov	r0, s15
 80023e8:	f7fe f852 	bl	8000490 <__aeabi_f2d>
 80023ec:	a336      	add	r3, pc, #216	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe f9cf 	bl	8000794 <__aeabi_ddiv>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	ec43 2b17 	vmov	d7, r2, r3
 80023fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002402:	eef0 0a67 	vmov.f32	s1, s15
 8002406:	f00a f857 	bl	800c4b8 <can1_ams_s02_voltages_1_s02v04_encode>
 800240a:	4603      	mov	r3, r0
 800240c:	461a      	mov	r2, r3
 800240e:	4b35      	ldr	r3, [pc, #212]	@ (80024e4 <voltageSendCan+0x54c>)
 8002410:	70da      	strb	r2, [r3, #3]
    can1_ams_s02_voltages_1.s02v05 = can1_ams_s02_voltages_1_s02v05_encode((float) rawVoltages[15] / 10000.0);
 8002412:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <voltageSendCan+0x538>)
 8002414:	8bdb      	ldrh	r3, [r3, #30]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241e:	ee17 0a90 	vmov	r0, s15
 8002422:	f7fe f835 	bl	8000490 <__aeabi_f2d>
 8002426:	a328      	add	r3, pc, #160	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fe f9b2 	bl	8000794 <__aeabi_ddiv>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	ec43 2b17 	vmov	d7, r2, r3
 8002438:	eeb0 0a47 	vmov.f32	s0, s14
 800243c:	eef0 0a67 	vmov.f32	s1, s15
 8002440:	f00a f866 	bl	800c510 <can1_ams_s02_voltages_1_s02v05_encode>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	4b26      	ldr	r3, [pc, #152]	@ (80024e4 <voltageSendCan+0x54c>)
 800244a:	711a      	strb	r2, [r3, #4]
    can1_ams_s02_voltages_1.s02v06 = can1_ams_s02_voltages_1_s02v06_encode((float) rawVoltages[16] / 10000.0);
 800244c:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <voltageSendCan+0x538>)
 800244e:	8c1b      	ldrh	r3, [r3, #32]
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002458:	ee17 0a90 	vmov	r0, s15
 800245c:	f7fe f818 	bl	8000490 <__aeabi_f2d>
 8002460:	a319      	add	r3, pc, #100	@ (adr r3, 80024c8 <voltageSendCan+0x530>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe f995 	bl	8000794 <__aeabi_ddiv>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	ec43 2b17 	vmov	d7, r2, r3
 8002472:	eeb0 0a47 	vmov.f32	s0, s14
 8002476:	eef0 0a67 	vmov.f32	s1, s15
 800247a:	f00a f875 	bl	800c568 <can1_ams_s02_voltages_1_s02v06_encode>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	4b18      	ldr	r3, [pc, #96]	@ (80024e4 <voltageSendCan+0x54c>)
 8002484:	715a      	strb	r2, [r3, #5]

    can1_ams_s02_voltages_1_pack(txData, &can1_ams_s02_voltages_1, CAN1_AMS_S02_VOLTAGES_1_LENGTH);
 8002486:	2206      	movs	r2, #6
 8002488:	4916      	ldr	r1, [pc, #88]	@ (80024e4 <voltageSendCan+0x54c>)
 800248a:	4813      	ldr	r0, [pc, #76]	@ (80024d8 <voltageSendCan+0x540>)
 800248c:	f009 ff16 	bl	800c2bc <can1_ams_s02_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S02_VOLTAGES_1_FRAME_ID;
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <voltageSendCan+0x544>)
 8002492:	f240 225a 	movw	r2, #602	@ 0x25a
 8002496:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S02_VOLTAGES_1_LENGTH;
 8002498:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <voltageSendCan+0x544>)
 800249a:	2206      	movs	r2, #6
 800249c:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800249e:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <voltageSendCan+0x544>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <voltageSendCan+0x544>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80024aa:	2300      	movs	r3, #0
 80024ac:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <voltageSendCan+0x540>)
 80024ae:	490b      	ldr	r1, [pc, #44]	@ (80024dc <voltageSendCan+0x544>)
 80024b0:	480b      	ldr	r0, [pc, #44]	@ (80024e0 <voltageSendCan+0x548>)
 80024b2:	f004 fac3 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f002 8017 	beq.w	80044ec <voltageSendCan+0x2554>
      Error_Handler();
 80024be:	f003 fa99 	bl	80059f4 <Error_Handler>
    break;
 80024c2:	f002 b813 	b.w	80044ec <voltageSendCan+0x2554>
 80024c6:	bf00      	nop
 80024c8:	00000000 	.word	0x00000000
 80024cc:	40c38800 	.word	0x40c38800
 80024d0:	20000480 	.word	0x20000480
 80024d4:	200002d8 	.word	0x200002d8
 80024d8:	20000288 	.word	0x20000288
 80024dc:	20000254 	.word	0x20000254
 80024e0:	2000011c 	.word	0x2000011c
 80024e4:	200002e0 	.word	0x200002e0

  case 3:
    can1_ams_s02_voltages_2.s02v07 = can1_ams_s02_voltages_2_s02v07_encode((float) rawVoltages[17] / 10000.0);
 80024e8:	4bb3      	ldr	r3, [pc, #716]	@ (80027b8 <voltageSendCan+0x820>)
 80024ea:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f4:	ee17 0a90 	vmov	r0, s15
 80024f8:	f7fd ffca 	bl	8000490 <__aeabi_f2d>
 80024fc:	a3ac      	add	r3, pc, #688	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe f947 	bl	8000794 <__aeabi_ddiv>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	ec43 2b17 	vmov	d7, r2, r3
 800250e:	eeb0 0a47 	vmov.f32	s0, s14
 8002512:	eef0 0a67 	vmov.f32	s1, s15
 8002516:	f00a f8bb 	bl	800c690 <can1_ams_s02_voltages_2_s02v07_encode>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	4ba7      	ldr	r3, [pc, #668]	@ (80027bc <voltageSendCan+0x824>)
 8002520:	701a      	strb	r2, [r3, #0]
    can1_ams_s02_voltages_2.s02v08 = can1_ams_s02_voltages_2_s02v08_encode((float) rawVoltages[18] / 10000.0);
 8002522:	4ba5      	ldr	r3, [pc, #660]	@ (80027b8 <voltageSendCan+0x820>)
 8002524:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	ee17 0a90 	vmov	r0, s15
 8002532:	f7fd ffad 	bl	8000490 <__aeabi_f2d>
 8002536:	a39e      	add	r3, pc, #632	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f92a 	bl	8000794 <__aeabi_ddiv>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	ec43 2b17 	vmov	d7, r2, r3
 8002548:	eeb0 0a47 	vmov.f32	s0, s14
 800254c:	eef0 0a67 	vmov.f32	s1, s15
 8002550:	f00a f8ca 	bl	800c6e8 <can1_ams_s02_voltages_2_s02v08_encode>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	4b98      	ldr	r3, [pc, #608]	@ (80027bc <voltageSendCan+0x824>)
 800255a:	705a      	strb	r2, [r3, #1]
    can1_ams_s02_voltages_2.s02v09 = can1_ams_s02_voltages_2_s02v09_encode((float) rawVoltages[19] / 10000.0);
 800255c:	4b96      	ldr	r3, [pc, #600]	@ (80027b8 <voltageSendCan+0x820>)
 800255e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002568:	ee17 0a90 	vmov	r0, s15
 800256c:	f7fd ff90 	bl	8000490 <__aeabi_f2d>
 8002570:	a38f      	add	r3, pc, #572	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f90d 	bl	8000794 <__aeabi_ddiv>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	ec43 2b17 	vmov	d7, r2, r3
 8002582:	eeb0 0a47 	vmov.f32	s0, s14
 8002586:	eef0 0a67 	vmov.f32	s1, s15
 800258a:	f00a f8d9 	bl	800c740 <can1_ams_s02_voltages_2_s02v09_encode>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	4b8a      	ldr	r3, [pc, #552]	@ (80027bc <voltageSendCan+0x824>)
 8002594:	709a      	strb	r2, [r3, #2]
    can1_ams_s02_voltages_2.s02v10 = can1_ams_s02_voltages_2_s02v10_encode((float) rawVoltages[20] / 10000.0);
 8002596:	4b88      	ldr	r3, [pc, #544]	@ (80027b8 <voltageSendCan+0x820>)
 8002598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a2:	ee17 0a90 	vmov	r0, s15
 80025a6:	f7fd ff73 	bl	8000490 <__aeabi_f2d>
 80025aa:	a381      	add	r3, pc, #516	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe f8f0 	bl	8000794 <__aeabi_ddiv>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	ec43 2b17 	vmov	d7, r2, r3
 80025bc:	eeb0 0a47 	vmov.f32	s0, s14
 80025c0:	eef0 0a67 	vmov.f32	s1, s15
 80025c4:	f00a f8e8 	bl	800c798 <can1_ams_s02_voltages_2_s02v10_encode>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b7b      	ldr	r3, [pc, #492]	@ (80027bc <voltageSendCan+0x824>)
 80025ce:	70da      	strb	r2, [r3, #3]

    can1_ams_s02_voltages_2_pack(txData, &can1_ams_s02_voltages_2, CAN1_AMS_S02_VOLTAGES_2_LENGTH);
 80025d0:	2205      	movs	r2, #5
 80025d2:	497a      	ldr	r1, [pc, #488]	@ (80027bc <voltageSendCan+0x824>)
 80025d4:	487a      	ldr	r0, [pc, #488]	@ (80027c0 <voltageSendCan+0x828>)
 80025d6:	f009 fff1 	bl	800c5bc <can1_ams_s02_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S02_VOLTAGES_2_FRAME_ID;
 80025da:	4b7a      	ldr	r3, [pc, #488]	@ (80027c4 <voltageSendCan+0x82c>)
 80025dc:	f240 225b 	movw	r2, #603	@ 0x25b
 80025e0:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S02_VOLTAGES_2_LENGTH;
 80025e2:	4b78      	ldr	r3, [pc, #480]	@ (80027c4 <voltageSendCan+0x82c>)
 80025e4:	2205      	movs	r2, #5
 80025e6:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80025e8:	4b76      	ldr	r3, [pc, #472]	@ (80027c4 <voltageSendCan+0x82c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80025ee:	4b75      	ldr	r3, [pc, #468]	@ (80027c4 <voltageSendCan+0x82c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80025f4:	2300      	movs	r3, #0
 80025f6:	4a72      	ldr	r2, [pc, #456]	@ (80027c0 <voltageSendCan+0x828>)
 80025f8:	4972      	ldr	r1, [pc, #456]	@ (80027c4 <voltageSendCan+0x82c>)
 80025fa:	4873      	ldr	r0, [pc, #460]	@ (80027c8 <voltageSendCan+0x830>)
 80025fc:	f004 fa1e 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f001 8774 	beq.w	80044f0 <voltageSendCan+0x2558>
      Error_Handler();
 8002608:	f003 f9f4 	bl	80059f4 <Error_Handler>
    break;
 800260c:	f001 bf70 	b.w	80044f0 <voltageSendCan+0x2558>

  case 4:
    can1_ams_s03_voltages_1.s03v01 = can1_ams_s03_voltages_1_s03v01_encode((float) rawVoltages[21] / 10000.0);
 8002610:	4b69      	ldr	r3, [pc, #420]	@ (80027b8 <voltageSendCan+0x820>)
 8002612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261c:	ee17 0a90 	vmov	r0, s15
 8002620:	f7fd ff36 	bl	8000490 <__aeabi_f2d>
 8002624:	a362      	add	r3, pc, #392	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	f7fe f8b3 	bl	8000794 <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	ec43 2b17 	vmov	d7, r2, r3
 8002636:	eeb0 0a47 	vmov.f32	s0, s14
 800263a:	eef0 0a67 	vmov.f32	s1, s15
 800263e:	f00a f94f 	bl	800c8e0 <can1_ams_s03_voltages_1_s03v01_encode>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	4b61      	ldr	r3, [pc, #388]	@ (80027cc <voltageSendCan+0x834>)
 8002648:	701a      	strb	r2, [r3, #0]
    can1_ams_s03_voltages_1.s03v02 = can1_ams_s03_voltages_1_s03v02_encode((float) rawVoltages[22] / 10000.0);
 800264a:	4b5b      	ldr	r3, [pc, #364]	@ (80027b8 <voltageSendCan+0x820>)
 800264c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002656:	ee17 0a90 	vmov	r0, s15
 800265a:	f7fd ff19 	bl	8000490 <__aeabi_f2d>
 800265e:	a354      	add	r3, pc, #336	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fe f896 	bl	8000794 <__aeabi_ddiv>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	ec43 2b17 	vmov	d7, r2, r3
 8002670:	eeb0 0a47 	vmov.f32	s0, s14
 8002674:	eef0 0a67 	vmov.f32	s1, s15
 8002678:	f00a f95e 	bl	800c938 <can1_ams_s03_voltages_1_s03v02_encode>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	4b52      	ldr	r3, [pc, #328]	@ (80027cc <voltageSendCan+0x834>)
 8002682:	705a      	strb	r2, [r3, #1]
    can1_ams_s03_voltages_1.s03v03 = can1_ams_s03_voltages_1_s03v03_encode((float) rawVoltages[23] / 10000.0);
 8002684:	4b4c      	ldr	r3, [pc, #304]	@ (80027b8 <voltageSendCan+0x820>)
 8002686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002690:	ee17 0a90 	vmov	r0, s15
 8002694:	f7fd fefc 	bl	8000490 <__aeabi_f2d>
 8002698:	a345      	add	r3, pc, #276	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fe f879 	bl	8000794 <__aeabi_ddiv>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	ec43 2b17 	vmov	d7, r2, r3
 80026aa:	eeb0 0a47 	vmov.f32	s0, s14
 80026ae:	eef0 0a67 	vmov.f32	s1, s15
 80026b2:	f00a f96d 	bl	800c990 <can1_ams_s03_voltages_1_s03v03_encode>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b44      	ldr	r3, [pc, #272]	@ (80027cc <voltageSendCan+0x834>)
 80026bc:	709a      	strb	r2, [r3, #2]
    can1_ams_s03_voltages_1.s03v04 = can1_ams_s03_voltages_1_s03v04_encode((float) rawVoltages[24] / 10000.0);
 80026be:	4b3e      	ldr	r3, [pc, #248]	@ (80027b8 <voltageSendCan+0x820>)
 80026c0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ca:	ee17 0a90 	vmov	r0, s15
 80026ce:	f7fd fedf 	bl	8000490 <__aeabi_f2d>
 80026d2:	a337      	add	r3, pc, #220	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fe f85c 	bl	8000794 <__aeabi_ddiv>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	ec43 2b17 	vmov	d7, r2, r3
 80026e4:	eeb0 0a47 	vmov.f32	s0, s14
 80026e8:	eef0 0a67 	vmov.f32	s1, s15
 80026ec:	f00a f97c 	bl	800c9e8 <can1_ams_s03_voltages_1_s03v04_encode>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b35      	ldr	r3, [pc, #212]	@ (80027cc <voltageSendCan+0x834>)
 80026f6:	70da      	strb	r2, [r3, #3]
    can1_ams_s03_voltages_1.s03v05 = can1_ams_s03_voltages_1_s03v05_encode((float) rawVoltages[25] / 10000.0);
 80026f8:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <voltageSendCan+0x820>)
 80026fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002704:	ee17 0a90 	vmov	r0, s15
 8002708:	f7fd fec2 	bl	8000490 <__aeabi_f2d>
 800270c:	a328      	add	r3, pc, #160	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fe f83f 	bl	8000794 <__aeabi_ddiv>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	ec43 2b17 	vmov	d7, r2, r3
 800271e:	eeb0 0a47 	vmov.f32	s0, s14
 8002722:	eef0 0a67 	vmov.f32	s1, s15
 8002726:	f00a f98b 	bl	800ca40 <can1_ams_s03_voltages_1_s03v05_encode>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	4b27      	ldr	r3, [pc, #156]	@ (80027cc <voltageSendCan+0x834>)
 8002730:	711a      	strb	r2, [r3, #4]
    can1_ams_s03_voltages_1.s03v06 = can1_ams_s03_voltages_1_s03v06_encode((float) rawVoltages[26] / 10000.0);
 8002732:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <voltageSendCan+0x820>)
 8002734:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273e:	ee17 0a90 	vmov	r0, s15
 8002742:	f7fd fea5 	bl	8000490 <__aeabi_f2d>
 8002746:	a31a      	add	r3, pc, #104	@ (adr r3, 80027b0 <voltageSendCan+0x818>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fe f822 	bl	8000794 <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	ec43 2b17 	vmov	d7, r2, r3
 8002758:	eeb0 0a47 	vmov.f32	s0, s14
 800275c:	eef0 0a67 	vmov.f32	s1, s15
 8002760:	f00a f99a 	bl	800ca98 <can1_ams_s03_voltages_1_s03v06_encode>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <voltageSendCan+0x834>)
 800276a:	715a      	strb	r2, [r3, #5]

    can1_ams_s03_voltages_1_pack(txData, &can1_ams_s03_voltages_1, CAN1_AMS_S03_VOLTAGES_1_LENGTH);
 800276c:	2206      	movs	r2, #6
 800276e:	4917      	ldr	r1, [pc, #92]	@ (80027cc <voltageSendCan+0x834>)
 8002770:	4813      	ldr	r0, [pc, #76]	@ (80027c0 <voltageSendCan+0x828>)
 8002772:	f00a f83b 	bl	800c7ec <can1_ams_s03_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S03_VOLTAGES_1_FRAME_ID;
 8002776:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <voltageSendCan+0x82c>)
 8002778:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 800277c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S03_VOLTAGES_1_LENGTH;
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <voltageSendCan+0x82c>)
 8002780:	2206      	movs	r2, #6
 8002782:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <voltageSendCan+0x82c>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <voltageSendCan+0x82c>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002790:	2300      	movs	r3, #0
 8002792:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <voltageSendCan+0x828>)
 8002794:	490b      	ldr	r1, [pc, #44]	@ (80027c4 <voltageSendCan+0x82c>)
 8002796:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <voltageSendCan+0x830>)
 8002798:	f004 f950 	bl	8006a3c <HAL_CAN_AddTxMessage>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f001 86a8 	beq.w	80044f4 <voltageSendCan+0x255c>
      Error_Handler();
 80027a4:	f003 f926 	bl	80059f4 <Error_Handler>
    break;
 80027a8:	f001 bea4 	b.w	80044f4 <voltageSendCan+0x255c>
 80027ac:	f3af 8000 	nop.w
 80027b0:	00000000 	.word	0x00000000
 80027b4:	40c38800 	.word	0x40c38800
 80027b8:	20000480 	.word	0x20000480
 80027bc:	200002e8 	.word	0x200002e8
 80027c0:	20000288 	.word	0x20000288
 80027c4:	20000254 	.word	0x20000254
 80027c8:	2000011c 	.word	0x2000011c
 80027cc:	200002f0 	.word	0x200002f0

  case 5:
    can1_ams_s03_voltages_2.s03v07 = can1_ams_s03_voltages_2_s03v07_encode((float) rawVoltages[27] / 10000.0);
 80027d0:	4bc5      	ldr	r3, [pc, #788]	@ (8002ae8 <voltageSendCan+0xb50>)
 80027d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027dc:	ee17 0a90 	vmov	r0, s15
 80027e0:	f7fd fe56 	bl	8000490 <__aeabi_f2d>
 80027e4:	a3be      	add	r3, pc, #760	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fd ffd3 	bl	8000794 <__aeabi_ddiv>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	ec43 2b17 	vmov	d7, r2, r3
 80027f6:	eeb0 0a47 	vmov.f32	s0, s14
 80027fa:	eef0 0a67 	vmov.f32	s1, s15
 80027fe:	f00a f9df 	bl	800cbc0 <can1_ams_s03_voltages_2_s03v07_encode>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	4bb9      	ldr	r3, [pc, #740]	@ (8002aec <voltageSendCan+0xb54>)
 8002808:	701a      	strb	r2, [r3, #0]
    can1_ams_s03_voltages_2.s03v08 = can1_ams_s03_voltages_2_s03v08_encode((float) rawVoltages[28] / 10000.0);
 800280a:	4bb7      	ldr	r3, [pc, #732]	@ (8002ae8 <voltageSendCan+0xb50>)
 800280c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002816:	ee17 0a90 	vmov	r0, s15
 800281a:	f7fd fe39 	bl	8000490 <__aeabi_f2d>
 800281e:	a3b0      	add	r3, pc, #704	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fd ffb6 	bl	8000794 <__aeabi_ddiv>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	ec43 2b17 	vmov	d7, r2, r3
 8002830:	eeb0 0a47 	vmov.f32	s0, s14
 8002834:	eef0 0a67 	vmov.f32	s1, s15
 8002838:	f00a f9ee 	bl	800cc18 <can1_ams_s03_voltages_2_s03v08_encode>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	4baa      	ldr	r3, [pc, #680]	@ (8002aec <voltageSendCan+0xb54>)
 8002842:	705a      	strb	r2, [r3, #1]
    can1_ams_s03_voltages_2.s03v09 = can1_ams_s03_voltages_2_s03v09_encode((float) rawVoltages[29] / 10000.0);
 8002844:	4ba8      	ldr	r3, [pc, #672]	@ (8002ae8 <voltageSendCan+0xb50>)
 8002846:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002850:	ee17 0a90 	vmov	r0, s15
 8002854:	f7fd fe1c 	bl	8000490 <__aeabi_f2d>
 8002858:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fd ff99 	bl	8000794 <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	ec43 2b17 	vmov	d7, r2, r3
 800286a:	eeb0 0a47 	vmov.f32	s0, s14
 800286e:	eef0 0a67 	vmov.f32	s1, s15
 8002872:	f00a f9fd 	bl	800cc70 <can1_ams_s03_voltages_2_s03v09_encode>
 8002876:	4603      	mov	r3, r0
 8002878:	461a      	mov	r2, r3
 800287a:	4b9c      	ldr	r3, [pc, #624]	@ (8002aec <voltageSendCan+0xb54>)
 800287c:	709a      	strb	r2, [r3, #2]
    can1_ams_s03_voltages_2.s03v10 = can1_ams_s03_voltages_2_s03v10_encode((float) rawVoltages[30] / 10000.0);
 800287e:	4b9a      	ldr	r3, [pc, #616]	@ (8002ae8 <voltageSendCan+0xb50>)
 8002880:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288a:	ee17 0a90 	vmov	r0, s15
 800288e:	f7fd fdff 	bl	8000490 <__aeabi_f2d>
 8002892:	a393      	add	r3, pc, #588	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd ff7c 	bl	8000794 <__aeabi_ddiv>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	ec43 2b17 	vmov	d7, r2, r3
 80028a4:	eeb0 0a47 	vmov.f32	s0, s14
 80028a8:	eef0 0a67 	vmov.f32	s1, s15
 80028ac:	f00a fa0c 	bl	800ccc8 <can1_ams_s03_voltages_2_s03v10_encode>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b8d      	ldr	r3, [pc, #564]	@ (8002aec <voltageSendCan+0xb54>)
 80028b6:	70da      	strb	r2, [r3, #3]
    can1_ams_s03_voltages_2.s03v11 = can1_ams_s03_voltages_2_s03v11_encode((float) rawVoltages[31] / 10000.0);
 80028b8:	4b8b      	ldr	r3, [pc, #556]	@ (8002ae8 <voltageSendCan+0xb50>)
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c4:	ee17 0a90 	vmov	r0, s15
 80028c8:	f7fd fde2 	bl	8000490 <__aeabi_f2d>
 80028cc:	a384      	add	r3, pc, #528	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 80028ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d2:	f7fd ff5f 	bl	8000794 <__aeabi_ddiv>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	ec43 2b17 	vmov	d7, r2, r3
 80028de:	eeb0 0a47 	vmov.f32	s0, s14
 80028e2:	eef0 0a67 	vmov.f32	s1, s15
 80028e6:	f00a fa1b 	bl	800cd20 <can1_ams_s03_voltages_2_s03v11_encode>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002aec <voltageSendCan+0xb54>)
 80028f0:	711a      	strb	r2, [r3, #4]

    can1_ams_s03_voltages_2_pack(txData, &can1_ams_s03_voltages_2, CAN1_AMS_S03_VOLTAGES_2_LENGTH);
 80028f2:	2205      	movs	r2, #5
 80028f4:	497d      	ldr	r1, [pc, #500]	@ (8002aec <voltageSendCan+0xb54>)
 80028f6:	487e      	ldr	r0, [pc, #504]	@ (8002af0 <voltageSendCan+0xb58>)
 80028f8:	f00a f8f8 	bl	800caec <can1_ams_s03_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S03_VOLTAGES_2_FRAME_ID;
 80028fc:	4b7d      	ldr	r3, [pc, #500]	@ (8002af4 <voltageSendCan+0xb5c>)
 80028fe:	f240 225d 	movw	r2, #605	@ 0x25d
 8002902:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S03_VOLTAGES_2_LENGTH;
 8002904:	4b7b      	ldr	r3, [pc, #492]	@ (8002af4 <voltageSendCan+0xb5c>)
 8002906:	2205      	movs	r2, #5
 8002908:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800290a:	4b7a      	ldr	r3, [pc, #488]	@ (8002af4 <voltageSendCan+0xb5c>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002910:	4b78      	ldr	r3, [pc, #480]	@ (8002af4 <voltageSendCan+0xb5c>)
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002916:	2300      	movs	r3, #0
 8002918:	4a75      	ldr	r2, [pc, #468]	@ (8002af0 <voltageSendCan+0xb58>)
 800291a:	4976      	ldr	r1, [pc, #472]	@ (8002af4 <voltageSendCan+0xb5c>)
 800291c:	4876      	ldr	r0, [pc, #472]	@ (8002af8 <voltageSendCan+0xb60>)
 800291e:	f004 f88d 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	f001 85e7 	beq.w	80044f8 <voltageSendCan+0x2560>
      Error_Handler();
 800292a:	f003 f863 	bl	80059f4 <Error_Handler>
    break;
 800292e:	f001 bde3 	b.w	80044f8 <voltageSendCan+0x2560>

  case 6:
    can1_ams_s04_voltages_1.s04v01 = can1_ams_s04_voltages_1_s04v01_encode((float) rawVoltages[32] / 10000.0);
 8002932:	4b6d      	ldr	r3, [pc, #436]	@ (8002ae8 <voltageSendCan+0xb50>)
 8002934:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002940:	ee17 0a90 	vmov	r0, s15
 8002944:	f7fd fda4 	bl	8000490 <__aeabi_f2d>
 8002948:	a365      	add	r3, pc, #404	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd ff21 	bl	8000794 <__aeabi_ddiv>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	ec43 2b17 	vmov	d7, r2, r3
 800295a:	eeb0 0a47 	vmov.f32	s0, s14
 800295e:	eef0 0a67 	vmov.f32	s1, s15
 8002962:	f00a fa81 	bl	800ce68 <can1_ams_s04_voltages_1_s04v01_encode>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	4b64      	ldr	r3, [pc, #400]	@ (8002afc <voltageSendCan+0xb64>)
 800296c:	701a      	strb	r2, [r3, #0]
    can1_ams_s04_voltages_1.s04v02 = can1_ams_s04_voltages_1_s04v02_encode((float) rawVoltages[33] / 10000.0);
 800296e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae8 <voltageSendCan+0xb50>)
 8002970:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297c:	ee17 0a90 	vmov	r0, s15
 8002980:	f7fd fd86 	bl	8000490 <__aeabi_f2d>
 8002984:	a356      	add	r3, pc, #344	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fd ff03 	bl	8000794 <__aeabi_ddiv>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	ec43 2b17 	vmov	d7, r2, r3
 8002996:	eeb0 0a47 	vmov.f32	s0, s14
 800299a:	eef0 0a67 	vmov.f32	s1, s15
 800299e:	f00a fa8f 	bl	800cec0 <can1_ams_s04_voltages_1_s04v02_encode>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b55      	ldr	r3, [pc, #340]	@ (8002afc <voltageSendCan+0xb64>)
 80029a8:	705a      	strb	r2, [r3, #1]
    can1_ams_s04_voltages_1.s04v03 = can1_ams_s04_voltages_1_s04v03_encode((float) rawVoltages[34] / 10000.0);
 80029aa:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae8 <voltageSendCan+0xb50>)
 80029ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029b0:	ee07 3a90 	vmov	s15, r3
 80029b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b8:	ee17 0a90 	vmov	r0, s15
 80029bc:	f7fd fd68 	bl	8000490 <__aeabi_f2d>
 80029c0:	a347      	add	r3, pc, #284	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f7fd fee5 	bl	8000794 <__aeabi_ddiv>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	ec43 2b17 	vmov	d7, r2, r3
 80029d2:	eeb0 0a47 	vmov.f32	s0, s14
 80029d6:	eef0 0a67 	vmov.f32	s1, s15
 80029da:	f00a fa9d 	bl	800cf18 <can1_ams_s04_voltages_1_s04v03_encode>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b46      	ldr	r3, [pc, #280]	@ (8002afc <voltageSendCan+0xb64>)
 80029e4:	709a      	strb	r2, [r3, #2]
    can1_ams_s04_voltages_1.s04v04 = can1_ams_s04_voltages_1_s04v04_encode((float) rawVoltages[35] / 10000.0);
 80029e6:	4b40      	ldr	r3, [pc, #256]	@ (8002ae8 <voltageSendCan+0xb50>)
 80029e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029ec:	ee07 3a90 	vmov	s15, r3
 80029f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f4:	ee17 0a90 	vmov	r0, s15
 80029f8:	f7fd fd4a 	bl	8000490 <__aeabi_f2d>
 80029fc:	a338      	add	r3, pc, #224	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fec7 	bl	8000794 <__aeabi_ddiv>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	ec43 2b17 	vmov	d7, r2, r3
 8002a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a12:	eef0 0a67 	vmov.f32	s1, s15
 8002a16:	f00a faab 	bl	800cf70 <can1_ams_s04_voltages_1_s04v04_encode>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b37      	ldr	r3, [pc, #220]	@ (8002afc <voltageSendCan+0xb64>)
 8002a20:	70da      	strb	r2, [r3, #3]
    can1_ams_s04_voltages_1.s04v05 = can1_ams_s04_voltages_1_s04v05_encode((float) rawVoltages[36] / 10000.0);
 8002a22:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <voltageSendCan+0xb50>)
 8002a24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a30:	ee17 0a90 	vmov	r0, s15
 8002a34:	f7fd fd2c 	bl	8000490 <__aeabi_f2d>
 8002a38:	a329      	add	r3, pc, #164	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fd fea9 	bl	8000794 <__aeabi_ddiv>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	ec43 2b17 	vmov	d7, r2, r3
 8002a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a4e:	eef0 0a67 	vmov.f32	s1, s15
 8002a52:	f00a fab9 	bl	800cfc8 <can1_ams_s04_voltages_1_s04v05_encode>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <voltageSendCan+0xb64>)
 8002a5c:	711a      	strb	r2, [r3, #4]
    can1_ams_s04_voltages_1.s04v06 = can1_ams_s04_voltages_1_s04v06_encode((float) rawVoltages[37] / 10000.0);
 8002a5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <voltageSendCan+0xb50>)
 8002a60:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6c:	ee17 0a90 	vmov	r0, s15
 8002a70:	f7fd fd0e 	bl	8000490 <__aeabi_f2d>
 8002a74:	a31a      	add	r3, pc, #104	@ (adr r3, 8002ae0 <voltageSendCan+0xb48>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fe8b 	bl	8000794 <__aeabi_ddiv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	ec43 2b17 	vmov	d7, r2, r3
 8002a86:	eeb0 0a47 	vmov.f32	s0, s14
 8002a8a:	eef0 0a67 	vmov.f32	s1, s15
 8002a8e:	f00a fac7 	bl	800d020 <can1_ams_s04_voltages_1_s04v06_encode>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <voltageSendCan+0xb64>)
 8002a98:	715a      	strb	r2, [r3, #5]

    can1_ams_s04_voltages_1_pack(txData, &can1_ams_s04_voltages_1, CAN1_AMS_S04_VOLTAGES_1_LENGTH);
 8002a9a:	2206      	movs	r2, #6
 8002a9c:	4917      	ldr	r1, [pc, #92]	@ (8002afc <voltageSendCan+0xb64>)
 8002a9e:	4814      	ldr	r0, [pc, #80]	@ (8002af0 <voltageSendCan+0xb58>)
 8002aa0:	f00a f968 	bl	800cd74 <can1_ams_s04_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S04_VOLTAGES_1_FRAME_ID;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <voltageSendCan+0xb5c>)
 8002aa6:	f240 225e 	movw	r2, #606	@ 0x25e
 8002aaa:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S04_VOLTAGES_1_LENGTH;
 8002aac:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <voltageSendCan+0xb5c>)
 8002aae:	2206      	movs	r2, #6
 8002ab0:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <voltageSendCan+0xb5c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <voltageSendCan+0xb5c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8002af0 <voltageSendCan+0xb58>)
 8002ac2:	490c      	ldr	r1, [pc, #48]	@ (8002af4 <voltageSendCan+0xb5c>)
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <voltageSendCan+0xb60>)
 8002ac6:	f003 ffb9 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f001 8515 	beq.w	80044fc <voltageSendCan+0x2564>
      Error_Handler();
 8002ad2:	f002 ff8f 	bl	80059f4 <Error_Handler>
    break;
 8002ad6:	f001 bd11 	b.w	80044fc <voltageSendCan+0x2564>
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	40c38800 	.word	0x40c38800
 8002ae8:	20000480 	.word	0x20000480
 8002aec:	200002f8 	.word	0x200002f8
 8002af0:	20000288 	.word	0x20000288
 8002af4:	20000254 	.word	0x20000254
 8002af8:	2000011c 	.word	0x2000011c
 8002afc:	20000300 	.word	0x20000300

  case 7:
    can1_ams_s04_voltages_2.s04v07 = can1_ams_s04_voltages_2_s04v07_encode((float) rawVoltages[38] / 10000.0);
 8002b00:	4bb7      	ldr	r3, [pc, #732]	@ (8002de0 <voltageSendCan+0xe48>)
 8002b02:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0e:	ee17 0a90 	vmov	r0, s15
 8002b12:	f7fd fcbd 	bl	8000490 <__aeabi_f2d>
 8002b16:	a3b0      	add	r3, pc, #704	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fe3a 	bl	8000794 <__aeabi_ddiv>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	ec43 2b17 	vmov	d7, r2, r3
 8002b28:	eeb0 0a47 	vmov.f32	s0, s14
 8002b2c:	eef0 0a67 	vmov.f32	s1, s15
 8002b30:	f00a fb0a 	bl	800d148 <can1_ams_s04_voltages_2_s04v07_encode>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4baa      	ldr	r3, [pc, #680]	@ (8002de4 <voltageSendCan+0xe4c>)
 8002b3a:	701a      	strb	r2, [r3, #0]
    can1_ams_s04_voltages_2.s04v08 = can1_ams_s04_voltages_2_s04v08_encode((float) rawVoltages[39] / 10000.0);
 8002b3c:	4ba8      	ldr	r3, [pc, #672]	@ (8002de0 <voltageSendCan+0xe48>)
 8002b3e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4a:	ee17 0a90 	vmov	r0, s15
 8002b4e:	f7fd fc9f 	bl	8000490 <__aeabi_f2d>
 8002b52:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fe1c 	bl	8000794 <__aeabi_ddiv>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	ec43 2b17 	vmov	d7, r2, r3
 8002b64:	eeb0 0a47 	vmov.f32	s0, s14
 8002b68:	eef0 0a67 	vmov.f32	s1, s15
 8002b6c:	f00a fb18 	bl	800d1a0 <can1_ams_s04_voltages_2_s04v08_encode>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b9b      	ldr	r3, [pc, #620]	@ (8002de4 <voltageSendCan+0xe4c>)
 8002b76:	705a      	strb	r2, [r3, #1]
    can1_ams_s04_voltages_2.s04v09 = can1_ams_s04_voltages_2_s04v09_encode((float) rawVoltages[40] / 10000.0);
 8002b78:	4b99      	ldr	r3, [pc, #612]	@ (8002de0 <voltageSendCan+0xe48>)
 8002b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b86:	ee17 0a90 	vmov	r0, s15
 8002b8a:	f7fd fc81 	bl	8000490 <__aeabi_f2d>
 8002b8e:	a392      	add	r3, pc, #584	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fd fdfe 	bl	8000794 <__aeabi_ddiv>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	ec43 2b17 	vmov	d7, r2, r3
 8002ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba4:	eef0 0a67 	vmov.f32	s1, s15
 8002ba8:	f00a fb26 	bl	800d1f8 <can1_ams_s04_voltages_2_s04v09_encode>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8002de4 <voltageSendCan+0xe4c>)
 8002bb2:	709a      	strb	r2, [r3, #2]
    can1_ams_s04_voltages_2.s04v10 = can1_ams_s04_voltages_2_s04v10_encode((float) rawVoltages[41] / 10000.0);
 8002bb4:	4b8a      	ldr	r3, [pc, #552]	@ (8002de0 <voltageSendCan+0xe48>)
 8002bb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fc63 	bl	8000490 <__aeabi_f2d>
 8002bca:	a383      	add	r3, pc, #524	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fde0 	bl	8000794 <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	ec43 2b17 	vmov	d7, r2, r3
 8002bdc:	eeb0 0a47 	vmov.f32	s0, s14
 8002be0:	eef0 0a67 	vmov.f32	s1, s15
 8002be4:	f00a fb34 	bl	800d250 <can1_ams_s04_voltages_2_s04v10_encode>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b7d      	ldr	r3, [pc, #500]	@ (8002de4 <voltageSendCan+0xe4c>)
 8002bee:	70da      	strb	r2, [r3, #3]

    can1_ams_s04_voltages_2_pack(txData, &can1_ams_s04_voltages_2, CAN1_AMS_S04_VOLTAGES_2_LENGTH);
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	497c      	ldr	r1, [pc, #496]	@ (8002de4 <voltageSendCan+0xe4c>)
 8002bf4:	487c      	ldr	r0, [pc, #496]	@ (8002de8 <voltageSendCan+0xe50>)
 8002bf6:	f00a fa3d 	bl	800d074 <can1_ams_s04_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S04_VOLTAGES_2_FRAME_ID;
 8002bfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002dec <voltageSendCan+0xe54>)
 8002bfc:	f240 225f 	movw	r2, #607	@ 0x25f
 8002c00:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S04_VOLTAGES_2_LENGTH;
 8002c02:	4b7a      	ldr	r3, [pc, #488]	@ (8002dec <voltageSendCan+0xe54>)
 8002c04:	2205      	movs	r2, #5
 8002c06:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002c08:	4b78      	ldr	r3, [pc, #480]	@ (8002dec <voltageSendCan+0xe54>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002c0e:	4b77      	ldr	r3, [pc, #476]	@ (8002dec <voltageSendCan+0xe54>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002c14:	2300      	movs	r3, #0
 8002c16:	4a74      	ldr	r2, [pc, #464]	@ (8002de8 <voltageSendCan+0xe50>)
 8002c18:	4974      	ldr	r1, [pc, #464]	@ (8002dec <voltageSendCan+0xe54>)
 8002c1a:	4875      	ldr	r0, [pc, #468]	@ (8002df0 <voltageSendCan+0xe58>)
 8002c1c:	f003 ff0e 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f001 846c 	beq.w	8004500 <voltageSendCan+0x2568>
      Error_Handler();
 8002c28:	f002 fee4 	bl	80059f4 <Error_Handler>
    break;
 8002c2c:	f001 bc68 	b.w	8004500 <voltageSendCan+0x2568>

  case 8:
    can1_ams_s05_voltages_1.s05v01 = can1_ams_s05_voltages_1_s05v01_encode((float) rawVoltages[42] / 10000.0);
 8002c30:	4b6b      	ldr	r3, [pc, #428]	@ (8002de0 <voltageSendCan+0xe48>)
 8002c32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3e:	ee17 0a90 	vmov	r0, s15
 8002c42:	f7fd fc25 	bl	8000490 <__aeabi_f2d>
 8002c46:	a364      	add	r3, pc, #400	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fda2 	bl	8000794 <__aeabi_ddiv>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	ec43 2b17 	vmov	d7, r2, r3
 8002c58:	eeb0 0a47 	vmov.f32	s0, s14
 8002c5c:	eef0 0a67 	vmov.f32	s1, s15
 8002c60:	f00a fb9a 	bl	800d398 <can1_ams_s05_voltages_1_s05v01_encode>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b62      	ldr	r3, [pc, #392]	@ (8002df4 <voltageSendCan+0xe5c>)
 8002c6a:	701a      	strb	r2, [r3, #0]
    can1_ams_s05_voltages_1.s05v02 = can1_ams_s05_voltages_1_s05v02_encode((float) rawVoltages[43] / 10000.0);
 8002c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8002de0 <voltageSendCan+0xe48>)
 8002c6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7a:	ee17 0a90 	vmov	r0, s15
 8002c7e:	f7fd fc07 	bl	8000490 <__aeabi_f2d>
 8002c82:	a355      	add	r3, pc, #340	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fd84 	bl	8000794 <__aeabi_ddiv>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	ec43 2b17 	vmov	d7, r2, r3
 8002c94:	eeb0 0a47 	vmov.f32	s0, s14
 8002c98:	eef0 0a67 	vmov.f32	s1, s15
 8002c9c:	f00a fba8 	bl	800d3f0 <can1_ams_s05_voltages_1_s05v02_encode>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b53      	ldr	r3, [pc, #332]	@ (8002df4 <voltageSendCan+0xe5c>)
 8002ca6:	705a      	strb	r2, [r3, #1]
    can1_ams_s05_voltages_1.s05v03 = can1_ams_s05_voltages_1_s05v03_encode((float) rawVoltages[44] / 10000.0);
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8002de0 <voltageSendCan+0xe48>)
 8002caa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb6:	ee17 0a90 	vmov	r0, s15
 8002cba:	f7fd fbe9 	bl	8000490 <__aeabi_f2d>
 8002cbe:	a346      	add	r3, pc, #280	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fd66 	bl	8000794 <__aeabi_ddiv>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	ec43 2b17 	vmov	d7, r2, r3
 8002cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8002cd4:	eef0 0a67 	vmov.f32	s1, s15
 8002cd8:	f00a fbb6 	bl	800d448 <can1_ams_s05_voltages_1_s05v03_encode>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <voltageSendCan+0xe5c>)
 8002ce2:	709a      	strb	r2, [r3, #2]
    can1_ams_s05_voltages_1.s05v04 = can1_ams_s05_voltages_1_s05v04_encode((float) rawVoltages[45] / 10000.0);
 8002ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <voltageSendCan+0xe48>)
 8002ce6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf2:	ee17 0a90 	vmov	r0, s15
 8002cf6:	f7fd fbcb 	bl	8000490 <__aeabi_f2d>
 8002cfa:	a337      	add	r3, pc, #220	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd fd48 	bl	8000794 <__aeabi_ddiv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	ec43 2b17 	vmov	d7, r2, r3
 8002d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d10:	eef0 0a67 	vmov.f32	s1, s15
 8002d14:	f00a fbc4 	bl	800d4a0 <can1_ams_s05_voltages_1_s05v04_encode>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b35      	ldr	r3, [pc, #212]	@ (8002df4 <voltageSendCan+0xe5c>)
 8002d1e:	70da      	strb	r2, [r3, #3]
    can1_ams_s05_voltages_1.s05v05 = can1_ams_s05_voltages_1_s05v05_encode((float) rawVoltages[46] / 10000.0);
 8002d20:	4b2f      	ldr	r3, [pc, #188]	@ (8002de0 <voltageSendCan+0xe48>)
 8002d22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2e:	ee17 0a90 	vmov	r0, s15
 8002d32:	f7fd fbad 	bl	8000490 <__aeabi_f2d>
 8002d36:	a328      	add	r3, pc, #160	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd fd2a 	bl	8000794 <__aeabi_ddiv>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	ec43 2b17 	vmov	d7, r2, r3
 8002d48:	eeb0 0a47 	vmov.f32	s0, s14
 8002d4c:	eef0 0a67 	vmov.f32	s1, s15
 8002d50:	f00a fbd2 	bl	800d4f8 <can1_ams_s05_voltages_1_s05v05_encode>
 8002d54:	4603      	mov	r3, r0
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <voltageSendCan+0xe5c>)
 8002d5a:	711a      	strb	r2, [r3, #4]
    can1_ams_s05_voltages_1.s05v06 = can1_ams_s05_voltages_1_s05v06_encode((float) rawVoltages[47] / 10000.0);
 8002d5c:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <voltageSendCan+0xe48>)
 8002d5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	ee17 0a90 	vmov	r0, s15
 8002d6e:	f7fd fb8f 	bl	8000490 <__aeabi_f2d>
 8002d72:	a319      	add	r3, pc, #100	@ (adr r3, 8002dd8 <voltageSendCan+0xe40>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f7fd fd0c 	bl	8000794 <__aeabi_ddiv>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	ec43 2b17 	vmov	d7, r2, r3
 8002d84:	eeb0 0a47 	vmov.f32	s0, s14
 8002d88:	eef0 0a67 	vmov.f32	s1, s15
 8002d8c:	f00a fbe0 	bl	800d550 <can1_ams_s05_voltages_1_s05v06_encode>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b17      	ldr	r3, [pc, #92]	@ (8002df4 <voltageSendCan+0xe5c>)
 8002d96:	715a      	strb	r2, [r3, #5]

    can1_ams_s05_voltages_1_pack(txData, &can1_ams_s05_voltages_1, CAN1_AMS_S05_VOLTAGES_1_LENGTH);
 8002d98:	2206      	movs	r2, #6
 8002d9a:	4916      	ldr	r1, [pc, #88]	@ (8002df4 <voltageSendCan+0xe5c>)
 8002d9c:	4812      	ldr	r0, [pc, #72]	@ (8002de8 <voltageSendCan+0xe50>)
 8002d9e:	f00a fa81 	bl	800d2a4 <can1_ams_s05_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S05_VOLTAGES_1_FRAME_ID;
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <voltageSendCan+0xe54>)
 8002da4:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8002da8:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S05_VOLTAGES_1_LENGTH;
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <voltageSendCan+0xe54>)
 8002dac:	2206      	movs	r2, #6
 8002dae:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002db0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <voltageSendCan+0xe54>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002db6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <voltageSendCan+0xe54>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002de8 <voltageSendCan+0xe50>)
 8002dc0:	490a      	ldr	r1, [pc, #40]	@ (8002dec <voltageSendCan+0xe54>)
 8002dc2:	480b      	ldr	r0, [pc, #44]	@ (8002df0 <voltageSendCan+0xe58>)
 8002dc4:	f003 fe3a 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f001 839a 	beq.w	8004504 <voltageSendCan+0x256c>
      Error_Handler();
 8002dd0:	f002 fe10 	bl	80059f4 <Error_Handler>
    break;
 8002dd4:	f001 bb96 	b.w	8004504 <voltageSendCan+0x256c>
 8002dd8:	00000000 	.word	0x00000000
 8002ddc:	40c38800 	.word	0x40c38800
 8002de0:	20000480 	.word	0x20000480
 8002de4:	20000308 	.word	0x20000308
 8002de8:	20000288 	.word	0x20000288
 8002dec:	20000254 	.word	0x20000254
 8002df0:	2000011c 	.word	0x2000011c
 8002df4:	20000310 	.word	0x20000310

  case 9:
    can1_ams_s05_voltages_2.s05v07 = can1_ams_s05_voltages_2_s05v07_encode((float) rawVoltages[48] / 10000.0);
 8002df8:	4bc7      	ldr	r3, [pc, #796]	@ (8003118 <voltageSendCan+0x1180>)
 8002dfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e06:	ee17 0a90 	vmov	r0, s15
 8002e0a:	f7fd fb41 	bl	8000490 <__aeabi_f2d>
 8002e0e:	a3c0      	add	r3, pc, #768	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f7fd fcbe 	bl	8000794 <__aeabi_ddiv>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	ec43 2b17 	vmov	d7, r2, r3
 8002e20:	eeb0 0a47 	vmov.f32	s0, s14
 8002e24:	eef0 0a67 	vmov.f32	s1, s15
 8002e28:	f00a fc26 	bl	800d678 <can1_ams_s05_voltages_2_s05v07_encode>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4bba      	ldr	r3, [pc, #744]	@ (800311c <voltageSendCan+0x1184>)
 8002e32:	701a      	strb	r2, [r3, #0]
    can1_ams_s05_voltages_2.s05v08 = can1_ams_s05_voltages_2_s05v08_encode((float) rawVoltages[49] / 10000.0);
 8002e34:	4bb8      	ldr	r3, [pc, #736]	@ (8003118 <voltageSendCan+0x1180>)
 8002e36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e42:	ee17 0a90 	vmov	r0, s15
 8002e46:	f7fd fb23 	bl	8000490 <__aeabi_f2d>
 8002e4a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8002e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e50:	f7fd fca0 	bl	8000794 <__aeabi_ddiv>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	ec43 2b17 	vmov	d7, r2, r3
 8002e5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e60:	eef0 0a67 	vmov.f32	s1, s15
 8002e64:	f00a fc34 	bl	800d6d0 <can1_ams_s05_voltages_2_s05v08_encode>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4bab      	ldr	r3, [pc, #684]	@ (800311c <voltageSendCan+0x1184>)
 8002e6e:	705a      	strb	r2, [r3, #1]
    can1_ams_s05_voltages_2.s05v09 = can1_ams_s05_voltages_2_s05v09_encode((float) rawVoltages[50] / 10000.0);
 8002e70:	4ba9      	ldr	r3, [pc, #676]	@ (8003118 <voltageSendCan+0x1180>)
 8002e72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	ee17 0a90 	vmov	r0, s15
 8002e82:	f7fd fb05 	bl	8000490 <__aeabi_f2d>
 8002e86:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fc82 	bl	8000794 <__aeabi_ddiv>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	ec43 2b17 	vmov	d7, r2, r3
 8002e98:	eeb0 0a47 	vmov.f32	s0, s14
 8002e9c:	eef0 0a67 	vmov.f32	s1, s15
 8002ea0:	f00a fc42 	bl	800d728 <can1_ams_s05_voltages_2_s05v09_encode>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b9c      	ldr	r3, [pc, #624]	@ (800311c <voltageSendCan+0x1184>)
 8002eaa:	709a      	strb	r2, [r3, #2]
    can1_ams_s05_voltages_2.s05v10 = can1_ams_s05_voltages_2_s05v10_encode((float) rawVoltages[51] / 10000.0);
 8002eac:	4b9a      	ldr	r3, [pc, #616]	@ (8003118 <voltageSendCan+0x1180>)
 8002eae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eba:	ee17 0a90 	vmov	r0, s15
 8002ebe:	f7fd fae7 	bl	8000490 <__aeabi_f2d>
 8002ec2:	a393      	add	r3, pc, #588	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fc64 	bl	8000794 <__aeabi_ddiv>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	ec43 2b17 	vmov	d7, r2, r3
 8002ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ed8:	eef0 0a67 	vmov.f32	s1, s15
 8002edc:	f00a fc50 	bl	800d780 <can1_ams_s05_voltages_2_s05v10_encode>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b8d      	ldr	r3, [pc, #564]	@ (800311c <voltageSendCan+0x1184>)
 8002ee6:	70da      	strb	r2, [r3, #3]
    can1_ams_s05_voltages_2.s05v11 = can1_ams_s05_voltages_2_s05v11_encode((float) rawVoltages[52] / 10000.0);
 8002ee8:	4b8b      	ldr	r3, [pc, #556]	@ (8003118 <voltageSendCan+0x1180>)
 8002eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	ee17 0a90 	vmov	r0, s15
 8002efa:	f7fd fac9 	bl	8000490 <__aeabi_f2d>
 8002efe:	a384      	add	r3, pc, #528	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fc46 	bl	8000794 <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	ec43 2b17 	vmov	d7, r2, r3
 8002f10:	eeb0 0a47 	vmov.f32	s0, s14
 8002f14:	eef0 0a67 	vmov.f32	s1, s15
 8002f18:	f00a fc5e 	bl	800d7d8 <can1_ams_s05_voltages_2_s05v11_encode>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b7e      	ldr	r3, [pc, #504]	@ (800311c <voltageSendCan+0x1184>)
 8002f22:	711a      	strb	r2, [r3, #4]

    can1_ams_s05_voltages_2_pack(txData, &can1_ams_s05_voltages_2, CAN1_AMS_S05_VOLTAGES_2_LENGTH);
 8002f24:	2205      	movs	r2, #5
 8002f26:	497d      	ldr	r1, [pc, #500]	@ (800311c <voltageSendCan+0x1184>)
 8002f28:	487d      	ldr	r0, [pc, #500]	@ (8003120 <voltageSendCan+0x1188>)
 8002f2a:	f00a fb3b 	bl	800d5a4 <can1_ams_s05_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S05_VOLTAGES_2_FRAME_ID;
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003124 <voltageSendCan+0x118c>)
 8002f30:	f240 2261 	movw	r2, #609	@ 0x261
 8002f34:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S05_VOLTAGES_2_LENGTH;
 8002f36:	4b7b      	ldr	r3, [pc, #492]	@ (8003124 <voltageSendCan+0x118c>)
 8002f38:	2205      	movs	r2, #5
 8002f3a:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002f3c:	4b79      	ldr	r3, [pc, #484]	@ (8003124 <voltageSendCan+0x118c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002f42:	4b78      	ldr	r3, [pc, #480]	@ (8003124 <voltageSendCan+0x118c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	4a75      	ldr	r2, [pc, #468]	@ (8003120 <voltageSendCan+0x1188>)
 8002f4c:	4975      	ldr	r1, [pc, #468]	@ (8003124 <voltageSendCan+0x118c>)
 8002f4e:	4876      	ldr	r0, [pc, #472]	@ (8003128 <voltageSendCan+0x1190>)
 8002f50:	f003 fd74 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f001 82d6 	beq.w	8004508 <voltageSendCan+0x2570>
      Error_Handler();
 8002f5c:	f002 fd4a 	bl	80059f4 <Error_Handler>
    break;
 8002f60:	f001 bad2 	b.w	8004508 <voltageSendCan+0x2570>

  case 10:
    can1_ams_s06_voltages_1.s06v01 = can1_ams_s06_voltages_1_s06v01_encode((float) rawVoltages[53] / 10000.0);
 8002f64:	4b6c      	ldr	r3, [pc, #432]	@ (8003118 <voltageSendCan+0x1180>)
 8002f66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f72:	ee17 0a90 	vmov	r0, s15
 8002f76:	f7fd fa8b 	bl	8000490 <__aeabi_f2d>
 8002f7a:	a365      	add	r3, pc, #404	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f7fd fc08 	bl	8000794 <__aeabi_ddiv>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	ec43 2b17 	vmov	d7, r2, r3
 8002f8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f90:	eef0 0a67 	vmov.f32	s1, s15
 8002f94:	f00a fcc4 	bl	800d920 <can1_ams_s06_voltages_1_s06v01_encode>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b63      	ldr	r3, [pc, #396]	@ (800312c <voltageSendCan+0x1194>)
 8002f9e:	701a      	strb	r2, [r3, #0]
    can1_ams_s06_voltages_1.s06v02 = can1_ams_s06_voltages_1_s06v02_encode((float) rawVoltages[54] / 10000.0);
 8002fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8003118 <voltageSendCan+0x1180>)
 8002fa2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fae:	ee17 0a90 	vmov	r0, s15
 8002fb2:	f7fd fa6d 	bl	8000490 <__aeabi_f2d>
 8002fb6:	a356      	add	r3, pc, #344	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd fbea 	bl	8000794 <__aeabi_ddiv>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	ec43 2b17 	vmov	d7, r2, r3
 8002fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8002fcc:	eef0 0a67 	vmov.f32	s1, s15
 8002fd0:	f00a fcd2 	bl	800d978 <can1_ams_s06_voltages_1_s06v02_encode>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b54      	ldr	r3, [pc, #336]	@ (800312c <voltageSendCan+0x1194>)
 8002fda:	705a      	strb	r2, [r3, #1]
    can1_ams_s06_voltages_1.s06v03 = can1_ams_s06_voltages_1_s06v03_encode((float) rawVoltages[55] / 10000.0);
 8002fdc:	4b4e      	ldr	r3, [pc, #312]	@ (8003118 <voltageSendCan+0x1180>)
 8002fde:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	ee17 0a90 	vmov	r0, s15
 8002fee:	f7fd fa4f 	bl	8000490 <__aeabi_f2d>
 8002ff2:	a347      	add	r3, pc, #284	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fbcc 	bl	8000794 <__aeabi_ddiv>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	ec43 2b17 	vmov	d7, r2, r3
 8003004:	eeb0 0a47 	vmov.f32	s0, s14
 8003008:	eef0 0a67 	vmov.f32	s1, s15
 800300c:	f00a fce0 	bl	800d9d0 <can1_ams_s06_voltages_1_s06v03_encode>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b45      	ldr	r3, [pc, #276]	@ (800312c <voltageSendCan+0x1194>)
 8003016:	709a      	strb	r2, [r3, #2]
    can1_ams_s06_voltages_1.s06v04 = can1_ams_s06_voltages_1_s06v04_encode((float) rawVoltages[56] / 10000.0);
 8003018:	4b3f      	ldr	r3, [pc, #252]	@ (8003118 <voltageSendCan+0x1180>)
 800301a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	ee17 0a90 	vmov	r0, s15
 800302a:	f7fd fa31 	bl	8000490 <__aeabi_f2d>
 800302e:	a338      	add	r3, pc, #224	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	f7fd fbae 	bl	8000794 <__aeabi_ddiv>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	ec43 2b17 	vmov	d7, r2, r3
 8003040:	eeb0 0a47 	vmov.f32	s0, s14
 8003044:	eef0 0a67 	vmov.f32	s1, s15
 8003048:	f00a fcee 	bl	800da28 <can1_ams_s06_voltages_1_s06v04_encode>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	4b36      	ldr	r3, [pc, #216]	@ (800312c <voltageSendCan+0x1194>)
 8003052:	70da      	strb	r2, [r3, #3]
    can1_ams_s06_voltages_1.s06v05 = can1_ams_s06_voltages_1_s06v05_encode((float) rawVoltages[57] / 10000.0);
 8003054:	4b30      	ldr	r3, [pc, #192]	@ (8003118 <voltageSendCan+0x1180>)
 8003056:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	ee17 0a90 	vmov	r0, s15
 8003066:	f7fd fa13 	bl	8000490 <__aeabi_f2d>
 800306a:	a329      	add	r3, pc, #164	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f7fd fb90 	bl	8000794 <__aeabi_ddiv>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	ec43 2b17 	vmov	d7, r2, r3
 800307c:	eeb0 0a47 	vmov.f32	s0, s14
 8003080:	eef0 0a67 	vmov.f32	s1, s15
 8003084:	f00a fcfc 	bl	800da80 <can1_ams_s06_voltages_1_s06v05_encode>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	4b27      	ldr	r3, [pc, #156]	@ (800312c <voltageSendCan+0x1194>)
 800308e:	711a      	strb	r2, [r3, #4]
    can1_ams_s06_voltages_1.s06v06 = can1_ams_s06_voltages_1_s06v06_encode((float) rawVoltages[58] / 10000.0);
 8003090:	4b21      	ldr	r3, [pc, #132]	@ (8003118 <voltageSendCan+0x1180>)
 8003092:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309e:	ee17 0a90 	vmov	r0, s15
 80030a2:	f7fd f9f5 	bl	8000490 <__aeabi_f2d>
 80030a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8003110 <voltageSendCan+0x1178>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd fb72 	bl	8000794 <__aeabi_ddiv>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	ec43 2b17 	vmov	d7, r2, r3
 80030b8:	eeb0 0a47 	vmov.f32	s0, s14
 80030bc:	eef0 0a67 	vmov.f32	s1, s15
 80030c0:	f00a fd0a 	bl	800dad8 <can1_ams_s06_voltages_1_s06v06_encode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b18      	ldr	r3, [pc, #96]	@ (800312c <voltageSendCan+0x1194>)
 80030ca:	715a      	strb	r2, [r3, #5]

    can1_ams_s06_voltages_1_pack(txData, &can1_ams_s06_voltages_1, CAN1_AMS_S06_VOLTAGES_1_LENGTH);
 80030cc:	2206      	movs	r2, #6
 80030ce:	4917      	ldr	r1, [pc, #92]	@ (800312c <voltageSendCan+0x1194>)
 80030d0:	4813      	ldr	r0, [pc, #76]	@ (8003120 <voltageSendCan+0x1188>)
 80030d2:	f00a fbab 	bl	800d82c <can1_ams_s06_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S06_VOLTAGES_1_FRAME_ID;
 80030d6:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <voltageSendCan+0x118c>)
 80030d8:	f240 2262 	movw	r2, #610	@ 0x262
 80030dc:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S06_VOLTAGES_1_LENGTH;
 80030de:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <voltageSendCan+0x118c>)
 80030e0:	2206      	movs	r2, #6
 80030e2:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80030e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003124 <voltageSendCan+0x118c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80030ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003124 <voltageSendCan+0x118c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80030f0:	2300      	movs	r3, #0
 80030f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003120 <voltageSendCan+0x1188>)
 80030f4:	490b      	ldr	r1, [pc, #44]	@ (8003124 <voltageSendCan+0x118c>)
 80030f6:	480c      	ldr	r0, [pc, #48]	@ (8003128 <voltageSendCan+0x1190>)
 80030f8:	f003 fca0 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f001 8204 	beq.w	800450c <voltageSendCan+0x2574>
      Error_Handler();
 8003104:	f002 fc76 	bl	80059f4 <Error_Handler>
    break;
 8003108:	f001 ba00 	b.w	800450c <voltageSendCan+0x2574>
 800310c:	f3af 8000 	nop.w
 8003110:	00000000 	.word	0x00000000
 8003114:	40c38800 	.word	0x40c38800
 8003118:	20000480 	.word	0x20000480
 800311c:	20000318 	.word	0x20000318
 8003120:	20000288 	.word	0x20000288
 8003124:	20000254 	.word	0x20000254
 8003128:	2000011c 	.word	0x2000011c
 800312c:	20000320 	.word	0x20000320

  case 11:
    can1_ams_s06_voltages_2.s06v07 = can1_ams_s06_voltages_2_s06v07_encode((float) rawVoltages[59] / 10000.0);
 8003130:	4bb7      	ldr	r3, [pc, #732]	@ (8003410 <voltageSendCan+0x1478>)
 8003132:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	ee17 0a90 	vmov	r0, s15
 8003142:	f7fd f9a5 	bl	8000490 <__aeabi_f2d>
 8003146:	a3b0      	add	r3, pc, #704	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f7fd fb22 	bl	8000794 <__aeabi_ddiv>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	ec43 2b17 	vmov	d7, r2, r3
 8003158:	eeb0 0a47 	vmov.f32	s0, s14
 800315c:	eef0 0a67 	vmov.f32	s1, s15
 8003160:	f00a fd4e 	bl	800dc00 <can1_ams_s06_voltages_2_s06v07_encode>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	4baa      	ldr	r3, [pc, #680]	@ (8003414 <voltageSendCan+0x147c>)
 800316a:	701a      	strb	r2, [r3, #0]
    can1_ams_s06_voltages_2.s06v08 = can1_ams_s06_voltages_2_s06v08_encode((float) rawVoltages[60] / 10000.0);
 800316c:	4ba8      	ldr	r3, [pc, #672]	@ (8003410 <voltageSendCan+0x1478>)
 800316e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317a:	ee17 0a90 	vmov	r0, s15
 800317e:	f7fd f987 	bl	8000490 <__aeabi_f2d>
 8003182:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fd fb04 	bl	8000794 <__aeabi_ddiv>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	ec43 2b17 	vmov	d7, r2, r3
 8003194:	eeb0 0a47 	vmov.f32	s0, s14
 8003198:	eef0 0a67 	vmov.f32	s1, s15
 800319c:	f00a fd5c 	bl	800dc58 <can1_ams_s06_voltages_2_s06v08_encode>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003414 <voltageSendCan+0x147c>)
 80031a6:	705a      	strb	r2, [r3, #1]
    can1_ams_s06_voltages_2.s06v09 = can1_ams_s06_voltages_2_s06v09_encode((float) rawVoltages[61] / 10000.0);
 80031a8:	4b99      	ldr	r3, [pc, #612]	@ (8003410 <voltageSendCan+0x1478>)
 80031aa:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	ee17 0a90 	vmov	r0, s15
 80031ba:	f7fd f969 	bl	8000490 <__aeabi_f2d>
 80031be:	a392      	add	r3, pc, #584	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f7fd fae6 	bl	8000794 <__aeabi_ddiv>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	ec43 2b17 	vmov	d7, r2, r3
 80031d0:	eeb0 0a47 	vmov.f32	s0, s14
 80031d4:	eef0 0a67 	vmov.f32	s1, s15
 80031d8:	f00a fd6a 	bl	800dcb0 <can1_ams_s06_voltages_2_s06v09_encode>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003414 <voltageSendCan+0x147c>)
 80031e2:	709a      	strb	r2, [r3, #2]
    can1_ams_s06_voltages_2.s06v10 = can1_ams_s06_voltages_2_s06v10_encode((float) rawVoltages[62] / 10000.0);
 80031e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003410 <voltageSendCan+0x1478>)
 80031e6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	ee17 0a90 	vmov	r0, s15
 80031f6:	f7fd f94b 	bl	8000490 <__aeabi_f2d>
 80031fa:	a383      	add	r3, pc, #524	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fd fac8 	bl	8000794 <__aeabi_ddiv>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	ec43 2b17 	vmov	d7, r2, r3
 800320c:	eeb0 0a47 	vmov.f32	s0, s14
 8003210:	eef0 0a67 	vmov.f32	s1, s15
 8003214:	f00a fd78 	bl	800dd08 <can1_ams_s06_voltages_2_s06v10_encode>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b7d      	ldr	r3, [pc, #500]	@ (8003414 <voltageSendCan+0x147c>)
 800321e:	70da      	strb	r2, [r3, #3]

    can1_ams_s06_voltages_2_pack(txData, &can1_ams_s06_voltages_2, CAN1_AMS_S06_VOLTAGES_2_LENGTH);
 8003220:	2205      	movs	r2, #5
 8003222:	497c      	ldr	r1, [pc, #496]	@ (8003414 <voltageSendCan+0x147c>)
 8003224:	487c      	ldr	r0, [pc, #496]	@ (8003418 <voltageSendCan+0x1480>)
 8003226:	f00a fc81 	bl	800db2c <can1_ams_s06_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S06_VOLTAGES_2_FRAME_ID;
 800322a:	4b7c      	ldr	r3, [pc, #496]	@ (800341c <voltageSendCan+0x1484>)
 800322c:	f240 2263 	movw	r2, #611	@ 0x263
 8003230:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S06_VOLTAGES_2_LENGTH;
 8003232:	4b7a      	ldr	r3, [pc, #488]	@ (800341c <voltageSendCan+0x1484>)
 8003234:	2205      	movs	r2, #5
 8003236:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003238:	4b78      	ldr	r3, [pc, #480]	@ (800341c <voltageSendCan+0x1484>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800323e:	4b77      	ldr	r3, [pc, #476]	@ (800341c <voltageSendCan+0x1484>)
 8003240:	2200      	movs	r2, #0
 8003242:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003244:	2300      	movs	r3, #0
 8003246:	4a74      	ldr	r2, [pc, #464]	@ (8003418 <voltageSendCan+0x1480>)
 8003248:	4974      	ldr	r1, [pc, #464]	@ (800341c <voltageSendCan+0x1484>)
 800324a:	4875      	ldr	r0, [pc, #468]	@ (8003420 <voltageSendCan+0x1488>)
 800324c:	f003 fbf6 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	f001 815c 	beq.w	8004510 <voltageSendCan+0x2578>
      Error_Handler();
 8003258:	f002 fbcc 	bl	80059f4 <Error_Handler>
    break;
 800325c:	f001 b958 	b.w	8004510 <voltageSendCan+0x2578>

  case 12:
    can1_ams_s07_voltages_1.s07v01 = can1_ams_s07_voltages_1_s07v01_encode((float) rawVoltages[63] / 10000.0);
 8003260:	4b6b      	ldr	r3, [pc, #428]	@ (8003410 <voltageSendCan+0x1478>)
 8003262:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	ee17 0a90 	vmov	r0, s15
 8003272:	f7fd f90d 	bl	8000490 <__aeabi_f2d>
 8003276:	a364      	add	r3, pc, #400	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd fa8a 	bl	8000794 <__aeabi_ddiv>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	ec43 2b17 	vmov	d7, r2, r3
 8003288:	eeb0 0a47 	vmov.f32	s0, s14
 800328c:	eef0 0a67 	vmov.f32	s1, s15
 8003290:	f00a fdde 	bl	800de50 <can1_ams_s07_voltages_1_s07v01_encode>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	4b62      	ldr	r3, [pc, #392]	@ (8003424 <voltageSendCan+0x148c>)
 800329a:	701a      	strb	r2, [r3, #0]
    can1_ams_s07_voltages_1.s07v02 = can1_ams_s07_voltages_1_s07v02_encode((float) rawVoltages[64] / 10000.0);
 800329c:	4b5c      	ldr	r3, [pc, #368]	@ (8003410 <voltageSendCan+0x1478>)
 800329e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	ee17 0a90 	vmov	r0, s15
 80032ae:	f7fd f8ef 	bl	8000490 <__aeabi_f2d>
 80032b2:	a355      	add	r3, pc, #340	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f7fd fa6c 	bl	8000794 <__aeabi_ddiv>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	ec43 2b17 	vmov	d7, r2, r3
 80032c4:	eeb0 0a47 	vmov.f32	s0, s14
 80032c8:	eef0 0a67 	vmov.f32	s1, s15
 80032cc:	f00a fdec 	bl	800dea8 <can1_ams_s07_voltages_1_s07v02_encode>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <voltageSendCan+0x148c>)
 80032d6:	705a      	strb	r2, [r3, #1]
    can1_ams_s07_voltages_1.s07v03 = can1_ams_s07_voltages_1_s07v03_encode((float) rawVoltages[65] / 10000.0);
 80032d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003410 <voltageSendCan+0x1478>)
 80032da:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e6:	ee17 0a90 	vmov	r0, s15
 80032ea:	f7fd f8d1 	bl	8000490 <__aeabi_f2d>
 80032ee:	a346      	add	r3, pc, #280	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fd fa4e 	bl	8000794 <__aeabi_ddiv>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	ec43 2b17 	vmov	d7, r2, r3
 8003300:	eeb0 0a47 	vmov.f32	s0, s14
 8003304:	eef0 0a67 	vmov.f32	s1, s15
 8003308:	f00a fdfa 	bl	800df00 <can1_ams_s07_voltages_1_s07v03_encode>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	4b44      	ldr	r3, [pc, #272]	@ (8003424 <voltageSendCan+0x148c>)
 8003312:	709a      	strb	r2, [r3, #2]
    can1_ams_s07_voltages_1.s07v04 = can1_ams_s07_voltages_1_s07v04_encode((float) rawVoltages[66] / 10000.0);
 8003314:	4b3e      	ldr	r3, [pc, #248]	@ (8003410 <voltageSendCan+0x1478>)
 8003316:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	ee17 0a90 	vmov	r0, s15
 8003326:	f7fd f8b3 	bl	8000490 <__aeabi_f2d>
 800332a:	a337      	add	r3, pc, #220	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f7fd fa30 	bl	8000794 <__aeabi_ddiv>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	ec43 2b17 	vmov	d7, r2, r3
 800333c:	eeb0 0a47 	vmov.f32	s0, s14
 8003340:	eef0 0a67 	vmov.f32	s1, s15
 8003344:	f00a fe08 	bl	800df58 <can1_ams_s07_voltages_1_s07v04_encode>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	4b35      	ldr	r3, [pc, #212]	@ (8003424 <voltageSendCan+0x148c>)
 800334e:	70da      	strb	r2, [r3, #3]
    can1_ams_s07_voltages_1.s07v05 = can1_ams_s07_voltages_1_s07v05_encode((float) rawVoltages[67] / 10000.0);
 8003350:	4b2f      	ldr	r3, [pc, #188]	@ (8003410 <voltageSendCan+0x1478>)
 8003352:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335e:	ee17 0a90 	vmov	r0, s15
 8003362:	f7fd f895 	bl	8000490 <__aeabi_f2d>
 8003366:	a328      	add	r3, pc, #160	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f7fd fa12 	bl	8000794 <__aeabi_ddiv>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	ec43 2b17 	vmov	d7, r2, r3
 8003378:	eeb0 0a47 	vmov.f32	s0, s14
 800337c:	eef0 0a67 	vmov.f32	s1, s15
 8003380:	f00a fe16 	bl	800dfb0 <can1_ams_s07_voltages_1_s07v05_encode>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	4b26      	ldr	r3, [pc, #152]	@ (8003424 <voltageSendCan+0x148c>)
 800338a:	711a      	strb	r2, [r3, #4]
    can1_ams_s07_voltages_1.s07v06 = can1_ams_s07_voltages_1_s07v06_encode((float) rawVoltages[68] / 10000.0);
 800338c:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <voltageSendCan+0x1478>)
 800338e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339a:	ee17 0a90 	vmov	r0, s15
 800339e:	f7fd f877 	bl	8000490 <__aeabi_f2d>
 80033a2:	a319      	add	r3, pc, #100	@ (adr r3, 8003408 <voltageSendCan+0x1470>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fd f9f4 	bl	8000794 <__aeabi_ddiv>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	ec43 2b17 	vmov	d7, r2, r3
 80033b4:	eeb0 0a47 	vmov.f32	s0, s14
 80033b8:	eef0 0a67 	vmov.f32	s1, s15
 80033bc:	f00a fe24 	bl	800e008 <can1_ams_s07_voltages_1_s07v06_encode>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b17      	ldr	r3, [pc, #92]	@ (8003424 <voltageSendCan+0x148c>)
 80033c6:	715a      	strb	r2, [r3, #5]

    can1_ams_s07_voltages_1_pack(txData, &can1_ams_s07_voltages_1, CAN1_AMS_S07_VOLTAGES_1_LENGTH);
 80033c8:	2206      	movs	r2, #6
 80033ca:	4916      	ldr	r1, [pc, #88]	@ (8003424 <voltageSendCan+0x148c>)
 80033cc:	4812      	ldr	r0, [pc, #72]	@ (8003418 <voltageSendCan+0x1480>)
 80033ce:	f00a fcc5 	bl	800dd5c <can1_ams_s07_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S07_VOLTAGES_1_FRAME_ID;
 80033d2:	4b12      	ldr	r3, [pc, #72]	@ (800341c <voltageSendCan+0x1484>)
 80033d4:	f44f 7219 	mov.w	r2, #612	@ 0x264
 80033d8:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S07_VOLTAGES_1_LENGTH;
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <voltageSendCan+0x1484>)
 80033dc:	2206      	movs	r2, #6
 80033de:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80033e0:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <voltageSendCan+0x1484>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80033e6:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <voltageSendCan+0x1484>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80033ec:	2300      	movs	r3, #0
 80033ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003418 <voltageSendCan+0x1480>)
 80033f0:	490a      	ldr	r1, [pc, #40]	@ (800341c <voltageSendCan+0x1484>)
 80033f2:	480b      	ldr	r0, [pc, #44]	@ (8003420 <voltageSendCan+0x1488>)
 80033f4:	f003 fb22 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f001 808a 	beq.w	8004514 <voltageSendCan+0x257c>
      Error_Handler();
 8003400:	f002 faf8 	bl	80059f4 <Error_Handler>
    break;
 8003404:	f001 b886 	b.w	8004514 <voltageSendCan+0x257c>
 8003408:	00000000 	.word	0x00000000
 800340c:	40c38800 	.word	0x40c38800
 8003410:	20000480 	.word	0x20000480
 8003414:	20000328 	.word	0x20000328
 8003418:	20000288 	.word	0x20000288
 800341c:	20000254 	.word	0x20000254
 8003420:	2000011c 	.word	0x2000011c
 8003424:	20000330 	.word	0x20000330

  case 13:
    can1_ams_s07_voltages_2.s07v07 = can1_ams_s07_voltages_2_s07v07_encode((float) rawVoltages[69] / 10000.0);
 8003428:	4bc7      	ldr	r3, [pc, #796]	@ (8003748 <voltageSendCan+0x17b0>)
 800342a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	ee17 0a90 	vmov	r0, s15
 800343a:	f7fd f829 	bl	8000490 <__aeabi_f2d>
 800343e:	a3c0      	add	r3, pc, #768	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f7fd f9a6 	bl	8000794 <__aeabi_ddiv>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	ec43 2b17 	vmov	d7, r2, r3
 8003450:	eeb0 0a47 	vmov.f32	s0, s14
 8003454:	eef0 0a67 	vmov.f32	s1, s15
 8003458:	f00a fe6a 	bl	800e130 <can1_ams_s07_voltages_2_s07v07_encode>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	4bba      	ldr	r3, [pc, #744]	@ (800374c <voltageSendCan+0x17b4>)
 8003462:	701a      	strb	r2, [r3, #0]
    can1_ams_s07_voltages_2.s07v08 = can1_ams_s07_voltages_2_s07v08_encode((float) rawVoltages[70] / 10000.0);
 8003464:	4bb8      	ldr	r3, [pc, #736]	@ (8003748 <voltageSendCan+0x17b0>)
 8003466:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	ee17 0a90 	vmov	r0, s15
 8003476:	f7fd f80b 	bl	8000490 <__aeabi_f2d>
 800347a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f988 	bl	8000794 <__aeabi_ddiv>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	ec43 2b17 	vmov	d7, r2, r3
 800348c:	eeb0 0a47 	vmov.f32	s0, s14
 8003490:	eef0 0a67 	vmov.f32	s1, s15
 8003494:	f00a fe78 	bl	800e188 <can1_ams_s07_voltages_2_s07v08_encode>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	4bab      	ldr	r3, [pc, #684]	@ (800374c <voltageSendCan+0x17b4>)
 800349e:	705a      	strb	r2, [r3, #1]
    can1_ams_s07_voltages_2.s07v09 = can1_ams_s07_voltages_2_s07v09_encode((float) rawVoltages[71] / 10000.0);
 80034a0:	4ba9      	ldr	r3, [pc, #676]	@ (8003748 <voltageSendCan+0x17b0>)
 80034a2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ae:	ee17 0a90 	vmov	r0, s15
 80034b2:	f7fc ffed 	bl	8000490 <__aeabi_f2d>
 80034b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fd f96a 	bl	8000794 <__aeabi_ddiv>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	ec43 2b17 	vmov	d7, r2, r3
 80034c8:	eeb0 0a47 	vmov.f32	s0, s14
 80034cc:	eef0 0a67 	vmov.f32	s1, s15
 80034d0:	f00a fe86 	bl	800e1e0 <can1_ams_s07_voltages_2_s07v09_encode>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b9c      	ldr	r3, [pc, #624]	@ (800374c <voltageSendCan+0x17b4>)
 80034da:	709a      	strb	r2, [r3, #2]
    can1_ams_s07_voltages_2.s07v10 = can1_ams_s07_voltages_2_s07v10_encode((float) rawVoltages[72] / 10000.0);
 80034dc:	4b9a      	ldr	r3, [pc, #616]	@ (8003748 <voltageSendCan+0x17b0>)
 80034de:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	ee17 0a90 	vmov	r0, s15
 80034ee:	f7fc ffcf 	bl	8000490 <__aeabi_f2d>
 80034f2:	a393      	add	r3, pc, #588	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fd f94c 	bl	8000794 <__aeabi_ddiv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	ec43 2b17 	vmov	d7, r2, r3
 8003504:	eeb0 0a47 	vmov.f32	s0, s14
 8003508:	eef0 0a67 	vmov.f32	s1, s15
 800350c:	f00a fe94 	bl	800e238 <can1_ams_s07_voltages_2_s07v10_encode>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	4b8d      	ldr	r3, [pc, #564]	@ (800374c <voltageSendCan+0x17b4>)
 8003516:	70da      	strb	r2, [r3, #3]
    can1_ams_s07_voltages_2.s07v11 = can1_ams_s07_voltages_2_s07v11_encode((float) rawVoltages[73] / 10000.0);
 8003518:	4b8b      	ldr	r3, [pc, #556]	@ (8003748 <voltageSendCan+0x17b0>)
 800351a:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	ee17 0a90 	vmov	r0, s15
 800352a:	f7fc ffb1 	bl	8000490 <__aeabi_f2d>
 800352e:	a384      	add	r3, pc, #528	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fd f92e 	bl	8000794 <__aeabi_ddiv>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	ec43 2b17 	vmov	d7, r2, r3
 8003540:	eeb0 0a47 	vmov.f32	s0, s14
 8003544:	eef0 0a67 	vmov.f32	s1, s15
 8003548:	f00a fea2 	bl	800e290 <can1_ams_s07_voltages_2_s07v11_encode>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	4b7e      	ldr	r3, [pc, #504]	@ (800374c <voltageSendCan+0x17b4>)
 8003552:	711a      	strb	r2, [r3, #4]

    can1_ams_s07_voltages_2_pack(txData, &can1_ams_s07_voltages_2, CAN1_AMS_S07_VOLTAGES_2_LENGTH);
 8003554:	2205      	movs	r2, #5
 8003556:	497d      	ldr	r1, [pc, #500]	@ (800374c <voltageSendCan+0x17b4>)
 8003558:	487d      	ldr	r0, [pc, #500]	@ (8003750 <voltageSendCan+0x17b8>)
 800355a:	f00a fd7f 	bl	800e05c <can1_ams_s07_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S07_VOLTAGES_2_FRAME_ID;
 800355e:	4b7d      	ldr	r3, [pc, #500]	@ (8003754 <voltageSendCan+0x17bc>)
 8003560:	f240 2265 	movw	r2, #613	@ 0x265
 8003564:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S07_VOLTAGES_2_LENGTH;
 8003566:	4b7b      	ldr	r3, [pc, #492]	@ (8003754 <voltageSendCan+0x17bc>)
 8003568:	2205      	movs	r2, #5
 800356a:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800356c:	4b79      	ldr	r3, [pc, #484]	@ (8003754 <voltageSendCan+0x17bc>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003572:	4b78      	ldr	r3, [pc, #480]	@ (8003754 <voltageSendCan+0x17bc>)
 8003574:	2200      	movs	r2, #0
 8003576:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003578:	2300      	movs	r3, #0
 800357a:	4a75      	ldr	r2, [pc, #468]	@ (8003750 <voltageSendCan+0x17b8>)
 800357c:	4975      	ldr	r1, [pc, #468]	@ (8003754 <voltageSendCan+0x17bc>)
 800357e:	4876      	ldr	r0, [pc, #472]	@ (8003758 <voltageSendCan+0x17c0>)
 8003580:	f003 fa5c 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 87c6 	beq.w	8004518 <voltageSendCan+0x2580>
      Error_Handler();
 800358c:	f002 fa32 	bl	80059f4 <Error_Handler>
    break;
 8003590:	f000 bfc2 	b.w	8004518 <voltageSendCan+0x2580>

  case 14:
    can1_ams_s08_voltages_1.s08v01 = can1_ams_s08_voltages_1_s08v01_encode((float) rawVoltages[74] / 10000.0);
 8003594:	4b6c      	ldr	r3, [pc, #432]	@ (8003748 <voltageSendCan+0x17b0>)
 8003596:	f8b3 3094 	ldrh.w	r3, [r3, #148]	@ 0x94
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a2:	ee17 0a90 	vmov	r0, s15
 80035a6:	f7fc ff73 	bl	8000490 <__aeabi_f2d>
 80035aa:	a365      	add	r3, pc, #404	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f7fd f8f0 	bl	8000794 <__aeabi_ddiv>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	ec43 2b17 	vmov	d7, r2, r3
 80035bc:	eeb0 0a47 	vmov.f32	s0, s14
 80035c0:	eef0 0a67 	vmov.f32	s1, s15
 80035c4:	f00a ff08 	bl	800e3d8 <can1_ams_s08_voltages_1_s08v01_encode>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b63      	ldr	r3, [pc, #396]	@ (800375c <voltageSendCan+0x17c4>)
 80035ce:	701a      	strb	r2, [r3, #0]
    can1_ams_s08_voltages_1.s08v02 = can1_ams_s08_voltages_1_s08v02_encode((float) rawVoltages[75] / 10000.0);
 80035d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003748 <voltageSendCan+0x17b0>)
 80035d2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035de:	ee17 0a90 	vmov	r0, s15
 80035e2:	f7fc ff55 	bl	8000490 <__aeabi_f2d>
 80035e6:	a356      	add	r3, pc, #344	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f7fd f8d2 	bl	8000794 <__aeabi_ddiv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	ec43 2b17 	vmov	d7, r2, r3
 80035f8:	eeb0 0a47 	vmov.f32	s0, s14
 80035fc:	eef0 0a67 	vmov.f32	s1, s15
 8003600:	f00a ff16 	bl	800e430 <can1_ams_s08_voltages_1_s08v02_encode>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	4b54      	ldr	r3, [pc, #336]	@ (800375c <voltageSendCan+0x17c4>)
 800360a:	705a      	strb	r2, [r3, #1]
    can1_ams_s08_voltages_1.s08v03 = can1_ams_s08_voltages_1_s08v03_encode((float) rawVoltages[76] / 10000.0);
 800360c:	4b4e      	ldr	r3, [pc, #312]	@ (8003748 <voltageSendCan+0x17b0>)
 800360e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361a:	ee17 0a90 	vmov	r0, s15
 800361e:	f7fc ff37 	bl	8000490 <__aeabi_f2d>
 8003622:	a347      	add	r3, pc, #284	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f7fd f8b4 	bl	8000794 <__aeabi_ddiv>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	ec43 2b17 	vmov	d7, r2, r3
 8003634:	eeb0 0a47 	vmov.f32	s0, s14
 8003638:	eef0 0a67 	vmov.f32	s1, s15
 800363c:	f00a ff24 	bl	800e488 <can1_ams_s08_voltages_1_s08v03_encode>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	4b45      	ldr	r3, [pc, #276]	@ (800375c <voltageSendCan+0x17c4>)
 8003646:	709a      	strb	r2, [r3, #2]
    can1_ams_s08_voltages_1.s08v04 = can1_ams_s08_voltages_1_s08v04_encode((float) rawVoltages[77] / 10000.0);
 8003648:	4b3f      	ldr	r3, [pc, #252]	@ (8003748 <voltageSendCan+0x17b0>)
 800364a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003656:	ee17 0a90 	vmov	r0, s15
 800365a:	f7fc ff19 	bl	8000490 <__aeabi_f2d>
 800365e:	a338      	add	r3, pc, #224	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fd f896 	bl	8000794 <__aeabi_ddiv>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	ec43 2b17 	vmov	d7, r2, r3
 8003670:	eeb0 0a47 	vmov.f32	s0, s14
 8003674:	eef0 0a67 	vmov.f32	s1, s15
 8003678:	f00a ff32 	bl	800e4e0 <can1_ams_s08_voltages_1_s08v04_encode>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	4b36      	ldr	r3, [pc, #216]	@ (800375c <voltageSendCan+0x17c4>)
 8003682:	70da      	strb	r2, [r3, #3]
    can1_ams_s08_voltages_1.s08v05 = can1_ams_s08_voltages_1_s08v05_encode((float) rawVoltages[78] / 10000.0);
 8003684:	4b30      	ldr	r3, [pc, #192]	@ (8003748 <voltageSendCan+0x17b0>)
 8003686:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	ee17 0a90 	vmov	r0, s15
 8003696:	f7fc fefb 	bl	8000490 <__aeabi_f2d>
 800369a:	a329      	add	r3, pc, #164	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fd f878 	bl	8000794 <__aeabi_ddiv>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	ec43 2b17 	vmov	d7, r2, r3
 80036ac:	eeb0 0a47 	vmov.f32	s0, s14
 80036b0:	eef0 0a67 	vmov.f32	s1, s15
 80036b4:	f00a ff40 	bl	800e538 <can1_ams_s08_voltages_1_s08v05_encode>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b27      	ldr	r3, [pc, #156]	@ (800375c <voltageSendCan+0x17c4>)
 80036be:	711a      	strb	r2, [r3, #4]
    can1_ams_s08_voltages_1.s08v06 = can1_ams_s08_voltages_1_s08v06_encode((float) rawVoltages[79] / 10000.0);
 80036c0:	4b21      	ldr	r3, [pc, #132]	@ (8003748 <voltageSendCan+0x17b0>)
 80036c2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	ee17 0a90 	vmov	r0, s15
 80036d2:	f7fc fedd 	bl	8000490 <__aeabi_f2d>
 80036d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8003740 <voltageSendCan+0x17a8>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f7fd f85a 	bl	8000794 <__aeabi_ddiv>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	ec43 2b17 	vmov	d7, r2, r3
 80036e8:	eeb0 0a47 	vmov.f32	s0, s14
 80036ec:	eef0 0a67 	vmov.f32	s1, s15
 80036f0:	f00a ff4e 	bl	800e590 <can1_ams_s08_voltages_1_s08v06_encode>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b18      	ldr	r3, [pc, #96]	@ (800375c <voltageSendCan+0x17c4>)
 80036fa:	715a      	strb	r2, [r3, #5]

    can1_ams_s08_voltages_1_pack(txData, &can1_ams_s08_voltages_1, CAN1_AMS_S08_VOLTAGES_1_LENGTH);
 80036fc:	2206      	movs	r2, #6
 80036fe:	4917      	ldr	r1, [pc, #92]	@ (800375c <voltageSendCan+0x17c4>)
 8003700:	4813      	ldr	r0, [pc, #76]	@ (8003750 <voltageSendCan+0x17b8>)
 8003702:	f00a fdef 	bl	800e2e4 <can1_ams_s08_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S08_VOLTAGES_1_FRAME_ID;
 8003706:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <voltageSendCan+0x17bc>)
 8003708:	f240 2266 	movw	r2, #614	@ 0x266
 800370c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S08_VOLTAGES_1_LENGTH;
 800370e:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <voltageSendCan+0x17bc>)
 8003710:	2206      	movs	r2, #6
 8003712:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003714:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <voltageSendCan+0x17bc>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800371a:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <voltageSendCan+0x17bc>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003720:	2300      	movs	r3, #0
 8003722:	4a0b      	ldr	r2, [pc, #44]	@ (8003750 <voltageSendCan+0x17b8>)
 8003724:	490b      	ldr	r1, [pc, #44]	@ (8003754 <voltageSendCan+0x17bc>)
 8003726:	480c      	ldr	r0, [pc, #48]	@ (8003758 <voltageSendCan+0x17c0>)
 8003728:	f003 f988 	bl	8006a3c <HAL_CAN_AddTxMessage>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 86f4 	beq.w	800451c <voltageSendCan+0x2584>
      Error_Handler();
 8003734:	f002 f95e 	bl	80059f4 <Error_Handler>
    break;
 8003738:	f000 bef0 	b.w	800451c <voltageSendCan+0x2584>
 800373c:	f3af 8000 	nop.w
 8003740:	00000000 	.word	0x00000000
 8003744:	40c38800 	.word	0x40c38800
 8003748:	20000480 	.word	0x20000480
 800374c:	20000338 	.word	0x20000338
 8003750:	20000288 	.word	0x20000288
 8003754:	20000254 	.word	0x20000254
 8003758:	2000011c 	.word	0x2000011c
 800375c:	20000340 	.word	0x20000340

  case 15:
    can1_ams_s08_voltages_2.s08v07 = can1_ams_s08_voltages_2_s08v07_encode((float) rawVoltages[80] / 10000.0);
 8003760:	4bb7      	ldr	r3, [pc, #732]	@ (8003a40 <voltageSendCan+0x1aa8>)
 8003762:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	ee17 0a90 	vmov	r0, s15
 8003772:	f7fc fe8d 	bl	8000490 <__aeabi_f2d>
 8003776:	a3b0      	add	r3, pc, #704	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f7fd f80a 	bl	8000794 <__aeabi_ddiv>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	ec43 2b17 	vmov	d7, r2, r3
 8003788:	eeb0 0a47 	vmov.f32	s0, s14
 800378c:	eef0 0a67 	vmov.f32	s1, s15
 8003790:	f00a ff92 	bl	800e6b8 <can1_ams_s08_voltages_2_s08v07_encode>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	4baa      	ldr	r3, [pc, #680]	@ (8003a44 <voltageSendCan+0x1aac>)
 800379a:	701a      	strb	r2, [r3, #0]
    can1_ams_s08_voltages_2.s08v08 = can1_ams_s08_voltages_2_s08v08_encode((float) rawVoltages[81] / 10000.0);
 800379c:	4ba8      	ldr	r3, [pc, #672]	@ (8003a40 <voltageSendCan+0x1aa8>)
 800379e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	ee17 0a90 	vmov	r0, s15
 80037ae:	f7fc fe6f 	bl	8000490 <__aeabi_f2d>
 80037b2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc ffec 	bl	8000794 <__aeabi_ddiv>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	ec43 2b17 	vmov	d7, r2, r3
 80037c4:	eeb0 0a47 	vmov.f32	s0, s14
 80037c8:	eef0 0a67 	vmov.f32	s1, s15
 80037cc:	f00a ffa0 	bl	800e710 <can1_ams_s08_voltages_2_s08v08_encode>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b9b      	ldr	r3, [pc, #620]	@ (8003a44 <voltageSendCan+0x1aac>)
 80037d6:	705a      	strb	r2, [r3, #1]
    can1_ams_s08_voltages_2.s08v09 = can1_ams_s08_voltages_2_s08v09_encode((float) rawVoltages[82] / 10000.0);
 80037d8:	4b99      	ldr	r3, [pc, #612]	@ (8003a40 <voltageSendCan+0x1aa8>)
 80037da:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e6:	ee17 0a90 	vmov	r0, s15
 80037ea:	f7fc fe51 	bl	8000490 <__aeabi_f2d>
 80037ee:	a392      	add	r3, pc, #584	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc ffce 	bl	8000794 <__aeabi_ddiv>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	ec43 2b17 	vmov	d7, r2, r3
 8003800:	eeb0 0a47 	vmov.f32	s0, s14
 8003804:	eef0 0a67 	vmov.f32	s1, s15
 8003808:	f00a ffae 	bl	800e768 <can1_ams_s08_voltages_2_s08v09_encode>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	4b8c      	ldr	r3, [pc, #560]	@ (8003a44 <voltageSendCan+0x1aac>)
 8003812:	709a      	strb	r2, [r3, #2]
    can1_ams_s08_voltages_2.s08v10 = can1_ams_s08_voltages_2_s08v10_encode((float) rawVoltages[83] / 10000.0);
 8003814:	4b8a      	ldr	r3, [pc, #552]	@ (8003a40 <voltageSendCan+0x1aa8>)
 8003816:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	ee17 0a90 	vmov	r0, s15
 8003826:	f7fc fe33 	bl	8000490 <__aeabi_f2d>
 800382a:	a383      	add	r3, pc, #524	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f7fc ffb0 	bl	8000794 <__aeabi_ddiv>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	ec43 2b17 	vmov	d7, r2, r3
 800383c:	eeb0 0a47 	vmov.f32	s0, s14
 8003840:	eef0 0a67 	vmov.f32	s1, s15
 8003844:	f00a ffbc 	bl	800e7c0 <can1_ams_s08_voltages_2_s08v10_encode>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a44 <voltageSendCan+0x1aac>)
 800384e:	70da      	strb	r2, [r3, #3]

    can1_ams_s08_voltages_2_pack(txData, &can1_ams_s08_voltages_2, CAN1_AMS_S08_VOLTAGES_2_LENGTH);
 8003850:	2205      	movs	r2, #5
 8003852:	497c      	ldr	r1, [pc, #496]	@ (8003a44 <voltageSendCan+0x1aac>)
 8003854:	487c      	ldr	r0, [pc, #496]	@ (8003a48 <voltageSendCan+0x1ab0>)
 8003856:	f00a fec5 	bl	800e5e4 <can1_ams_s08_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S08_VOLTAGES_2_FRAME_ID;
 800385a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a4c <voltageSendCan+0x1ab4>)
 800385c:	f240 2267 	movw	r2, #615	@ 0x267
 8003860:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S08_VOLTAGES_2_LENGTH;
 8003862:	4b7a      	ldr	r3, [pc, #488]	@ (8003a4c <voltageSendCan+0x1ab4>)
 8003864:	2205      	movs	r2, #5
 8003866:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003868:	4b78      	ldr	r3, [pc, #480]	@ (8003a4c <voltageSendCan+0x1ab4>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800386e:	4b77      	ldr	r3, [pc, #476]	@ (8003a4c <voltageSendCan+0x1ab4>)
 8003870:	2200      	movs	r2, #0
 8003872:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003874:	2300      	movs	r3, #0
 8003876:	4a74      	ldr	r2, [pc, #464]	@ (8003a48 <voltageSendCan+0x1ab0>)
 8003878:	4974      	ldr	r1, [pc, #464]	@ (8003a4c <voltageSendCan+0x1ab4>)
 800387a:	4875      	ldr	r0, [pc, #468]	@ (8003a50 <voltageSendCan+0x1ab8>)
 800387c:	f003 f8de 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 864c 	beq.w	8004520 <voltageSendCan+0x2588>
      Error_Handler();
 8003888:	f002 f8b4 	bl	80059f4 <Error_Handler>
    break;
 800388c:	f000 be48 	b.w	8004520 <voltageSendCan+0x2588>

  case 16:
    can1_ams_s09_voltages_1.s09v01 = can1_ams_s09_voltages_1_s09v01_encode((float) rawVoltages[84] / 10000.0);
 8003890:	4b6b      	ldr	r3, [pc, #428]	@ (8003a40 <voltageSendCan+0x1aa8>)
 8003892:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	ee17 0a90 	vmov	r0, s15
 80038a2:	f7fc fdf5 	bl	8000490 <__aeabi_f2d>
 80038a6:	a364      	add	r3, pc, #400	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc ff72 	bl	8000794 <__aeabi_ddiv>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	ec43 2b17 	vmov	d7, r2, r3
 80038b8:	eeb0 0a47 	vmov.f32	s0, s14
 80038bc:	eef0 0a67 	vmov.f32	s1, s15
 80038c0:	f00b f822 	bl	800e908 <can1_ams_s09_voltages_1_s09v01_encode>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b62      	ldr	r3, [pc, #392]	@ (8003a54 <voltageSendCan+0x1abc>)
 80038ca:	701a      	strb	r2, [r3, #0]
    can1_ams_s09_voltages_1.s09v02 = can1_ams_s09_voltages_1_s09v02_encode((float) rawVoltages[85] / 10000.0);
 80038cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003a40 <voltageSendCan+0x1aa8>)
 80038ce:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	ee17 0a90 	vmov	r0, s15
 80038de:	f7fc fdd7 	bl	8000490 <__aeabi_f2d>
 80038e2:	a355      	add	r3, pc, #340	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f7fc ff54 	bl	8000794 <__aeabi_ddiv>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	ec43 2b17 	vmov	d7, r2, r3
 80038f4:	eeb0 0a47 	vmov.f32	s0, s14
 80038f8:	eef0 0a67 	vmov.f32	s1, s15
 80038fc:	f00b f830 	bl	800e960 <can1_ams_s09_voltages_1_s09v02_encode>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	4b53      	ldr	r3, [pc, #332]	@ (8003a54 <voltageSendCan+0x1abc>)
 8003906:	705a      	strb	r2, [r3, #1]
    can1_ams_s09_voltages_1.s09v03 = can1_ams_s09_voltages_1_s09v03_encode((float) rawVoltages[86] / 10000.0);
 8003908:	4b4d      	ldr	r3, [pc, #308]	@ (8003a40 <voltageSendCan+0x1aa8>)
 800390a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	ee17 0a90 	vmov	r0, s15
 800391a:	f7fc fdb9 	bl	8000490 <__aeabi_f2d>
 800391e:	a346      	add	r3, pc, #280	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc ff36 	bl	8000794 <__aeabi_ddiv>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	ec43 2b17 	vmov	d7, r2, r3
 8003930:	eeb0 0a47 	vmov.f32	s0, s14
 8003934:	eef0 0a67 	vmov.f32	s1, s15
 8003938:	f00b f83e 	bl	800e9b8 <can1_ams_s09_voltages_1_s09v03_encode>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	4b44      	ldr	r3, [pc, #272]	@ (8003a54 <voltageSendCan+0x1abc>)
 8003942:	709a      	strb	r2, [r3, #2]
    can1_ams_s09_voltages_1.s09v04 = can1_ams_s09_voltages_1_s09v04_encode((float) rawVoltages[87] / 10000.0);
 8003944:	4b3e      	ldr	r3, [pc, #248]	@ (8003a40 <voltageSendCan+0x1aa8>)
 8003946:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	ee17 0a90 	vmov	r0, s15
 8003956:	f7fc fd9b 	bl	8000490 <__aeabi_f2d>
 800395a:	a337      	add	r3, pc, #220	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f7fc ff18 	bl	8000794 <__aeabi_ddiv>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	ec43 2b17 	vmov	d7, r2, r3
 800396c:	eeb0 0a47 	vmov.f32	s0, s14
 8003970:	eef0 0a67 	vmov.f32	s1, s15
 8003974:	f00b f84c 	bl	800ea10 <can1_ams_s09_voltages_1_s09v04_encode>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	4b35      	ldr	r3, [pc, #212]	@ (8003a54 <voltageSendCan+0x1abc>)
 800397e:	70da      	strb	r2, [r3, #3]
    can1_ams_s09_voltages_1.s09v05 = can1_ams_s09_voltages_1_s09v05_encode((float) rawVoltages[88] / 10000.0);
 8003980:	4b2f      	ldr	r3, [pc, #188]	@ (8003a40 <voltageSendCan+0x1aa8>)
 8003982:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398e:	ee17 0a90 	vmov	r0, s15
 8003992:	f7fc fd7d 	bl	8000490 <__aeabi_f2d>
 8003996:	a328      	add	r3, pc, #160	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f7fc fefa 	bl	8000794 <__aeabi_ddiv>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	ec43 2b17 	vmov	d7, r2, r3
 80039a8:	eeb0 0a47 	vmov.f32	s0, s14
 80039ac:	eef0 0a67 	vmov.f32	s1, s15
 80039b0:	f00b f85a 	bl	800ea68 <can1_ams_s09_voltages_1_s09v05_encode>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b26      	ldr	r3, [pc, #152]	@ (8003a54 <voltageSendCan+0x1abc>)
 80039ba:	711a      	strb	r2, [r3, #4]
    can1_ams_s09_voltages_1.s09v06 = can1_ams_s09_voltages_1_s09v06_encode((float) rawVoltages[89] / 10000.0);
 80039bc:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <voltageSendCan+0x1aa8>)
 80039be:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	ee17 0a90 	vmov	r0, s15
 80039ce:	f7fc fd5f 	bl	8000490 <__aeabi_f2d>
 80039d2:	a319      	add	r3, pc, #100	@ (adr r3, 8003a38 <voltageSendCan+0x1aa0>)
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f7fc fedc 	bl	8000794 <__aeabi_ddiv>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	ec43 2b17 	vmov	d7, r2, r3
 80039e4:	eeb0 0a47 	vmov.f32	s0, s14
 80039e8:	eef0 0a67 	vmov.f32	s1, s15
 80039ec:	f00b f868 	bl	800eac0 <can1_ams_s09_voltages_1_s09v06_encode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b17      	ldr	r3, [pc, #92]	@ (8003a54 <voltageSendCan+0x1abc>)
 80039f6:	715a      	strb	r2, [r3, #5]

    can1_ams_s09_voltages_1_pack(txData, &can1_ams_s09_voltages_1, CAN1_AMS_S09_VOLTAGES_1_LENGTH);
 80039f8:	2206      	movs	r2, #6
 80039fa:	4916      	ldr	r1, [pc, #88]	@ (8003a54 <voltageSendCan+0x1abc>)
 80039fc:	4812      	ldr	r0, [pc, #72]	@ (8003a48 <voltageSendCan+0x1ab0>)
 80039fe:	f00a ff09 	bl	800e814 <can1_ams_s09_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S09_VOLTAGES_1_FRAME_ID;
 8003a02:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <voltageSendCan+0x1ab4>)
 8003a04:	f44f 721a 	mov.w	r2, #616	@ 0x268
 8003a08:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S09_VOLTAGES_1_LENGTH;
 8003a0a:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <voltageSendCan+0x1ab4>)
 8003a0c:	2206      	movs	r2, #6
 8003a0e:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003a10:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <voltageSendCan+0x1ab4>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003a16:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <voltageSendCan+0x1ab4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a48 <voltageSendCan+0x1ab0>)
 8003a20:	490a      	ldr	r1, [pc, #40]	@ (8003a4c <voltageSendCan+0x1ab4>)
 8003a22:	480b      	ldr	r0, [pc, #44]	@ (8003a50 <voltageSendCan+0x1ab8>)
 8003a24:	f003 f80a 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 857a 	beq.w	8004524 <voltageSendCan+0x258c>
      Error_Handler();
 8003a30:	f001 ffe0 	bl	80059f4 <Error_Handler>
    break;
 8003a34:	f000 bd76 	b.w	8004524 <voltageSendCan+0x258c>
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	40c38800 	.word	0x40c38800
 8003a40:	20000480 	.word	0x20000480
 8003a44:	20000348 	.word	0x20000348
 8003a48:	20000288 	.word	0x20000288
 8003a4c:	20000254 	.word	0x20000254
 8003a50:	2000011c 	.word	0x2000011c
 8003a54:	20000350 	.word	0x20000350

  case 17:
    can1_ams_s09_voltages_2.s09v07 = can1_ams_s09_voltages_2_s09v07_encode((float) rawVoltages[90] / 10000.0);
 8003a58:	4bc7      	ldr	r3, [pc, #796]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003a5a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	ee17 0a90 	vmov	r0, s15
 8003a6a:	f7fc fd11 	bl	8000490 <__aeabi_f2d>
 8003a6e:	a3c0      	add	r3, pc, #768	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fe8e 	bl	8000794 <__aeabi_ddiv>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	ec43 2b17 	vmov	d7, r2, r3
 8003a80:	eeb0 0a47 	vmov.f32	s0, s14
 8003a84:	eef0 0a67 	vmov.f32	s1, s15
 8003a88:	f00b f8ae 	bl	800ebe8 <can1_ams_s09_voltages_2_s09v07_encode>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4bba      	ldr	r3, [pc, #744]	@ (8003d7c <voltageSendCan+0x1de4>)
 8003a92:	701a      	strb	r2, [r3, #0]
    can1_ams_s09_voltages_2.s09v08 = can1_ams_s09_voltages_2_s09v08_encode((float) rawVoltages[91] / 10000.0);
 8003a94:	4bb8      	ldr	r3, [pc, #736]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003a96:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	ee17 0a90 	vmov	r0, s15
 8003aa6:	f7fc fcf3 	bl	8000490 <__aeabi_f2d>
 8003aaa:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f7fc fe70 	bl	8000794 <__aeabi_ddiv>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	ec43 2b17 	vmov	d7, r2, r3
 8003abc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac0:	eef0 0a67 	vmov.f32	s1, s15
 8003ac4:	f00b f8bc 	bl	800ec40 <can1_ams_s09_voltages_2_s09v08_encode>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	4bab      	ldr	r3, [pc, #684]	@ (8003d7c <voltageSendCan+0x1de4>)
 8003ace:	705a      	strb	r2, [r3, #1]
    can1_ams_s09_voltages_2.s09v09 = can1_ams_s09_voltages_2_s09v09_encode((float) rawVoltages[92] / 10000.0);
 8003ad0:	4ba9      	ldr	r3, [pc, #676]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003ad2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	ee17 0a90 	vmov	r0, s15
 8003ae2:	f7fc fcd5 	bl	8000490 <__aeabi_f2d>
 8003ae6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fe52 	bl	8000794 <__aeabi_ddiv>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	ec43 2b17 	vmov	d7, r2, r3
 8003af8:	eeb0 0a47 	vmov.f32	s0, s14
 8003afc:	eef0 0a67 	vmov.f32	s1, s15
 8003b00:	f00b f8ca 	bl	800ec98 <can1_ams_s09_voltages_2_s09v09_encode>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b9c      	ldr	r3, [pc, #624]	@ (8003d7c <voltageSendCan+0x1de4>)
 8003b0a:	709a      	strb	r2, [r3, #2]
    can1_ams_s09_voltages_2.s09v10 = can1_ams_s09_voltages_2_s09v10_encode((float) rawVoltages[93] / 10000.0);
 8003b0c:	4b9a      	ldr	r3, [pc, #616]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003b0e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	ee17 0a90 	vmov	r0, s15
 8003b1e:	f7fc fcb7 	bl	8000490 <__aeabi_f2d>
 8003b22:	a393      	add	r3, pc, #588	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f7fc fe34 	bl	8000794 <__aeabi_ddiv>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	ec43 2b17 	vmov	d7, r2, r3
 8003b34:	eeb0 0a47 	vmov.f32	s0, s14
 8003b38:	eef0 0a67 	vmov.f32	s1, s15
 8003b3c:	f00b f8d8 	bl	800ecf0 <can1_ams_s09_voltages_2_s09v10_encode>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b8d      	ldr	r3, [pc, #564]	@ (8003d7c <voltageSendCan+0x1de4>)
 8003b46:	70da      	strb	r2, [r3, #3]
    can1_ams_s09_voltages_2.s09v11 = can1_ams_s09_voltages_2_s09v11_encode((float) rawVoltages[94] / 10000.0);
 8003b48:	4b8b      	ldr	r3, [pc, #556]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003b4a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b56:	ee17 0a90 	vmov	r0, s15
 8003b5a:	f7fc fc99 	bl	8000490 <__aeabi_f2d>
 8003b5e:	a384      	add	r3, pc, #528	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc fe16 	bl	8000794 <__aeabi_ddiv>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	ec43 2b17 	vmov	d7, r2, r3
 8003b70:	eeb0 0a47 	vmov.f32	s0, s14
 8003b74:	eef0 0a67 	vmov.f32	s1, s15
 8003b78:	f00b f8e6 	bl	800ed48 <can1_ams_s09_voltages_2_s09v11_encode>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b7e      	ldr	r3, [pc, #504]	@ (8003d7c <voltageSendCan+0x1de4>)
 8003b82:	711a      	strb	r2, [r3, #4]

    can1_ams_s09_voltages_2_pack(txData, &can1_ams_s09_voltages_2, CAN1_AMS_S09_VOLTAGES_2_LENGTH);
 8003b84:	2205      	movs	r2, #5
 8003b86:	497d      	ldr	r1, [pc, #500]	@ (8003d7c <voltageSendCan+0x1de4>)
 8003b88:	487d      	ldr	r0, [pc, #500]	@ (8003d80 <voltageSendCan+0x1de8>)
 8003b8a:	f00a ffc3 	bl	800eb14 <can1_ams_s09_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S09_VOLTAGES_2_FRAME_ID;
 8003b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003b90:	f240 2269 	movw	r2, #617	@ 0x269
 8003b94:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S09_VOLTAGES_2_LENGTH;
 8003b96:	4b7b      	ldr	r3, [pc, #492]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003b98:	2205      	movs	r2, #5
 8003b9a:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003b9c:	4b79      	ldr	r3, [pc, #484]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003ba2:	4b78      	ldr	r3, [pc, #480]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4a75      	ldr	r2, [pc, #468]	@ (8003d80 <voltageSendCan+0x1de8>)
 8003bac:	4975      	ldr	r1, [pc, #468]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003bae:	4876      	ldr	r0, [pc, #472]	@ (8003d88 <voltageSendCan+0x1df0>)
 8003bb0:	f002 ff44 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 84b6 	beq.w	8004528 <voltageSendCan+0x2590>
      Error_Handler();
 8003bbc:	f001 ff1a 	bl	80059f4 <Error_Handler>
    break;
 8003bc0:	f000 bcb2 	b.w	8004528 <voltageSendCan+0x2590>

  case 18:
    can1_ams_s10_voltages_1.s10v01 = can1_ams_s10_voltages_1_s10v01_encode((float) rawVoltages[95] / 10000.0);
 8003bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003bc6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	ee17 0a90 	vmov	r0, s15
 8003bd6:	f7fc fc5b 	bl	8000490 <__aeabi_f2d>
 8003bda:	a365      	add	r3, pc, #404	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f7fc fdd8 	bl	8000794 <__aeabi_ddiv>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	ec43 2b17 	vmov	d7, r2, r3
 8003bec:	eeb0 0a47 	vmov.f32	s0, s14
 8003bf0:	eef0 0a67 	vmov.f32	s1, s15
 8003bf4:	f00b f94c 	bl	800ee90 <can1_ams_s10_voltages_1_s10v01_encode>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b63      	ldr	r3, [pc, #396]	@ (8003d8c <voltageSendCan+0x1df4>)
 8003bfe:	701a      	strb	r2, [r3, #0]
    can1_ams_s10_voltages_1.s10v02 = can1_ams_s10_voltages_1_s10v02_encode((float) rawVoltages[96] / 10000.0);
 8003c00:	4b5d      	ldr	r3, [pc, #372]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003c02:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	ee17 0a90 	vmov	r0, s15
 8003c12:	f7fc fc3d 	bl	8000490 <__aeabi_f2d>
 8003c16:	a356      	add	r3, pc, #344	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f7fc fdba 	bl	8000794 <__aeabi_ddiv>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	ec43 2b17 	vmov	d7, r2, r3
 8003c28:	eeb0 0a47 	vmov.f32	s0, s14
 8003c2c:	eef0 0a67 	vmov.f32	s1, s15
 8003c30:	f00b f95a 	bl	800eee8 <can1_ams_s10_voltages_1_s10v02_encode>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b54      	ldr	r3, [pc, #336]	@ (8003d8c <voltageSendCan+0x1df4>)
 8003c3a:	705a      	strb	r2, [r3, #1]
    can1_ams_s10_voltages_1.s10v03 = can1_ams_s10_voltages_1_s10v03_encode((float) rawVoltages[97] / 10000.0);
 8003c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003c3e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	@ 0xc2
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	ee17 0a90 	vmov	r0, s15
 8003c4e:	f7fc fc1f 	bl	8000490 <__aeabi_f2d>
 8003c52:	a347      	add	r3, pc, #284	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f7fc fd9c 	bl	8000794 <__aeabi_ddiv>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	ec43 2b17 	vmov	d7, r2, r3
 8003c64:	eeb0 0a47 	vmov.f32	s0, s14
 8003c68:	eef0 0a67 	vmov.f32	s1, s15
 8003c6c:	f00b f968 	bl	800ef40 <can1_ams_s10_voltages_1_s10v03_encode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b45      	ldr	r3, [pc, #276]	@ (8003d8c <voltageSendCan+0x1df4>)
 8003c76:	709a      	strb	r2, [r3, #2]
    can1_ams_s10_voltages_1.s10v04 = can1_ams_s10_voltages_1_s10v04_encode((float) rawVoltages[98] / 10000.0);
 8003c78:	4b3f      	ldr	r3, [pc, #252]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003c7a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	@ 0xc4
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	ee17 0a90 	vmov	r0, s15
 8003c8a:	f7fc fc01 	bl	8000490 <__aeabi_f2d>
 8003c8e:	a338      	add	r3, pc, #224	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f7fc fd7e 	bl	8000794 <__aeabi_ddiv>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	ec43 2b17 	vmov	d7, r2, r3
 8003ca0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ca4:	eef0 0a67 	vmov.f32	s1, s15
 8003ca8:	f00b f976 	bl	800ef98 <can1_ams_s10_voltages_1_s10v04_encode>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <voltageSendCan+0x1df4>)
 8003cb2:	70da      	strb	r2, [r3, #3]
    can1_ams_s10_voltages_1.s10v05 = can1_ams_s10_voltages_1_s10v05_encode((float) rawVoltages[99] / 10000.0);
 8003cb4:	4b30      	ldr	r3, [pc, #192]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003cb6:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	@ 0xc6
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc2:	ee17 0a90 	vmov	r0, s15
 8003cc6:	f7fc fbe3 	bl	8000490 <__aeabi_f2d>
 8003cca:	a329      	add	r3, pc, #164	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f7fc fd60 	bl	8000794 <__aeabi_ddiv>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	ec43 2b17 	vmov	d7, r2, r3
 8003cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ce0:	eef0 0a67 	vmov.f32	s1, s15
 8003ce4:	f00b f984 	bl	800eff0 <can1_ams_s10_voltages_1_s10v05_encode>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b27      	ldr	r3, [pc, #156]	@ (8003d8c <voltageSendCan+0x1df4>)
 8003cee:	711a      	strb	r2, [r3, #4]
    can1_ams_s10_voltages_1.s10v06 = can1_ams_s10_voltages_1_s10v06_encode((float) rawVoltages[100] / 10000.0);
 8003cf0:	4b21      	ldr	r3, [pc, #132]	@ (8003d78 <voltageSendCan+0x1de0>)
 8003cf2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	@ 0xc8
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	ee17 0a90 	vmov	r0, s15
 8003d02:	f7fc fbc5 	bl	8000490 <__aeabi_f2d>
 8003d06:	a31a      	add	r3, pc, #104	@ (adr r3, 8003d70 <voltageSendCan+0x1dd8>)
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f7fc fd42 	bl	8000794 <__aeabi_ddiv>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	ec43 2b17 	vmov	d7, r2, r3
 8003d18:	eeb0 0a47 	vmov.f32	s0, s14
 8003d1c:	eef0 0a67 	vmov.f32	s1, s15
 8003d20:	f00b f992 	bl	800f048 <can1_ams_s10_voltages_1_s10v06_encode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b18      	ldr	r3, [pc, #96]	@ (8003d8c <voltageSendCan+0x1df4>)
 8003d2a:	715a      	strb	r2, [r3, #5]

    can1_ams_s10_voltages_1_pack(txData, &can1_ams_s10_voltages_1, CAN1_AMS_S10_VOLTAGES_1_LENGTH);
 8003d2c:	2206      	movs	r2, #6
 8003d2e:	4917      	ldr	r1, [pc, #92]	@ (8003d8c <voltageSendCan+0x1df4>)
 8003d30:	4813      	ldr	r0, [pc, #76]	@ (8003d80 <voltageSendCan+0x1de8>)
 8003d32:	f00b f833 	bl	800ed9c <can1_ams_s10_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S10_VOLTAGES_1_FRAME_ID;
 8003d36:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003d38:	f240 226a 	movw	r2, #618	@ 0x26a
 8003d3c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S10_VOLTAGES_1_LENGTH;
 8003d3e:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003d40:	2206      	movs	r2, #6
 8003d42:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003d44:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003d50:	2300      	movs	r3, #0
 8003d52:	4a0b      	ldr	r2, [pc, #44]	@ (8003d80 <voltageSendCan+0x1de8>)
 8003d54:	490b      	ldr	r1, [pc, #44]	@ (8003d84 <voltageSendCan+0x1dec>)
 8003d56:	480c      	ldr	r0, [pc, #48]	@ (8003d88 <voltageSendCan+0x1df0>)
 8003d58:	f002 fe70 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 83e4 	beq.w	800452c <voltageSendCan+0x2594>
      Error_Handler();
 8003d64:	f001 fe46 	bl	80059f4 <Error_Handler>
    break;
 8003d68:	e3e0      	b.n	800452c <voltageSendCan+0x2594>
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w
 8003d70:	00000000 	.word	0x00000000
 8003d74:	40c38800 	.word	0x40c38800
 8003d78:	20000480 	.word	0x20000480
 8003d7c:	20000358 	.word	0x20000358
 8003d80:	20000288 	.word	0x20000288
 8003d84:	20000254 	.word	0x20000254
 8003d88:	2000011c 	.word	0x2000011c
 8003d8c:	20000360 	.word	0x20000360

  case 19:
    can1_ams_s10_voltages_2.s10v07 = can1_ams_s10_voltages_2_s10v07_encode((float) rawVoltages[101] / 10000.0);
 8003d90:	4bb7      	ldr	r3, [pc, #732]	@ (8004070 <voltageSendCan+0x20d8>)
 8003d92:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	ee17 0a90 	vmov	r0, s15
 8003da2:	f7fc fb75 	bl	8000490 <__aeabi_f2d>
 8003da6:	a3b0      	add	r3, pc, #704	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fcf2 	bl	8000794 <__aeabi_ddiv>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	ec43 2b17 	vmov	d7, r2, r3
 8003db8:	eeb0 0a47 	vmov.f32	s0, s14
 8003dbc:	eef0 0a67 	vmov.f32	s1, s15
 8003dc0:	f00b f9d6 	bl	800f170 <can1_ams_s10_voltages_2_s10v07_encode>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4baa      	ldr	r3, [pc, #680]	@ (8004074 <voltageSendCan+0x20dc>)
 8003dca:	701a      	strb	r2, [r3, #0]
    can1_ams_s10_voltages_2.s10v08 = can1_ams_s10_voltages_2_s10v08_encode((float) rawVoltages[102] / 10000.0);
 8003dcc:	4ba8      	ldr	r3, [pc, #672]	@ (8004070 <voltageSendCan+0x20d8>)
 8003dce:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	ee17 0a90 	vmov	r0, s15
 8003dde:	f7fc fb57 	bl	8000490 <__aeabi_f2d>
 8003de2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fcd4 	bl	8000794 <__aeabi_ddiv>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	ec43 2b17 	vmov	d7, r2, r3
 8003df4:	eeb0 0a47 	vmov.f32	s0, s14
 8003df8:	eef0 0a67 	vmov.f32	s1, s15
 8003dfc:	f00b f9e4 	bl	800f1c8 <can1_ams_s10_voltages_2_s10v08_encode>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b9b      	ldr	r3, [pc, #620]	@ (8004074 <voltageSendCan+0x20dc>)
 8003e06:	705a      	strb	r2, [r3, #1]
    can1_ams_s10_voltages_2.s10v09 = can1_ams_s10_voltages_2_s10v09_encode((float) rawVoltages[103] / 10000.0);
 8003e08:	4b99      	ldr	r3, [pc, #612]	@ (8004070 <voltageSendCan+0x20d8>)
 8003e0a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	ee17 0a90 	vmov	r0, s15
 8003e1a:	f7fc fb39 	bl	8000490 <__aeabi_f2d>
 8003e1e:	a392      	add	r3, pc, #584	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc fcb6 	bl	8000794 <__aeabi_ddiv>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	ec43 2b17 	vmov	d7, r2, r3
 8003e30:	eeb0 0a47 	vmov.f32	s0, s14
 8003e34:	eef0 0a67 	vmov.f32	s1, s15
 8003e38:	f00b f9f2 	bl	800f220 <can1_ams_s10_voltages_2_s10v09_encode>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b8c      	ldr	r3, [pc, #560]	@ (8004074 <voltageSendCan+0x20dc>)
 8003e42:	709a      	strb	r2, [r3, #2]
    can1_ams_s10_voltages_2.s10v10 = can1_ams_s10_voltages_2_s10v10_encode((float) rawVoltages[104] / 10000.0);
 8003e44:	4b8a      	ldr	r3, [pc, #552]	@ (8004070 <voltageSendCan+0x20d8>)
 8003e46:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	ee17 0a90 	vmov	r0, s15
 8003e56:	f7fc fb1b 	bl	8000490 <__aeabi_f2d>
 8003e5a:	a383      	add	r3, pc, #524	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fc98 	bl	8000794 <__aeabi_ddiv>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	ec43 2b17 	vmov	d7, r2, r3
 8003e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e70:	eef0 0a67 	vmov.f32	s1, s15
 8003e74:	f00b fa00 	bl	800f278 <can1_ams_s10_voltages_2_s10v10_encode>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8004074 <voltageSendCan+0x20dc>)
 8003e7e:	70da      	strb	r2, [r3, #3]

    can1_ams_s10_voltages_2_pack(txData, &can1_ams_s10_voltages_2, CAN1_AMS_S10_VOLTAGES_2_LENGTH);
 8003e80:	2205      	movs	r2, #5
 8003e82:	497c      	ldr	r1, [pc, #496]	@ (8004074 <voltageSendCan+0x20dc>)
 8003e84:	487c      	ldr	r0, [pc, #496]	@ (8004078 <voltageSendCan+0x20e0>)
 8003e86:	f00b f909 	bl	800f09c <can1_ams_s10_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S10_VOLTAGES_2_FRAME_ID;
 8003e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800407c <voltageSendCan+0x20e4>)
 8003e8c:	f240 226b 	movw	r2, #619	@ 0x26b
 8003e90:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S10_VOLTAGES_2_LENGTH;
 8003e92:	4b7a      	ldr	r3, [pc, #488]	@ (800407c <voltageSendCan+0x20e4>)
 8003e94:	2205      	movs	r2, #5
 8003e96:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003e98:	4b78      	ldr	r3, [pc, #480]	@ (800407c <voltageSendCan+0x20e4>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003e9e:	4b77      	ldr	r3, [pc, #476]	@ (800407c <voltageSendCan+0x20e4>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4a74      	ldr	r2, [pc, #464]	@ (8004078 <voltageSendCan+0x20e0>)
 8003ea8:	4974      	ldr	r1, [pc, #464]	@ (800407c <voltageSendCan+0x20e4>)
 8003eaa:	4875      	ldr	r0, [pc, #468]	@ (8004080 <voltageSendCan+0x20e8>)
 8003eac:	f002 fdc6 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 833c 	beq.w	8004530 <voltageSendCan+0x2598>
      Error_Handler();
 8003eb8:	f001 fd9c 	bl	80059f4 <Error_Handler>
    break;
 8003ebc:	e338      	b.n	8004530 <voltageSendCan+0x2598>

  case 20:
    can1_ams_s11_voltages_1.s11v01 = can1_ams_s11_voltages_1_s11v01_encode((float) rawVoltages[105] / 10000.0);
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	@ (8004070 <voltageSendCan+0x20d8>)
 8003ec0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ecc:	ee17 0a90 	vmov	r0, s15
 8003ed0:	f7fc fade 	bl	8000490 <__aeabi_f2d>
 8003ed4:	a364      	add	r3, pc, #400	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f7fc fc5b 	bl	8000794 <__aeabi_ddiv>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	ec43 2b17 	vmov	d7, r2, r3
 8003ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eea:	eef0 0a67 	vmov.f32	s1, s15
 8003eee:	f00b fa67 	bl	800f3c0 <can1_ams_s11_voltages_1_s11v01_encode>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b63      	ldr	r3, [pc, #396]	@ (8004084 <voltageSendCan+0x20ec>)
 8003ef8:	701a      	strb	r2, [r3, #0]
    can1_ams_s11_voltages_1.s11v02 = can1_ams_s11_voltages_1_s11v02_encode((float) rawVoltages[106] / 10000.0);
 8003efa:	4b5d      	ldr	r3, [pc, #372]	@ (8004070 <voltageSendCan+0x20d8>)
 8003efc:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f08:	ee17 0a90 	vmov	r0, s15
 8003f0c:	f7fc fac0 	bl	8000490 <__aeabi_f2d>
 8003f10:	a355      	add	r3, pc, #340	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f7fc fc3d 	bl	8000794 <__aeabi_ddiv>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	ec43 2b17 	vmov	d7, r2, r3
 8003f22:	eeb0 0a47 	vmov.f32	s0, s14
 8003f26:	eef0 0a67 	vmov.f32	s1, s15
 8003f2a:	f00b fa75 	bl	800f418 <can1_ams_s11_voltages_1_s11v02_encode>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b54      	ldr	r3, [pc, #336]	@ (8004084 <voltageSendCan+0x20ec>)
 8003f34:	705a      	strb	r2, [r3, #1]
    can1_ams_s11_voltages_1.s11v03 = can1_ams_s11_voltages_1_s11v03_encode((float) rawVoltages[107] / 10000.0);
 8003f36:	4b4e      	ldr	r3, [pc, #312]	@ (8004070 <voltageSendCan+0x20d8>)
 8003f38:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f44:	ee17 0a90 	vmov	r0, s15
 8003f48:	f7fc faa2 	bl	8000490 <__aeabi_f2d>
 8003f4c:	a346      	add	r3, pc, #280	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f7fc fc1f 	bl	8000794 <__aeabi_ddiv>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	ec43 2b17 	vmov	d7, r2, r3
 8003f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f62:	eef0 0a67 	vmov.f32	s1, s15
 8003f66:	f00b fa83 	bl	800f470 <can1_ams_s11_voltages_1_s11v03_encode>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b45      	ldr	r3, [pc, #276]	@ (8004084 <voltageSendCan+0x20ec>)
 8003f70:	709a      	strb	r2, [r3, #2]
    can1_ams_s11_voltages_1.s11v04 = can1_ams_s11_voltages_1_s11v04_encode((float) rawVoltages[108] / 10000.0);
 8003f72:	4b3f      	ldr	r3, [pc, #252]	@ (8004070 <voltageSendCan+0x20d8>)
 8003f74:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	@ 0xd8
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f80:	ee17 0a90 	vmov	r0, s15
 8003f84:	f7fc fa84 	bl	8000490 <__aeabi_f2d>
 8003f88:	a337      	add	r3, pc, #220	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc fc01 	bl	8000794 <__aeabi_ddiv>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	ec43 2b17 	vmov	d7, r2, r3
 8003f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f9e:	eef0 0a67 	vmov.f32	s1, s15
 8003fa2:	f00b fa91 	bl	800f4c8 <can1_ams_s11_voltages_1_s11v04_encode>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b36      	ldr	r3, [pc, #216]	@ (8004084 <voltageSendCan+0x20ec>)
 8003fac:	70da      	strb	r2, [r3, #3]
    can1_ams_s11_voltages_1.s11v05 = can1_ams_s11_voltages_1_s11v05_encode((float) rawVoltages[109] / 10000.0);
 8003fae:	4b30      	ldr	r3, [pc, #192]	@ (8004070 <voltageSendCan+0x20d8>)
 8003fb0:	f8b3 30da 	ldrh.w	r3, [r3, #218]	@ 0xda
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbc:	ee17 0a90 	vmov	r0, s15
 8003fc0:	f7fc fa66 	bl	8000490 <__aeabi_f2d>
 8003fc4:	a328      	add	r3, pc, #160	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f7fc fbe3 	bl	8000794 <__aeabi_ddiv>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	ec43 2b17 	vmov	d7, r2, r3
 8003fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8003fda:	eef0 0a67 	vmov.f32	s1, s15
 8003fde:	f00b fa9f 	bl	800f520 <can1_ams_s11_voltages_1_s11v05_encode>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b27      	ldr	r3, [pc, #156]	@ (8004084 <voltageSendCan+0x20ec>)
 8003fe8:	711a      	strb	r2, [r3, #4]
    can1_ams_s11_voltages_1.s11v06 = can1_ams_s11_voltages_1_s11v06_encode((float) rawVoltages[110] / 10000.0);
 8003fea:	4b21      	ldr	r3, [pc, #132]	@ (8004070 <voltageSendCan+0x20d8>)
 8003fec:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff8:	ee17 0a90 	vmov	r0, s15
 8003ffc:	f7fc fa48 	bl	8000490 <__aeabi_f2d>
 8004000:	a319      	add	r3, pc, #100	@ (adr r3, 8004068 <voltageSendCan+0x20d0>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f7fc fbc5 	bl	8000794 <__aeabi_ddiv>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	ec43 2b17 	vmov	d7, r2, r3
 8004012:	eeb0 0a47 	vmov.f32	s0, s14
 8004016:	eef0 0a67 	vmov.f32	s1, s15
 800401a:	f00b faad 	bl	800f578 <can1_ams_s11_voltages_1_s11v06_encode>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	4b18      	ldr	r3, [pc, #96]	@ (8004084 <voltageSendCan+0x20ec>)
 8004024:	715a      	strb	r2, [r3, #5]

    can1_ams_s11_voltages_1_pack(txData, &can1_ams_s11_voltages_1, CAN1_AMS_S11_VOLTAGES_1_LENGTH);
 8004026:	2206      	movs	r2, #6
 8004028:	4916      	ldr	r1, [pc, #88]	@ (8004084 <voltageSendCan+0x20ec>)
 800402a:	4813      	ldr	r0, [pc, #76]	@ (8004078 <voltageSendCan+0x20e0>)
 800402c:	f00b f94e 	bl	800f2cc <can1_ams_s11_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S11_VOLTAGES_1_FRAME_ID;
 8004030:	4b12      	ldr	r3, [pc, #72]	@ (800407c <voltageSendCan+0x20e4>)
 8004032:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 8004036:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S11_VOLTAGES_1_LENGTH;
 8004038:	4b10      	ldr	r3, [pc, #64]	@ (800407c <voltageSendCan+0x20e4>)
 800403a:	2206      	movs	r2, #6
 800403c:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800403e:	4b0f      	ldr	r3, [pc, #60]	@ (800407c <voltageSendCan+0x20e4>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004044:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <voltageSendCan+0x20e4>)
 8004046:	2200      	movs	r2, #0
 8004048:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800404a:	2300      	movs	r3, #0
 800404c:	4a0a      	ldr	r2, [pc, #40]	@ (8004078 <voltageSendCan+0x20e0>)
 800404e:	490b      	ldr	r1, [pc, #44]	@ (800407c <voltageSendCan+0x20e4>)
 8004050:	480b      	ldr	r0, [pc, #44]	@ (8004080 <voltageSendCan+0x20e8>)
 8004052:	f002 fcf3 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 826b 	beq.w	8004534 <voltageSendCan+0x259c>
      Error_Handler();
 800405e:	f001 fcc9 	bl	80059f4 <Error_Handler>
    break;
 8004062:	e267      	b.n	8004534 <voltageSendCan+0x259c>
 8004064:	f3af 8000 	nop.w
 8004068:	00000000 	.word	0x00000000
 800406c:	40c38800 	.word	0x40c38800
 8004070:	20000480 	.word	0x20000480
 8004074:	20000368 	.word	0x20000368
 8004078:	20000288 	.word	0x20000288
 800407c:	20000254 	.word	0x20000254
 8004080:	2000011c 	.word	0x2000011c
 8004084:	20000370 	.word	0x20000370

  case 21:
    can1_ams_s11_voltages_2.s11v07 = can1_ams_s11_voltages_2_s11v07_encode((float) rawVoltages[111] / 10000.0);
 8004088:	4bc5      	ldr	r3, [pc, #788]	@ (80043a0 <voltageSendCan+0x2408>)
 800408a:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004096:	ee17 0a90 	vmov	r0, s15
 800409a:	f7fc f9f9 	bl	8000490 <__aeabi_f2d>
 800409e:	a3be      	add	r3, pc, #760	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f7fc fb76 	bl	8000794 <__aeabi_ddiv>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	ec43 2b17 	vmov	d7, r2, r3
 80040b0:	eeb0 0a47 	vmov.f32	s0, s14
 80040b4:	eef0 0a67 	vmov.f32	s1, s15
 80040b8:	f00b faf2 	bl	800f6a0 <can1_ams_s11_voltages_2_s11v07_encode>
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	4bb8      	ldr	r3, [pc, #736]	@ (80043a4 <voltageSendCan+0x240c>)
 80040c2:	701a      	strb	r2, [r3, #0]
    can1_ams_s11_voltages_2.s11v08 = can1_ams_s11_voltages_2_s11v08_encode((float) rawVoltages[112] / 10000.0);
 80040c4:	4bb6      	ldr	r3, [pc, #728]	@ (80043a0 <voltageSendCan+0x2408>)
 80040c6:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d2:	ee17 0a90 	vmov	r0, s15
 80040d6:	f7fc f9db 	bl	8000490 <__aeabi_f2d>
 80040da:	a3af      	add	r3, pc, #700	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f7fc fb58 	bl	8000794 <__aeabi_ddiv>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	ec43 2b17 	vmov	d7, r2, r3
 80040ec:	eeb0 0a47 	vmov.f32	s0, s14
 80040f0:	eef0 0a67 	vmov.f32	s1, s15
 80040f4:	f00b fb00 	bl	800f6f8 <can1_ams_s11_voltages_2_s11v08_encode>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	4ba9      	ldr	r3, [pc, #676]	@ (80043a4 <voltageSendCan+0x240c>)
 80040fe:	705a      	strb	r2, [r3, #1]
    can1_ams_s11_voltages_2.s11v09 = can1_ams_s11_voltages_2_s11v09_encode((float) rawVoltages[113] / 10000.0);
 8004100:	4ba7      	ldr	r3, [pc, #668]	@ (80043a0 <voltageSendCan+0x2408>)
 8004102:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	@ 0xe2
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	ee17 0a90 	vmov	r0, s15
 8004112:	f7fc f9bd 	bl	8000490 <__aeabi_f2d>
 8004116:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f7fc fb3a 	bl	8000794 <__aeabi_ddiv>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	ec43 2b17 	vmov	d7, r2, r3
 8004128:	eeb0 0a47 	vmov.f32	s0, s14
 800412c:	eef0 0a67 	vmov.f32	s1, s15
 8004130:	f00b fb0e 	bl	800f750 <can1_ams_s11_voltages_2_s11v09_encode>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	4b9a      	ldr	r3, [pc, #616]	@ (80043a4 <voltageSendCan+0x240c>)
 800413a:	709a      	strb	r2, [r3, #2]
    can1_ams_s11_voltages_2.s11v10 = can1_ams_s11_voltages_2_s11v10_encode((float) rawVoltages[114] / 10000.0);
 800413c:	4b98      	ldr	r3, [pc, #608]	@ (80043a0 <voltageSendCan+0x2408>)
 800413e:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	@ 0xe4
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	ee17 0a90 	vmov	r0, s15
 800414e:	f7fc f99f 	bl	8000490 <__aeabi_f2d>
 8004152:	a391      	add	r3, pc, #580	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f7fc fb1c 	bl	8000794 <__aeabi_ddiv>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	ec43 2b17 	vmov	d7, r2, r3
 8004164:	eeb0 0a47 	vmov.f32	s0, s14
 8004168:	eef0 0a67 	vmov.f32	s1, s15
 800416c:	f00b fb1c 	bl	800f7a8 <can1_ams_s11_voltages_2_s11v10_encode>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4b8b      	ldr	r3, [pc, #556]	@ (80043a4 <voltageSendCan+0x240c>)
 8004176:	70da      	strb	r2, [r3, #3]
    can1_ams_s11_voltages_2.s11v11 = can1_ams_s11_voltages_2_s11v11_encode((float) rawVoltages[115] / 10000.0);
 8004178:	4b89      	ldr	r3, [pc, #548]	@ (80043a0 <voltageSendCan+0x2408>)
 800417a:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	@ 0xe6
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	ee17 0a90 	vmov	r0, s15
 800418a:	f7fc f981 	bl	8000490 <__aeabi_f2d>
 800418e:	a382      	add	r3, pc, #520	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f7fc fafe 	bl	8000794 <__aeabi_ddiv>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	ec43 2b17 	vmov	d7, r2, r3
 80041a0:	eeb0 0a47 	vmov.f32	s0, s14
 80041a4:	eef0 0a67 	vmov.f32	s1, s15
 80041a8:	f00b fb2a 	bl	800f800 <can1_ams_s11_voltages_2_s11v11_encode>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b7c      	ldr	r3, [pc, #496]	@ (80043a4 <voltageSendCan+0x240c>)
 80041b2:	711a      	strb	r2, [r3, #4]

    can1_ams_s11_voltages_2_pack(txData, &can1_ams_s11_voltages_2, CAN1_AMS_S11_VOLTAGES_2_LENGTH);
 80041b4:	2205      	movs	r2, #5
 80041b6:	497b      	ldr	r1, [pc, #492]	@ (80043a4 <voltageSendCan+0x240c>)
 80041b8:	487b      	ldr	r0, [pc, #492]	@ (80043a8 <voltageSendCan+0x2410>)
 80041ba:	f00b fa07 	bl	800f5cc <can1_ams_s11_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S11_VOLTAGES_2_FRAME_ID;
 80041be:	4b7b      	ldr	r3, [pc, #492]	@ (80043ac <voltageSendCan+0x2414>)
 80041c0:	f240 226d 	movw	r2, #621	@ 0x26d
 80041c4:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S11_VOLTAGES_2_LENGTH;
 80041c6:	4b79      	ldr	r3, [pc, #484]	@ (80043ac <voltageSendCan+0x2414>)
 80041c8:	2205      	movs	r2, #5
 80041ca:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80041cc:	4b77      	ldr	r3, [pc, #476]	@ (80043ac <voltageSendCan+0x2414>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80041d2:	4b76      	ldr	r3, [pc, #472]	@ (80043ac <voltageSendCan+0x2414>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80041d8:	2300      	movs	r3, #0
 80041da:	4a73      	ldr	r2, [pc, #460]	@ (80043a8 <voltageSendCan+0x2410>)
 80041dc:	4973      	ldr	r1, [pc, #460]	@ (80043ac <voltageSendCan+0x2414>)
 80041de:	4874      	ldr	r0, [pc, #464]	@ (80043b0 <voltageSendCan+0x2418>)
 80041e0:	f002 fc2c 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 81a6 	beq.w	8004538 <voltageSendCan+0x25a0>
      Error_Handler();
 80041ec:	f001 fc02 	bl	80059f4 <Error_Handler>
    break;
 80041f0:	e1a2      	b.n	8004538 <voltageSendCan+0x25a0>

  case 22:
    can1_ams_s12_voltages_1.s12v01 = can1_ams_s12_voltages_1_s12v01_encode((float) rawVoltages[116] / 10000.0);
 80041f2:	4b6b      	ldr	r3, [pc, #428]	@ (80043a0 <voltageSendCan+0x2408>)
 80041f4:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004200:	ee17 0a90 	vmov	r0, s15
 8004204:	f7fc f944 	bl	8000490 <__aeabi_f2d>
 8004208:	a363      	add	r3, pc, #396	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc fac1 	bl	8000794 <__aeabi_ddiv>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	ec43 2b17 	vmov	d7, r2, r3
 800421a:	eeb0 0a47 	vmov.f32	s0, s14
 800421e:	eef0 0a67 	vmov.f32	s1, s15
 8004222:	f00b fb91 	bl	800f948 <can1_ams_s12_voltages_1_s12v01_encode>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	4b62      	ldr	r3, [pc, #392]	@ (80043b4 <voltageSendCan+0x241c>)
 800422c:	701a      	strb	r2, [r3, #0]
    can1_ams_s12_voltages_1.s12v02 = can1_ams_s12_voltages_1_s12v02_encode((float) rawVoltages[117] / 10000.0);
 800422e:	4b5c      	ldr	r3, [pc, #368]	@ (80043a0 <voltageSendCan+0x2408>)
 8004230:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423c:	ee17 0a90 	vmov	r0, s15
 8004240:	f7fc f926 	bl	8000490 <__aeabi_f2d>
 8004244:	a354      	add	r3, pc, #336	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f7fc faa3 	bl	8000794 <__aeabi_ddiv>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	ec43 2b17 	vmov	d7, r2, r3
 8004256:	eeb0 0a47 	vmov.f32	s0, s14
 800425a:	eef0 0a67 	vmov.f32	s1, s15
 800425e:	f00b fb9f 	bl	800f9a0 <can1_ams_s12_voltages_1_s12v02_encode>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	4b53      	ldr	r3, [pc, #332]	@ (80043b4 <voltageSendCan+0x241c>)
 8004268:	705a      	strb	r2, [r3, #1]
    can1_ams_s12_voltages_1.s12v03 = can1_ams_s12_voltages_1_s12v03_encode((float) rawVoltages[118] / 10000.0);
 800426a:	4b4d      	ldr	r3, [pc, #308]	@ (80043a0 <voltageSendCan+0x2408>)
 800426c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004278:	ee17 0a90 	vmov	r0, s15
 800427c:	f7fc f908 	bl	8000490 <__aeabi_f2d>
 8004280:	a345      	add	r3, pc, #276	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f7fc fa85 	bl	8000794 <__aeabi_ddiv>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	ec43 2b17 	vmov	d7, r2, r3
 8004292:	eeb0 0a47 	vmov.f32	s0, s14
 8004296:	eef0 0a67 	vmov.f32	s1, s15
 800429a:	f00b fbad 	bl	800f9f8 <can1_ams_s12_voltages_1_s12v03_encode>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b44      	ldr	r3, [pc, #272]	@ (80043b4 <voltageSendCan+0x241c>)
 80042a4:	709a      	strb	r2, [r3, #2]
    can1_ams_s12_voltages_1.s12v04 = can1_ams_s12_voltages_1_s12v04_encode((float) rawVoltages[119] / 10000.0);
 80042a6:	4b3e      	ldr	r3, [pc, #248]	@ (80043a0 <voltageSendCan+0x2408>)
 80042a8:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b4:	ee17 0a90 	vmov	r0, s15
 80042b8:	f7fc f8ea 	bl	8000490 <__aeabi_f2d>
 80042bc:	a336      	add	r3, pc, #216	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f7fc fa67 	bl	8000794 <__aeabi_ddiv>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	ec43 2b17 	vmov	d7, r2, r3
 80042ce:	eeb0 0a47 	vmov.f32	s0, s14
 80042d2:	eef0 0a67 	vmov.f32	s1, s15
 80042d6:	f00b fbbb 	bl	800fa50 <can1_ams_s12_voltages_1_s12v04_encode>
 80042da:	4603      	mov	r3, r0
 80042dc:	461a      	mov	r2, r3
 80042de:	4b35      	ldr	r3, [pc, #212]	@ (80043b4 <voltageSendCan+0x241c>)
 80042e0:	70da      	strb	r2, [r3, #3]
    can1_ams_s12_voltages_1.s12v05 = can1_ams_s12_voltages_1_s12v05_encode((float) rawVoltages[120] / 10000.0);
 80042e2:	4b2f      	ldr	r3, [pc, #188]	@ (80043a0 <voltageSendCan+0x2408>)
 80042e4:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 80042e8:	ee07 3a90 	vmov	s15, r3
 80042ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f0:	ee17 0a90 	vmov	r0, s15
 80042f4:	f7fc f8cc 	bl	8000490 <__aeabi_f2d>
 80042f8:	a327      	add	r3, pc, #156	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f7fc fa49 	bl	8000794 <__aeabi_ddiv>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	ec43 2b17 	vmov	d7, r2, r3
 800430a:	eeb0 0a47 	vmov.f32	s0, s14
 800430e:	eef0 0a67 	vmov.f32	s1, s15
 8004312:	f00b fbc9 	bl	800faa8 <can1_ams_s12_voltages_1_s12v05_encode>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	4b26      	ldr	r3, [pc, #152]	@ (80043b4 <voltageSendCan+0x241c>)
 800431c:	711a      	strb	r2, [r3, #4]
    can1_ams_s12_voltages_1.s12v06 = can1_ams_s12_voltages_1_s12v06_encode((float) rawVoltages[121] / 10000.0);
 800431e:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <voltageSendCan+0x2408>)
 8004320:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432c:	ee17 0a90 	vmov	r0, s15
 8004330:	f7fc f8ae 	bl	8000490 <__aeabi_f2d>
 8004334:	a318      	add	r3, pc, #96	@ (adr r3, 8004398 <voltageSendCan+0x2400>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fc fa2b 	bl	8000794 <__aeabi_ddiv>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	ec43 2b17 	vmov	d7, r2, r3
 8004346:	eeb0 0a47 	vmov.f32	s0, s14
 800434a:	eef0 0a67 	vmov.f32	s1, s15
 800434e:	f00b fbd7 	bl	800fb00 <can1_ams_s12_voltages_1_s12v06_encode>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	4b17      	ldr	r3, [pc, #92]	@ (80043b4 <voltageSendCan+0x241c>)
 8004358:	715a      	strb	r2, [r3, #5]

    can1_ams_s12_voltages_1_pack(txData, &can1_ams_s12_voltages_1, CAN1_AMS_S12_VOLTAGES_1_LENGTH);
 800435a:	2206      	movs	r2, #6
 800435c:	4915      	ldr	r1, [pc, #84]	@ (80043b4 <voltageSendCan+0x241c>)
 800435e:	4812      	ldr	r0, [pc, #72]	@ (80043a8 <voltageSendCan+0x2410>)
 8004360:	f00b fa78 	bl	800f854 <can1_ams_s12_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S12_VOLTAGES_1_FRAME_ID;
 8004364:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <voltageSendCan+0x2414>)
 8004366:	f240 226e 	movw	r2, #622	@ 0x26e
 800436a:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S12_VOLTAGES_1_LENGTH;
 800436c:	4b0f      	ldr	r3, [pc, #60]	@ (80043ac <voltageSendCan+0x2414>)
 800436e:	2206      	movs	r2, #6
 8004370:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004372:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <voltageSendCan+0x2414>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004378:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <voltageSendCan+0x2414>)
 800437a:	2200      	movs	r2, #0
 800437c:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800437e:	2300      	movs	r3, #0
 8004380:	4a09      	ldr	r2, [pc, #36]	@ (80043a8 <voltageSendCan+0x2410>)
 8004382:	490a      	ldr	r1, [pc, #40]	@ (80043ac <voltageSendCan+0x2414>)
 8004384:	480a      	ldr	r0, [pc, #40]	@ (80043b0 <voltageSendCan+0x2418>)
 8004386:	f002 fb59 	bl	8006a3c <HAL_CAN_AddTxMessage>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80d5 	beq.w	800453c <voltageSendCan+0x25a4>
      Error_Handler();
 8004392:	f001 fb2f 	bl	80059f4 <Error_Handler>
    break;
 8004396:	e0d1      	b.n	800453c <voltageSendCan+0x25a4>
 8004398:	00000000 	.word	0x00000000
 800439c:	40c38800 	.word	0x40c38800
 80043a0:	20000480 	.word	0x20000480
 80043a4:	20000378 	.word	0x20000378
 80043a8:	20000288 	.word	0x20000288
 80043ac:	20000254 	.word	0x20000254
 80043b0:	2000011c 	.word	0x2000011c
 80043b4:	20000380 	.word	0x20000380

  case 23:
    can1_ams_s12_voltages_2.s12v07 = can1_ams_s12_voltages_2_s12v07_encode((float) rawVoltages[122] / 10000.0);
 80043b8:	4b65      	ldr	r3, [pc, #404]	@ (8004550 <voltageSendCan+0x25b8>)
 80043ba:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	ee17 0a90 	vmov	r0, s15
 80043ca:	f7fc f861 	bl	8000490 <__aeabi_f2d>
 80043ce:	a35e      	add	r3, pc, #376	@ (adr r3, 8004548 <voltageSendCan+0x25b0>)
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f7fc f9de 	bl	8000794 <__aeabi_ddiv>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	ec43 2b17 	vmov	d7, r2, r3
 80043e0:	eeb0 0a47 	vmov.f32	s0, s14
 80043e4:	eef0 0a67 	vmov.f32	s1, s15
 80043e8:	f00b fc1e 	bl	800fc28 <can1_ams_s12_voltages_2_s12v07_encode>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b58      	ldr	r3, [pc, #352]	@ (8004554 <voltageSendCan+0x25bc>)
 80043f2:	701a      	strb	r2, [r3, #0]
    can1_ams_s12_voltages_2.s12v08 = can1_ams_s12_voltages_2_s12v08_encode((float) rawVoltages[123] / 10000.0);
 80043f4:	4b56      	ldr	r3, [pc, #344]	@ (8004550 <voltageSendCan+0x25b8>)
 80043f6:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	ee17 0a90 	vmov	r0, s15
 8004406:	f7fc f843 	bl	8000490 <__aeabi_f2d>
 800440a:	a34f      	add	r3, pc, #316	@ (adr r3, 8004548 <voltageSendCan+0x25b0>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fc f9c0 	bl	8000794 <__aeabi_ddiv>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	ec43 2b17 	vmov	d7, r2, r3
 800441c:	eeb0 0a47 	vmov.f32	s0, s14
 8004420:	eef0 0a67 	vmov.f32	s1, s15
 8004424:	f00b fc2c 	bl	800fc80 <can1_ams_s12_voltages_2_s12v08_encode>
 8004428:	4603      	mov	r3, r0
 800442a:	461a      	mov	r2, r3
 800442c:	4b49      	ldr	r3, [pc, #292]	@ (8004554 <voltageSendCan+0x25bc>)
 800442e:	705a      	strb	r2, [r3, #1]
    can1_ams_s12_voltages_2.s12v09 = can1_ams_s12_voltages_2_s12v09_encode((float) rawVoltages[124] / 10000.0);
 8004430:	4b47      	ldr	r3, [pc, #284]	@ (8004550 <voltageSendCan+0x25b8>)
 8004432:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	ee17 0a90 	vmov	r0, s15
 8004442:	f7fc f825 	bl	8000490 <__aeabi_f2d>
 8004446:	a340      	add	r3, pc, #256	@ (adr r3, 8004548 <voltageSendCan+0x25b0>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fc f9a2 	bl	8000794 <__aeabi_ddiv>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	ec43 2b17 	vmov	d7, r2, r3
 8004458:	eeb0 0a47 	vmov.f32	s0, s14
 800445c:	eef0 0a67 	vmov.f32	s1, s15
 8004460:	f00b fc3a 	bl	800fcd8 <can1_ams_s12_voltages_2_s12v09_encode>
 8004464:	4603      	mov	r3, r0
 8004466:	461a      	mov	r2, r3
 8004468:	4b3a      	ldr	r3, [pc, #232]	@ (8004554 <voltageSendCan+0x25bc>)
 800446a:	709a      	strb	r2, [r3, #2]
    can1_ams_s12_voltages_2.s12v10 = can1_ams_s12_voltages_2_s12v10_encode((float) rawVoltages[125] / 10000.0);
 800446c:	4b38      	ldr	r3, [pc, #224]	@ (8004550 <voltageSendCan+0x25b8>)
 800446e:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	ee17 0a90 	vmov	r0, s15
 800447e:	f7fc f807 	bl	8000490 <__aeabi_f2d>
 8004482:	a331      	add	r3, pc, #196	@ (adr r3, 8004548 <voltageSendCan+0x25b0>)
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f7fc f984 	bl	8000794 <__aeabi_ddiv>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	ec43 2b17 	vmov	d7, r2, r3
 8004494:	eeb0 0a47 	vmov.f32	s0, s14
 8004498:	eef0 0a67 	vmov.f32	s1, s15
 800449c:	f00b fc48 	bl	800fd30 <can1_ams_s12_voltages_2_s12v10_encode>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004554 <voltageSendCan+0x25bc>)
 80044a6:	70da      	strb	r2, [r3, #3]

    can1_ams_s12_voltages_2_pack(txData, &can1_ams_s12_voltages_2, CAN1_AMS_S12_VOLTAGES_2_LENGTH);
 80044a8:	2205      	movs	r2, #5
 80044aa:	492a      	ldr	r1, [pc, #168]	@ (8004554 <voltageSendCan+0x25bc>)
 80044ac:	482a      	ldr	r0, [pc, #168]	@ (8004558 <voltageSendCan+0x25c0>)
 80044ae:	f00b fb51 	bl	800fb54 <can1_ams_s12_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S12_VOLTAGES_2_FRAME_ID;
 80044b2:	4b2a      	ldr	r3, [pc, #168]	@ (800455c <voltageSendCan+0x25c4>)
 80044b4:	f240 226f 	movw	r2, #623	@ 0x26f
 80044b8:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S12_VOLTAGES_2_LENGTH;
 80044ba:	4b28      	ldr	r3, [pc, #160]	@ (800455c <voltageSendCan+0x25c4>)
 80044bc:	2205      	movs	r2, #5
 80044be:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80044c0:	4b26      	ldr	r3, [pc, #152]	@ (800455c <voltageSendCan+0x25c4>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80044c6:	4b25      	ldr	r3, [pc, #148]	@ (800455c <voltageSendCan+0x25c4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80044cc:	2300      	movs	r3, #0
 80044ce:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <voltageSendCan+0x25c0>)
 80044d0:	4922      	ldr	r1, [pc, #136]	@ (800455c <voltageSendCan+0x25c4>)
 80044d2:	4823      	ldr	r0, [pc, #140]	@ (8004560 <voltageSendCan+0x25c8>)
 80044d4:	f002 fab2 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d030      	beq.n	8004540 <voltageSendCan+0x25a8>
      Error_Handler();
 80044de:	f001 fa89 	bl	80059f4 <Error_Handler>
    break;
 80044e2:	e02d      	b.n	8004540 <voltageSendCan+0x25a8>
    break;
 80044e4:	bf00      	nop
 80044e6:	e02c      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 80044e8:	bf00      	nop
 80044ea:	e02a      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 80044ec:	bf00      	nop
 80044ee:	e028      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 80044f0:	bf00      	nop
 80044f2:	e026      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 80044f4:	bf00      	nop
 80044f6:	e024      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 80044f8:	bf00      	nop
 80044fa:	e022      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 80044fc:	bf00      	nop
 80044fe:	e020      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004500:	bf00      	nop
 8004502:	e01e      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004504:	bf00      	nop
 8004506:	e01c      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004508:	bf00      	nop
 800450a:	e01a      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 800450c:	bf00      	nop
 800450e:	e018      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004510:	bf00      	nop
 8004512:	e016      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004514:	bf00      	nop
 8004516:	e014      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004518:	bf00      	nop
 800451a:	e012      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 800451c:	bf00      	nop
 800451e:	e010      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004520:	bf00      	nop
 8004522:	e00e      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004524:	bf00      	nop
 8004526:	e00c      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004528:	bf00      	nop
 800452a:	e00a      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 800452c:	bf00      	nop
 800452e:	e008      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004530:	bf00      	nop
 8004532:	e006      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004534:	bf00      	nop
 8004536:	e004      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004538:	bf00      	nop
 800453a:	e002      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 800453c:	bf00      	nop
 800453e:	e000      	b.n	8004542 <voltageSendCan+0x25aa>
    break;
 8004540:	bf00      	nop
  }
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	00000000 	.word	0x00000000
 800454c:	40c38800 	.word	0x40c38800
 8004550:	20000480 	.word	0x20000480
 8004554:	20000388 	.word	0x20000388
 8004558:	20000288 	.word	0x20000288
 800455c:	20000254 	.word	0x20000254
 8004560:	2000011c 	.word	0x2000011c

08004564 <temperatureSendCan>:

static void temperatureSendCan(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  switch (amsTxMessageCounter % 12)
 8004568:	4b9c      	ldr	r3, [pc, #624]	@ (80047dc <temperatureSendCan+0x278>)
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	4b9c      	ldr	r3, [pc, #624]	@ (80047e0 <temperatureSendCan+0x27c>)
 800456e:	fba3 1302 	umull	r1, r3, r3, r2
 8004572:	08d9      	lsrs	r1, r3, #3
 8004574:	460b      	mov	r3, r1
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	440b      	add	r3, r1
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b0b      	cmp	r3, #11
 8004582:	f200 86e1 	bhi.w	8005348 <temperatureSendCan+0xde4>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <temperatureSendCan+0x28>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045bd 	.word	0x080045bd
 8004590:	080046cd 	.word	0x080046cd
 8004594:	080047f9 	.word	0x080047f9
 8004598:	08004909 	.word	0x08004909
 800459c:	08004a2d 	.word	0x08004a2d
 80045a0:	08004b3b 	.word	0x08004b3b
 80045a4:	08004c5d 	.word	0x08004c5d
 80045a8:	08004d71 	.word	0x08004d71
 80045ac:	08004ea1 	.word	0x08004ea1
 80045b0:	08004fbb 	.word	0x08004fbb
 80045b4:	080050e9 	.word	0x080050e9
 80045b8:	08005203 	.word	0x08005203
  {
  case 0:
    can1_ams_cell_temperatures.temperature_multiplexor = 0;
 80045bc:	4b89      	ldr	r3, [pc, #548]	@ (80047e4 <temperatureSendCan+0x280>)
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_encode(
        thermistor_adc_to_c_float(rawTemps[0]));
 80045c2:	4b89      	ldr	r3, [pc, #548]	@ (80047e8 <temperatureSendCan+0x284>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 fce0 	bl	8005f8c <thermistor_adc_to_c_float>
 80045cc:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_encode(
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ff5d 	bl	8000490 <__aeabi_f2d>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	ec43 2b10 	vmov	d0, r2, r3
 80045de:	f006 f9cb 	bl	800a978 <can1_ams_cell_temperatures_t1s1_encode>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	4b7f      	ldr	r3, [pc, #508]	@ (80047e4 <temperatureSendCan+0x280>)
 80045e8:	805a      	strh	r2, [r3, #2]
    can1_ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t1s2_encode(
        thermistor_adc_to_c_float(rawTemps[1]));
 80045ea:	4b7f      	ldr	r3, [pc, #508]	@ (80047e8 <temperatureSendCan+0x284>)
 80045ec:	885b      	ldrh	r3, [r3, #2]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 fccc 	bl	8005f8c <thermistor_adc_to_c_float>
 80045f4:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t1s2_encode(
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fb ff49 	bl	8000490 <__aeabi_f2d>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	ec43 2b10 	vmov	d0, r2, r3
 8004606:	f006 f9e3 	bl	800a9d0 <can1_ams_cell_temperatures_t1s2_encode>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	4b75      	ldr	r3, [pc, #468]	@ (80047e4 <temperatureSendCan+0x280>)
 8004610:	835a      	strh	r2, [r3, #26]
    can1_ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t1s3_encode(
        thermistor_adc_to_c_float(rawTemps[2]));
 8004612:	4b75      	ldr	r3, [pc, #468]	@ (80047e8 <temperatureSendCan+0x284>)
 8004614:	889b      	ldrh	r3, [r3, #4]
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fcb8 	bl	8005f8c <thermistor_adc_to_c_float>
 800461c:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t1s3_encode(
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb ff35 	bl	8000490 <__aeabi_f2d>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	ec43 2b10 	vmov	d0, r2, r3
 800462e:	f006 f9fb 	bl	800aa28 <can1_ams_cell_temperatures_t1s3_encode>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	4b6b      	ldr	r3, [pc, #428]	@ (80047e4 <temperatureSendCan+0x280>)
 8004638:	865a      	strh	r2, [r3, #50]	@ 0x32
    can1_ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t1s4_encode(
        thermistor_adc_to_c_float(rawTemps[3]));
 800463a:	4b6b      	ldr	r3, [pc, #428]	@ (80047e8 <temperatureSendCan+0x284>)
 800463c:	88db      	ldrh	r3, [r3, #6]
 800463e:	4618      	mov	r0, r3
 8004640:	f001 fca4 	bl	8005f8c <thermistor_adc_to_c_float>
 8004644:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t1s4_encode(
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb ff21 	bl	8000490 <__aeabi_f2d>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	ec43 2b10 	vmov	d0, r2, r3
 8004656:	f006 fa13 	bl	800aa80 <can1_ams_cell_temperatures_t1s4_encode>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	4b61      	ldr	r3, [pc, #388]	@ (80047e4 <temperatureSendCan+0x280>)
 8004660:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    can1_ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t1s5_encode(
        thermistor_adc_to_c_float(rawTemps[4]));
 8004664:	4b60      	ldr	r3, [pc, #384]	@ (80047e8 <temperatureSendCan+0x284>)
 8004666:	891b      	ldrh	r3, [r3, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f001 fc8f 	bl	8005f8c <thermistor_adc_to_c_float>
 800466e:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t1s5_encode(
 8004672:	4618      	mov	r0, r3
 8004674:	f7fb ff0c 	bl	8000490 <__aeabi_f2d>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	ec43 2b10 	vmov	d0, r2, r3
 8004680:	f006 fa2a 	bl	800aad8 <can1_ams_cell_temperatures_t1s5_encode>
 8004684:	4603      	mov	r3, r0
 8004686:	461a      	mov	r2, r3
 8004688:	4b56      	ldr	r3, [pc, #344]	@ (80047e4 <temperatureSendCan+0x280>)
 800468a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 800468e:	2208      	movs	r2, #8
 8004690:	4954      	ldr	r1, [pc, #336]	@ (80047e4 <temperatureSendCan+0x280>)
 8004692:	4856      	ldr	r0, [pc, #344]	@ (80047ec <temperatureSendCan+0x288>)
 8004694:	f005 f850 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 8004698:	4b55      	ldr	r3, [pc, #340]	@ (80047f0 <temperatureSendCan+0x28c>)
 800469a:	2222      	movs	r2, #34	@ 0x22
 800469c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 800469e:	4b54      	ldr	r3, [pc, #336]	@ (80047f0 <temperatureSendCan+0x28c>)
 80046a0:	2208      	movs	r2, #8
 80046a2:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80046a4:	4b52      	ldr	r3, [pc, #328]	@ (80047f0 <temperatureSendCan+0x28c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80046aa:	4b51      	ldr	r3, [pc, #324]	@ (80047f0 <temperatureSendCan+0x28c>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80046b0:	2300      	movs	r3, #0
 80046b2:	4a4e      	ldr	r2, [pc, #312]	@ (80047ec <temperatureSendCan+0x288>)
 80046b4:	494e      	ldr	r1, [pc, #312]	@ (80047f0 <temperatureSendCan+0x28c>)
 80046b6:	484f      	ldr	r0, [pc, #316]	@ (80047f4 <temperatureSendCan+0x290>)
 80046b8:	f002 f9c0 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 862b 	beq.w	800531a <temperatureSendCan+0xdb6>
      Error_Handler();
 80046c4:	f001 f996 	bl	80059f4 <Error_Handler>
    break;
 80046c8:	f000 be27 	b.w	800531a <temperatureSendCan+0xdb6>

  case 1:
    can1_ams_cell_temperatures.temperature_multiplexor = 1;
 80046cc:	4b45      	ldr	r3, [pc, #276]	@ (80047e4 <temperatureSendCan+0x280>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_encode(thermistor_adc_to_c_float(rawTemps[5]));
 80046d2:	4b45      	ldr	r3, [pc, #276]	@ (80047e8 <temperatureSendCan+0x284>)
 80046d4:	895b      	ldrh	r3, [r3, #10]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 fc58 	bl	8005f8c <thermistor_adc_to_c_float>
 80046dc:	ee10 3a10 	vmov	r3, s0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fb fed5 	bl	8000490 <__aeabi_f2d>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	ec43 2b10 	vmov	d0, r2, r3
 80046ee:	f006 f96f 	bl	800a9d0 <can1_ams_cell_temperatures_t1s2_encode>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b3b      	ldr	r3, [pc, #236]	@ (80047e4 <temperatureSendCan+0x280>)
 80046f8:	809a      	strh	r2, [r3, #4]
    can1_ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_encode(thermistor_adc_to_c_float(rawTemps[6]));
 80046fa:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <temperatureSendCan+0x284>)
 80046fc:	899b      	ldrh	r3, [r3, #12]
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 fc44 	bl	8005f8c <thermistor_adc_to_c_float>
 8004704:	ee10 3a10 	vmov	r3, s0
 8004708:	4618      	mov	r0, r3
 800470a:	f7fb fec1 	bl	8000490 <__aeabi_f2d>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	ec43 2b10 	vmov	d0, r2, r3
 8004716:	f006 fb3f 	bl	800ad98 <can1_ams_cell_temperatures_t2s2_encode>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <temperatureSendCan+0x280>)
 8004720:	839a      	strh	r2, [r3, #28]
    can1_ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_encode(thermistor_adc_to_c_float(rawTemps[7]));
 8004722:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <temperatureSendCan+0x284>)
 8004724:	89db      	ldrh	r3, [r3, #14]
 8004726:	4618      	mov	r0, r3
 8004728:	f001 fc30 	bl	8005f8c <thermistor_adc_to_c_float>
 800472c:	ee10 3a10 	vmov	r3, s0
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb fead 	bl	8000490 <__aeabi_f2d>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	ec43 2b10 	vmov	d0, r2, r3
 800473e:	f006 fd0f 	bl	800b160 <can1_ams_cell_temperatures_t3s2_encode>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	4b27      	ldr	r3, [pc, #156]	@ (80047e4 <temperatureSendCan+0x280>)
 8004748:	869a      	strh	r2, [r3, #52]	@ 0x34
    can1_ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_encode(thermistor_adc_to_c_float(rawTemps[8]));
 800474a:	4b27      	ldr	r3, [pc, #156]	@ (80047e8 <temperatureSendCan+0x284>)
 800474c:	8a1b      	ldrh	r3, [r3, #16]
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fc1c 	bl	8005f8c <thermistor_adc_to_c_float>
 8004754:	ee10 3a10 	vmov	r3, s0
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fe99 	bl	8000490 <__aeabi_f2d>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	ec43 2b10 	vmov	d0, r2, r3
 8004766:	f006 fedf 	bl	800b528 <can1_ams_cell_temperatures_t4s2_encode>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <temperatureSendCan+0x280>)
 8004770:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    can1_ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_encode(thermistor_adc_to_c_float(rawTemps[9]));
 8004774:	4b1c      	ldr	r3, [pc, #112]	@ (80047e8 <temperatureSendCan+0x284>)
 8004776:	8a5b      	ldrh	r3, [r3, #18]
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fc07 	bl	8005f8c <thermistor_adc_to_c_float>
 800477e:	ee10 3a10 	vmov	r3, s0
 8004782:	4618      	mov	r0, r3
 8004784:	f7fb fe84 	bl	8000490 <__aeabi_f2d>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	ec43 2b10 	vmov	d0, r2, r3
 8004790:	f007 f8ae 	bl	800b8f0 <can1_ams_cell_temperatures_t5s2_encode>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <temperatureSendCan+0x280>)
 800479a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 800479e:	2208      	movs	r2, #8
 80047a0:	4910      	ldr	r1, [pc, #64]	@ (80047e4 <temperatureSendCan+0x280>)
 80047a2:	4812      	ldr	r0, [pc, #72]	@ (80047ec <temperatureSendCan+0x288>)
 80047a4:	f004 ffc8 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <temperatureSendCan+0x28c>)
 80047aa:	2222      	movs	r2, #34	@ 0x22
 80047ac:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 80047ae:	4b10      	ldr	r3, [pc, #64]	@ (80047f0 <temperatureSendCan+0x28c>)
 80047b0:	2208      	movs	r2, #8
 80047b2:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80047b4:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <temperatureSendCan+0x28c>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <temperatureSendCan+0x28c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80047c0:	2300      	movs	r3, #0
 80047c2:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <temperatureSendCan+0x288>)
 80047c4:	490a      	ldr	r1, [pc, #40]	@ (80047f0 <temperatureSendCan+0x28c>)
 80047c6:	480b      	ldr	r0, [pc, #44]	@ (80047f4 <temperatureSendCan+0x290>)
 80047c8:	f002 f938 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 85a5 	beq.w	800531e <temperatureSendCan+0xdba>
      Error_Handler();
 80047d4:	f001 f90e 	bl	80059f4 <Error_Handler>
    break;
 80047d8:	f000 bda1 	b.w	800531e <temperatureSendCan+0xdba>
 80047dc:	20000801 	.word	0x20000801
 80047e0:	aaaaaaab 	.word	0xaaaaaaab
 80047e4:	20000390 	.word	0x20000390
 80047e8:	2000057c 	.word	0x2000057c
 80047ec:	20000288 	.word	0x20000288
 80047f0:	20000254 	.word	0x20000254
 80047f4:	2000011c 	.word	0x2000011c

  case 2:
    can1_ams_cell_temperatures.temperature_multiplexor = 2;
 80047f8:	4b87      	ldr	r3, [pc, #540]	@ (8004a18 <temperatureSendCan+0x4b4>)
 80047fa:	2202      	movs	r2, #2
 80047fc:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_encode(
        thermistor_adc_to_c_float(rawTemps[10]));
 80047fe:	4b87      	ldr	r3, [pc, #540]	@ (8004a1c <temperatureSendCan+0x4b8>)
 8004800:	8a9b      	ldrh	r3, [r3, #20]
 8004802:	4618      	mov	r0, r3
 8004804:	f001 fbc2 	bl	8005f8c <thermistor_adc_to_c_float>
 8004808:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_encode(
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fe3f 	bl	8000490 <__aeabi_f2d>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	ec43 2b10 	vmov	d0, r2, r3
 800481a:	f006 f905 	bl	800aa28 <can1_ams_cell_temperatures_t1s3_encode>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	4b7d      	ldr	r3, [pc, #500]	@ (8004a18 <temperatureSendCan+0x4b4>)
 8004824:	80da      	strh	r2, [r3, #6]
    can1_ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_encode(
        thermistor_adc_to_c_float(rawTemps[11]));
 8004826:	4b7d      	ldr	r3, [pc, #500]	@ (8004a1c <temperatureSendCan+0x4b8>)
 8004828:	8adb      	ldrh	r3, [r3, #22]
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fbae 	bl	8005f8c <thermistor_adc_to_c_float>
 8004830:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_encode(
 8004834:	4618      	mov	r0, r3
 8004836:	f7fb fe2b 	bl	8000490 <__aeabi_f2d>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	ec43 2b10 	vmov	d0, r2, r3
 8004842:	f006 fad5 	bl	800adf0 <can1_ams_cell_temperatures_t2s3_encode>
 8004846:	4603      	mov	r3, r0
 8004848:	461a      	mov	r2, r3
 800484a:	4b73      	ldr	r3, [pc, #460]	@ (8004a18 <temperatureSendCan+0x4b4>)
 800484c:	83da      	strh	r2, [r3, #30]
    can1_ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_encode(
        thermistor_adc_to_c_float(rawTemps[12]));
 800484e:	4b73      	ldr	r3, [pc, #460]	@ (8004a1c <temperatureSendCan+0x4b8>)
 8004850:	8b1b      	ldrh	r3, [r3, #24]
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fb9a 	bl	8005f8c <thermistor_adc_to_c_float>
 8004858:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_encode(
 800485c:	4618      	mov	r0, r3
 800485e:	f7fb fe17 	bl	8000490 <__aeabi_f2d>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	ec43 2b10 	vmov	d0, r2, r3
 800486a:	f006 fca5 	bl	800b1b8 <can1_ams_cell_temperatures_t3s3_encode>
 800486e:	4603      	mov	r3, r0
 8004870:	461a      	mov	r2, r3
 8004872:	4b69      	ldr	r3, [pc, #420]	@ (8004a18 <temperatureSendCan+0x4b4>)
 8004874:	86da      	strh	r2, [r3, #54]	@ 0x36
    can1_ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_encode(
        thermistor_adc_to_c_float(rawTemps[13]));
 8004876:	4b69      	ldr	r3, [pc, #420]	@ (8004a1c <temperatureSendCan+0x4b8>)
 8004878:	8b5b      	ldrh	r3, [r3, #26]
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fb86 	bl	8005f8c <thermistor_adc_to_c_float>
 8004880:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_encode(
 8004884:	4618      	mov	r0, r3
 8004886:	f7fb fe03 	bl	8000490 <__aeabi_f2d>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	ec43 2b10 	vmov	d0, r2, r3
 8004892:	f006 fe75 	bl	800b580 <can1_ams_cell_temperatures_t4s3_encode>
 8004896:	4603      	mov	r3, r0
 8004898:	461a      	mov	r2, r3
 800489a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a18 <temperatureSendCan+0x4b4>)
 800489c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    can1_ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_encode(
        thermistor_adc_to_c_float(rawTemps[14]));
 80048a0:	4b5e      	ldr	r3, [pc, #376]	@ (8004a1c <temperatureSendCan+0x4b8>)
 80048a2:	8b9b      	ldrh	r3, [r3, #28]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 fb71 	bl	8005f8c <thermistor_adc_to_c_float>
 80048aa:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_encode(
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb fdee 	bl	8000490 <__aeabi_f2d>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	ec43 2b10 	vmov	d0, r2, r3
 80048bc:	f007 f844 	bl	800b948 <can1_ams_cell_temperatures_t5s3_encode>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	4b54      	ldr	r3, [pc, #336]	@ (8004a18 <temperatureSendCan+0x4b4>)
 80048c6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 80048ca:	2208      	movs	r2, #8
 80048cc:	4952      	ldr	r1, [pc, #328]	@ (8004a18 <temperatureSendCan+0x4b4>)
 80048ce:	4854      	ldr	r0, [pc, #336]	@ (8004a20 <temperatureSendCan+0x4bc>)
 80048d0:	f004 ff32 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 80048d4:	4b53      	ldr	r3, [pc, #332]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80048d6:	2222      	movs	r2, #34	@ 0x22
 80048d8:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 80048da:	4b52      	ldr	r3, [pc, #328]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80048dc:	2208      	movs	r2, #8
 80048de:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80048e0:	4b50      	ldr	r3, [pc, #320]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80048e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80048ec:	2300      	movs	r3, #0
 80048ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004a20 <temperatureSendCan+0x4bc>)
 80048f0:	494c      	ldr	r1, [pc, #304]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80048f2:	484d      	ldr	r0, [pc, #308]	@ (8004a28 <temperatureSendCan+0x4c4>)
 80048f4:	f002 f8a2 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8511 	beq.w	8005322 <temperatureSendCan+0xdbe>
      Error_Handler();
 8004900:	f001 f878 	bl	80059f4 <Error_Handler>
    break;
 8004904:	f000 bd0d 	b.w	8005322 <temperatureSendCan+0xdbe>

  case 3:
    can1_ams_cell_temperatures.temperature_multiplexor = 3;
 8004908:	4b43      	ldr	r3, [pc, #268]	@ (8004a18 <temperatureSendCan+0x4b4>)
 800490a:	2203      	movs	r2, #3
 800490c:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_encode(
        thermistor_adc_to_c_float(rawTemps[15]));
 800490e:	4b43      	ldr	r3, [pc, #268]	@ (8004a1c <temperatureSendCan+0x4b8>)
 8004910:	8bdb      	ldrh	r3, [r3, #30]
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fb3a 	bl	8005f8c <thermistor_adc_to_c_float>
 8004918:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_encode(
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fdb7 	bl	8000490 <__aeabi_f2d>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	ec43 2b10 	vmov	d0, r2, r3
 800492a:	f006 f8a9 	bl	800aa80 <can1_ams_cell_temperatures_t1s4_encode>
 800492e:	4603      	mov	r3, r0
 8004930:	461a      	mov	r2, r3
 8004932:	4b39      	ldr	r3, [pc, #228]	@ (8004a18 <temperatureSendCan+0x4b4>)
 8004934:	811a      	strh	r2, [r3, #8]
    can1_ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_encode(
        thermistor_adc_to_c_float(rawTemps[16]));
 8004936:	4b39      	ldr	r3, [pc, #228]	@ (8004a1c <temperatureSendCan+0x4b8>)
 8004938:	8c1b      	ldrh	r3, [r3, #32]
 800493a:	4618      	mov	r0, r3
 800493c:	f001 fb26 	bl	8005f8c <thermistor_adc_to_c_float>
 8004940:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_encode(
 8004944:	4618      	mov	r0, r3
 8004946:	f7fb fda3 	bl	8000490 <__aeabi_f2d>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	ec43 2b10 	vmov	d0, r2, r3
 8004952:	f006 fa79 	bl	800ae48 <can1_ams_cell_temperatures_t2s4_encode>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a18 <temperatureSendCan+0x4b4>)
 800495c:	841a      	strh	r2, [r3, #32]
    can1_ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_encode(
        thermistor_adc_to_c_float(rawTemps[17]));
 800495e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a1c <temperatureSendCan+0x4b8>)
 8004960:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004962:	4618      	mov	r0, r3
 8004964:	f001 fb12 	bl	8005f8c <thermistor_adc_to_c_float>
 8004968:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_encode(
 800496c:	4618      	mov	r0, r3
 800496e:	f7fb fd8f 	bl	8000490 <__aeabi_f2d>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	ec43 2b10 	vmov	d0, r2, r3
 800497a:	f006 fc49 	bl	800b210 <can1_ams_cell_temperatures_t3s4_encode>
 800497e:	4603      	mov	r3, r0
 8004980:	461a      	mov	r2, r3
 8004982:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <temperatureSendCan+0x4b4>)
 8004984:	871a      	strh	r2, [r3, #56]	@ 0x38
    can1_ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_encode(
        thermistor_adc_to_c_float(rawTemps[18]));
 8004986:	4b25      	ldr	r3, [pc, #148]	@ (8004a1c <temperatureSendCan+0x4b8>)
 8004988:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800498a:	4618      	mov	r0, r3
 800498c:	f001 fafe 	bl	8005f8c <thermistor_adc_to_c_float>
 8004990:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_encode(
 8004994:	4618      	mov	r0, r3
 8004996:	f7fb fd7b 	bl	8000490 <__aeabi_f2d>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	ec43 2b10 	vmov	d0, r2, r3
 80049a2:	f006 fe19 	bl	800b5d8 <can1_ams_cell_temperatures_t4s4_encode>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004a18 <temperatureSendCan+0x4b4>)
 80049ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    can1_ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_encode(
        thermistor_adc_to_c_float(rawTemps[19]));
 80049b0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a1c <temperatureSendCan+0x4b8>)
 80049b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fae9 	bl	8005f8c <thermistor_adc_to_c_float>
 80049ba:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_encode(
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fb fd66 	bl	8000490 <__aeabi_f2d>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	ec43 2b10 	vmov	d0, r2, r3
 80049cc:	f006 ffe8 	bl	800b9a0 <can1_ams_cell_temperatures_t5s4_encode>
 80049d0:	4603      	mov	r3, r0
 80049d2:	461a      	mov	r2, r3
 80049d4:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <temperatureSendCan+0x4b4>)
 80049d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 80049da:	2208      	movs	r2, #8
 80049dc:	490e      	ldr	r1, [pc, #56]	@ (8004a18 <temperatureSendCan+0x4b4>)
 80049de:	4810      	ldr	r0, [pc, #64]	@ (8004a20 <temperatureSendCan+0x4bc>)
 80049e0:	f004 feaa 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 80049e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80049e6:	2222      	movs	r2, #34	@ 0x22
 80049e8:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 80049ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80049ec:	2208      	movs	r2, #8
 80049ee:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80049f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <temperatureSendCan+0x4c0>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <temperatureSendCan+0x4bc>)
 8004a00:	4908      	ldr	r1, [pc, #32]	@ (8004a24 <temperatureSendCan+0x4c0>)
 8004a02:	4809      	ldr	r0, [pc, #36]	@ (8004a28 <temperatureSendCan+0x4c4>)
 8004a04:	f002 f81a 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 848b 	beq.w	8005326 <temperatureSendCan+0xdc2>
      Error_Handler();
 8004a10:	f000 fff0 	bl	80059f4 <Error_Handler>
    break;
 8004a14:	f000 bc87 	b.w	8005326 <temperatureSendCan+0xdc2>
 8004a18:	20000390 	.word	0x20000390
 8004a1c:	2000057c 	.word	0x2000057c
 8004a20:	20000288 	.word	0x20000288
 8004a24:	20000254 	.word	0x20000254
 8004a28:	2000011c 	.word	0x2000011c

  case 4:
    can1_ams_cell_temperatures.temperature_multiplexor = 4;
 8004a2c:	4b86      	ldr	r3, [pc, #536]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004a2e:	2204      	movs	r2, #4
 8004a30:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_encode(
        thermistor_adc_to_c_float(rawTemps[20]));
 8004a32:	4b86      	ldr	r3, [pc, #536]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 faa8 	bl	8005f8c <thermistor_adc_to_c_float>
 8004a3c:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_encode(
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fb fd25 	bl	8000490 <__aeabi_f2d>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	ec43 2b10 	vmov	d0, r2, r3
 8004a4e:	f006 f843 	bl	800aad8 <can1_ams_cell_temperatures_t1s5_encode>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461a      	mov	r2, r3
 8004a56:	4b7c      	ldr	r3, [pc, #496]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004a58:	815a      	strh	r2, [r3, #10]
    can1_ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_encode(
        thermistor_adc_to_c_float(rawTemps[21]));
 8004a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 fa94 	bl	8005f8c <thermistor_adc_to_c_float>
 8004a64:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_encode(
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fb fd11 	bl	8000490 <__aeabi_f2d>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	ec43 2b10 	vmov	d0, r2, r3
 8004a76:	f006 fa13 	bl	800aea0 <can1_ams_cell_temperatures_t2s5_encode>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b72      	ldr	r3, [pc, #456]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004a80:	845a      	strh	r2, [r3, #34]	@ 0x22
    can1_ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_encode(
        thermistor_adc_to_c_float(rawTemps[22]));
 8004a82:	4b72      	ldr	r3, [pc, #456]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004a84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 fa80 	bl	8005f8c <thermistor_adc_to_c_float>
 8004a8c:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_encode(
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fcfd 	bl	8000490 <__aeabi_f2d>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	ec43 2b10 	vmov	d0, r2, r3
 8004a9e:	f006 fbe3 	bl	800b268 <can1_ams_cell_temperatures_t3s5_encode>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b68      	ldr	r3, [pc, #416]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004aa8:	875a      	strh	r2, [r3, #58]	@ 0x3a
    can1_ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_encode(
        thermistor_adc_to_c_float(rawTemps[23]));
 8004aaa:	4b68      	ldr	r3, [pc, #416]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004aac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 fa6c 	bl	8005f8c <thermistor_adc_to_c_float>
 8004ab4:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_encode(
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fb fce9 	bl	8000490 <__aeabi_f2d>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	ec43 2b10 	vmov	d0, r2, r3
 8004ac6:	f006 fdb3 	bl	800b630 <can1_ams_cell_temperatures_t4s5_encode>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	4b5e      	ldr	r3, [pc, #376]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    can1_ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_encode(
        thermistor_adc_to_c_float(rawTemps[24]));
 8004ad4:	4b5d      	ldr	r3, [pc, #372]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004ad6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fa57 	bl	8005f8c <thermistor_adc_to_c_float>
 8004ade:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_encode(
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fb fcd4 	bl	8000490 <__aeabi_f2d>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	ec43 2b10 	vmov	d0, r2, r3
 8004af0:	f006 ff82 	bl	800b9f8 <can1_ams_cell_temperatures_t5s5_encode>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	4b53      	ldr	r3, [pc, #332]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004afa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 8004afe:	2208      	movs	r2, #8
 8004b00:	4951      	ldr	r1, [pc, #324]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004b02:	4853      	ldr	r0, [pc, #332]	@ (8004c50 <temperatureSendCan+0x6ec>)
 8004b04:	f004 fe18 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 8004b08:	4b52      	ldr	r3, [pc, #328]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004b0a:	2222      	movs	r2, #34	@ 0x22
 8004b0c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 8004b0e:	4b51      	ldr	r3, [pc, #324]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004b10:	2208      	movs	r2, #8
 8004b12:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004b14:	4b4f      	ldr	r3, [pc, #316]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004b20:	2300      	movs	r3, #0
 8004b22:	4a4b      	ldr	r2, [pc, #300]	@ (8004c50 <temperatureSendCan+0x6ec>)
 8004b24:	494b      	ldr	r1, [pc, #300]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004b26:	484c      	ldr	r0, [pc, #304]	@ (8004c58 <temperatureSendCan+0x6f4>)
 8004b28:	f001 ff88 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 83fb 	beq.w	800532a <temperatureSendCan+0xdc6>
      Error_Handler();
 8004b34:	f000 ff5e 	bl	80059f4 <Error_Handler>
    break;
 8004b38:	e3f7      	b.n	800532a <temperatureSendCan+0xdc6>

  case 5:
    can1_ams_cell_temperatures.temperature_multiplexor = 5;
 8004b3a:	4b43      	ldr	r3, [pc, #268]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_encode(
        thermistor_adc_to_c_float(rawTemps[25]));
 8004b40:	4b42      	ldr	r3, [pc, #264]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004b42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b44:	4618      	mov	r0, r3
 8004b46:	f001 fa21 	bl	8005f8c <thermistor_adc_to_c_float>
 8004b4a:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_encode(
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fb fc9e 	bl	8000490 <__aeabi_f2d>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	ec43 2b10 	vmov	d0, r2, r3
 8004b5c:	f005 ffe8 	bl	800ab30 <can1_ams_cell_temperatures_t1s6_encode>
 8004b60:	4603      	mov	r3, r0
 8004b62:	461a      	mov	r2, r3
 8004b64:	4b38      	ldr	r3, [pc, #224]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004b66:	819a      	strh	r2, [r3, #12]
    can1_ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_encode(
        thermistor_adc_to_c_float(rawTemps[26]));
 8004b68:	4b38      	ldr	r3, [pc, #224]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004b6a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 fa0d 	bl	8005f8c <thermistor_adc_to_c_float>
 8004b72:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_encode(
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fb fc8a 	bl	8000490 <__aeabi_f2d>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	ec43 2b10 	vmov	d0, r2, r3
 8004b84:	f006 f9b8 	bl	800aef8 <can1_ams_cell_temperatures_t2s6_encode>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004b8e:	849a      	strh	r2, [r3, #36]	@ 0x24
    can1_ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_encode(
        thermistor_adc_to_c_float(rawTemps[27]));
 8004b90:	4b2e      	ldr	r3, [pc, #184]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 f9f9 	bl	8005f8c <thermistor_adc_to_c_float>
 8004b9a:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_encode(
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fb fc76 	bl	8000490 <__aeabi_f2d>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	ec43 2b10 	vmov	d0, r2, r3
 8004bac:	f006 fb88 	bl	800b2c0 <can1_ams_cell_temperatures_t3s6_encode>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4b24      	ldr	r3, [pc, #144]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004bb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
    can1_ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_encode(
        thermistor_adc_to_c_float(rawTemps[28]));
 8004bb8:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004bba:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 f9e5 	bl	8005f8c <thermistor_adc_to_c_float>
 8004bc2:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_encode(
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fb fc62 	bl	8000490 <__aeabi_f2d>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	ec43 2b10 	vmov	d0, r2, r3
 8004bd4:	f006 fd58 	bl	800b688 <can1_ams_cell_temperatures_t4s6_encode>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	461a      	mov	r2, r3
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004bde:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    can1_ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_encode(
        thermistor_adc_to_c_float(rawTemps[29]));
 8004be2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c4c <temperatureSendCan+0x6e8>)
 8004be4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 f9d0 	bl	8005f8c <thermistor_adc_to_c_float>
 8004bec:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_encode(
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fb fc4d 	bl	8000490 <__aeabi_f2d>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	ec43 2b10 	vmov	d0, r2, r3
 8004bfe:	f006 ff27 	bl	800ba50 <can1_ams_cell_temperatures_t5s6_encode>
 8004c02:	4603      	mov	r3, r0
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b10      	ldr	r3, [pc, #64]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004c08:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	490e      	ldr	r1, [pc, #56]	@ (8004c48 <temperatureSendCan+0x6e4>)
 8004c10:	480f      	ldr	r0, [pc, #60]	@ (8004c50 <temperatureSendCan+0x6ec>)
 8004c12:	f004 fd91 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 8004c16:	4b0f      	ldr	r3, [pc, #60]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004c18:	2222      	movs	r2, #34	@ 0x22
 8004c1a:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004c1e:	2208      	movs	r2, #8
 8004c20:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004c28:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	4a07      	ldr	r2, [pc, #28]	@ (8004c50 <temperatureSendCan+0x6ec>)
 8004c32:	4908      	ldr	r1, [pc, #32]	@ (8004c54 <temperatureSendCan+0x6f0>)
 8004c34:	4808      	ldr	r0, [pc, #32]	@ (8004c58 <temperatureSendCan+0x6f4>)
 8004c36:	f001 ff01 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8376 	beq.w	800532e <temperatureSendCan+0xdca>
      Error_Handler();
 8004c42:	f000 fed7 	bl	80059f4 <Error_Handler>
    break;
 8004c46:	e372      	b.n	800532e <temperatureSendCan+0xdca>
 8004c48:	20000390 	.word	0x20000390
 8004c4c:	2000057c 	.word	0x2000057c
 8004c50:	20000288 	.word	0x20000288
 8004c54:	20000254 	.word	0x20000254
 8004c58:	2000011c 	.word	0x2000011c

  case 6:
    can1_ams_cell_temperatures.temperature_multiplexor = 6;
 8004c5c:	4b8b      	ldr	r3, [pc, #556]	@ (8004e8c <temperatureSendCan+0x928>)
 8004c5e:	2206      	movs	r2, #6
 8004c60:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_encode(
        thermistor_adc_to_c_float(rawTemps[30]));
 8004c62:	4b8b      	ldr	r3, [pc, #556]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004c64:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f990 	bl	8005f8c <thermistor_adc_to_c_float>
 8004c6c:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_encode(
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fb fc0d 	bl	8000490 <__aeabi_f2d>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	ec43 2b10 	vmov	d0, r2, r3
 8004c7e:	f005 ff83 	bl	800ab88 <can1_ams_cell_temperatures_t1s7_encode>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b81      	ldr	r3, [pc, #516]	@ (8004e8c <temperatureSendCan+0x928>)
 8004c88:	81da      	strh	r2, [r3, #14]
    can1_ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_encode(
        thermistor_adc_to_c_float(rawTemps[31]));
 8004c8a:	4b81      	ldr	r3, [pc, #516]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f97c 	bl	8005f8c <thermistor_adc_to_c_float>
 8004c94:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_encode(
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fbf9 	bl	8000490 <__aeabi_f2d>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	ec43 2b10 	vmov	d0, r2, r3
 8004ca6:	f006 f953 	bl	800af50 <can1_ams_cell_temperatures_t2s7_encode>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b77      	ldr	r3, [pc, #476]	@ (8004e8c <temperatureSendCan+0x928>)
 8004cb0:	84da      	strh	r2, [r3, #38]	@ 0x26
    can1_ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_encode(
        thermistor_adc_to_c_float(rawTemps[32]));
 8004cb2:	4b77      	ldr	r3, [pc, #476]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 f967 	bl	8005f8c <thermistor_adc_to_c_float>
 8004cbe:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_encode(
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fb fbe4 	bl	8000490 <__aeabi_f2d>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	ec43 2b10 	vmov	d0, r2, r3
 8004cd0:	f006 fb22 	bl	800b318 <can1_ams_cell_temperatures_t3s7_encode>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8004e8c <temperatureSendCan+0x928>)
 8004cda:	87da      	strh	r2, [r3, #62]	@ 0x3e
    can1_ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_encode(
        thermistor_adc_to_c_float(rawTemps[33]));
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004cde:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 f952 	bl	8005f8c <thermistor_adc_to_c_float>
 8004ce8:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_encode(
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fb fbcf 	bl	8000490 <__aeabi_f2d>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	ec43 2b10 	vmov	d0, r2, r3
 8004cfa:	f006 fcf1 	bl	800b6e0 <can1_ams_cell_temperatures_t4s7_encode>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	4b62      	ldr	r3, [pc, #392]	@ (8004e8c <temperatureSendCan+0x928>)
 8004d04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    can1_ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_encode(
        thermistor_adc_to_c_float(rawTemps[34]));
 8004d08:	4b61      	ldr	r3, [pc, #388]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f93c 	bl	8005f8c <thermistor_adc_to_c_float>
 8004d14:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_encode(
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb fbb9 	bl	8000490 <__aeabi_f2d>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	ec43 2b10 	vmov	d0, r2, r3
 8004d26:	f006 febf 	bl	800baa8 <can1_ams_cell_temperatures_t5s7_encode>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4b57      	ldr	r3, [pc, #348]	@ (8004e8c <temperatureSendCan+0x928>)
 8004d30:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 8004d34:	2208      	movs	r2, #8
 8004d36:	4955      	ldr	r1, [pc, #340]	@ (8004e8c <temperatureSendCan+0x928>)
 8004d38:	4856      	ldr	r0, [pc, #344]	@ (8004e94 <temperatureSendCan+0x930>)
 8004d3a:	f004 fcfd 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 8004d3e:	4b56      	ldr	r3, [pc, #344]	@ (8004e98 <temperatureSendCan+0x934>)
 8004d40:	2222      	movs	r2, #34	@ 0x22
 8004d42:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 8004d44:	4b54      	ldr	r3, [pc, #336]	@ (8004e98 <temperatureSendCan+0x934>)
 8004d46:	2208      	movs	r2, #8
 8004d48:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004d4a:	4b53      	ldr	r3, [pc, #332]	@ (8004e98 <temperatureSendCan+0x934>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004d50:	4b51      	ldr	r3, [pc, #324]	@ (8004e98 <temperatureSendCan+0x934>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004d56:	2300      	movs	r3, #0
 8004d58:	4a4e      	ldr	r2, [pc, #312]	@ (8004e94 <temperatureSendCan+0x930>)
 8004d5a:	494f      	ldr	r1, [pc, #316]	@ (8004e98 <temperatureSendCan+0x934>)
 8004d5c:	484f      	ldr	r0, [pc, #316]	@ (8004e9c <temperatureSendCan+0x938>)
 8004d5e:	f001 fe6d 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 82e4 	beq.w	8005332 <temperatureSendCan+0xdce>
      Error_Handler();
 8004d6a:	f000 fe43 	bl	80059f4 <Error_Handler>
    break;
 8004d6e:	e2e0      	b.n	8005332 <temperatureSendCan+0xdce>

  case 7:
    can1_ams_cell_temperatures.temperature_multiplexor = 7;
 8004d70:	4b46      	ldr	r3, [pc, #280]	@ (8004e8c <temperatureSendCan+0x928>)
 8004d72:	2207      	movs	r2, #7
 8004d74:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_encode(
        thermistor_adc_to_c_float(rawTemps[35]));
 8004d76:	4b46      	ldr	r3, [pc, #280]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 f905 	bl	8005f8c <thermistor_adc_to_c_float>
 8004d82:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_encode(
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fb fb82 	bl	8000490 <__aeabi_f2d>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	ec43 2b10 	vmov	d0, r2, r3
 8004d94:	f005 ff24 	bl	800abe0 <can1_ams_cell_temperatures_t1s8_encode>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e8c <temperatureSendCan+0x928>)
 8004d9e:	821a      	strh	r2, [r3, #16]
    can1_ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_encode(
        thermistor_adc_to_c_float(rawTemps[36]));
 8004da0:	4b3b      	ldr	r3, [pc, #236]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004da2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 f8f0 	bl	8005f8c <thermistor_adc_to_c_float>
 8004dac:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_encode(
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fb6d 	bl	8000490 <__aeabi_f2d>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	ec43 2b10 	vmov	d0, r2, r3
 8004dbe:	f006 f8f3 	bl	800afa8 <can1_ams_cell_temperatures_t2s8_encode>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b31      	ldr	r3, [pc, #196]	@ (8004e8c <temperatureSendCan+0x928>)
 8004dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    can1_ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_encode(
        thermistor_adc_to_c_float(rawTemps[37]));
 8004dca:	4b31      	ldr	r3, [pc, #196]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004dcc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 f8db 	bl	8005f8c <thermistor_adc_to_c_float>
 8004dd6:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_encode(
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb fb58 	bl	8000490 <__aeabi_f2d>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	ec43 2b10 	vmov	d0, r2, r3
 8004de8:	f006 fac2 	bl	800b370 <can1_ams_cell_temperatures_t3s8_encode>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	4b26      	ldr	r3, [pc, #152]	@ (8004e8c <temperatureSendCan+0x928>)
 8004df2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    can1_ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_encode(
        thermistor_adc_to_c_float(rawTemps[38]));
 8004df6:	4b26      	ldr	r3, [pc, #152]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004df8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 f8c5 	bl	8005f8c <thermistor_adc_to_c_float>
 8004e02:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_encode(
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fb fb42 	bl	8000490 <__aeabi_f2d>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	ec43 2b10 	vmov	d0, r2, r3
 8004e14:	f006 fc90 	bl	800b738 <can1_ams_cell_temperatures_t4s8_encode>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e8c <temperatureSendCan+0x928>)
 8004e1e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    can1_ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_encode(
        thermistor_adc_to_c_float(rawTemps[39]));
 8004e22:	4b1b      	ldr	r3, [pc, #108]	@ (8004e90 <temperatureSendCan+0x92c>)
 8004e24:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 f8af 	bl	8005f8c <thermistor_adc_to_c_float>
 8004e2e:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_encode(
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb fb2c 	bl	8000490 <__aeabi_f2d>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	ec43 2b10 	vmov	d0, r2, r3
 8004e40:	f006 fe5e 	bl	800bb00 <can1_ams_cell_temperatures_t5s8_encode>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <temperatureSendCan+0x928>)
 8004e4a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 8004e4e:	2208      	movs	r2, #8
 8004e50:	490e      	ldr	r1, [pc, #56]	@ (8004e8c <temperatureSendCan+0x928>)
 8004e52:	4810      	ldr	r0, [pc, #64]	@ (8004e94 <temperatureSendCan+0x930>)
 8004e54:	f004 fc70 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 8004e58:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <temperatureSendCan+0x934>)
 8004e5a:	2222      	movs	r2, #34	@ 0x22
 8004e5c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <temperatureSendCan+0x934>)
 8004e60:	2208      	movs	r2, #8
 8004e62:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <temperatureSendCan+0x934>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e98 <temperatureSendCan+0x934>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004e70:	2300      	movs	r3, #0
 8004e72:	4a08      	ldr	r2, [pc, #32]	@ (8004e94 <temperatureSendCan+0x930>)
 8004e74:	4908      	ldr	r1, [pc, #32]	@ (8004e98 <temperatureSendCan+0x934>)
 8004e76:	4809      	ldr	r0, [pc, #36]	@ (8004e9c <temperatureSendCan+0x938>)
 8004e78:	f001 fde0 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8259 	beq.w	8005336 <temperatureSendCan+0xdd2>
      Error_Handler();
 8004e84:	f000 fdb6 	bl	80059f4 <Error_Handler>
    break;
 8004e88:	e255      	b.n	8005336 <temperatureSendCan+0xdd2>
 8004e8a:	bf00      	nop
 8004e8c:	20000390 	.word	0x20000390
 8004e90:	2000057c 	.word	0x2000057c
 8004e94:	20000288 	.word	0x20000288
 8004e98:	20000254 	.word	0x20000254
 8004e9c:	2000011c 	.word	0x2000011c

  case 8:
    can1_ams_cell_temperatures.temperature_multiplexor = 8;
 8004ea0:	4b8c      	ldr	r3, [pc, #560]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_encode(
        thermistor_adc_to_c_float(rawTemps[40]));
 8004ea6:	4b8c      	ldr	r3, [pc, #560]	@ (80050d8 <temperatureSendCan+0xb74>)
 8004ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 f86d 	bl	8005f8c <thermistor_adc_to_c_float>
 8004eb2:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_encode(
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb faea 	bl	8000490 <__aeabi_f2d>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	ec43 2b10 	vmov	d0, r2, r3
 8004ec4:	f005 feb8 	bl	800ac38 <can1_ams_cell_temperatures_t1s9_encode>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b81      	ldr	r3, [pc, #516]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004ece:	825a      	strh	r2, [r3, #18]
    can1_ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_encode(
        thermistor_adc_to_c_float(rawTemps[41]));
 8004ed0:	4b81      	ldr	r3, [pc, #516]	@ (80050d8 <temperatureSendCan+0xb74>)
 8004ed2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 f858 	bl	8005f8c <thermistor_adc_to_c_float>
 8004edc:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_encode(
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fb fad5 	bl	8000490 <__aeabi_f2d>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	ec43 2b10 	vmov	d0, r2, r3
 8004eee:	f006 f887 	bl	800b000 <can1_ams_cell_temperatures_t2s9_encode>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4b77      	ldr	r3, [pc, #476]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    can1_ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_encode(
        thermistor_adc_to_c_float(rawTemps[42]));
 8004efa:	4b77      	ldr	r3, [pc, #476]	@ (80050d8 <temperatureSendCan+0xb74>)
 8004efc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 f843 	bl	8005f8c <thermistor_adc_to_c_float>
 8004f06:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_encode(
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fac0 	bl	8000490 <__aeabi_f2d>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	ec43 2b10 	vmov	d0, r2, r3
 8004f18:	f006 fa56 	bl	800b3c8 <can1_ams_cell_temperatures_t3s9_encode>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b6c      	ldr	r3, [pc, #432]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004f22:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    can1_ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_encode(
        thermistor_adc_to_c_float(rawTemps[43]));
 8004f26:	4b6c      	ldr	r3, [pc, #432]	@ (80050d8 <temperatureSendCan+0xb74>)
 8004f28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 f82d 	bl	8005f8c <thermistor_adc_to_c_float>
 8004f32:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_encode(
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fb faaa 	bl	8000490 <__aeabi_f2d>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	ec43 2b10 	vmov	d0, r2, r3
 8004f44:	f006 fc24 	bl	800b790 <can1_ams_cell_temperatures_t4s9_encode>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b61      	ldr	r3, [pc, #388]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    can1_ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_encode(
        thermistor_adc_to_c_float(rawTemps[44]));
 8004f52:	4b61      	ldr	r3, [pc, #388]	@ (80050d8 <temperatureSendCan+0xb74>)
 8004f54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f817 	bl	8005f8c <thermistor_adc_to_c_float>
 8004f5e:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_encode(
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb fa94 	bl	8000490 <__aeabi_f2d>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	ec43 2b10 	vmov	d0, r2, r3
 8004f70:	f006 fdf2 	bl	800bb58 <can1_ams_cell_temperatures_t5s9_encode>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	4b56      	ldr	r3, [pc, #344]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004f7a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 8004f7e:	2208      	movs	r2, #8
 8004f80:	4954      	ldr	r1, [pc, #336]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004f82:	4856      	ldr	r0, [pc, #344]	@ (80050dc <temperatureSendCan+0xb78>)
 8004f84:	f004 fbd8 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 8004f88:	4b55      	ldr	r3, [pc, #340]	@ (80050e0 <temperatureSendCan+0xb7c>)
 8004f8a:	2222      	movs	r2, #34	@ 0x22
 8004f8c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 8004f8e:	4b54      	ldr	r3, [pc, #336]	@ (80050e0 <temperatureSendCan+0xb7c>)
 8004f90:	2208      	movs	r2, #8
 8004f92:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004f94:	4b52      	ldr	r3, [pc, #328]	@ (80050e0 <temperatureSendCan+0xb7c>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004f9a:	4b51      	ldr	r3, [pc, #324]	@ (80050e0 <temperatureSendCan+0xb7c>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80050dc <temperatureSendCan+0xb78>)
 8004fa4:	494e      	ldr	r1, [pc, #312]	@ (80050e0 <temperatureSendCan+0xb7c>)
 8004fa6:	484f      	ldr	r0, [pc, #316]	@ (80050e4 <temperatureSendCan+0xb80>)
 8004fa8:	f001 fd48 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 81c3 	beq.w	800533a <temperatureSendCan+0xdd6>
      Error_Handler();
 8004fb4:	f000 fd1e 	bl	80059f4 <Error_Handler>
    break;
 8004fb8:	e1bf      	b.n	800533a <temperatureSendCan+0xdd6>

  case 9:
    can1_ams_cell_temperatures.temperature_multiplexor = 9;
 8004fba:	4b46      	ldr	r3, [pc, #280]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004fbc:	2209      	movs	r2, #9
 8004fbe:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_encode(
        thermistor_adc_to_c_float(rawTemps[45]));
 8004fc0:	4b45      	ldr	r3, [pc, #276]	@ (80050d8 <temperatureSendCan+0xb74>)
 8004fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 ffe0 	bl	8005f8c <thermistor_adc_to_c_float>
 8004fcc:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_encode(
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fb fa5d 	bl	8000490 <__aeabi_f2d>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	ec43 2b10 	vmov	d0, r2, r3
 8004fde:	f005 fe57 	bl	800ac90 <can1_ams_cell_temperatures_t1s10_encode>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80050d4 <temperatureSendCan+0xb70>)
 8004fe8:	829a      	strh	r2, [r3, #20]
    can1_ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_encode(
        thermistor_adc_to_c_float(rawTemps[46]));
 8004fea:	4b3b      	ldr	r3, [pc, #236]	@ (80050d8 <temperatureSendCan+0xb74>)
 8004fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 ffcb 	bl	8005f8c <thermistor_adc_to_c_float>
 8004ff6:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_encode(
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fb fa48 	bl	8000490 <__aeabi_f2d>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	ec43 2b10 	vmov	d0, r2, r3
 8005008:	f006 f826 	bl	800b058 <can1_ams_cell_temperatures_t2s10_encode>
 800500c:	4603      	mov	r3, r0
 800500e:	461a      	mov	r2, r3
 8005010:	4b30      	ldr	r3, [pc, #192]	@ (80050d4 <temperatureSendCan+0xb70>)
 8005012:	859a      	strh	r2, [r3, #44]	@ 0x2c
    can1_ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_encode(
        thermistor_adc_to_c_float(rawTemps[47]));
 8005014:	4b30      	ldr	r3, [pc, #192]	@ (80050d8 <temperatureSendCan+0xb74>)
 8005016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800501a:	4618      	mov	r0, r3
 800501c:	f000 ffb6 	bl	8005f8c <thermistor_adc_to_c_float>
 8005020:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_encode(
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb fa33 	bl	8000490 <__aeabi_f2d>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	ec43 2b10 	vmov	d0, r2, r3
 8005032:	f006 f9f5 	bl	800b420 <can1_ams_cell_temperatures_t3s10_encode>
 8005036:	4603      	mov	r3, r0
 8005038:	461a      	mov	r2, r3
 800503a:	4b26      	ldr	r3, [pc, #152]	@ (80050d4 <temperatureSendCan+0xb70>)
 800503c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    can1_ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_encode(
        thermistor_adc_to_c_float(rawTemps[48]));
 8005040:	4b25      	ldr	r3, [pc, #148]	@ (80050d8 <temperatureSendCan+0xb74>)
 8005042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005046:	4618      	mov	r0, r3
 8005048:	f000 ffa0 	bl	8005f8c <thermistor_adc_to_c_float>
 800504c:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_encode(
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fa1d 	bl	8000490 <__aeabi_f2d>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	ec43 2b10 	vmov	d0, r2, r3
 800505e:	f006 fbc3 	bl	800b7e8 <can1_ams_cell_temperatures_t4s10_encode>
 8005062:	4603      	mov	r3, r0
 8005064:	461a      	mov	r2, r3
 8005066:	4b1b      	ldr	r3, [pc, #108]	@ (80050d4 <temperatureSendCan+0xb70>)
 8005068:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    can1_ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_encode(
        thermistor_adc_to_c_float(rawTemps[49]));
 800506c:	4b1a      	ldr	r3, [pc, #104]	@ (80050d8 <temperatureSendCan+0xb74>)
 800506e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005072:	4618      	mov	r0, r3
 8005074:	f000 ff8a 	bl	8005f8c <thermistor_adc_to_c_float>
 8005078:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_encode(
 800507c:	4618      	mov	r0, r3
 800507e:	f7fb fa07 	bl	8000490 <__aeabi_f2d>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	ec43 2b10 	vmov	d0, r2, r3
 800508a:	f006 fd91 	bl	800bbb0 <can1_ams_cell_temperatures_t5s10_encode>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	4b10      	ldr	r3, [pc, #64]	@ (80050d4 <temperatureSendCan+0xb70>)
 8005094:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 8005098:	2208      	movs	r2, #8
 800509a:	490e      	ldr	r1, [pc, #56]	@ (80050d4 <temperatureSendCan+0xb70>)
 800509c:	480f      	ldr	r0, [pc, #60]	@ (80050dc <temperatureSendCan+0xb78>)
 800509e:	f004 fb4b 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 80050a2:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <temperatureSendCan+0xb7c>)
 80050a4:	2222      	movs	r2, #34	@ 0x22
 80050a6:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 80050a8:	4b0d      	ldr	r3, [pc, #52]	@ (80050e0 <temperatureSendCan+0xb7c>)
 80050aa:	2208      	movs	r2, #8
 80050ac:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80050ae:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <temperatureSendCan+0xb7c>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80050b4:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <temperatureSendCan+0xb7c>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80050ba:	2300      	movs	r3, #0
 80050bc:	4a07      	ldr	r2, [pc, #28]	@ (80050dc <temperatureSendCan+0xb78>)
 80050be:	4908      	ldr	r1, [pc, #32]	@ (80050e0 <temperatureSendCan+0xb7c>)
 80050c0:	4808      	ldr	r0, [pc, #32]	@ (80050e4 <temperatureSendCan+0xb80>)
 80050c2:	f001 fcbb 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8138 	beq.w	800533e <temperatureSendCan+0xdda>
      Error_Handler();
 80050ce:	f000 fc91 	bl	80059f4 <Error_Handler>
    break;
 80050d2:	e134      	b.n	800533e <temperatureSendCan+0xdda>
 80050d4:	20000390 	.word	0x20000390
 80050d8:	2000057c 	.word	0x2000057c
 80050dc:	20000288 	.word	0x20000288
 80050e0:	20000254 	.word	0x20000254
 80050e4:	2000011c 	.word	0x2000011c

  case 10:
    can1_ams_cell_temperatures.temperature_multiplexor = 10;
 80050e8:	4b98      	ldr	r3, [pc, #608]	@ (800534c <temperatureSendCan+0xde8>)
 80050ea:	220a      	movs	r2, #10
 80050ec:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_encode(
        thermistor_adc_to_c_float(rawTemps[50]));
 80050ee:	4b98      	ldr	r3, [pc, #608]	@ (8005350 <temperatureSendCan+0xdec>)
 80050f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 ff49 	bl	8005f8c <thermistor_adc_to_c_float>
 80050fa:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_encode(
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fb f9c6 	bl	8000490 <__aeabi_f2d>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	ec43 2b10 	vmov	d0, r2, r3
 800510c:	f005 fdec 	bl	800ace8 <can1_ams_cell_temperatures_t1s11_encode>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	4b8d      	ldr	r3, [pc, #564]	@ (800534c <temperatureSendCan+0xde8>)
 8005116:	82da      	strh	r2, [r3, #22]
    can1_ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_encode(
        thermistor_adc_to_c_float(rawTemps[51]));
 8005118:	4b8d      	ldr	r3, [pc, #564]	@ (8005350 <temperatureSendCan+0xdec>)
 800511a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800511e:	4618      	mov	r0, r3
 8005120:	f000 ff34 	bl	8005f8c <thermistor_adc_to_c_float>
 8005124:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_encode(
 8005128:	4618      	mov	r0, r3
 800512a:	f7fb f9b1 	bl	8000490 <__aeabi_f2d>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	ec43 2b10 	vmov	d0, r2, r3
 8005136:	f005 ffbb 	bl	800b0b0 <can1_ams_cell_temperatures_t2s11_encode>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	4b83      	ldr	r3, [pc, #524]	@ (800534c <temperatureSendCan+0xde8>)
 8005140:	85da      	strh	r2, [r3, #46]	@ 0x2e
    can1_ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_encode(
        thermistor_adc_to_c_float(rawTemps[52]));
 8005142:	4b83      	ldr	r3, [pc, #524]	@ (8005350 <temperatureSendCan+0xdec>)
 8005144:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005148:	4618      	mov	r0, r3
 800514a:	f000 ff1f 	bl	8005f8c <thermistor_adc_to_c_float>
 800514e:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_encode(
 8005152:	4618      	mov	r0, r3
 8005154:	f7fb f99c 	bl	8000490 <__aeabi_f2d>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	ec43 2b10 	vmov	d0, r2, r3
 8005160:	f006 f98a 	bl	800b478 <can1_ams_cell_temperatures_t3s11_encode>
 8005164:	4603      	mov	r3, r0
 8005166:	461a      	mov	r2, r3
 8005168:	4b78      	ldr	r3, [pc, #480]	@ (800534c <temperatureSendCan+0xde8>)
 800516a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    can1_ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_encode(
        thermistor_adc_to_c_float(rawTemps[53]));
 800516e:	4b78      	ldr	r3, [pc, #480]	@ (8005350 <temperatureSendCan+0xdec>)
 8005170:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005174:	4618      	mov	r0, r3
 8005176:	f000 ff09 	bl	8005f8c <thermistor_adc_to_c_float>
 800517a:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_encode(
 800517e:	4618      	mov	r0, r3
 8005180:	f7fb f986 	bl	8000490 <__aeabi_f2d>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	ec43 2b10 	vmov	d0, r2, r3
 800518c:	f006 fb58 	bl	800b840 <can1_ams_cell_temperatures_t4s11_encode>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	4b6d      	ldr	r3, [pc, #436]	@ (800534c <temperatureSendCan+0xde8>)
 8005196:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    can1_ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_encode(
        thermistor_adc_to_c_float(rawTemps[54]));
 800519a:	4b6d      	ldr	r3, [pc, #436]	@ (8005350 <temperatureSendCan+0xdec>)
 800519c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fef3 	bl	8005f8c <thermistor_adc_to_c_float>
 80051a6:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_encode(
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb f970 	bl	8000490 <__aeabi_f2d>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	ec43 2b10 	vmov	d0, r2, r3
 80051b8:	f006 fd26 	bl	800bc08 <can1_ams_cell_temperatures_t5s11_encode>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	4b62      	ldr	r3, [pc, #392]	@ (800534c <temperatureSendCan+0xde8>)
 80051c2:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 80051c6:	2208      	movs	r2, #8
 80051c8:	4960      	ldr	r1, [pc, #384]	@ (800534c <temperatureSendCan+0xde8>)
 80051ca:	4862      	ldr	r0, [pc, #392]	@ (8005354 <temperatureSendCan+0xdf0>)
 80051cc:	f004 fab4 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 80051d0:	4b61      	ldr	r3, [pc, #388]	@ (8005358 <temperatureSendCan+0xdf4>)
 80051d2:	2222      	movs	r2, #34	@ 0x22
 80051d4:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 80051d6:	4b60      	ldr	r3, [pc, #384]	@ (8005358 <temperatureSendCan+0xdf4>)
 80051d8:	2208      	movs	r2, #8
 80051da:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80051dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <temperatureSendCan+0xdf4>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80051e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005358 <temperatureSendCan+0xdf4>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80051e8:	2300      	movs	r3, #0
 80051ea:	4a5a      	ldr	r2, [pc, #360]	@ (8005354 <temperatureSendCan+0xdf0>)
 80051ec:	495a      	ldr	r1, [pc, #360]	@ (8005358 <temperatureSendCan+0xdf4>)
 80051ee:	485b      	ldr	r0, [pc, #364]	@ (800535c <temperatureSendCan+0xdf8>)
 80051f0:	f001 fc24 	bl	8006a3c <HAL_CAN_AddTxMessage>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80a3 	beq.w	8005342 <temperatureSendCan+0xdde>
      Error_Handler();
 80051fc:	f000 fbfa 	bl	80059f4 <Error_Handler>
    break;
 8005200:	e09f      	b.n	8005342 <temperatureSendCan+0xdde>

  case 11:
    can1_ams_cell_temperatures.temperature_multiplexor = 11;
 8005202:	4b52      	ldr	r3, [pc, #328]	@ (800534c <temperatureSendCan+0xde8>)
 8005204:	220b      	movs	r2, #11
 8005206:	701a      	strb	r2, [r3, #0]
    can1_ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_encode(
        thermistor_adc_to_c_float(rawTemps[55]));
 8005208:	4b51      	ldr	r3, [pc, #324]	@ (8005350 <temperatureSendCan+0xdec>)
 800520a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 800520e:	4618      	mov	r0, r3
 8005210:	f000 febc 	bl	8005f8c <thermistor_adc_to_c_float>
 8005214:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_encode(
 8005218:	4618      	mov	r0, r3
 800521a:	f7fb f939 	bl	8000490 <__aeabi_f2d>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	ec43 2b10 	vmov	d0, r2, r3
 8005226:	f005 fd8b 	bl	800ad40 <can1_ams_cell_temperatures_t1s12_encode>
 800522a:	4603      	mov	r3, r0
 800522c:	461a      	mov	r2, r3
 800522e:	4b47      	ldr	r3, [pc, #284]	@ (800534c <temperatureSendCan+0xde8>)
 8005230:	831a      	strh	r2, [r3, #24]
    can1_ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_encode(
        thermistor_adc_to_c_float(rawTemps[56]));
 8005232:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <temperatureSendCan+0xdec>)
 8005234:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fea7 	bl	8005f8c <thermistor_adc_to_c_float>
 800523e:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_encode(
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb f924 	bl	8000490 <__aeabi_f2d>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	ec43 2b10 	vmov	d0, r2, r3
 8005250:	f005 ff5a 	bl	800b108 <can1_ams_cell_temperatures_t2s12_encode>
 8005254:	4603      	mov	r3, r0
 8005256:	461a      	mov	r2, r3
 8005258:	4b3c      	ldr	r3, [pc, #240]	@ (800534c <temperatureSendCan+0xde8>)
 800525a:	861a      	strh	r2, [r3, #48]	@ 0x30
    can1_ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_encode(
        thermistor_adc_to_c_float(rawTemps[57]));
 800525c:	4b3c      	ldr	r3, [pc, #240]	@ (8005350 <temperatureSendCan+0xdec>)
 800525e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fe92 	bl	8005f8c <thermistor_adc_to_c_float>
 8005268:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_encode(
 800526c:	4618      	mov	r0, r3
 800526e:	f7fb f90f 	bl	8000490 <__aeabi_f2d>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	ec43 2b10 	vmov	d0, r2, r3
 800527a:	f006 f929 	bl	800b4d0 <can1_ams_cell_temperatures_t3s12_encode>
 800527e:	4603      	mov	r3, r0
 8005280:	461a      	mov	r2, r3
 8005282:	4b32      	ldr	r3, [pc, #200]	@ (800534c <temperatureSendCan+0xde8>)
 8005284:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    can1_ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_encode(
        thermistor_adc_to_c_float(rawTemps[58]));
 8005288:	4b31      	ldr	r3, [pc, #196]	@ (8005350 <temperatureSendCan+0xdec>)
 800528a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fe7c 	bl	8005f8c <thermistor_adc_to_c_float>
 8005294:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_encode(
 8005298:	4618      	mov	r0, r3
 800529a:	f7fb f8f9 	bl	8000490 <__aeabi_f2d>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	ec43 2b10 	vmov	d0, r2, r3
 80052a6:	f006 faf7 	bl	800b898 <can1_ams_cell_temperatures_t4s12_encode>
 80052aa:	4603      	mov	r3, r0
 80052ac:	461a      	mov	r2, r3
 80052ae:	4b27      	ldr	r3, [pc, #156]	@ (800534c <temperatureSendCan+0xde8>)
 80052b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    can1_ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_encode(
        thermistor_adc_to_c_float(rawTemps[59]));
 80052b4:	4b26      	ldr	r3, [pc, #152]	@ (8005350 <temperatureSendCan+0xdec>)
 80052b6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fe66 	bl	8005f8c <thermistor_adc_to_c_float>
 80052c0:	ee10 3a10 	vmov	r3, s0
    can1_ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_encode(
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fb f8e3 	bl	8000490 <__aeabi_f2d>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	ec43 2b10 	vmov	d0, r2, r3
 80052d2:	f006 fcc5 	bl	800bc60 <can1_ams_cell_temperatures_t5s12_encode>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <temperatureSendCan+0xde8>)
 80052dc:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    can1_ams_cell_temperatures_pack(txData, &can1_ams_cell_temperatures, CAN1_AMS_CELL_TEMPERATURES_LENGTH);
 80052e0:	2208      	movs	r2, #8
 80052e2:	491a      	ldr	r1, [pc, #104]	@ (800534c <temperatureSendCan+0xde8>)
 80052e4:	481b      	ldr	r0, [pc, #108]	@ (8005354 <temperatureSendCan+0xdf0>)
 80052e6:	f004 fa27 	bl	8009738 <can1_ams_cell_temperatures_pack>
    txHeader.StdId = CAN1_AMS_CELL_TEMPERATURES_FRAME_ID;
 80052ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005358 <temperatureSendCan+0xdf4>)
 80052ec:	2222      	movs	r2, #34	@ 0x22
 80052ee:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_CELL_TEMPERATURES_LENGTH;
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <temperatureSendCan+0xdf4>)
 80052f2:	2208      	movs	r2, #8
 80052f4:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80052f6:	4b18      	ldr	r3, [pc, #96]	@ (8005358 <temperatureSendCan+0xdf4>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80052fc:	4b16      	ldr	r3, [pc, #88]	@ (8005358 <temperatureSendCan+0xdf4>)
 80052fe:	2200      	movs	r2, #0
 8005300:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8005302:	2300      	movs	r3, #0
 8005304:	4a13      	ldr	r2, [pc, #76]	@ (8005354 <temperatureSendCan+0xdf0>)
 8005306:	4914      	ldr	r1, [pc, #80]	@ (8005358 <temperatureSendCan+0xdf4>)
 8005308:	4814      	ldr	r0, [pc, #80]	@ (800535c <temperatureSendCan+0xdf8>)
 800530a:	f001 fb97 	bl	8006a3c <HAL_CAN_AddTxMessage>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d018      	beq.n	8005346 <temperatureSendCan+0xde2>
      Error_Handler();
 8005314:	f000 fb6e 	bl	80059f4 <Error_Handler>
    break;
 8005318:	e015      	b.n	8005346 <temperatureSendCan+0xde2>
    break;
 800531a:	bf00      	nop
 800531c:	e014      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 800531e:	bf00      	nop
 8005320:	e012      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 8005322:	bf00      	nop
 8005324:	e010      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 8005326:	bf00      	nop
 8005328:	e00e      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 800532a:	bf00      	nop
 800532c:	e00c      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 800532e:	bf00      	nop
 8005330:	e00a      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 8005332:	bf00      	nop
 8005334:	e008      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 8005336:	bf00      	nop
 8005338:	e006      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 800533a:	bf00      	nop
 800533c:	e004      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 800533e:	bf00      	nop
 8005340:	e002      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <temperatureSendCan+0xde4>
    break;
 8005346:	bf00      	nop
  }
}
 8005348:	bf00      	nop
 800534a:	bd80      	pop	{r7, pc}
 800534c:	20000390 	.word	0x20000390
 8005350:	2000057c 	.word	0x2000057c
 8005354:	20000288 	.word	0x20000288
 8005358:	20000254 	.word	0x20000254
 800535c:	2000011c 	.word	0x2000011c

08005360 <readCanMessages>:

static void readCanMessages(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8005364:	e02a      	b.n	80053bc <readCanMessages+0x5c>
  {
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8005366:	4b49      	ldr	r3, [pc, #292]	@ (800548c <readCanMessages+0x12c>)
 8005368:	4a49      	ldr	r2, [pc, #292]	@ (8005490 <readCanMessages+0x130>)
 800536a:	2100      	movs	r1, #0
 800536c:	4849      	ldr	r0, [pc, #292]	@ (8005494 <readCanMessages+0x134>)
 800536e:	f001 fc35 	bl	8006bdc <HAL_CAN_GetRxMessage>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <readCanMessages+0x1c>
    {
      Error_Handler();
 8005378:	f000 fb3c 	bl	80059f4 <Error_Handler>
    }

    // Process the received message based on its ID
    switch (rxHeader.StdId)
 800537c:	4b44      	ldr	r3, [pc, #272]	@ (8005490 <readCanMessages+0x130>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 8005384:	d013      	beq.n	80053ae <readCanMessages+0x4e>
 8005386:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 800538a:	d816      	bhi.n	80053ba <readCanMessages+0x5a>
 800538c:	2b40      	cmp	r3, #64	@ 0x40
 800538e:	d002      	beq.n	8005396 <readCanMessages+0x36>
 8005390:	2b48      	cmp	r3, #72	@ 0x48
 8005392:	d006      	beq.n	80053a2 <readCanMessages+0x42>
    case CAN1_AMS_PARAMETERS_SET_FRAME_ID:
      can1_ams_parameters_set_unpack(&can1_ams_parameters_set, rxData, CAN1_AMS_PARAMETERS_SET_LENGTH);
      break;
    default:
      // Unknown ID, handle if necessary
      break;
 8005394:	e011      	b.n	80053ba <readCanMessages+0x5a>
      can1_dbu_status_1_unpack(&can1_dbu_status_1, rxData, CAN1_DBU_STATUS_1_LENGTH);
 8005396:	2208      	movs	r2, #8
 8005398:	493c      	ldr	r1, [pc, #240]	@ (800548c <readCanMessages+0x12c>)
 800539a:	483f      	ldr	r0, [pc, #252]	@ (8005498 <readCanMessages+0x138>)
 800539c:	f004 f974 	bl	8009688 <can1_dbu_status_1_unpack>
      break;
 80053a0:	e00c      	b.n	80053bc <readCanMessages+0x5c>
      can1_ecu_status_unpack(&can1_ecu_status, rxData, CAN1_ECU_STATUS_LENGTH);
 80053a2:	2201      	movs	r2, #1
 80053a4:	4939      	ldr	r1, [pc, #228]	@ (800548c <readCanMessages+0x12c>)
 80053a6:	483d      	ldr	r0, [pc, #244]	@ (800549c <readCanMessages+0x13c>)
 80053a8:	f006 fc84 	bl	800bcb4 <can1_ecu_status_unpack>
      break;
 80053ac:	e006      	b.n	80053bc <readCanMessages+0x5c>
      can1_ams_parameters_set_unpack(&can1_ams_parameters_set, rxData, CAN1_AMS_PARAMETERS_SET_LENGTH);
 80053ae:	2208      	movs	r2, #8
 80053b0:	4936      	ldr	r1, [pc, #216]	@ (800548c <readCanMessages+0x12c>)
 80053b2:	483b      	ldr	r0, [pc, #236]	@ (80054a0 <readCanMessages+0x140>)
 80053b4:	f00a fce6 	bl	800fd84 <can1_ams_parameters_set_unpack>
      break;
 80053b8:	e000      	b.n	80053bc <readCanMessages+0x5c>
      break;
 80053ba:	bf00      	nop
  while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80053bc:	2100      	movs	r1, #0
 80053be:	4835      	ldr	r0, [pc, #212]	@ (8005494 <readCanMessages+0x134>)
 80053c0:	f001 fd2e 	bl	8006e20 <HAL_CAN_GetRxFifoFillLevel>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1cd      	bne.n	8005366 <readCanMessages+0x6>
    }
  }

  // Read CAN2
  while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80053ca:	e054      	b.n	8005476 <readCanMessages+0x116>
  {
    if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80053cc:	4b2f      	ldr	r3, [pc, #188]	@ (800548c <readCanMessages+0x12c>)
 80053ce:	4a30      	ldr	r2, [pc, #192]	@ (8005490 <readCanMessages+0x130>)
 80053d0:	2100      	movs	r1, #0
 80053d2:	4834      	ldr	r0, [pc, #208]	@ (80054a4 <readCanMessages+0x144>)
 80053d4:	f001 fc02 	bl	8006bdc <HAL_CAN_GetRxMessage>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <readCanMessages+0x82>
    {
      Error_Handler();
 80053de:	f000 fb09 	bl	80059f4 <Error_Handler>
    }

    // Process the received message based on its ID
    switch (rxHeader.StdId)
 80053e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005490 <readCanMessages+0x130>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f2a3 5321 	subw	r3, r3, #1313	@ 0x521
 80053ea:	2b07      	cmp	r3, #7
 80053ec:	d842      	bhi.n	8005474 <readCanMessages+0x114>
 80053ee:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <readCanMessages+0x94>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005451 	.word	0x08005451
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005415 	.word	0x08005415
 8005400:	0800545d 	.word	0x0800545d
 8005404:	0800542d 	.word	0x0800542d
 8005408:	08005439 	.word	0x08005439
 800540c:	08005469 	.word	0x08005469
 8005410:	08005445 	.word	0x08005445
    {
    case CAN2_IVT_MSG_RESULT_U2_FRAME_ID:
      can2_ivt_msg_result_u2_unpack(&can2_ivt_msg_result_u2, rxData, CAN2_IVT_MSG_RESULT_U2_LENGTH);
 8005414:	2206      	movs	r2, #6
 8005416:	491d      	ldr	r1, [pc, #116]	@ (800548c <readCanMessages+0x12c>)
 8005418:	4823      	ldr	r0, [pc, #140]	@ (80054a8 <readCanMessages+0x148>)
 800541a:	f00b f811 	bl	8010440 <can2_ivt_msg_result_u2_unpack>
      break;
 800541e:	e02a      	b.n	8005476 <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_U1_FRAME_ID:
      can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rxData, CAN2_IVT_MSG_RESULT_U1_LENGTH);
 8005420:	2206      	movs	r2, #6
 8005422:	491a      	ldr	r1, [pc, #104]	@ (800548c <readCanMessages+0x12c>)
 8005424:	4821      	ldr	r0, [pc, #132]	@ (80054ac <readCanMessages+0x14c>)
 8005426:	f00b f8a5 	bl	8010574 <can2_ivt_msg_result_u1_unpack>
      break;
 800542a:	e024      	b.n	8005476 <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_T_FRAME_ID:
      can2_ivt_msg_result_t_unpack(&can2_ivt_msg_result_t, rxData, CAN2_IVT_MSG_RESULT_T_LENGTH);
 800542c:	2206      	movs	r2, #6
 800542e:	4917      	ldr	r1, [pc, #92]	@ (800548c <readCanMessages+0x12c>)
 8005430:	481f      	ldr	r0, [pc, #124]	@ (80054b0 <readCanMessages+0x150>)
 8005432:	f00a fef5 	bl	8010220 <can2_ivt_msg_result_t_unpack>
      break;
 8005436:	e01e      	b.n	8005476 <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_W_FRAME_ID:
      can2_ivt_msg_result_w_unpack(&can2_ivt_msg_result_w, rxData, CAN2_IVT_MSG_RESULT_W_LENGTH);
 8005438:	2206      	movs	r2, #6
 800543a:	4914      	ldr	r1, [pc, #80]	@ (800548c <readCanMessages+0x12c>)
 800543c:	481d      	ldr	r0, [pc, #116]	@ (80054b4 <readCanMessages+0x154>)
 800543e:	f00a fe67 	bl	8010110 <can2_ivt_msg_result_w_unpack>
      break;
 8005442:	e018      	b.n	8005476 <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_WH_FRAME_ID:
      can2_ivt_msg_result_wh_unpack(&can2_ivt_msg_result_wh, rxData, CAN2_IVT_MSG_RESULT_WH_LENGTH);
 8005444:	2206      	movs	r2, #6
 8005446:	4911      	ldr	r1, [pc, #68]	@ (800548c <readCanMessages+0x12c>)
 8005448:	481b      	ldr	r0, [pc, #108]	@ (80054b8 <readCanMessages+0x158>)
 800544a:	f00a fd51 	bl	800fef0 <can2_ivt_msg_result_wh_unpack>
      break;
 800544e:	e012      	b.n	8005476 <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_I_FRAME_ID:
      can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rxData, CAN2_IVT_MSG_RESULT_I_LENGTH);
 8005450:	2206      	movs	r2, #6
 8005452:	490e      	ldr	r1, [pc, #56]	@ (800548c <readCanMessages+0x12c>)
 8005454:	4819      	ldr	r0, [pc, #100]	@ (80054bc <readCanMessages+0x15c>)
 8005456:	f00b f927 	bl	80106a8 <can2_ivt_msg_result_i_unpack>
      break;
 800545a:	e00c      	b.n	8005476 <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_U3_FRAME_ID:
      can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rxData, CAN2_IVT_MSG_RESULT_U3_LENGTH);
 800545c:	2206      	movs	r2, #6
 800545e:	490b      	ldr	r1, [pc, #44]	@ (800548c <readCanMessages+0x12c>)
 8005460:	4817      	ldr	r0, [pc, #92]	@ (80054c0 <readCanMessages+0x160>)
 8005462:	f00a ff65 	bl	8010330 <can2_ivt_msg_result_u3_unpack>
      break;
 8005466:	e006      	b.n	8005476 <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_AS_FRAME_ID:
      can2_ivt_msg_result_as_unpack(&can2_ivt_msg_result_as, rxData, CAN2_IVT_MSG_RESULT_AS_LENGTH);
 8005468:	2206      	movs	r2, #6
 800546a:	4908      	ldr	r1, [pc, #32]	@ (800548c <readCanMessages+0x12c>)
 800546c:	4815      	ldr	r0, [pc, #84]	@ (80054c4 <readCanMessages+0x164>)
 800546e:	f00a fdc7 	bl	8010000 <can2_ivt_msg_result_as_unpack>
      break;
 8005472:	e000      	b.n	8005476 <readCanMessages+0x116>
    default:
      // Unknown ID, handle if necessary
      break;
 8005474:	bf00      	nop
  while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8005476:	2100      	movs	r1, #0
 8005478:	480a      	ldr	r0, [pc, #40]	@ (80054a4 <readCanMessages+0x144>)
 800547a:	f001 fcd1 	bl	8006e20 <HAL_CAN_GetRxFifoFillLevel>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1a3      	bne.n	80053cc <readCanMessages+0x6c>
    }
  }
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000290 	.word	0x20000290
 8005490:	2000026c 	.word	0x2000026c
 8005494:	2000011c 	.word	0x2000011c
 8005498:	2000040c 	.word	0x2000040c
 800549c:	20000414 	.word	0x20000414
 80054a0:	20000418 	.word	0x20000418
 80054a4:	20000144 	.word	0x20000144
 80054a8:	20000420 	.word	0x20000420
 80054ac:	2000042c 	.word	0x2000042c
 80054b0:	20000438 	.word	0x20000438
 80054b4:	20000444 	.word	0x20000444
 80054b8:	20000450 	.word	0x20000450
 80054bc:	2000045c 	.word	0x2000045c
 80054c0:	20000468 	.word	0x20000468
 80054c4:	20000474 	.word	0x20000474

080054c8 <sendStatus>:

static void sendStatus(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
  uint16_t maxVoltage = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	81fb      	strh	r3, [r7, #14]
  uint16_t minVoltage = 0xFFFF;
 80054d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054d6:	81bb      	strh	r3, [r7, #12]
  uint16_t maxTemperature = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	817b      	strh	r3, [r7, #10]
  uint16_t minTemperature = 0xFFFF;
 80054dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054e0:	813b      	strh	r3, [r7, #8]
  for (int i = 0; i < 126; i++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	e01a      	b.n	800551e <sendStatus+0x56>
  {
    if (rawVoltages[i] > maxVoltage)
 80054e8:	4a71      	ldr	r2, [pc, #452]	@ (80056b0 <sendStatus+0x1e8>)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f0:	89fa      	ldrh	r2, [r7, #14]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d204      	bcs.n	8005500 <sendStatus+0x38>
      maxVoltage = rawVoltages[i];
 80054f6:	4a6e      	ldr	r2, [pc, #440]	@ (80056b0 <sendStatus+0x1e8>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054fe:	81fb      	strh	r3, [r7, #14]
    if (rawVoltages[i] < minVoltage)
 8005500:	4a6b      	ldr	r2, [pc, #428]	@ (80056b0 <sendStatus+0x1e8>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005508:	89ba      	ldrh	r2, [r7, #12]
 800550a:	429a      	cmp	r2, r3
 800550c:	d904      	bls.n	8005518 <sendStatus+0x50>
      minVoltage = rawVoltages[i];
 800550e:	4a68      	ldr	r2, [pc, #416]	@ (80056b0 <sendStatus+0x1e8>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005516:	81bb      	strh	r3, [r7, #12]
  for (int i = 0; i < 126; i++)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3301      	adds	r3, #1
 800551c:	607b      	str	r3, [r7, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b7d      	cmp	r3, #125	@ 0x7d
 8005522:	dde1      	ble.n	80054e8 <sendStatus+0x20>
  }
  for (int i = 0; i < 12; i++)
 8005524:	2300      	movs	r3, #0
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	e01a      	b.n	8005560 <sendStatus+0x98>
  {
    if (rawTemps[i] > maxTemperature)
 800552a:	4a62      	ldr	r2, [pc, #392]	@ (80056b4 <sendStatus+0x1ec>)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005532:	897a      	ldrh	r2, [r7, #10]
 8005534:	429a      	cmp	r2, r3
 8005536:	d204      	bcs.n	8005542 <sendStatus+0x7a>
      maxTemperature = rawTemps[i];
 8005538:	4a5e      	ldr	r2, [pc, #376]	@ (80056b4 <sendStatus+0x1ec>)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005540:	817b      	strh	r3, [r7, #10]
    if (rawTemps[i] < minTemperature)
 8005542:	4a5c      	ldr	r2, [pc, #368]	@ (80056b4 <sendStatus+0x1ec>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800554a:	893a      	ldrh	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	d904      	bls.n	800555a <sendStatus+0x92>
      minTemperature = rawTemps[i];
 8005550:	4a58      	ldr	r2, [pc, #352]	@ (80056b4 <sendStatus+0x1ec>)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005558:	813b      	strh	r3, [r7, #8]
  for (int i = 0; i < 12; i++)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b0b      	cmp	r3, #11
 8005564:	dde1      	ble.n	800552a <sendStatus+0x62>
  }
  can1_ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_encode((float) maxVoltage / 10000.0);
 8005566:	89fb      	ldrh	r3, [r7, #14]
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005570:	ee17 0a90 	vmov	r0, s15
 8005574:	f7fa ff8c 	bl	8000490 <__aeabi_f2d>
 8005578:	a34b      	add	r3, pc, #300	@ (adr r3, 80056a8 <sendStatus+0x1e0>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fb f909 	bl	8000794 <__aeabi_ddiv>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	ec43 2b17 	vmov	d7, r2, r3
 800558a:	eeb0 0a47 	vmov.f32	s0, s14
 800558e:	eef0 0a67 	vmov.f32	s1, s15
 8005592:	f003 ffe9 	bl	8009568 <can1_ams_status_1_max_cell_voltage_encode>
 8005596:	eeb0 7a40 	vmov.f32	s14, s0
 800559a:	eef0 7a60 	vmov.f32	s15, s1
 800559e:	4b46      	ldr	r3, [pc, #280]	@ (80056b8 <sendStatus+0x1f0>)
 80055a0:	ed83 7b06 	vstr	d7, [r3, #24]
  can1_ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_encode((float) minVoltage / 10000.0);
 80055a4:	89bb      	ldrh	r3, [r7, #12]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	ee17 0a90 	vmov	r0, s15
 80055b2:	f7fa ff6d 	bl	8000490 <__aeabi_f2d>
 80055b6:	a33c      	add	r3, pc, #240	@ (adr r3, 80056a8 <sendStatus+0x1e0>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f7fb f8ea 	bl	8000794 <__aeabi_ddiv>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	ec43 2b17 	vmov	d7, r2, r3
 80055c8:	eeb0 0a47 	vmov.f32	s0, s14
 80055cc:	eef0 0a67 	vmov.f32	s1, s15
 80055d0:	f003 ffa2 	bl	8009518 <can1_ams_status_1_min_cell_voltage_encode>
 80055d4:	eeb0 7a40 	vmov.f32	s14, s0
 80055d8:	eef0 7a60 	vmov.f32	s15, s1
 80055dc:	4b36      	ldr	r3, [pc, #216]	@ (80056b8 <sendStatus+0x1f0>)
 80055de:	ed83 7b04 	vstr	d7, [r3, #16]
  can1_ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_encode(
      thermistor_adc_to_c_float(maxTemperature));
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fcd1 	bl	8005f8c <thermistor_adc_to_c_float>
 80055ea:	ee10 3a10 	vmov	r3, s0
  can1_ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_encode(
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fa ff4e 	bl	8000490 <__aeabi_f2d>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	ec43 2b10 	vmov	d0, r2, r3
 80055fc:	f004 f804 	bl	8009608 <can1_ams_status_1_max_cell_temperature_encode>
 8005600:	eeb0 7a40 	vmov.f32	s14, s0
 8005604:	eef0 7a60 	vmov.f32	s15, s1
 8005608:	4b2b      	ldr	r3, [pc, #172]	@ (80056b8 <sendStatus+0x1f0>)
 800560a:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  can1_ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_encode(
      thermistor_adc_to_c_float(minTemperature));
 800560e:	893b      	ldrh	r3, [r7, #8]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fcbb 	bl	8005f8c <thermistor_adc_to_c_float>
 8005616:	ee10 3a10 	vmov	r3, s0
  can1_ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_encode(
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff38 	bl	8000490 <__aeabi_f2d>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	ec43 2b10 	vmov	d0, r2, r3
 8005628:	f003 ffc6 	bl	80095b8 <can1_ams_status_1_min_cell_temperature_encode>
 800562c:	eeb0 7a40 	vmov.f32	s14, s0
 8005630:	eef0 7a60 	vmov.f32	s15, s1
 8005634:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <sendStatus+0x1f0>)
 8005636:	ed83 7b08 	vstr	d7, [r3, #32]
  can1_ams_status_1.fsm_state = fsmState;
 800563a:	4b20      	ldr	r3, [pc, #128]	@ (80056bc <sendStatus+0x1f4>)
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	4b1e      	ldr	r3, [pc, #120]	@ (80056b8 <sendStatus+0x1f0>)
 8005640:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  can1_ams_status_1.ticks = can1_ams_status_1_ticks_encode(deltaTick);
 8005644:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <sendStatus+0x1f8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f7fa feff 	bl	800044c <__aeabi_ui2d>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	ec43 2b10 	vmov	d0, r2, r3
 8005656:	f003 fffd 	bl	8009654 <can1_ams_status_1_ticks_encode>
 800565a:	4603      	mov	r3, r0
 800565c:	461a      	mov	r2, r3
 800565e:	4b16      	ldr	r3, [pc, #88]	@ (80056b8 <sendStatus+0x1f0>)
 8005660:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  can1_ams_status_1_pack(txData, &can1_ams_status_1, CAN1_AMS_STATUS_1_LENGTH);
 8005664:	2208      	movs	r2, #8
 8005666:	4914      	ldr	r1, [pc, #80]	@ (80056b8 <sendStatus+0x1f0>)
 8005668:	4816      	ldr	r0, [pc, #88]	@ (80056c4 <sendStatus+0x1fc>)
 800566a:	f003 fe19 	bl	80092a0 <can1_ams_status_1_pack>
  txHeader.StdId = CAN1_AMS_STATUS_1_FRAME_ID;
 800566e:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <sendStatus+0x200>)
 8005670:	2220      	movs	r2, #32
 8005672:	601a      	str	r2, [r3, #0]
  txHeader.DLC = CAN1_AMS_STATUS_1_LENGTH;
 8005674:	4b14      	ldr	r3, [pc, #80]	@ (80056c8 <sendStatus+0x200>)
 8005676:	2208      	movs	r2, #8
 8005678:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 800567a:	4b13      	ldr	r3, [pc, #76]	@ (80056c8 <sendStatus+0x200>)
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 8005680:	4b11      	ldr	r3, [pc, #68]	@ (80056c8 <sendStatus+0x200>)
 8005682:	2200      	movs	r2, #0
 8005684:	60da      	str	r2, [r3, #12]
  if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8005686:	2300      	movs	r3, #0
 8005688:	4a0e      	ldr	r2, [pc, #56]	@ (80056c4 <sendStatus+0x1fc>)
 800568a:	490f      	ldr	r1, [pc, #60]	@ (80056c8 <sendStatus+0x200>)
 800568c:	480f      	ldr	r0, [pc, #60]	@ (80056cc <sendStatus+0x204>)
 800568e:	f001 f9d5 	bl	8006a3c <HAL_CAN_AddTxMessage>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <sendStatus+0x1d4>
    Error_Handler();
 8005698:	f000 f9ac 	bl	80059f4 <Error_Handler>
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	f3af 8000 	nop.w
 80056a8:	00000000 	.word	0x00000000
 80056ac:	40c38800 	.word	0x40c38800
 80056b0:	20000480 	.word	0x20000480
 80056b4:	2000057c 	.word	0x2000057c
 80056b8:	20000298 	.word	0x20000298
 80056bc:	20000828 	.word	0x20000828
 80056c0:	20000824 	.word	0x20000824
 80056c4:	20000288 	.word	0x20000288
 80056c8:	20000254 	.word	0x20000254
 80056cc:	2000011c 	.word	0x2000011c

080056d0 <stepStateMachine>:

static void stepStateMachine(void)
{
 80056d0:	b5b0      	push	{r4, r5, r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  switch (fsmState)
 80056d4:	4ba6      	ldr	r3, [pc, #664]	@ (8005970 <stepStateMachine+0x2a0>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	f200 8184 	bhi.w	80059e6 <stepStateMachine+0x316>
 80056de:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <stepStateMachine+0x14>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	080056f9 	.word	0x080056f9
 80056e8:	0800577b 	.word	0x0800577b
 80056ec:	080057fd 	.word	0x080057fd
 80056f0:	080058ed 	.word	0x080058ed
 80056f4:	080059a9 	.word	0x080059a9
  {
  case STATE_IDLE:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_RESET);
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056fe:	489d      	ldr	r0, [pc, #628]	@ (8005974 <stepStateMachine+0x2a4>)
 8005700:	f001 fe50 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 8005704:	2200      	movs	r2, #0
 8005706:	2180      	movs	r1, #128	@ 0x80
 8005708:	489a      	ldr	r0, [pc, #616]	@ (8005974 <stepStateMachine+0x2a4>)
 800570a:	f001 fe4b 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_RESET);
 800570e:	2200      	movs	r2, #0
 8005710:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005714:	4897      	ldr	r0, [pc, #604]	@ (8005974 <stepStateMachine+0x2a4>)
 8005716:	f001 fe45 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 800571a:	2201      	movs	r2, #1
 800571c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005720:	4895      	ldr	r0, [pc, #596]	@ (8005978 <stepStateMachine+0x2a8>)
 8005722:	f001 fe3f 	bl	80073a4 <HAL_GPIO_WritePin>
    if (ovpError || uvpError || otpError || utpError || spiError)
 8005726:	4b95      	ldr	r3, [pc, #596]	@ (800597c <stepStateMachine+0x2ac>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <stepStateMachine+0x7e>
 800572e:	4b94      	ldr	r3, [pc, #592]	@ (8005980 <stepStateMachine+0x2b0>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10b      	bne.n	800574e <stepStateMachine+0x7e>
 8005736:	4b93      	ldr	r3, [pc, #588]	@ (8005984 <stepStateMachine+0x2b4>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d107      	bne.n	800574e <stepStateMachine+0x7e>
 800573e:	4b92      	ldr	r3, [pc, #584]	@ (8005988 <stepStateMachine+0x2b8>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <stepStateMachine+0x7e>
 8005746:	4b91      	ldr	r3, [pc, #580]	@ (800598c <stepStateMachine+0x2bc>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <stepStateMachine+0x86>
    {
      fsmState = STATE_ERROR;
 800574e:	4b88      	ldr	r3, [pc, #544]	@ (8005970 <stepStateMachine+0x2a0>)
 8005750:	2204      	movs	r2, #4
 8005752:	701a      	strb	r2, [r3, #0]
    else if (   (HAL_GPIO_ReadPin(SC_PROBE_GPIO_Port, SC_PROBE_Pin) == GPIO_PIN_SET)
             && can1_dbu_status_1.activate_ts_button)
    {
      fsmState = STATE_PRECHARGE1;
    }
    break;
 8005754:	e140      	b.n	80059d8 <stepStateMachine+0x308>
    else if (   (HAL_GPIO_ReadPin(SC_PROBE_GPIO_Port, SC_PROBE_Pin) == GPIO_PIN_SET)
 8005756:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800575a:	488d      	ldr	r0, [pc, #564]	@ (8005990 <stepStateMachine+0x2c0>)
 800575c:	f001 fe0a 	bl	8007374 <HAL_GPIO_ReadPin>
 8005760:	4603      	mov	r3, r0
 8005762:	2b01      	cmp	r3, #1
 8005764:	f040 8138 	bne.w	80059d8 <stepStateMachine+0x308>
             && can1_dbu_status_1.activate_ts_button)
 8005768:	4b8a      	ldr	r3, [pc, #552]	@ (8005994 <stepStateMachine+0x2c4>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8133 	beq.w	80059d8 <stepStateMachine+0x308>
      fsmState = STATE_PRECHARGE1;
 8005772:	4b7f      	ldr	r3, [pc, #508]	@ (8005970 <stepStateMachine+0x2a0>)
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
    break;
 8005778:	e12e      	b.n	80059d8 <stepStateMachine+0x308>

  case STATE_PRECHARGE1:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_RESET);
 800577a:	2200      	movs	r2, #0
 800577c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005780:	487c      	ldr	r0, [pc, #496]	@ (8005974 <stepStateMachine+0x2a4>)
 8005782:	f001 fe0f 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 8005786:	2200      	movs	r2, #0
 8005788:	2180      	movs	r1, #128	@ 0x80
 800578a:	487a      	ldr	r0, [pc, #488]	@ (8005974 <stepStateMachine+0x2a4>)
 800578c:	f001 fe0a 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_SET);
 8005790:	2201      	movs	r2, #1
 8005792:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005796:	4877      	ldr	r0, [pc, #476]	@ (8005974 <stepStateMachine+0x2a4>)
 8005798:	f001 fe04 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 800579c:	2201      	movs	r2, #1
 800579e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057a2:	4875      	ldr	r0, [pc, #468]	@ (8005978 <stepStateMachine+0x2a8>)
 80057a4:	f001 fdfe 	bl	80073a4 <HAL_GPIO_WritePin>
    if (ovpError || uvpError || otpError || utpError || spiError)
 80057a8:	4b74      	ldr	r3, [pc, #464]	@ (800597c <stepStateMachine+0x2ac>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10f      	bne.n	80057d0 <stepStateMachine+0x100>
 80057b0:	4b73      	ldr	r3, [pc, #460]	@ (8005980 <stepStateMachine+0x2b0>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <stepStateMachine+0x100>
 80057b8:	4b72      	ldr	r3, [pc, #456]	@ (8005984 <stepStateMachine+0x2b4>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d107      	bne.n	80057d0 <stepStateMachine+0x100>
 80057c0:	4b71      	ldr	r3, [pc, #452]	@ (8005988 <stepStateMachine+0x2b8>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d103      	bne.n	80057d0 <stepStateMachine+0x100>
 80057c8:	4b70      	ldr	r3, [pc, #448]	@ (800598c <stepStateMachine+0x2bc>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <stepStateMachine+0x108>
    {
      fsmState = STATE_ERROR;
 80057d0:	4b67      	ldr	r3, [pc, #412]	@ (8005970 <stepStateMachine+0x2a0>)
 80057d2:	2204      	movs	r2, #4
 80057d4:	701a      	strb	r2, [r3, #0]
    else if (HAL_GPIO_ReadPin(PRECHARGE_CLOSED_SIGNAL_GPIO_Port, PRECHARGE_CLOSED_SIGNAL_Pin) == GPIO_PIN_SET)
    {
      fsmState = STATE_PRECHARGE2;
      prechargeStartTime = HAL_GetTick();
    }
    break;
 80057d6:	e101      	b.n	80059dc <stepStateMachine+0x30c>
    else if (HAL_GPIO_ReadPin(PRECHARGE_CLOSED_SIGNAL_GPIO_Port, PRECHARGE_CLOSED_SIGNAL_Pin) == GPIO_PIN_SET)
 80057d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057dc:	4866      	ldr	r0, [pc, #408]	@ (8005978 <stepStateMachine+0x2a8>)
 80057de:	f001 fdc9 	bl	8007374 <HAL_GPIO_ReadPin>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	f040 80f9 	bne.w	80059dc <stepStateMachine+0x30c>
      fsmState = STATE_PRECHARGE2;
 80057ea:	4b61      	ldr	r3, [pc, #388]	@ (8005970 <stepStateMachine+0x2a0>)
 80057ec:	2202      	movs	r2, #2
 80057ee:	701a      	strb	r2, [r3, #0]
      prechargeStartTime = HAL_GetTick();
 80057f0:	f000 fcb8 	bl	8006164 <HAL_GetTick>
 80057f4:	4603      	mov	r3, r0
 80057f6:	4a68      	ldr	r2, [pc, #416]	@ (8005998 <stepStateMachine+0x2c8>)
 80057f8:	6013      	str	r3, [r2, #0]
    break;
 80057fa:	e0ef      	b.n	80059dc <stepStateMachine+0x30c>

  case STATE_PRECHARGE2:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_SET);
 80057fc:	2201      	movs	r2, #1
 80057fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005802:	485c      	ldr	r0, [pc, #368]	@ (8005974 <stepStateMachine+0x2a4>)
 8005804:	f001 fdce 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 8005808:	2200      	movs	r2, #0
 800580a:	2180      	movs	r1, #128	@ 0x80
 800580c:	4859      	ldr	r0, [pc, #356]	@ (8005974 <stepStateMachine+0x2a4>)
 800580e:	f001 fdc9 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_SET);
 8005812:	2201      	movs	r2, #1
 8005814:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005818:	4856      	ldr	r0, [pc, #344]	@ (8005974 <stepStateMachine+0x2a4>)
 800581a:	f001 fdc3 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 800581e:	2201      	movs	r2, #1
 8005820:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005824:	4854      	ldr	r0, [pc, #336]	@ (8005978 <stepStateMachine+0x2a8>)
 8005826:	f001 fdbd 	bl	80073a4 <HAL_GPIO_WritePin>
    prechargeTimer = HAL_GetTick() - prechargeStartTime;
 800582a:	f000 fc9b 	bl	8006164 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	4b59      	ldr	r3, [pc, #356]	@ (8005998 <stepStateMachine+0x2c8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	4a59      	ldr	r2, [pc, #356]	@ (800599c <stepStateMachine+0x2cc>)
 8005838:	6013      	str	r3, [r2, #0]
    if (ovpError || uvpError || otpError || utpError || spiError)
 800583a:	4b50      	ldr	r3, [pc, #320]	@ (800597c <stepStateMachine+0x2ac>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10f      	bne.n	8005862 <stepStateMachine+0x192>
 8005842:	4b4f      	ldr	r3, [pc, #316]	@ (8005980 <stepStateMachine+0x2b0>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <stepStateMachine+0x192>
 800584a:	4b4e      	ldr	r3, [pc, #312]	@ (8005984 <stepStateMachine+0x2b4>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d107      	bne.n	8005862 <stepStateMachine+0x192>
 8005852:	4b4d      	ldr	r3, [pc, #308]	@ (8005988 <stepStateMachine+0x2b8>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <stepStateMachine+0x192>
 800585a:	4b4c      	ldr	r3, [pc, #304]	@ (800598c <stepStateMachine+0x2bc>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <stepStateMachine+0x19a>
    {
      fsmState = STATE_ERROR;
 8005862:	4b43      	ldr	r3, [pc, #268]	@ (8005970 <stepStateMachine+0x2a0>)
 8005864:	2204      	movs	r2, #4
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e03f      	b.n	80058ea <stepStateMachine+0x21a>
    }
    else if (   (HAL_GPIO_ReadPin(PRECHARGE_CLOSED_SIGNAL_GPIO_Port, PRECHARGE_CLOSED_SIGNAL_Pin) == GPIO_PIN_SET)
 800586a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800586e:	4842      	ldr	r0, [pc, #264]	@ (8005978 <stepStateMachine+0x2a8>)
 8005870:	f001 fd80 	bl	8007374 <HAL_GPIO_ReadPin>
 8005874:	4603      	mov	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d12d      	bne.n	80058d6 <stepStateMachine+0x206>
             && (HAL_GPIO_ReadPin(AIR_N_CLOSED_GPIO_Port, AIR_N_CLOSED_Pin) == GPIO_PIN_SET)
 800587a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800587e:	483d      	ldr	r0, [pc, #244]	@ (8005974 <stepStateMachine+0x2a4>)
 8005880:	f001 fd78 	bl	8007374 <HAL_GPIO_ReadPin>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d125      	bne.n	80058d6 <stepStateMachine+0x206>
             && (can2_ivt_msg_result_u1_ivt_result_u1_decode(can2_ivt_msg_result_u1.ivt_result_u1) >
 800588a:	4b45      	ldr	r3, [pc, #276]	@ (80059a0 <stepStateMachine+0x2d0>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4618      	mov	r0, r3
 8005890:	f00a fef8 	bl	8010684 <can2_ivt_msg_result_u1_ivt_result_u1_decode>
 8005894:	ec55 4b10 	vmov	r4, r5, d0
                 0.95 * can2_ivt_msg_result_u2_ivt_result_u2_decode(can2_ivt_msg_result_u2.ivt_result_u2))
 8005898:	4b42      	ldr	r3, [pc, #264]	@ (80059a4 <stepStateMachine+0x2d4>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4618      	mov	r0, r3
 800589e:	f00a fe57 	bl	8010550 <can2_ivt_msg_result_u2_ivt_result_u2_decode>
 80058a2:	ec51 0b10 	vmov	r0, r1, d0
 80058a6:	a330      	add	r3, pc, #192	@ (adr r3, 8005968 <stepStateMachine+0x298>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fe48 	bl	8000540 <__aeabi_dmul>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
             && (can2_ivt_msg_result_u1_ivt_result_u1_decode(can2_ivt_msg_result_u1.ivt_result_u1) >
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fb f8d2 	bl	8000a60 <__aeabi_dcmpgt>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <stepStateMachine+0x206>
             && (prechargeTimer > MIN_PRECHARGE_TIME))
 80058c2:	4b36      	ldr	r3, [pc, #216]	@ (800599c <stepStateMachine+0x2cc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d903      	bls.n	80058d6 <stepStateMachine+0x206>
    {
      fsmState = STATE_TS_ON;
 80058ce:	4b28      	ldr	r3, [pc, #160]	@ (8005970 <stepStateMachine+0x2a0>)
 80058d0:	2203      	movs	r2, #3
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e009      	b.n	80058ea <stepStateMachine+0x21a>
    }
    else if (prechargeTimer > PRECHARGE_TIMEOUT)
 80058d6:	4b31      	ldr	r3, [pc, #196]	@ (800599c <stepStateMachine+0x2cc>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058de:	4293      	cmp	r3, r2
 80058e0:	d97e      	bls.n	80059e0 <stepStateMachine+0x310>
    {
      fsmState = STATE_IDLE;
 80058e2:	4b23      	ldr	r3, [pc, #140]	@ (8005970 <stepStateMachine+0x2a0>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80058e8:	e07a      	b.n	80059e0 <stepStateMachine+0x310>
 80058ea:	e079      	b.n	80059e0 <stepStateMachine+0x310>

  case STATE_TS_ON:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_SET);
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058f2:	4820      	ldr	r0, [pc, #128]	@ (8005974 <stepStateMachine+0x2a4>)
 80058f4:	f001 fd56 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_SET);
 80058f8:	2201      	movs	r2, #1
 80058fa:	2180      	movs	r1, #128	@ 0x80
 80058fc:	481d      	ldr	r0, [pc, #116]	@ (8005974 <stepStateMachine+0x2a4>)
 80058fe:	f001 fd51 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_RESET);
 8005902:	2200      	movs	r2, #0
 8005904:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005908:	481a      	ldr	r0, [pc, #104]	@ (8005974 <stepStateMachine+0x2a4>)
 800590a:	f001 fd4b 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 800590e:	2201      	movs	r2, #1
 8005910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005914:	4818      	ldr	r0, [pc, #96]	@ (8005978 <stepStateMachine+0x2a8>)
 8005916:	f001 fd45 	bl	80073a4 <HAL_GPIO_WritePin>
    if (ovpError || uvpError || otpError || utpError || spiError)
 800591a:	4b18      	ldr	r3, [pc, #96]	@ (800597c <stepStateMachine+0x2ac>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10f      	bne.n	8005942 <stepStateMachine+0x272>
 8005922:	4b17      	ldr	r3, [pc, #92]	@ (8005980 <stepStateMachine+0x2b0>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <stepStateMachine+0x272>
 800592a:	4b16      	ldr	r3, [pc, #88]	@ (8005984 <stepStateMachine+0x2b4>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <stepStateMachine+0x272>
 8005932:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <stepStateMachine+0x2b8>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <stepStateMachine+0x272>
 800593a:	4b14      	ldr	r3, [pc, #80]	@ (800598c <stepStateMachine+0x2bc>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <stepStateMachine+0x27a>
    {
      fsmState = STATE_ERROR;
 8005942:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <stepStateMachine+0x2a0>)
 8005944:	2204      	movs	r2, #4
 8005946:	701a      	strb	r2, [r3, #0]
    }
    else if (HAL_GPIO_ReadPin(SC_PROBE_GPIO_Port, SC_PROBE_Pin) == GPIO_PIN_RESET)
    {
      fsmState = STATE_IDLE;
    }
    break;
 8005948:	e04c      	b.n	80059e4 <stepStateMachine+0x314>
    else if (HAL_GPIO_ReadPin(SC_PROBE_GPIO_Port, SC_PROBE_Pin) == GPIO_PIN_RESET)
 800594a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800594e:	4810      	ldr	r0, [pc, #64]	@ (8005990 <stepStateMachine+0x2c0>)
 8005950:	f001 fd10 	bl	8007374 <HAL_GPIO_ReadPin>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d144      	bne.n	80059e4 <stepStateMachine+0x314>
      fsmState = STATE_IDLE;
 800595a:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <stepStateMachine+0x2a0>)
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
    break;
 8005960:	e040      	b.n	80059e4 <stepStateMachine+0x314>
 8005962:	bf00      	nop
 8005964:	f3af 8000 	nop.w
 8005968:	66666666 	.word	0x66666666
 800596c:	3fee6666 	.word	0x3fee6666
 8005970:	20000828 	.word	0x20000828
 8005974:	40021000 	.word	0x40021000
 8005978:	40020c00 	.word	0x40020c00
 800597c:	20000672 	.word	0x20000672
 8005980:	200006f2 	.word	0x200006f2
 8005984:	20000772 	.word	0x20000772
 8005988:	200007f2 	.word	0x200007f2
 800598c:	20000800 	.word	0x20000800
 8005990:	40020800 	.word	0x40020800
 8005994:	2000040c 	.word	0x2000040c
 8005998:	20000830 	.word	0x20000830
 800599c:	2000082c 	.word	0x2000082c
 80059a0:	2000042c 	.word	0x2000042c
 80059a4:	20000420 	.word	0x20000420

  case STATE_ERROR:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_RESET);
 80059a8:	2200      	movs	r2, #0
 80059aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059ae:	480f      	ldr	r0, [pc, #60]	@ (80059ec <stepStateMachine+0x31c>)
 80059b0:	f001 fcf8 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 80059b4:	2200      	movs	r2, #0
 80059b6:	2180      	movs	r1, #128	@ 0x80
 80059b8:	480c      	ldr	r0, [pc, #48]	@ (80059ec <stepStateMachine+0x31c>)
 80059ba:	f001 fcf3 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_RESET);
 80059be:	2200      	movs	r2, #0
 80059c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059c4:	4809      	ldr	r0, [pc, #36]	@ (80059ec <stepStateMachine+0x31c>)
 80059c6:	f001 fced 	bl	80073a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_RESET);
 80059ca:	2200      	movs	r2, #0
 80059cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059d0:	4807      	ldr	r0, [pc, #28]	@ (80059f0 <stepStateMachine+0x320>)
 80059d2:	f001 fce7 	bl	80073a4 <HAL_GPIO_WritePin>
    break;
 80059d6:	e006      	b.n	80059e6 <stepStateMachine+0x316>
    break;
 80059d8:	bf00      	nop
 80059da:	e004      	b.n	80059e6 <stepStateMachine+0x316>
    break;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <stepStateMachine+0x316>
    break;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <stepStateMachine+0x316>
    break;
 80059e4:	bf00      	nop
  }
}
 80059e6:	bf00      	nop
 80059e8:	bdb0      	pop	{r4, r5, r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40020c00 	.word	0x40020c00

080059f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059f8:	b672      	cpsid	i
}
 80059fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <Error_Handler+0x8>

08005a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a06:	2300      	movs	r3, #0
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	4b10      	ldr	r3, [pc, #64]	@ (8005a4c <HAL_MspInit+0x4c>)
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8005a4c <HAL_MspInit+0x4c>)
 8005a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a16:	4b0d      	ldr	r3, [pc, #52]	@ (8005a4c <HAL_MspInit+0x4c>)
 8005a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	4b09      	ldr	r3, [pc, #36]	@ (8005a4c <HAL_MspInit+0x4c>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	4a08      	ldr	r2, [pc, #32]	@ (8005a4c <HAL_MspInit+0x4c>)
 8005a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a32:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <HAL_MspInit+0x4c>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800

08005a50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08e      	sub	sp, #56	@ 0x38
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a45      	ldr	r2, [pc, #276]	@ (8005b84 <HAL_ADC_MspInit+0x134>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d128      	bne.n	8005ac4 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a72:	2300      	movs	r3, #0
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	4b44      	ldr	r3, [pc, #272]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7a:	4a43      	ldr	r2, [pc, #268]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a82:	4b41      	ldr	r3, [pc, #260]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8a:	623b      	str	r3, [r7, #32]
 8005a8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	4b3d      	ldr	r3, [pc, #244]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	4a3c      	ldr	r2, [pc, #240]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005a98:	f043 0304 	orr.w	r3, r3, #4
 8005a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = HV_FUSE_TEMPERATURE_Pin;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(HV_FUSE_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8005ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005aba:	4619      	mov	r1, r3
 8005abc:	4833      	ldr	r0, [pc, #204]	@ (8005b8c <HAL_ADC_MspInit+0x13c>)
 8005abe:	f001 fabd 	bl	800703c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005ac2:	e05a      	b.n	8005b7a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a31      	ldr	r2, [pc, #196]	@ (8005b90 <HAL_ADC_MspInit+0x140>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d128      	bne.n	8005b20 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005ad8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ade:	4b2a      	ldr	r3, [pc, #168]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	4b26      	ldr	r3, [pc, #152]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af2:	4a25      	ldr	r2, [pc, #148]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005af4:	f043 0304 	orr.w	r3, r3, #4
 8005af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005afa:	4b23      	ldr	r3, [pc, #140]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PRECHARGE_TEMPEREATURE_Pin;
 8005b06:	2302      	movs	r3, #2
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PRECHARGE_TEMPEREATURE_GPIO_Port, &GPIO_InitStruct);
 8005b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b16:	4619      	mov	r1, r3
 8005b18:	481c      	ldr	r0, [pc, #112]	@ (8005b8c <HAL_ADC_MspInit+0x13c>)
 8005b1a:	f001 fa8f 	bl	800703c <HAL_GPIO_Init>
}
 8005b1e:	e02c      	b.n	8005b7a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	@ (8005b94 <HAL_ADC_MspInit+0x144>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d127      	bne.n	8005b7a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	4b16      	ldr	r3, [pc, #88]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	4a15      	ldr	r2, [pc, #84]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005b34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b3a:	4b13      	ldr	r3, [pc, #76]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005b50:	f043 0304 	orr.w	r3, r3, #4
 8005b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b56:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <HAL_ADC_MspInit+0x138>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUX_TEMPERATURE1_Pin;
 8005b62:	2308      	movs	r3, #8
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b66:	2303      	movs	r3, #3
 8005b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(AUX_TEMPERATURE1_GPIO_Port, &GPIO_InitStruct);
 8005b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b72:	4619      	mov	r1, r3
 8005b74:	4805      	ldr	r0, [pc, #20]	@ (8005b8c <HAL_ADC_MspInit+0x13c>)
 8005b76:	f001 fa61 	bl	800703c <HAL_GPIO_Init>
}
 8005b7a:	bf00      	nop
 8005b7c:	3738      	adds	r7, #56	@ 0x38
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40012000 	.word	0x40012000
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	40020800 	.word	0x40020800
 8005b90:	40012100 	.word	0x40012100
 8005b94:	40012200 	.word	0x40012200

08005b98 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08c      	sub	sp, #48	@ 0x30
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba0:	f107 031c 	add.w	r3, r7, #28
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a43      	ldr	r2, [pc, #268]	@ (8005cc4 <HAL_CAN_MspInit+0x12c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d136      	bne.n	8005c28 <HAL_CAN_MspInit+0x90>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005bba:	4b43      	ldr	r3, [pc, #268]	@ (8005cc8 <HAL_CAN_MspInit+0x130>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	4a41      	ldr	r2, [pc, #260]	@ (8005cc8 <HAL_CAN_MspInit+0x130>)
 8005bc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005bc4:	4b40      	ldr	r3, [pc, #256]	@ (8005cc8 <HAL_CAN_MspInit+0x130>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d10d      	bne.n	8005be8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005bd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	4b37      	ldr	r3, [pc, #220]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	4a36      	ldr	r2, [pc, #216]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bf8:	4b34      	ldr	r3, [pc, #208]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005c04:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c12:	2303      	movs	r3, #3
 8005c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005c16:	2309      	movs	r3, #9
 8005c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c1a:	f107 031c 	add.w	r3, r7, #28
 8005c1e:	4619      	mov	r1, r3
 8005c20:	482b      	ldr	r0, [pc, #172]	@ (8005cd0 <HAL_CAN_MspInit+0x138>)
 8005c22:	f001 fa0b 	bl	800703c <HAL_GPIO_Init>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8005c26:	e048      	b.n	8005cba <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a29      	ldr	r2, [pc, #164]	@ (8005cd4 <HAL_CAN_MspInit+0x13c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d143      	bne.n	8005cba <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	4b25      	ldr	r3, [pc, #148]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	4a24      	ldr	r2, [pc, #144]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c42:	4b22      	ldr	r3, [pc, #136]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc8 <HAL_CAN_MspInit+0x130>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc8 <HAL_CAN_MspInit+0x130>)
 8005c56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005c58:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc8 <HAL_CAN_MspInit+0x130>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d10d      	bne.n	8005c7c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	4b19      	ldr	r3, [pc, #100]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	4a18      	ldr	r2, [pc, #96]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c70:	4b16      	ldr	r3, [pc, #88]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c84:	4a11      	ldr	r2, [pc, #68]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ccc <HAL_CAN_MspInit+0x134>)
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005c98:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8005caa:	2309      	movs	r3, #9
 8005cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cae:	f107 031c 	add.w	r3, r7, #28
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4808      	ldr	r0, [pc, #32]	@ (8005cd8 <HAL_CAN_MspInit+0x140>)
 8005cb6:	f001 f9c1 	bl	800703c <HAL_GPIO_Init>
}
 8005cba:	bf00      	nop
 8005cbc:	3730      	adds	r7, #48	@ 0x30
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40006400 	.word	0x40006400
 8005cc8:	20000834 	.word	0x20000834
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	40020000 	.word	0x40020000
 8005cd4:	40006800 	.word	0x40006800
 8005cd8:	40020400 	.word	0x40020400

08005cdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	@ 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce4:	f107 0314 	add.w	r3, r7, #20
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	605a      	str	r2, [r3, #4]
 8005cee:	609a      	str	r2, [r3, #8]
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	@ (8005d60 <HAL_SPI_MspInit+0x84>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d12b      	bne.n	8005d56 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	4b18      	ldr	r3, [pc, #96]	@ (8005d64 <HAL_SPI_MspInit+0x88>)
 8005d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d06:	4a17      	ldr	r2, [pc, #92]	@ (8005d64 <HAL_SPI_MspInit+0x88>)
 8005d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d0e:	4b15      	ldr	r3, [pc, #84]	@ (8005d64 <HAL_SPI_MspInit+0x88>)
 8005d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	4b11      	ldr	r3, [pc, #68]	@ (8005d64 <HAL_SPI_MspInit+0x88>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d22:	4a10      	ldr	r2, [pc, #64]	@ (8005d64 <HAL_SPI_MspInit+0x88>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d64 <HAL_SPI_MspInit+0x88>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005d36:	23e0      	movs	r3, #224	@ 0xe0
 8005d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d42:	2303      	movs	r3, #3
 8005d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005d46:	2305      	movs	r3, #5
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d4a:	f107 0314 	add.w	r3, r7, #20
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4805      	ldr	r0, [pc, #20]	@ (8005d68 <HAL_SPI_MspInit+0x8c>)
 8005d52:	f001 f973 	bl	800703c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005d56:	bf00      	nop
 8005d58:	3728      	adds	r7, #40	@ 0x28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40013000 	.word	0x40013000
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40020000 	.word	0x40020000

08005d6c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a0b      	ldr	r2, [pc, #44]	@ (8005da8 <HAL_TIM_PWM_MspInit+0x3c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d10d      	bne.n	8005d9a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <HAL_TIM_PWM_MspInit+0x40>)
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	4a09      	ldr	r2, [pc, #36]	@ (8005dac <HAL_TIM_PWM_MspInit+0x40>)
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d8e:	4b07      	ldr	r3, [pc, #28]	@ (8005dac <HAL_TIM_PWM_MspInit+0x40>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40023800 	.word	0x40023800

08005db0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	@ 0x28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db8:	f107 0314 	add.w	r3, r7, #20
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd0:	d12c      	bne.n	8005e2c <HAL_TIM_IC_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	4b17      	ldr	r3, [pc, #92]	@ (8005e34 <HAL_TIM_IC_MspInit+0x84>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dda:	4a16      	ldr	r2, [pc, #88]	@ (8005e34 <HAL_TIM_IC_MspInit+0x84>)
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005de2:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <HAL_TIM_IC_MspInit+0x84>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <HAL_TIM_IC_MspInit+0x84>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e34 <HAL_TIM_IC_MspInit+0x84>)
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005e34 <HAL_TIM_IC_MspInit+0x84>)
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = IMD_DATA_Pin;
 8005e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e10:	2302      	movs	r3, #2
 8005e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMD_DATA_GPIO_Port, &GPIO_InitStruct);
 8005e20:	f107 0314 	add.w	r3, r7, #20
 8005e24:	4619      	mov	r1, r3
 8005e26:	4804      	ldr	r0, [pc, #16]	@ (8005e38 <HAL_TIM_IC_MspInit+0x88>)
 8005e28:	f001 f908 	bl	800703c <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005e2c:	bf00      	nop
 8005e2e:	3728      	adds	r7, #40	@ 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40020000 	.word	0x40020000

08005e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e44:	f107 030c 	add.w	r3, r7, #12
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a12      	ldr	r2, [pc, #72]	@ (8005ea4 <HAL_TIM_MspPostInit+0x68>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d11e      	bne.n	8005e9c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	4b11      	ldr	r3, [pc, #68]	@ (8005ea8 <HAL_TIM_MspPostInit+0x6c>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	4a10      	ldr	r2, [pc, #64]	@ (8005ea8 <HAL_TIM_MspPostInit+0x6c>)
 8005e68:	f043 0310 	orr.w	r3, r3, #16
 8005e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <HAL_TIM_MspPostInit+0x6c>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8005e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e80:	2302      	movs	r3, #2
 8005e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8005e90:	f107 030c 	add.w	r3, r7, #12
 8005e94:	4619      	mov	r1, r3
 8005e96:	4805      	ldr	r0, [pc, #20]	@ (8005eac <HAL_TIM_MspPostInit+0x70>)
 8005e98:	f001 f8d0 	bl	800703c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005e9c:	bf00      	nop
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40021000 	.word	0x40021000

08005eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <NMI_Handler+0x4>

08005eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ebc:	bf00      	nop
 8005ebe:	e7fd      	b.n	8005ebc <HardFault_Handler+0x4>

08005ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ec4:	bf00      	nop
 8005ec6:	e7fd      	b.n	8005ec4 <MemManage_Handler+0x4>

08005ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ecc:	bf00      	nop
 8005ece:	e7fd      	b.n	8005ecc <BusFault_Handler+0x4>

08005ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <UsageFault_Handler+0x4>

08005ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005eea:	bf00      	nop
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ef8:	bf00      	nop
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f06:	f000 f919 	bl	800613c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f0a:	bf00      	nop
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f14:	4b06      	ldr	r3, [pc, #24]	@ (8005f30 <SystemInit+0x20>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1a:	4a05      	ldr	r2, [pc, #20]	@ (8005f30 <SystemInit+0x20>)
 8005f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	e000ed00 	.word	0xe000ed00

08005f34 <find_segment>:
    /*   86 C */  3596, /*   87 C */  3511, /*   88 C */  3428, /*   89 C */  3348,
    /*   90 C */  3270,
};

static int find_segment(uint16_t adc)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	80fb      	strh	r3, [r7, #6]
    // Returns index i such that adc is between [lut[i], lut[i+1]] (lut decreasing)
    int lo = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
    int hi = THERM_LUT_SIZE - 1;
 8005f42:	2364      	movs	r3, #100	@ 0x64
 8005f44:	613b      	str	r3, [r7, #16]
    while (hi - lo > 1) {
 8005f46:	e012      	b.n	8005f6e <find_segment+0x3a>
        int mid = (lo + hi) / 2;
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	0fda      	lsrs	r2, r3, #31
 8005f50:	4413      	add	r3, r2
 8005f52:	105b      	asrs	r3, r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
        if (therm_lut_adc[mid] > adc) {
 8005f56:	4a0c      	ldr	r2, [pc, #48]	@ (8005f88 <find_segment+0x54>)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d202      	bcs.n	8005f6a <find_segment+0x36>
            lo = mid;    // move toward higher temperature (lower ADC)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e001      	b.n	8005f6e <find_segment+0x3a>
        } else {
            hi = mid;    // move toward lower temperature (higher ADC)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	613b      	str	r3, [r7, #16]
    while (hi - lo > 1) {
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	dce7      	bgt.n	8005f48 <find_segment+0x14>
        }
    }
    return lo;
 8005f78:	697b      	ldr	r3, [r7, #20]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	08010a38 	.word	0x08010a38

08005f8c <thermistor_adc_to_c_float>:

float thermistor_adc_to_c_float(uint16_t adc)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	80fb      	strh	r3, [r7, #6]
    // Clamp outside table range
    if (adc >= therm_lut_adc[0])                return (float)THERM_LUT_MIN_C;
 8005f96:	f246 02dc 	movw	r2, #24796	@ 0x60dc
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d302      	bcc.n	8005fa6 <thermistor_adc_to_c_float+0x1a>
 8005fa0:	eefa 7a04 	vmov.f32	s15, #164	@ 0xc1200000 -10.0
 8005fa4:	e045      	b.n	8006032 <thermistor_adc_to_c_float+0xa6>
    if (adc <= therm_lut_adc[THERM_LUT_SIZE-1]) return (float)THERM_LUT_MAX_C;
 8005fa6:	f640 42c6 	movw	r2, #3270	@ 0xcc6
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d802      	bhi.n	8005fb6 <thermistor_adc_to_c_float+0x2a>
 8005fb0:	eddf 7a22 	vldr	s15, [pc, #136]	@ 800603c <thermistor_adc_to_c_float+0xb0>
 8005fb4:	e03d      	b.n	8006032 <thermistor_adc_to_c_float+0xa6>

    int i = find_segment(adc);
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff ffbb 	bl	8005f34 <find_segment>
 8005fbe:	61f8      	str	r0, [r7, #28]
    uint16_t a_hi = therm_lut_adc[i];       // at T = T_lo
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8006040 <thermistor_adc_to_c_float+0xb4>)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc8:	837b      	strh	r3, [r7, #26]
    uint16_t a_lo = therm_lut_adc[i + 1];   // at T = T_lo + 1
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <thermistor_adc_to_c_float+0xb4>)
 8005fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd4:	833b      	strh	r3, [r7, #24]
    float dA = (float)a_hi - (float)a_lo;   // > 0
 8005fd6:	8b7b      	ldrh	r3, [r7, #26]
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fe0:	8b3b      	ldrh	r3, [r7, #24]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fee:	edc7 7a05 	vstr	s15, [r7, #20]
    float frac = ((float)a_hi - (float)adc) / dA; // 0..1 within the 1 °C span
 8005ff2:	8b7b      	ldrh	r3, [r7, #26]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	ee77 6a67 	vsub.f32	s13, s14, s15
 800600a:	ed97 7a05 	vldr	s14, [r7, #20]
 800600e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006012:	edc7 7a04 	vstr	s15, [r7, #16]
    float t_lo = (float)(THERM_LUT_MIN_C + i);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3b0a      	subs	r3, #10
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006022:	edc7 7a03 	vstr	s15, [r7, #12]
    return t_lo + frac; // linear interpolation
 8006026:	ed97 7a03 	vldr	s14, [r7, #12]
 800602a:	edd7 7a04 	vldr	s15, [r7, #16]
 800602e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006032:	eeb0 0a67 	vmov.f32	s0, s15
 8006036:	3720      	adds	r7, #32
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	42b40000 	.word	0x42b40000
 8006040:	08010a38 	.word	0x08010a38

08006044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800607c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006048:	f7ff ff62 	bl	8005f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800604c:	480c      	ldr	r0, [pc, #48]	@ (8006080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800604e:	490d      	ldr	r1, [pc, #52]	@ (8006084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006050:	4a0d      	ldr	r2, [pc, #52]	@ (8006088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006054:	e002      	b.n	800605c <LoopCopyDataInit>

08006056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800605a:	3304      	adds	r3, #4

0800605c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800605c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800605e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006060:	d3f9      	bcc.n	8006056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006062:	4a0a      	ldr	r2, [pc, #40]	@ (800608c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006064:	4c0a      	ldr	r4, [pc, #40]	@ (8006090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006068:	e001      	b.n	800606e <LoopFillZerobss>

0800606a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800606a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800606c:	3204      	adds	r2, #4

0800606e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800606e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006070:	d3fb      	bcc.n	800606a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006072:	f00a fba9 	bl	80107c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006076:	f7fa ff0f 	bl	8000e98 <main>
  bx  lr    
 800607a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800607c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006084:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8006088:	08010b14 	.word	0x08010b14
  ldr r2, =_sbss
 800608c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8006090:	2000083c 	.word	0x2000083c

08006094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006094:	e7fe      	b.n	8006094 <ADC_IRQHandler>
	...

08006098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800609c:	4b0e      	ldr	r3, [pc, #56]	@ (80060d8 <HAL_Init+0x40>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0d      	ldr	r2, [pc, #52]	@ (80060d8 <HAL_Init+0x40>)
 80060a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060a8:	4b0b      	ldr	r3, [pc, #44]	@ (80060d8 <HAL_Init+0x40>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a0a      	ldr	r2, [pc, #40]	@ (80060d8 <HAL_Init+0x40>)
 80060ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060b4:	4b08      	ldr	r3, [pc, #32]	@ (80060d8 <HAL_Init+0x40>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a07      	ldr	r2, [pc, #28]	@ (80060d8 <HAL_Init+0x40>)
 80060ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060c0:	2003      	movs	r0, #3
 80060c2:	f000 ff87 	bl	8006fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060c6:	200f      	movs	r0, #15
 80060c8:	f000 f808 	bl	80060dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060cc:	f7ff fc98 	bl	8005a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40023c00 	.word	0x40023c00

080060dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060e4:	4b12      	ldr	r3, [pc, #72]	@ (8006130 <HAL_InitTick+0x54>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	4b12      	ldr	r3, [pc, #72]	@ (8006134 <HAL_InitTick+0x58>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	4619      	mov	r1, r3
 80060ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80060f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80060f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 ff91 	bl	8007022 <HAL_SYSTICK_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e00e      	b.n	8006128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b0f      	cmp	r3, #15
 800610e:	d80a      	bhi.n	8006126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006110:	2200      	movs	r2, #0
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	f04f 30ff 	mov.w	r0, #4294967295
 8006118:	f000 ff67 	bl	8006fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800611c:	4a06      	ldr	r2, [pc, #24]	@ (8006138 <HAL_InitTick+0x5c>)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e000      	b.n	8006128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000018 	.word	0x20000018
 8006134:	20000020 	.word	0x20000020
 8006138:	2000001c 	.word	0x2000001c

0800613c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006140:	4b06      	ldr	r3, [pc, #24]	@ (800615c <HAL_IncTick+0x20>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <HAL_IncTick+0x24>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4413      	add	r3, r2
 800614c:	4a04      	ldr	r2, [pc, #16]	@ (8006160 <HAL_IncTick+0x24>)
 800614e:	6013      	str	r3, [r2, #0]
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000020 	.word	0x20000020
 8006160:	20000838 	.word	0x20000838

08006164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return uwTick;
 8006168:	4b03      	ldr	r3, [pc, #12]	@ (8006178 <HAL_GetTick+0x14>)
 800616a:	681b      	ldr	r3, [r3, #0]
}
 800616c:	4618      	mov	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20000838 	.word	0x20000838

0800617c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006184:	f7ff ffee 	bl	8006164 <HAL_GetTick>
 8006188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d005      	beq.n	80061a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006196:	4b0a      	ldr	r3, [pc, #40]	@ (80061c0 <HAL_Delay+0x44>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80061a2:	bf00      	nop
 80061a4:	f7ff ffde 	bl	8006164 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d8f7      	bhi.n	80061a4 <HAL_Delay+0x28>
  {
  }
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000020 	.word	0x20000020

080061c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e033      	b.n	8006242 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fc34 	bl	8005a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d118      	bne.n	8006234 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006206:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800620a:	f023 0302 	bic.w	r3, r3, #2
 800620e:	f043 0202 	orr.w	r2, r3, #2
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f93a 	bl	8006490 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	f043 0201 	orr.w	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	641a      	str	r2, [r3, #64]	@ 0x40
 8006232:	e001      	b.n	8006238 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_ADC_ConfigChannel+0x1c>
 8006264:	2302      	movs	r3, #2
 8006266:	e105      	b.n	8006474 <HAL_ADC_ConfigChannel+0x228>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b09      	cmp	r3, #9
 8006276:	d925      	bls.n	80062c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68d9      	ldr	r1, [r3, #12]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	4613      	mov	r3, r2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4413      	add	r3, r2
 800628c:	3b1e      	subs	r3, #30
 800628e:	2207      	movs	r2, #7
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	43da      	mvns	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	400a      	ands	r2, r1
 800629c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68d9      	ldr	r1, [r3, #12]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	4618      	mov	r0, r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	4403      	add	r3, r0
 80062b6:	3b1e      	subs	r3, #30
 80062b8:	409a      	lsls	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	e022      	b.n	800630a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6919      	ldr	r1, [r3, #16]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	4613      	mov	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	2207      	movs	r2, #7
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43da      	mvns	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	400a      	ands	r2, r1
 80062e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6919      	ldr	r1, [r3, #16]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4618      	mov	r0, r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4403      	add	r3, r0
 8006300:	409a      	lsls	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b06      	cmp	r3, #6
 8006310:	d824      	bhi.n	800635c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	3b05      	subs	r3, #5
 8006324:	221f      	movs	r2, #31
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	43da      	mvns	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	400a      	ands	r2, r1
 8006332:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	4618      	mov	r0, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	3b05      	subs	r3, #5
 800634e:	fa00 f203 	lsl.w	r2, r0, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	635a      	str	r2, [r3, #52]	@ 0x34
 800635a:	e04c      	b.n	80063f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b0c      	cmp	r3, #12
 8006362:	d824      	bhi.n	80063ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	3b23      	subs	r3, #35	@ 0x23
 8006376:	221f      	movs	r2, #31
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43da      	mvns	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	400a      	ands	r2, r1
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	4618      	mov	r0, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	3b23      	subs	r3, #35	@ 0x23
 80063a0:	fa00 f203 	lsl.w	r2, r0, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80063ac:	e023      	b.n	80063f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	3b41      	subs	r3, #65	@ 0x41
 80063c0:	221f      	movs	r2, #31
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43da      	mvns	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	400a      	ands	r2, r1
 80063ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	4618      	mov	r0, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	3b41      	subs	r3, #65	@ 0x41
 80063ea:	fa00 f203 	lsl.w	r2, r0, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063f6:	4b22      	ldr	r3, [pc, #136]	@ (8006480 <HAL_ADC_ConfigChannel+0x234>)
 80063f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a21      	ldr	r2, [pc, #132]	@ (8006484 <HAL_ADC_ConfigChannel+0x238>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d109      	bne.n	8006418 <HAL_ADC_ConfigChannel+0x1cc>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b12      	cmp	r3, #18
 800640a:	d105      	bne.n	8006418 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a19      	ldr	r2, [pc, #100]	@ (8006484 <HAL_ADC_ConfigChannel+0x238>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d123      	bne.n	800646a <HAL_ADC_ConfigChannel+0x21e>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b10      	cmp	r3, #16
 8006428:	d003      	beq.n	8006432 <HAL_ADC_ConfigChannel+0x1e6>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b11      	cmp	r3, #17
 8006430:	d11b      	bne.n	800646a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b10      	cmp	r3, #16
 8006444:	d111      	bne.n	800646a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006446:	4b10      	ldr	r3, [pc, #64]	@ (8006488 <HAL_ADC_ConfigChannel+0x23c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a10      	ldr	r2, [pc, #64]	@ (800648c <HAL_ADC_ConfigChannel+0x240>)
 800644c:	fba2 2303 	umull	r2, r3, r2, r3
 8006450:	0c9a      	lsrs	r2, r3, #18
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800645c:	e002      	b.n	8006464 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	3b01      	subs	r3, #1
 8006462:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f9      	bne.n	800645e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40012300 	.word	0x40012300
 8006484:	40012000 	.word	0x40012000
 8006488:	20000018 	.word	0x20000018
 800648c:	431bde83 	.word	0x431bde83

08006490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006498:	4b79      	ldr	r3, [pc, #484]	@ (8006680 <ADC_Init+0x1f0>)
 800649a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6859      	ldr	r1, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	021a      	lsls	r2, r3, #8
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80064e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800650a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6899      	ldr	r1, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006522:	4a58      	ldr	r2, [pc, #352]	@ (8006684 <ADC_Init+0x1f4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d022      	beq.n	800656e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6899      	ldr	r1, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6899      	ldr	r1, [r3, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]
 800656c:	e00f      	b.n	800658e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800657c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800658c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0202 	bic.w	r2, r2, #2
 800659c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6899      	ldr	r1, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	7e1b      	ldrb	r3, [r3, #24]
 80065a8:	005a      	lsls	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01b      	beq.n	80065f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80065da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6859      	ldr	r1, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e6:	3b01      	subs	r3, #1
 80065e8:	035a      	lsls	r2, r3, #13
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
 80065f2:	e007      	b.n	8006604 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	3b01      	subs	r3, #1
 8006620:	051a      	lsls	r2, r3, #20
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6899      	ldr	r1, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006646:	025a      	lsls	r2, r3, #9
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800665e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6899      	ldr	r1, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	029a      	lsls	r2, r3, #10
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	40012300 	.word	0x40012300
 8006684:	0f000001 	.word	0x0f000001

08006688 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e0ed      	b.n	8006876 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fa76 	bl	8005b98 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066bc:	f7ff fd52 	bl	8006164 <HAL_GetTick>
 80066c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80066c2:	e012      	b.n	80066ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80066c4:	f7ff fd4e 	bl	8006164 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b0a      	cmp	r3, #10
 80066d0:	d90b      	bls.n	80066ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2205      	movs	r2, #5
 80066e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e0c5      	b.n	8006876 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0e5      	beq.n	80066c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0202 	bic.w	r2, r2, #2
 8006706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006708:	f7ff fd2c 	bl	8006164 <HAL_GetTick>
 800670c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800670e:	e012      	b.n	8006736 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006710:	f7ff fd28 	bl	8006164 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b0a      	cmp	r3, #10
 800671c:	d90b      	bls.n	8006736 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006722:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2205      	movs	r2, #5
 800672e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e09f      	b.n	8006876 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e5      	bne.n	8006710 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7e1b      	ldrb	r3, [r3, #24]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d108      	bne.n	800675e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	e007      	b.n	800676e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800676c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	7e5b      	ldrb	r3, [r3, #25]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d108      	bne.n	8006788 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e007      	b.n	8006798 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006796:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	7e9b      	ldrb	r3, [r3, #26]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d108      	bne.n	80067b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0220 	orr.w	r2, r2, #32
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	e007      	b.n	80067c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0220 	bic.w	r2, r2, #32
 80067c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	7edb      	ldrb	r3, [r3, #27]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d108      	bne.n	80067dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0210 	bic.w	r2, r2, #16
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e007      	b.n	80067ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0210 	orr.w	r2, r2, #16
 80067ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7f1b      	ldrb	r3, [r3, #28]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d108      	bne.n	8006806 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0208 	orr.w	r2, r2, #8
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e007      	b.n	8006816 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0208 	bic.w	r2, r2, #8
 8006814:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7f5b      	ldrb	r3, [r3, #29]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d108      	bne.n	8006830 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0204 	orr.w	r2, r2, #4
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e007      	b.n	8006840 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	ea42 0103 	orr.w	r1, r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	1e5a      	subs	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006890:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d003      	beq.n	80068a0 <HAL_CAN_ConfigFilter+0x20>
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b02      	cmp	r3, #2
 800689c:	f040 80be 	bne.w	8006a1c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80068a0:	4b65      	ldr	r3, [pc, #404]	@ (8006a38 <HAL_CAN_ConfigFilter+0x1b8>)
 80068a2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80068aa:	f043 0201 	orr.w	r2, r3, #1
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80068ba:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	431a      	orrs	r2, r3
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	2201      	movs	r2, #1
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	401a      	ands	r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d123      	bne.n	800694a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	43db      	mvns	r3, r3
 800690c:	401a      	ands	r2, r3
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006924:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	3248      	adds	r2, #72	@ 0x48
 800692a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800693e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006940:	6939      	ldr	r1, [r7, #16]
 8006942:	3348      	adds	r3, #72	@ 0x48
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	440b      	add	r3, r1
 8006948:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d122      	bne.n	8006998 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	431a      	orrs	r2, r3
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006972:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	3248      	adds	r2, #72	@ 0x48
 8006978:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800698c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800698e:	6939      	ldr	r1, [r7, #16]
 8006990:	3348      	adds	r3, #72	@ 0x48
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	440b      	add	r3, r1
 8006996:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d109      	bne.n	80069b4 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	401a      	ands	r2, r3
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80069b2:	e007      	b.n	80069c4 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	431a      	orrs	r2, r3
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d109      	bne.n	80069e0 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	401a      	ands	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80069de:	e007      	b.n	80069f0 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	431a      	orrs	r2, r3
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e006      	b.n	8006a2a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40006400 	.word	0x40006400

08006a3c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b089      	sub	sp, #36	@ 0x24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006a5a:	7ffb      	ldrb	r3, [r7, #31]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d003      	beq.n	8006a68 <HAL_CAN_AddTxMessage+0x2c>
 8006a60:	7ffb      	ldrb	r3, [r7, #31]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	f040 80ad 	bne.w	8006bc2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d105      	bne.n	8006a88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8095 	beq.w	8006bb2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	0e1b      	lsrs	r3, r3, #24
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006a92:	2201      	movs	r2, #1
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	409a      	lsls	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10d      	bne.n	8006ac0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	6809      	ldr	r1, [r1, #0]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	3318      	adds	r3, #24
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	440b      	add	r3, r1
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e00f      	b.n	8006ae0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006aca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ad0:	68f9      	ldr	r1, [r7, #12]
 8006ad2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006ad4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	3318      	adds	r3, #24
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	440b      	add	r3, r1
 8006ade:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3318      	adds	r3, #24
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	440b      	add	r3, r1
 8006af0:	3304      	adds	r3, #4
 8006af2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	7d1b      	ldrb	r3, [r3, #20]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d111      	bne.n	8006b20 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	3318      	adds	r3, #24
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	4413      	add	r3, r2
 8006b08:	3304      	adds	r3, #4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	6811      	ldr	r1, [r2, #0]
 8006b10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3318      	adds	r3, #24
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	440b      	add	r3, r1
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3307      	adds	r3, #7
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	061a      	lsls	r2, r3, #24
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3306      	adds	r3, #6
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3305      	adds	r3, #5
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	3204      	adds	r2, #4
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	4610      	mov	r0, r2
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	6811      	ldr	r1, [r2, #0]
 8006b48:	ea43 0200 	orr.w	r2, r3, r0
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	440b      	add	r3, r1
 8006b52:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006b56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3303      	adds	r3, #3
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	061a      	lsls	r2, r3, #24
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3302      	adds	r3, #2
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	4313      	orrs	r3, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	4610      	mov	r0, r2
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	6811      	ldr	r1, [r2, #0]
 8006b7e:	ea43 0200 	orr.w	r2, r3, r0
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	440b      	add	r3, r1
 8006b88:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006b8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	3318      	adds	r3, #24
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	4413      	add	r3, r2
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	6811      	ldr	r1, [r2, #0]
 8006ba0:	f043 0201 	orr.w	r2, r3, #1
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	3318      	adds	r3, #24
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	440b      	add	r3, r1
 8006bac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e00e      	b.n	8006bd0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e006      	b.n	8006bd0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
  }
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3724      	adds	r7, #36	@ 0x24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bf0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d003      	beq.n	8006c00 <HAL_CAN_GetRxMessage+0x24>
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	f040 8103 	bne.w	8006e06 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10e      	bne.n	8006c24 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d116      	bne.n	8006c42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0f7      	b.n	8006e14 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d107      	bne.n	8006c42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e0e8      	b.n	8006e14 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	331b      	adds	r3, #27
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	4413      	add	r3, r2
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0204 	and.w	r2, r3, #4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10c      	bne.n	8006c7a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	331b      	adds	r3, #27
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	4413      	add	r3, r2
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	0d5b      	lsrs	r3, r3, #21
 8006c70:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e00b      	b.n	8006c92 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	331b      	adds	r3, #27
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	4413      	add	r3, r2
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	08db      	lsrs	r3, r3, #3
 8006c8a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	331b      	adds	r3, #27
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	4413      	add	r3, r2
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0202 	and.w	r2, r3, #2
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	331b      	adds	r3, #27
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	611a      	str	r2, [r3, #16]
 8006cc6:	e00b      	b.n	8006ce0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	331b      	adds	r3, #27
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 020f 	and.w	r2, r3, #15
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	331b      	adds	r3, #27
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	4413      	add	r3, r2
 8006cec:	3304      	adds	r3, #4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	0a1b      	lsrs	r3, r3, #8
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	331b      	adds	r3, #27
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	4413      	add	r3, r2
 8006d04:	3304      	adds	r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	0c1b      	lsrs	r3, r3, #16
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	0a1a      	lsrs	r2, r3, #8
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	0c1a      	lsrs	r2, r3, #16
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	3302      	adds	r3, #2
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	0e1a      	lsrs	r2, r3, #24
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	3303      	adds	r3, #3
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	3304      	adds	r3, #4
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	0a1a      	lsrs	r2, r3, #8
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3305      	adds	r3, #5
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	0c1a      	lsrs	r2, r3, #16
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	3306      	adds	r3, #6
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	0e1a      	lsrs	r2, r3, #24
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	3307      	adds	r3, #7
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d108      	bne.n	8006df2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0220 	orr.w	r2, r2, #32
 8006dee:	60da      	str	r2, [r3, #12]
 8006df0:	e007      	b.n	8006e02 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0220 	orr.w	r2, r2, #32
 8006e00:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e006      	b.n	8006e14 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e34:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d002      	beq.n	8006e42 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006e3c:	7afb      	ldrb	r3, [r7, #11]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d10f      	bne.n	8006e62 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d106      	bne.n	8006e56 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e005      	b.n	8006e62 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006e62:	68fb      	ldr	r3, [r7, #12]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e80:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ea2:	4a04      	ldr	r2, [pc, #16]	@ (8006eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	60d3      	str	r3, [r2, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	e000ed00 	.word	0xe000ed00

08006eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ebc:	4b04      	ldr	r3, [pc, #16]	@ (8006ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	0a1b      	lsrs	r3, r3, #8
 8006ec2:	f003 0307 	and.w	r3, r3, #7
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	e000ed00 	.word	0xe000ed00

08006ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	db0a      	blt.n	8006efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	490c      	ldr	r1, [pc, #48]	@ (8006f20 <__NVIC_SetPriority+0x4c>)
 8006eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef2:	0112      	lsls	r2, r2, #4
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006efc:	e00a      	b.n	8006f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	4908      	ldr	r1, [pc, #32]	@ (8006f24 <__NVIC_SetPriority+0x50>)
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	3b04      	subs	r3, #4
 8006f0c:	0112      	lsls	r2, r2, #4
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	440b      	add	r3, r1
 8006f12:	761a      	strb	r2, [r3, #24]
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	e000e100 	.word	0xe000e100
 8006f24:	e000ed00 	.word	0xe000ed00

08006f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b089      	sub	sp, #36	@ 0x24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f1c3 0307 	rsb	r3, r3, #7
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	bf28      	it	cs
 8006f46:	2304      	movcs	r3, #4
 8006f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	2b06      	cmp	r3, #6
 8006f50:	d902      	bls.n	8006f58 <NVIC_EncodePriority+0x30>
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	3b03      	subs	r3, #3
 8006f56:	e000      	b.n	8006f5a <NVIC_EncodePriority+0x32>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	43da      	mvns	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f70:	f04f 31ff 	mov.w	r1, #4294967295
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7a:	43d9      	mvns	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f80:	4313      	orrs	r3, r2
         );
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3724      	adds	r7, #36	@ 0x24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fa0:	d301      	bcc.n	8006fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e00f      	b.n	8006fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd0 <SysTick_Config+0x40>)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fae:	210f      	movs	r1, #15
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	f7ff ff8e 	bl	8006ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fb8:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <SysTick_Config+0x40>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fbe:	4b04      	ldr	r3, [pc, #16]	@ (8006fd0 <SysTick_Config+0x40>)
 8006fc0:	2207      	movs	r2, #7
 8006fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	e000e010 	.word	0xe000e010

08006fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff ff47 	bl	8006e70 <__NVIC_SetPriorityGrouping>
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b086      	sub	sp, #24
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ffc:	f7ff ff5c 	bl	8006eb8 <__NVIC_GetPriorityGrouping>
 8007000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	6978      	ldr	r0, [r7, #20]
 8007008:	f7ff ff8e 	bl	8006f28 <NVIC_EncodePriority>
 800700c:	4602      	mov	r2, r0
 800700e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff ff5d 	bl	8006ed4 <__NVIC_SetPriority>
}
 800701a:	bf00      	nop
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff ffb0 	bl	8006f90 <SysTick_Config>
 8007030:	4603      	mov	r3, r0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800703c:	b480      	push	{r7}
 800703e:	b089      	sub	sp, #36	@ 0x24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800704a:	2300      	movs	r3, #0
 800704c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	e16b      	b.n	8007330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007058:	2201      	movs	r2, #1
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4013      	ands	r3, r2
 800706a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	429a      	cmp	r2, r3
 8007072:	f040 815a 	bne.w	800732a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d005      	beq.n	800708e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800708a:	2b02      	cmp	r3, #2
 800708c:	d130      	bne.n	80070f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	2203      	movs	r2, #3
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	43db      	mvns	r3, r3
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	4013      	ands	r3, r2
 80070a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070c4:	2201      	movs	r2, #1
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	43db      	mvns	r3, r3
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4013      	ands	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	091b      	lsrs	r3, r3, #4
 80070da:	f003 0201 	and.w	r2, r3, #1
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f003 0303 	and.w	r3, r3, #3
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d017      	beq.n	800712c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	2203      	movs	r2, #3
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	43db      	mvns	r3, r3
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	4013      	ands	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	4313      	orrs	r3, r2
 8007124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d123      	bne.n	8007180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	08da      	lsrs	r2, r3, #3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3208      	adds	r2, #8
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	220f      	movs	r2, #15
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	43db      	mvns	r3, r3
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	4013      	ands	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	4313      	orrs	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	08da      	lsrs	r2, r3, #3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3208      	adds	r2, #8
 800717a:	69b9      	ldr	r1, [r7, #24]
 800717c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	2203      	movs	r2, #3
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	43db      	mvns	r3, r3
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	4013      	ands	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 0203 	and.w	r2, r3, #3
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80b4 	beq.w	800732a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	4b60      	ldr	r3, [pc, #384]	@ (8007348 <HAL_GPIO_Init+0x30c>)
 80071c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ca:	4a5f      	ldr	r2, [pc, #380]	@ (8007348 <HAL_GPIO_Init+0x30c>)
 80071cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80071d2:	4b5d      	ldr	r3, [pc, #372]	@ (8007348 <HAL_GPIO_Init+0x30c>)
 80071d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071de:	4a5b      	ldr	r2, [pc, #364]	@ (800734c <HAL_GPIO_Init+0x310>)
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	3302      	adds	r3, #2
 80071e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	220f      	movs	r2, #15
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	43db      	mvns	r3, r3
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	4013      	ands	r3, r2
 8007200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a52      	ldr	r2, [pc, #328]	@ (8007350 <HAL_GPIO_Init+0x314>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d02b      	beq.n	8007262 <HAL_GPIO_Init+0x226>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a51      	ldr	r2, [pc, #324]	@ (8007354 <HAL_GPIO_Init+0x318>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d025      	beq.n	800725e <HAL_GPIO_Init+0x222>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a50      	ldr	r2, [pc, #320]	@ (8007358 <HAL_GPIO_Init+0x31c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01f      	beq.n	800725a <HAL_GPIO_Init+0x21e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a4f      	ldr	r2, [pc, #316]	@ (800735c <HAL_GPIO_Init+0x320>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d019      	beq.n	8007256 <HAL_GPIO_Init+0x21a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a4e      	ldr	r2, [pc, #312]	@ (8007360 <HAL_GPIO_Init+0x324>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <HAL_GPIO_Init+0x216>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a4d      	ldr	r2, [pc, #308]	@ (8007364 <HAL_GPIO_Init+0x328>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00d      	beq.n	800724e <HAL_GPIO_Init+0x212>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a4c      	ldr	r2, [pc, #304]	@ (8007368 <HAL_GPIO_Init+0x32c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d007      	beq.n	800724a <HAL_GPIO_Init+0x20e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a4b      	ldr	r2, [pc, #300]	@ (800736c <HAL_GPIO_Init+0x330>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d101      	bne.n	8007246 <HAL_GPIO_Init+0x20a>
 8007242:	2307      	movs	r3, #7
 8007244:	e00e      	b.n	8007264 <HAL_GPIO_Init+0x228>
 8007246:	2308      	movs	r3, #8
 8007248:	e00c      	b.n	8007264 <HAL_GPIO_Init+0x228>
 800724a:	2306      	movs	r3, #6
 800724c:	e00a      	b.n	8007264 <HAL_GPIO_Init+0x228>
 800724e:	2305      	movs	r3, #5
 8007250:	e008      	b.n	8007264 <HAL_GPIO_Init+0x228>
 8007252:	2304      	movs	r3, #4
 8007254:	e006      	b.n	8007264 <HAL_GPIO_Init+0x228>
 8007256:	2303      	movs	r3, #3
 8007258:	e004      	b.n	8007264 <HAL_GPIO_Init+0x228>
 800725a:	2302      	movs	r3, #2
 800725c:	e002      	b.n	8007264 <HAL_GPIO_Init+0x228>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <HAL_GPIO_Init+0x228>
 8007262:	2300      	movs	r3, #0
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	f002 0203 	and.w	r2, r2, #3
 800726a:	0092      	lsls	r2, r2, #2
 800726c:	4093      	lsls	r3, r2
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	4313      	orrs	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007274:	4935      	ldr	r1, [pc, #212]	@ (800734c <HAL_GPIO_Init+0x310>)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	089b      	lsrs	r3, r3, #2
 800727a:	3302      	adds	r3, #2
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007282:	4b3b      	ldr	r3, [pc, #236]	@ (8007370 <HAL_GPIO_Init+0x334>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	43db      	mvns	r3, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4013      	ands	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072a6:	4a32      	ldr	r2, [pc, #200]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072ac:	4b30      	ldr	r3, [pc, #192]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	43db      	mvns	r3, r3
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	4013      	ands	r3, r2
 80072ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072d0:	4a27      	ldr	r2, [pc, #156]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072d6:	4b26      	ldr	r3, [pc, #152]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	43db      	mvns	r3, r3
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	4013      	ands	r3, r2
 80072e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007300:	4b1b      	ldr	r3, [pc, #108]	@ (8007370 <HAL_GPIO_Init+0x334>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	43db      	mvns	r3, r3
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	4013      	ands	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007324:	4a12      	ldr	r2, [pc, #72]	@ (8007370 <HAL_GPIO_Init+0x334>)
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	3301      	adds	r3, #1
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b0f      	cmp	r3, #15
 8007334:	f67f ae90 	bls.w	8007058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	3724      	adds	r7, #36	@ 0x24
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40023800 	.word	0x40023800
 800734c:	40013800 	.word	0x40013800
 8007350:	40020000 	.word	0x40020000
 8007354:	40020400 	.word	0x40020400
 8007358:	40020800 	.word	0x40020800
 800735c:	40020c00 	.word	0x40020c00
 8007360:	40021000 	.word	0x40021000
 8007364:	40021400 	.word	0x40021400
 8007368:	40021800 	.word	0x40021800
 800736c:	40021c00 	.word	0x40021c00
 8007370:	40013c00 	.word	0x40013c00

08007374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	887b      	ldrh	r3, [r7, #2]
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800738c:	2301      	movs	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
 8007390:	e001      	b.n	8007396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	807b      	strh	r3, [r7, #2]
 80073b0:	4613      	mov	r3, r2
 80073b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073b4:	787b      	ldrb	r3, [r7, #1]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073ba:	887a      	ldrh	r2, [r7, #2]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80073c0:	e003      	b.n	80073ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	041a      	lsls	r2, r3, #16
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	619a      	str	r2, [r3, #24]
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e267      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d075      	beq.n	80074e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073f6:	4b88      	ldr	r3, [pc, #544]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d00c      	beq.n	800741c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007402:	4b85      	ldr	r3, [pc, #532]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800740a:	2b08      	cmp	r3, #8
 800740c:	d112      	bne.n	8007434 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800740e:	4b82      	ldr	r3, [pc, #520]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800741a:	d10b      	bne.n	8007434 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800741c:	4b7e      	ldr	r3, [pc, #504]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d05b      	beq.n	80074e0 <HAL_RCC_OscConfig+0x108>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d157      	bne.n	80074e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e242      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743c:	d106      	bne.n	800744c <HAL_RCC_OscConfig+0x74>
 800743e:	4b76      	ldr	r3, [pc, #472]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a75      	ldr	r2, [pc, #468]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e01d      	b.n	8007488 <HAL_RCC_OscConfig+0xb0>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007454:	d10c      	bne.n	8007470 <HAL_RCC_OscConfig+0x98>
 8007456:	4b70      	ldr	r3, [pc, #448]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a6f      	ldr	r2, [pc, #444]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 800745c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	4b6d      	ldr	r3, [pc, #436]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a6c      	ldr	r2, [pc, #432]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	e00b      	b.n	8007488 <HAL_RCC_OscConfig+0xb0>
 8007470:	4b69      	ldr	r3, [pc, #420]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a68      	ldr	r2, [pc, #416]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	4b66      	ldr	r3, [pc, #408]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a65      	ldr	r2, [pc, #404]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d013      	beq.n	80074b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007490:	f7fe fe68 	bl	8006164 <HAL_GetTick>
 8007494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007498:	f7fe fe64 	bl	8006164 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b64      	cmp	r3, #100	@ 0x64
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e207      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0f0      	beq.n	8007498 <HAL_RCC_OscConfig+0xc0>
 80074b6:	e014      	b.n	80074e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b8:	f7fe fe54 	bl	8006164 <HAL_GetTick>
 80074bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074c0:	f7fe fe50 	bl	8006164 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b64      	cmp	r3, #100	@ 0x64
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e1f3      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074d2:	4b51      	ldr	r3, [pc, #324]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f0      	bne.n	80074c0 <HAL_RCC_OscConfig+0xe8>
 80074de:	e000      	b.n	80074e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d063      	beq.n	80075b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 030c 	and.w	r3, r3, #12
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00b      	beq.n	8007512 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074fa:	4b47      	ldr	r3, [pc, #284]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007502:	2b08      	cmp	r3, #8
 8007504:	d11c      	bne.n	8007540 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007506:	4b44      	ldr	r3, [pc, #272]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d116      	bne.n	8007540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007512:	4b41      	ldr	r3, [pc, #260]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_RCC_OscConfig+0x152>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d001      	beq.n	800752a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e1c7      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800752a:	4b3b      	ldr	r3, [pc, #236]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	4937      	ldr	r1, [pc, #220]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 800753a:	4313      	orrs	r3, r2
 800753c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800753e:	e03a      	b.n	80075b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d020      	beq.n	800758a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007548:	4b34      	ldr	r3, [pc, #208]	@ (800761c <HAL_RCC_OscConfig+0x244>)
 800754a:	2201      	movs	r2, #1
 800754c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754e:	f7fe fe09 	bl	8006164 <HAL_GetTick>
 8007552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007554:	e008      	b.n	8007568 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007556:	f7fe fe05 	bl	8006164 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e1a8      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007568:	4b2b      	ldr	r3, [pc, #172]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0f0      	beq.n	8007556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007574:	4b28      	ldr	r3, [pc, #160]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	4925      	ldr	r1, [pc, #148]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 8007584:	4313      	orrs	r3, r2
 8007586:	600b      	str	r3, [r1, #0]
 8007588:	e015      	b.n	80075b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800758a:	4b24      	ldr	r3, [pc, #144]	@ (800761c <HAL_RCC_OscConfig+0x244>)
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fe fde8 	bl	8006164 <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007598:	f7fe fde4 	bl	8006164 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e187      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f0      	bne.n	8007598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d036      	beq.n	8007630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d016      	beq.n	80075f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075ca:	4b15      	ldr	r3, [pc, #84]	@ (8007620 <HAL_RCC_OscConfig+0x248>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d0:	f7fe fdc8 	bl	8006164 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075d8:	f7fe fdc4 	bl	8006164 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e167      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007618 <HAL_RCC_OscConfig+0x240>)
 80075ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x200>
 80075f6:	e01b      	b.n	8007630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075f8:	4b09      	ldr	r3, [pc, #36]	@ (8007620 <HAL_RCC_OscConfig+0x248>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075fe:	f7fe fdb1 	bl	8006164 <HAL_GetTick>
 8007602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007604:	e00e      	b.n	8007624 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007606:	f7fe fdad 	bl	8006164 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d907      	bls.n	8007624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e150      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
 8007618:	40023800 	.word	0x40023800
 800761c:	42470000 	.word	0x42470000
 8007620:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007624:	4b88      	ldr	r3, [pc, #544]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1ea      	bne.n	8007606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8097 	beq.w	800776c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800763e:	2300      	movs	r3, #0
 8007640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007642:	4b81      	ldr	r3, [pc, #516]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10f      	bne.n	800766e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800764e:	2300      	movs	r3, #0
 8007650:	60bb      	str	r3, [r7, #8]
 8007652:	4b7d      	ldr	r3, [pc, #500]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007656:	4a7c      	ldr	r2, [pc, #496]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800765c:	6413      	str	r3, [r2, #64]	@ 0x40
 800765e:	4b7a      	ldr	r3, [pc, #488]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007666:	60bb      	str	r3, [r7, #8]
 8007668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800766e:	4b77      	ldr	r3, [pc, #476]	@ (800784c <HAL_RCC_OscConfig+0x474>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d118      	bne.n	80076ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800767a:	4b74      	ldr	r3, [pc, #464]	@ (800784c <HAL_RCC_OscConfig+0x474>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a73      	ldr	r2, [pc, #460]	@ (800784c <HAL_RCC_OscConfig+0x474>)
 8007680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007686:	f7fe fd6d 	bl	8006164 <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800768c:	e008      	b.n	80076a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800768e:	f7fe fd69 	bl	8006164 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e10c      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076a0:	4b6a      	ldr	r3, [pc, #424]	@ (800784c <HAL_RCC_OscConfig+0x474>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0f0      	beq.n	800768e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d106      	bne.n	80076c2 <HAL_RCC_OscConfig+0x2ea>
 80076b4:	4b64      	ldr	r3, [pc, #400]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b8:	4a63      	ldr	r2, [pc, #396]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	6713      	str	r3, [r2, #112]	@ 0x70
 80076c0:	e01c      	b.n	80076fc <HAL_RCC_OscConfig+0x324>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2b05      	cmp	r3, #5
 80076c8:	d10c      	bne.n	80076e4 <HAL_RCC_OscConfig+0x30c>
 80076ca:	4b5f      	ldr	r3, [pc, #380]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ce:	4a5e      	ldr	r2, [pc, #376]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076d0:	f043 0304 	orr.w	r3, r3, #4
 80076d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80076d6:	4b5c      	ldr	r3, [pc, #368]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076da:	4a5b      	ldr	r2, [pc, #364]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076dc:	f043 0301 	orr.w	r3, r3, #1
 80076e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80076e2:	e00b      	b.n	80076fc <HAL_RCC_OscConfig+0x324>
 80076e4:	4b58      	ldr	r3, [pc, #352]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e8:	4a57      	ldr	r2, [pc, #348]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80076f0:	4b55      	ldr	r3, [pc, #340]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f4:	4a54      	ldr	r2, [pc, #336]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80076f6:	f023 0304 	bic.w	r3, r3, #4
 80076fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d015      	beq.n	8007730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007704:	f7fe fd2e 	bl	8006164 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770a:	e00a      	b.n	8007722 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800770c:	f7fe fd2a 	bl	8006164 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771a:	4293      	cmp	r3, r2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e0cb      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007722:	4b49      	ldr	r3, [pc, #292]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0ee      	beq.n	800770c <HAL_RCC_OscConfig+0x334>
 800772e:	e014      	b.n	800775a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007730:	f7fe fd18 	bl	8006164 <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007736:	e00a      	b.n	800774e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007738:	f7fe fd14 	bl	8006164 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007746:	4293      	cmp	r3, r2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e0b5      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800774e:	4b3e      	ldr	r3, [pc, #248]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1ee      	bne.n	8007738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d105      	bne.n	800776c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007760:	4b39      	ldr	r3, [pc, #228]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007764:	4a38      	ldr	r2, [pc, #224]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800776a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 80a1 	beq.w	80078b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007776:	4b34      	ldr	r3, [pc, #208]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 030c 	and.w	r3, r3, #12
 800777e:	2b08      	cmp	r3, #8
 8007780:	d05c      	beq.n	800783c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d141      	bne.n	800780e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800778a:	4b31      	ldr	r3, [pc, #196]	@ (8007850 <HAL_RCC_OscConfig+0x478>)
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007790:	f7fe fce8 	bl	8006164 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007796:	e008      	b.n	80077aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007798:	f7fe fce4 	bl	8006164 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e087      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077aa:	4b27      	ldr	r3, [pc, #156]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1f0      	bne.n	8007798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69da      	ldr	r2, [r3, #28]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	019b      	lsls	r3, r3, #6
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077cc:	085b      	lsrs	r3, r3, #1
 80077ce:	3b01      	subs	r3, #1
 80077d0:	041b      	lsls	r3, r3, #16
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	061b      	lsls	r3, r3, #24
 80077da:	491b      	ldr	r1, [pc, #108]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007850 <HAL_RCC_OscConfig+0x478>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e6:	f7fe fcbd 	bl	8006164 <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077ee:	f7fe fcb9 	bl	8006164 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e05c      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007800:	4b11      	ldr	r3, [pc, #68]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCC_OscConfig+0x416>
 800780c:	e054      	b.n	80078b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780e:	4b10      	ldr	r3, [pc, #64]	@ (8007850 <HAL_RCC_OscConfig+0x478>)
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007814:	f7fe fca6 	bl	8006164 <HAL_GetTick>
 8007818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800781c:	f7fe fca2 	bl	8006164 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e045      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782e:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <HAL_RCC_OscConfig+0x470>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f0      	bne.n	800781c <HAL_RCC_OscConfig+0x444>
 800783a:	e03d      	b.n	80078b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d107      	bne.n	8007854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e038      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
 8007848:	40023800 	.word	0x40023800
 800784c:	40007000 	.word	0x40007000
 8007850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007854:	4b1b      	ldr	r3, [pc, #108]	@ (80078c4 <HAL_RCC_OscConfig+0x4ec>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d028      	beq.n	80078b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800786c:	429a      	cmp	r2, r3
 800786e:	d121      	bne.n	80078b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800787a:	429a      	cmp	r2, r3
 800787c:	d11a      	bne.n	80078b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007884:	4013      	ands	r3, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800788a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800788c:	4293      	cmp	r3, r2
 800788e:	d111      	bne.n	80078b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	3b01      	subs	r3, #1
 800789e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d107      	bne.n	80078b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d001      	beq.n	80078b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	40023800 	.word	0x40023800

080078c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e0cc      	b.n	8007a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078dc:	4b68      	ldr	r3, [pc, #416]	@ (8007a80 <HAL_RCC_ClockConfig+0x1b8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0307 	and.w	r3, r3, #7
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d90c      	bls.n	8007904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ea:	4b65      	ldr	r3, [pc, #404]	@ (8007a80 <HAL_RCC_ClockConfig+0x1b8>)
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078f2:	4b63      	ldr	r3, [pc, #396]	@ (8007a80 <HAL_RCC_ClockConfig+0x1b8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d001      	beq.n	8007904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e0b8      	b.n	8007a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d020      	beq.n	8007952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800791c:	4b59      	ldr	r3, [pc, #356]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	4a58      	ldr	r2, [pc, #352]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007922:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007926:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0308 	and.w	r3, r3, #8
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007934:	4b53      	ldr	r3, [pc, #332]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	4a52      	ldr	r2, [pc, #328]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 800793a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800793e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007940:	4b50      	ldr	r3, [pc, #320]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	494d      	ldr	r1, [pc, #308]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 800794e:	4313      	orrs	r3, r2
 8007950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d044      	beq.n	80079e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d107      	bne.n	8007976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007966:	4b47      	ldr	r3, [pc, #284]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d119      	bne.n	80079a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e07f      	b.n	8007a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2b02      	cmp	r3, #2
 800797c:	d003      	beq.n	8007986 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007982:	2b03      	cmp	r3, #3
 8007984:	d107      	bne.n	8007996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007986:	4b3f      	ldr	r3, [pc, #252]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d109      	bne.n	80079a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e06f      	b.n	8007a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007996:	4b3b      	ldr	r3, [pc, #236]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e067      	b.n	8007a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079a6:	4b37      	ldr	r3, [pc, #220]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f023 0203 	bic.w	r2, r3, #3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	4934      	ldr	r1, [pc, #208]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079b8:	f7fe fbd4 	bl	8006164 <HAL_GetTick>
 80079bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079be:	e00a      	b.n	80079d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079c0:	f7fe fbd0 	bl	8006164 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e04f      	b.n	8007a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 020c 	and.w	r2, r3, #12
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d1eb      	bne.n	80079c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079e8:	4b25      	ldr	r3, [pc, #148]	@ (8007a80 <HAL_RCC_ClockConfig+0x1b8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d20c      	bcs.n	8007a10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f6:	4b22      	ldr	r3, [pc, #136]	@ (8007a80 <HAL_RCC_ClockConfig+0x1b8>)
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fe:	4b20      	ldr	r3, [pc, #128]	@ (8007a80 <HAL_RCC_ClockConfig+0x1b8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d001      	beq.n	8007a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e032      	b.n	8007a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a1c:	4b19      	ldr	r3, [pc, #100]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	4916      	ldr	r1, [pc, #88]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0308 	and.w	r3, r3, #8
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d009      	beq.n	8007a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a3a:	4b12      	ldr	r3, [pc, #72]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	490e      	ldr	r1, [pc, #56]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a4e:	f000 f821 	bl	8007a94 <HAL_RCC_GetSysClockFreq>
 8007a52:	4602      	mov	r2, r0
 8007a54:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	091b      	lsrs	r3, r3, #4
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	490a      	ldr	r1, [pc, #40]	@ (8007a88 <HAL_RCC_ClockConfig+0x1c0>)
 8007a60:	5ccb      	ldrb	r3, [r1, r3]
 8007a62:	fa22 f303 	lsr.w	r3, r2, r3
 8007a66:	4a09      	ldr	r2, [pc, #36]	@ (8007a8c <HAL_RCC_ClockConfig+0x1c4>)
 8007a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a6a:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <HAL_RCC_ClockConfig+0x1c8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fb34 	bl	80060dc <HAL_InitTick>

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	40023c00 	.word	0x40023c00
 8007a84:	40023800 	.word	0x40023800
 8007a88:	08010a28 	.word	0x08010a28
 8007a8c:	20000018 	.word	0x20000018
 8007a90:	2000001c 	.word	0x2000001c

08007a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a98:	b090      	sub	sp, #64	@ 0x40
 8007a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aac:	4b59      	ldr	r3, [pc, #356]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 030c 	and.w	r3, r3, #12
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d00d      	beq.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	f200 80a1 	bhi.w	8007c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d003      	beq.n	8007ace <HAL_RCC_GetSysClockFreq+0x3a>
 8007ac6:	e09b      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ac8:	4b53      	ldr	r3, [pc, #332]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8007aca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007acc:	e09b      	b.n	8007c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ace:	4b53      	ldr	r3, [pc, #332]	@ (8007c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8007ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ad2:	e098      	b.n	8007c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ade:	4b4d      	ldr	r3, [pc, #308]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d028      	beq.n	8007b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aea:	4b4a      	ldr	r3, [pc, #296]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	099b      	lsrs	r3, r3, #6
 8007af0:	2200      	movs	r2, #0
 8007af2:	623b      	str	r3, [r7, #32]
 8007af4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007afc:	2100      	movs	r1, #0
 8007afe:	4b47      	ldr	r3, [pc, #284]	@ (8007c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8007b00:	fb03 f201 	mul.w	r2, r3, r1
 8007b04:	2300      	movs	r3, #0
 8007b06:	fb00 f303 	mul.w	r3, r0, r3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	4a43      	ldr	r2, [pc, #268]	@ (8007c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8007b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8007b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b14:	460a      	mov	r2, r1
 8007b16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b1a:	4413      	add	r3, r2
 8007b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b20:	2200      	movs	r2, #0
 8007b22:	61bb      	str	r3, [r7, #24]
 8007b24:	61fa      	str	r2, [r7, #28]
 8007b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007b2e:	f7f8 ffe9 	bl	8000b04 <__aeabi_uldivmod>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4613      	mov	r3, r2
 8007b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b3a:	e053      	b.n	8007be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b3c:	4b35      	ldr	r3, [pc, #212]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	099b      	lsrs	r3, r3, #6
 8007b42:	2200      	movs	r2, #0
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	617a      	str	r2, [r7, #20]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007b4e:	f04f 0b00 	mov.w	fp, #0
 8007b52:	4652      	mov	r2, sl
 8007b54:	465b      	mov	r3, fp
 8007b56:	f04f 0000 	mov.w	r0, #0
 8007b5a:	f04f 0100 	mov.w	r1, #0
 8007b5e:	0159      	lsls	r1, r3, #5
 8007b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b64:	0150      	lsls	r0, r2, #5
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8007b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007b86:	ebb2 0408 	subs.w	r4, r2, r8
 8007b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	00eb      	lsls	r3, r5, #3
 8007b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b9c:	00e2      	lsls	r2, r4, #3
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	461d      	mov	r5, r3
 8007ba2:	eb14 030a 	adds.w	r3, r4, sl
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	eb45 030b 	adc.w	r3, r5, fp
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	f04f 0200 	mov.w	r2, #0
 8007bb2:	f04f 0300 	mov.w	r3, #0
 8007bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bba:	4629      	mov	r1, r5
 8007bbc:	028b      	lsls	r3, r1, #10
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	028a      	lsls	r2, r1, #10
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bce:	2200      	movs	r2, #0
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	60fa      	str	r2, [r7, #12]
 8007bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bd8:	f7f8 ff94 	bl	8000b04 <__aeabi_uldivmod>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4613      	mov	r3, r2
 8007be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007be4:	4b0b      	ldr	r3, [pc, #44]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	0c1b      	lsrs	r3, r3, #16
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	3301      	adds	r3, #1
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007bfe:	e002      	b.n	8007c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c00:	4b05      	ldr	r3, [pc, #20]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3740      	adds	r7, #64	@ 0x40
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c12:	bf00      	nop
 8007c14:	40023800 	.word	0x40023800
 8007c18:	00f42400 	.word	0x00f42400
 8007c1c:	017d7840 	.word	0x017d7840

08007c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e07b      	b.n	8007d2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d108      	bne.n	8007c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c42:	d009      	beq.n	8007c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	61da      	str	r2, [r3, #28]
 8007c4a:	e005      	b.n	8007c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d106      	bne.n	8007c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fe f832 	bl	8005cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007caa:	431a      	orrs	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cdc:	ea42 0103 	orr.w	r1, r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	f003 0104 	and.w	r1, r3, #4
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfe:	f003 0210 	and.w	r2, r3, #16
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b088      	sub	sp, #32
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d42:	f7fe fa0f 	bl	8006164 <HAL_GetTick>
 8007d46:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007d48:	88fb      	ldrh	r3, [r7, #6]
 8007d4a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d001      	beq.n	8007d5c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e12a      	b.n	8007fb2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <HAL_SPI_Transmit+0x36>
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e122      	b.n	8007fb2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_SPI_Transmit+0x48>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e11b      	b.n	8007fb2 <HAL_SPI_Transmit+0x280>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2203      	movs	r2, #3
 8007d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	88fa      	ldrh	r2, [r7, #6]
 8007d9a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	88fa      	ldrh	r2, [r7, #6]
 8007da0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dc8:	d10f      	bne.n	8007dea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df4:	2b40      	cmp	r3, #64	@ 0x40
 8007df6:	d007      	beq.n	8007e08 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e10:	d152      	bne.n	8007eb8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_SPI_Transmit+0xee>
 8007e1a:	8b7b      	ldrh	r3, [r7, #26]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d145      	bne.n	8007eac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e24:	881a      	ldrh	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e30:	1c9a      	adds	r2, r3, #2
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e44:	e032      	b.n	8007eac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d112      	bne.n	8007e7a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e58:	881a      	ldrh	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e64:	1c9a      	adds	r2, r3, #2
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e78:	e018      	b.n	8007eac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e7a:	f7fe f973 	bl	8006164 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d803      	bhi.n	8007e92 <HAL_SPI_Transmit+0x160>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e90:	d102      	bne.n	8007e98 <HAL_SPI_Transmit+0x166>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d109      	bne.n	8007eac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e082      	b.n	8007fb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1c7      	bne.n	8007e46 <HAL_SPI_Transmit+0x114>
 8007eb6:	e053      	b.n	8007f60 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_SPI_Transmit+0x194>
 8007ec0:	8b7b      	ldrh	r3, [r7, #26]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d147      	bne.n	8007f56 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	330c      	adds	r3, #12
 8007ed0:	7812      	ldrb	r2, [r2, #0]
 8007ed2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007eec:	e033      	b.n	8007f56 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d113      	bne.n	8007f24 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	330c      	adds	r3, #12
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007f22:	e018      	b.n	8007f56 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f24:	f7fe f91e 	bl	8006164 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d803      	bhi.n	8007f3c <HAL_SPI_Transmit+0x20a>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3a:	d102      	bne.n	8007f42 <HAL_SPI_Transmit+0x210>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e02d      	b.n	8007fb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1c6      	bne.n	8007eee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 fa59 	bl	800841c <SPI_EndRxTxTransaction>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2220      	movs	r2, #32
 8007f74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10a      	bne.n	8007f94 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e000      	b.n	8007fb2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
  }
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3720      	adds	r7, #32
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b08a      	sub	sp, #40	@ 0x28
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fcc:	f7fe f8ca 	bl	8006164 <HAL_GetTick>
 8007fd0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fd8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007fe0:	887b      	ldrh	r3, [r7, #2]
 8007fe2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fe4:	7ffb      	ldrb	r3, [r7, #31]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d00c      	beq.n	8008004 <HAL_SPI_TransmitReceive+0x4a>
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ff0:	d106      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d102      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x46>
 8007ffa:	7ffb      	ldrb	r3, [r7, #31]
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d001      	beq.n	8008004 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008000:	2302      	movs	r3, #2
 8008002:	e17f      	b.n	8008304 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <HAL_SPI_TransmitReceive+0x5c>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_SPI_TransmitReceive+0x5c>
 8008010:	887b      	ldrh	r3, [r7, #2]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e174      	b.n	8008304 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_SPI_TransmitReceive+0x6e>
 8008024:	2302      	movs	r3, #2
 8008026:	e16d      	b.n	8008304 <HAL_SPI_TransmitReceive+0x34a>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b04      	cmp	r3, #4
 800803a:	d003      	beq.n	8008044 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2205      	movs	r2, #5
 8008040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	887a      	ldrh	r2, [r7, #2]
 8008054:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	887a      	ldrh	r2, [r7, #2]
 800805a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	887a      	ldrh	r2, [r7, #2]
 8008066:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	887a      	ldrh	r2, [r7, #2]
 800806c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008084:	2b40      	cmp	r3, #64	@ 0x40
 8008086:	d007      	beq.n	8008098 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008096:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a0:	d17e      	bne.n	80081a0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <HAL_SPI_TransmitReceive+0xf6>
 80080aa:	8afb      	ldrh	r3, [r7, #22]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d16c      	bne.n	800818a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b4:	881a      	ldrh	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	1c9a      	adds	r2, r3, #2
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080d4:	e059      	b.n	800818a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d11b      	bne.n	800811c <HAL_SPI_TransmitReceive+0x162>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d016      	beq.n	800811c <HAL_SPI_TransmitReceive+0x162>
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d113      	bne.n	800811c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f8:	881a      	ldrh	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008104:	1c9a      	adds	r2, r3, #2
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800810e:	b29b      	uxth	r3, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	b29a      	uxth	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b01      	cmp	r3, #1
 8008128:	d119      	bne.n	800815e <HAL_SPI_TransmitReceive+0x1a4>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d014      	beq.n	800815e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	b292      	uxth	r2, r2
 8008140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008146:	1c9a      	adds	r2, r3, #2
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800815a:	2301      	movs	r3, #1
 800815c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800815e:	f7fe f801 	bl	8006164 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800816a:	429a      	cmp	r2, r3
 800816c:	d80d      	bhi.n	800818a <HAL_SPI_TransmitReceive+0x1d0>
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d009      	beq.n	800818a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e0bc      	b.n	8008304 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800818e:	b29b      	uxth	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1a0      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x11c>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d19b      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x11c>
 800819e:	e082      	b.n	80082a6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <HAL_SPI_TransmitReceive+0x1f4>
 80081a8:	8afb      	ldrh	r3, [r7, #22]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d171      	bne.n	8008292 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	330c      	adds	r3, #12
 80081b8:	7812      	ldrb	r2, [r2, #0]
 80081ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081d4:	e05d      	b.n	8008292 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d11c      	bne.n	800821e <HAL_SPI_TransmitReceive+0x264>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d017      	beq.n	800821e <HAL_SPI_TransmitReceive+0x264>
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d114      	bne.n	800821e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	7812      	ldrb	r2, [r2, #0]
 8008200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b01      	cmp	r3, #1
 800822a:	d119      	bne.n	8008260 <HAL_SPI_TransmitReceive+0x2a6>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d014      	beq.n	8008260 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800825c:	2301      	movs	r3, #1
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008260:	f7fd ff80 	bl	8006164 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826c:	429a      	cmp	r2, r3
 800826e:	d803      	bhi.n	8008278 <HAL_SPI_TransmitReceive+0x2be>
 8008270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d102      	bne.n	800827e <HAL_SPI_TransmitReceive+0x2c4>
 8008278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827a:	2b00      	cmp	r3, #0
 800827c:	d109      	bne.n	8008292 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e038      	b.n	8008304 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d19c      	bne.n	80081d6 <HAL_SPI_TransmitReceive+0x21c>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d197      	bne.n	80081d6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082a6:	6a3a      	ldr	r2, [r7, #32]
 80082a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 f8b6 	bl	800841c <SPI_EndRxTxTransaction>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d008      	beq.n	80082c8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2220      	movs	r2, #32
 80082ba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e01d      	b.n	8008304 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082d0:	2300      	movs	r3, #0
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	613b      	str	r3, [r7, #16]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008302:	2300      	movs	r3, #0
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3728      	adds	r7, #40	@ 0x28
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	4613      	mov	r3, r2
 800831a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800831c:	f7fd ff22 	bl	8006164 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	1a9b      	subs	r3, r3, r2
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4413      	add	r3, r2
 800832a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800832c:	f7fd ff1a 	bl	8006164 <HAL_GetTick>
 8008330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008332:	4b39      	ldr	r3, [pc, #228]	@ (8008418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	015b      	lsls	r3, r3, #5
 8008338:	0d1b      	lsrs	r3, r3, #20
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008342:	e055      	b.n	80083f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d051      	beq.n	80083f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800834c:	f7fd ff0a 	bl	8006164 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	429a      	cmp	r2, r3
 800835a:	d902      	bls.n	8008362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d13d      	bne.n	80083de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800837a:	d111      	bne.n	80083a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008384:	d004      	beq.n	8008390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800838e:	d107      	bne.n	80083a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800839e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a8:	d10f      	bne.n	80083ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e018      	b.n	8008410 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	61fb      	str	r3, [r7, #28]
 80083e8:	e002      	b.n	80083f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4013      	ands	r3, r2
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	bf0c      	ite	eq
 8008400:	2301      	moveq	r3, #1
 8008402:	2300      	movne	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	429a      	cmp	r2, r3
 800840c:	d19a      	bne.n	8008344 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3720      	adds	r7, #32
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20000018 	.word	0x20000018

0800841c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2201      	movs	r2, #1
 8008430:	2102      	movs	r1, #2
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff ff6a 	bl	800830c <SPI_WaitFlagStateUntilTimeout>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d007      	beq.n	800844e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008442:	f043 0220 	orr.w	r2, r3, #32
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e032      	b.n	80084b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800844e:	4b1b      	ldr	r3, [pc, #108]	@ (80084bc <SPI_EndRxTxTransaction+0xa0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a1b      	ldr	r2, [pc, #108]	@ (80084c0 <SPI_EndRxTxTransaction+0xa4>)
 8008454:	fba2 2303 	umull	r2, r3, r2, r3
 8008458:	0d5b      	lsrs	r3, r3, #21
 800845a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800846c:	d112      	bne.n	8008494 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2200      	movs	r2, #0
 8008476:	2180      	movs	r1, #128	@ 0x80
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff ff47 	bl	800830c <SPI_WaitFlagStateUntilTimeout>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d016      	beq.n	80084b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008488:	f043 0220 	orr.w	r2, r3, #32
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e00f      	b.n	80084b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	3b01      	subs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084aa:	2b80      	cmp	r3, #128	@ 0x80
 80084ac:	d0f2      	beq.n	8008494 <SPI_EndRxTxTransaction+0x78>
 80084ae:	e000      	b.n	80084b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80084b0:	bf00      	nop
  }

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	20000018 	.word	0x20000018
 80084c0:	165e9f81 	.word	0x165e9f81

080084c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e041      	b.n	800855a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d106      	bne.n	80084f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7fd fc3e 	bl	8005d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3304      	adds	r3, #4
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f000 f9da 	bl	80088bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e041      	b.n	80085f8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7fd fc11 	bl	8005db0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2202      	movs	r2, #2
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f000 f98b 	bl	80088bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_TIM_IC_ConfigChannel+0x1e>
 800861a:	2302      	movs	r3, #2
 800861c:	e088      	b.n	8008730 <HAL_TIM_IC_ConfigChannel+0x130>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d11b      	bne.n	8008664 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800863c:	f000 fb94 	bl	8008d68 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 020c 	bic.w	r2, r2, #12
 800864e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6999      	ldr	r1, [r3, #24]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	619a      	str	r2, [r3, #24]
 8008662:	e060      	b.n	8008726 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b04      	cmp	r3, #4
 8008668:	d11c      	bne.n	80086a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800867a:	f000 fbe9 	bl	8008e50 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	699a      	ldr	r2, [r3, #24]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800868c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6999      	ldr	r1, [r3, #24]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	021a      	lsls	r2, r3, #8
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	619a      	str	r2, [r3, #24]
 80086a2:	e040      	b.n	8008726 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d11b      	bne.n	80086e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80086ba:	f000 fc06 	bl	8008eca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69da      	ldr	r2, [r3, #28]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 020c 	bic.w	r2, r2, #12
 80086cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69d9      	ldr	r1, [r3, #28]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	61da      	str	r2, [r3, #28]
 80086e0:	e021      	b.n	8008726 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b0c      	cmp	r3, #12
 80086e6:	d11c      	bne.n	8008722 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80086f8:	f000 fc23 	bl	8008f42 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69da      	ldr	r2, [r3, #28]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800870a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	69d9      	ldr	r1, [r3, #28]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	021a      	lsls	r2, r3, #8
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	61da      	str	r2, [r3, #28]
 8008720:	e001      	b.n	8008726 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800874e:	2b01      	cmp	r3, #1
 8008750:	d101      	bne.n	8008756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008752:	2302      	movs	r3, #2
 8008754:	e0ae      	b.n	80088b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b0c      	cmp	r3, #12
 8008762:	f200 809f 	bhi.w	80088a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008766:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	080087a1 	.word	0x080087a1
 8008770:	080088a5 	.word	0x080088a5
 8008774:	080088a5 	.word	0x080088a5
 8008778:	080088a5 	.word	0x080088a5
 800877c:	080087e1 	.word	0x080087e1
 8008780:	080088a5 	.word	0x080088a5
 8008784:	080088a5 	.word	0x080088a5
 8008788:	080088a5 	.word	0x080088a5
 800878c:	08008823 	.word	0x08008823
 8008790:	080088a5 	.word	0x080088a5
 8008794:	080088a5 	.word	0x080088a5
 8008798:	080088a5 	.word	0x080088a5
 800879c:	08008863 	.word	0x08008863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 f92e 	bl	8008a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0208 	orr.w	r2, r2, #8
 80087ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0204 	bic.w	r2, r2, #4
 80087ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6999      	ldr	r1, [r3, #24]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	619a      	str	r2, [r3, #24]
      break;
 80087de:	e064      	b.n	80088aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f97e 	bl	8008ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800880a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6999      	ldr	r1, [r3, #24]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	021a      	lsls	r2, r3, #8
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	619a      	str	r2, [r3, #24]
      break;
 8008820:	e043      	b.n	80088aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	4618      	mov	r0, r3
 800882a:	f000 f9d3 	bl	8008bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69da      	ldr	r2, [r3, #28]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0208 	orr.w	r2, r2, #8
 800883c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69da      	ldr	r2, [r3, #28]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0204 	bic.w	r2, r2, #4
 800884c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69d9      	ldr	r1, [r3, #28]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	61da      	str	r2, [r3, #28]
      break;
 8008860:	e023      	b.n	80088aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 fa27 	bl	8008cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800887c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800888c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69d9      	ldr	r1, [r3, #28]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	021a      	lsls	r2, r3, #8
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	61da      	str	r2, [r3, #28]
      break;
 80088a2:	e002      	b.n	80088aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	75fb      	strb	r3, [r7, #23]
      break;
 80088a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a43      	ldr	r2, [pc, #268]	@ (80089dc <TIM_Base_SetConfig+0x120>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d013      	beq.n	80088fc <TIM_Base_SetConfig+0x40>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088da:	d00f      	beq.n	80088fc <TIM_Base_SetConfig+0x40>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a40      	ldr	r2, [pc, #256]	@ (80089e0 <TIM_Base_SetConfig+0x124>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00b      	beq.n	80088fc <TIM_Base_SetConfig+0x40>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a3f      	ldr	r2, [pc, #252]	@ (80089e4 <TIM_Base_SetConfig+0x128>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d007      	beq.n	80088fc <TIM_Base_SetConfig+0x40>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a3e      	ldr	r2, [pc, #248]	@ (80089e8 <TIM_Base_SetConfig+0x12c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d003      	beq.n	80088fc <TIM_Base_SetConfig+0x40>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a3d      	ldr	r2, [pc, #244]	@ (80089ec <TIM_Base_SetConfig+0x130>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d108      	bne.n	800890e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a32      	ldr	r2, [pc, #200]	@ (80089dc <TIM_Base_SetConfig+0x120>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d02b      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800891c:	d027      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a2f      	ldr	r2, [pc, #188]	@ (80089e0 <TIM_Base_SetConfig+0x124>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d023      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a2e      	ldr	r2, [pc, #184]	@ (80089e4 <TIM_Base_SetConfig+0x128>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d01f      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a2d      	ldr	r2, [pc, #180]	@ (80089e8 <TIM_Base_SetConfig+0x12c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d01b      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a2c      	ldr	r2, [pc, #176]	@ (80089ec <TIM_Base_SetConfig+0x130>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d017      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a2b      	ldr	r2, [pc, #172]	@ (80089f0 <TIM_Base_SetConfig+0x134>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d013      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2a      	ldr	r2, [pc, #168]	@ (80089f4 <TIM_Base_SetConfig+0x138>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00f      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a29      	ldr	r2, [pc, #164]	@ (80089f8 <TIM_Base_SetConfig+0x13c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d00b      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a28      	ldr	r2, [pc, #160]	@ (80089fc <TIM_Base_SetConfig+0x140>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d007      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a27      	ldr	r2, [pc, #156]	@ (8008a00 <TIM_Base_SetConfig+0x144>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d003      	beq.n	800896e <TIM_Base_SetConfig+0xb2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a26      	ldr	r2, [pc, #152]	@ (8008a04 <TIM_Base_SetConfig+0x148>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d108      	bne.n	8008980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a0e      	ldr	r2, [pc, #56]	@ (80089dc <TIM_Base_SetConfig+0x120>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d003      	beq.n	80089ae <TIM_Base_SetConfig+0xf2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a10      	ldr	r2, [pc, #64]	@ (80089ec <TIM_Base_SetConfig+0x130>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d103      	bne.n	80089b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	691a      	ldr	r2, [r3, #16]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f043 0204 	orr.w	r2, r3, #4
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]
}
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40000400 	.word	0x40000400
 80089e4:	40000800 	.word	0x40000800
 80089e8:	40000c00 	.word	0x40000c00
 80089ec:	40010400 	.word	0x40010400
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40014400 	.word	0x40014400
 80089f8:	40014800 	.word	0x40014800
 80089fc:	40001800 	.word	0x40001800
 8008a00:	40001c00 	.word	0x40001c00
 8008a04:	40002000 	.word	0x40002000

08008a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	f023 0201 	bic.w	r2, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f023 0302 	bic.w	r3, r3, #2
 8008a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a20      	ldr	r2, [pc, #128]	@ (8008ae0 <TIM_OC1_SetConfig+0xd8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d003      	beq.n	8008a6c <TIM_OC1_SetConfig+0x64>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a1f      	ldr	r2, [pc, #124]	@ (8008ae4 <TIM_OC1_SetConfig+0xdc>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d10c      	bne.n	8008a86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f023 0308 	bic.w	r3, r3, #8
 8008a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f023 0304 	bic.w	r3, r3, #4
 8008a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a15      	ldr	r2, [pc, #84]	@ (8008ae0 <TIM_OC1_SetConfig+0xd8>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d003      	beq.n	8008a96 <TIM_OC1_SetConfig+0x8e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a14      	ldr	r2, [pc, #80]	@ (8008ae4 <TIM_OC1_SetConfig+0xdc>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d111      	bne.n	8008aba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	621a      	str	r2, [r3, #32]
}
 8008ad4:	bf00      	nop
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	40010000 	.word	0x40010000
 8008ae4:	40010400 	.word	0x40010400

08008ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f023 0210 	bic.w	r2, r3, #16
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f023 0320 	bic.w	r3, r3, #32
 8008b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a22      	ldr	r2, [pc, #136]	@ (8008bcc <TIM_OC2_SetConfig+0xe4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d003      	beq.n	8008b50 <TIM_OC2_SetConfig+0x68>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a21      	ldr	r2, [pc, #132]	@ (8008bd0 <TIM_OC2_SetConfig+0xe8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d10d      	bne.n	8008b6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a17      	ldr	r2, [pc, #92]	@ (8008bcc <TIM_OC2_SetConfig+0xe4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d003      	beq.n	8008b7c <TIM_OC2_SetConfig+0x94>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a16      	ldr	r2, [pc, #88]	@ (8008bd0 <TIM_OC2_SetConfig+0xe8>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d113      	bne.n	8008ba4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	621a      	str	r2, [r3, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40010000 	.word	0x40010000
 8008bd0:	40010400 	.word	0x40010400

08008bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0303 	bic.w	r3, r3, #3
 8008c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a21      	ldr	r2, [pc, #132]	@ (8008cb4 <TIM_OC3_SetConfig+0xe0>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d003      	beq.n	8008c3a <TIM_OC3_SetConfig+0x66>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a20      	ldr	r2, [pc, #128]	@ (8008cb8 <TIM_OC3_SetConfig+0xe4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d10d      	bne.n	8008c56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a16      	ldr	r2, [pc, #88]	@ (8008cb4 <TIM_OC3_SetConfig+0xe0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_OC3_SetConfig+0x92>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a15      	ldr	r2, [pc, #84]	@ (8008cb8 <TIM_OC3_SetConfig+0xe4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d113      	bne.n	8008c8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	621a      	str	r2, [r3, #32]
}
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	40010000 	.word	0x40010000
 8008cb8:	40010400 	.word	0x40010400

08008cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	031b      	lsls	r3, r3, #12
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a12      	ldr	r2, [pc, #72]	@ (8008d60 <TIM_OC4_SetConfig+0xa4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_OC4_SetConfig+0x68>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a11      	ldr	r2, [pc, #68]	@ (8008d64 <TIM_OC4_SetConfig+0xa8>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d109      	bne.n	8008d38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	019b      	lsls	r3, r3, #6
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	621a      	str	r2, [r3, #32]
}
 8008d52:	bf00      	nop
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	40010000 	.word	0x40010000
 8008d64:	40010400 	.word	0x40010400

08008d68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	f023 0201 	bic.w	r2, r3, #1
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4a28      	ldr	r2, [pc, #160]	@ (8008e34 <TIM_TI1_SetConfig+0xcc>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d01b      	beq.n	8008dce <TIM_TI1_SetConfig+0x66>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d9c:	d017      	beq.n	8008dce <TIM_TI1_SetConfig+0x66>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4a25      	ldr	r2, [pc, #148]	@ (8008e38 <TIM_TI1_SetConfig+0xd0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d013      	beq.n	8008dce <TIM_TI1_SetConfig+0x66>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4a24      	ldr	r2, [pc, #144]	@ (8008e3c <TIM_TI1_SetConfig+0xd4>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00f      	beq.n	8008dce <TIM_TI1_SetConfig+0x66>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4a23      	ldr	r2, [pc, #140]	@ (8008e40 <TIM_TI1_SetConfig+0xd8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00b      	beq.n	8008dce <TIM_TI1_SetConfig+0x66>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4a22      	ldr	r2, [pc, #136]	@ (8008e44 <TIM_TI1_SetConfig+0xdc>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d007      	beq.n	8008dce <TIM_TI1_SetConfig+0x66>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4a21      	ldr	r2, [pc, #132]	@ (8008e48 <TIM_TI1_SetConfig+0xe0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d003      	beq.n	8008dce <TIM_TI1_SetConfig+0x66>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a20      	ldr	r2, [pc, #128]	@ (8008e4c <TIM_TI1_SetConfig+0xe4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d101      	bne.n	8008dd2 <TIM_TI1_SetConfig+0x6a>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <TIM_TI1_SetConfig+0x6c>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f023 0303 	bic.w	r3, r3, #3
 8008dde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	617b      	str	r3, [r7, #20]
 8008de8:	e003      	b.n	8008df2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f043 0301 	orr.w	r3, r3, #1
 8008df0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	011b      	lsls	r3, r3, #4
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f023 030a 	bic.w	r3, r3, #10
 8008e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f003 030a 	and.w	r3, r3, #10
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	40010000 	.word	0x40010000
 8008e38:	40000400 	.word	0x40000400
 8008e3c:	40000800 	.word	0x40000800
 8008e40:	40000c00 	.word	0x40000c00
 8008e44:	40010400 	.word	0x40010400
 8008e48:	40014000 	.word	0x40014000
 8008e4c:	40001800 	.word	0x40001800

08008e50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	f023 0210 	bic.w	r2, r3, #16
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	021b      	lsls	r3, r3, #8
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	031b      	lsls	r3, r3, #12
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	621a      	str	r2, [r3, #32]
}
 8008ebe:	bf00      	nop
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b087      	sub	sp, #28
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f023 0303 	bic.w	r3, r3, #3
 8008ef6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008f1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	621a      	str	r2, [r3, #32]
}
 8008f36:	bf00      	nop
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b087      	sub	sp, #28
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	607a      	str	r2, [r7, #4]
 8008f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	031b      	lsls	r3, r3, #12
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008f94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	031b      	lsls	r3, r3, #12
 8008f9a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	621a      	str	r2, [r3, #32]
}
 8008fb0:	bf00      	nop
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e05a      	b.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	4313      	orrs	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a21      	ldr	r2, [pc, #132]	@ (8009098 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d022      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009020:	d01d      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1d      	ldr	r2, [pc, #116]	@ (800909c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d018      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a1b      	ldr	r2, [pc, #108]	@ (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d013      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a1a      	ldr	r2, [pc, #104]	@ (80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d00e      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a18      	ldr	r2, [pc, #96]	@ (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d009      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a17      	ldr	r2, [pc, #92]	@ (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d004      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a15      	ldr	r2, [pc, #84]	@ (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d10c      	bne.n	8009078 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	4313      	orrs	r3, r2
 800906e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	40010000 	.word	0x40010000
 800909c:	40000400 	.word	0x40000400
 80090a0:	40000800 	.word	0x40000800
 80090a4:	40000c00 	.word	0x40000c00
 80090a8:	40010400 	.word	0x40010400
 80090ac:	40014000 	.word	0x40014000
 80090b0:	40001800 	.word	0x40001800

080090b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d101      	bne.n	80090d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e03d      	b.n	800914c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	71fb      	strb	r3, [r7, #7]
 8009162:	460b      	mov	r3, r1
 8009164:	71bb      	strb	r3, [r7, #6]
 8009166:	4613      	mov	r3, r2
 8009168:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800916a:	79fa      	ldrb	r2, [r7, #7]
 800916c:	79bb      	ldrb	r3, [r7, #6]
 800916e:	fa02 f303 	lsl.w	r3, r2, r3
 8009172:	b2da      	uxtb	r2, r3
 8009174:	797b      	ldrb	r3, [r7, #5]
 8009176:	4013      	ands	r3, r2
 8009178:	b2db      	uxtb	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	4603      	mov	r3, r0
 800918e:	80fb      	strh	r3, [r7, #6]
 8009190:	460b      	mov	r3, r1
 8009192:	717b      	strb	r3, [r7, #5]
 8009194:	4613      	mov	r3, r2
 8009196:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8009198:	88fa      	ldrh	r2, [r7, #6]
 800919a:	797b      	ldrb	r3, [r7, #5]
 800919c:	fa02 f303 	lsl.w	r3, r2, r3
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	793b      	ldrb	r3, [r7, #4]
 80091a4:	4013      	ands	r3, r2
 80091a6:	b2db      	uxtb	r3, r3
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <pack_right_shift_u8>:

static inline uint8_t pack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	71fb      	strb	r3, [r7, #7]
 80091be:	460b      	mov	r3, r1
 80091c0:	71bb      	strb	r3, [r7, #6]
 80091c2:	4613      	mov	r3, r2
 80091c4:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80091c6:	79fa      	ldrb	r2, [r7, #7]
 80091c8:	79bb      	ldrb	r3, [r7, #6]
 80091ca:	fa42 f303 	asr.w	r3, r2, r3
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	797b      	ldrb	r3, [r7, #5]
 80091d2:	4013      	ands	r3, r2
 80091d4:	b2db      	uxtb	r3, r3
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	4603      	mov	r3, r0
 80091ea:	80fb      	strh	r3, [r7, #6]
 80091ec:	460b      	mov	r3, r1
 80091ee:	717b      	strb	r3, [r7, #5]
 80091f0:	4613      	mov	r3, r2
 80091f2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80091f4:	88fa      	ldrh	r2, [r7, #6]
 80091f6:	797b      	ldrb	r3, [r7, #5]
 80091f8:	fa42 f303 	asr.w	r3, r2, r3
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	793b      	ldrb	r3, [r7, #4]
 8009200:	4013      	ands	r3, r2
 8009202:	b2db      	uxtb	r3, r3
}
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	71fb      	strb	r3, [r7, #7]
 800921a:	460b      	mov	r3, r1
 800921c:	71bb      	strb	r3, [r7, #6]
 800921e:	4613      	mov	r3, r2
 8009220:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8009222:	79fa      	ldrb	r2, [r7, #7]
 8009224:	797b      	ldrb	r3, [r7, #5]
 8009226:	4013      	ands	r3, r2
 8009228:	b2db      	uxtb	r3, r3
 800922a:	461a      	mov	r2, r3
 800922c:	79bb      	ldrb	r3, [r7, #6]
 800922e:	fa02 f303 	lsl.w	r3, r2, r3
 8009232:	b29b      	uxth	r3, r3
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
 800924a:	460b      	mov	r3, r1
 800924c:	71bb      	strb	r3, [r7, #6]
 800924e:	4613      	mov	r3, r2
 8009250:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8009252:	79fa      	ldrb	r2, [r7, #7]
 8009254:	797b      	ldrb	r3, [r7, #5]
 8009256:	4013      	ands	r3, r2
 8009258:	b2db      	uxtb	r3, r3
 800925a:	461a      	mov	r2, r3
 800925c:	79bb      	ldrb	r3, [r7, #6]
 800925e:	fa42 f303 	asr.w	r3, r2, r3
 8009262:	b2db      	uxtb	r3, r3
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	71fb      	strb	r3, [r7, #7]
 800927a:	460b      	mov	r3, r1
 800927c:	71bb      	strb	r3, [r7, #6]
 800927e:	4613      	mov	r3, r2
 8009280:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 8009282:	79fa      	ldrb	r2, [r7, #7]
 8009284:	797b      	ldrb	r3, [r7, #5]
 8009286:	4013      	ands	r3, r2
 8009288:	b2db      	uxtb	r3, r3
 800928a:	461a      	mov	r2, r3
 800928c:	79bb      	ldrb	r3, [r7, #6]
 800928e:	fa42 f303 	asr.w	r3, r2, r3
 8009292:	b29b      	uxth	r3, r3
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <can1_ams_status_1_pack>:

int can1_ams_status_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_status_1_t *src_p,
    size_t size)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
    uint8_t max_cell_temperature;
    uint8_t max_cell_voltage;
    uint8_t min_cell_temperature;
    uint8_t min_cell_voltage;

    if (size < 8u) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b07      	cmp	r3, #7
 80092b0:	d802      	bhi.n	80092b8 <can1_ams_status_1_pack+0x18>
        return (-EINVAL);
 80092b2:	f06f 0315 	mvn.w	r3, #21
 80092b6:	e128      	b.n	800950a <can1_ams_status_1_pack+0x26a>
    }

    memset(&dst_p[0], 0, 8);
 80092b8:	2208      	movs	r2, #8
 80092ba:	2100      	movs	r1, #0
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f007 fa7b 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->charging_status, 0u, 0x03u);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2203      	movs	r2, #3
 80092c8:	2100      	movs	r1, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff ff44 	bl	8009158 <pack_left_shift_u8>
 80092d0:	4603      	mov	r3, r0
 80092d2:	461a      	mov	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	4313      	orrs	r3, r2
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air1_closed, 2u, 0x04u);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	785b      	ldrb	r3, [r3, #1]
 80092e4:	2204      	movs	r2, #4
 80092e6:	2102      	movs	r1, #2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff ff35 	bl	8009158 <pack_left_shift_u8>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air2_closed, 3u, 0x08u);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	789b      	ldrb	r3, [r3, #2]
 8009302:	2208      	movs	r2, #8
 8009304:	2103      	movs	r1, #3
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff ff26 	bl	8009158 <pack_left_shift_u8>
 800930c:	4603      	mov	r3, r0
 800930e:	461a      	mov	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	4313      	orrs	r3, r2
 8009316:	b2da      	uxtb	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->sc_closed, 4u, 0x10u);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	78db      	ldrb	r3, [r3, #3]
 8009320:	2210      	movs	r2, #16
 8009322:	2104      	movs	r1, #4
 8009324:	4618      	mov	r0, r3
 8009326:	f7ff ff17 	bl	8009158 <pack_left_shift_u8>
 800932a:	4603      	mov	r3, r0
 800932c:	461a      	mov	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	4313      	orrs	r3, r2
 8009334:	b2da      	uxtb	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->pre_charge_status, 5u, 0x20u);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	791b      	ldrb	r3, [r3, #4]
 800933e:	2220      	movs	r2, #32
 8009340:	2105      	movs	r1, #5
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff ff08 	bl	8009158 <pack_left_shift_u8>
 8009348:	4603      	mov	r3, r0
 800934a:	461a      	mov	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	4313      	orrs	r3, r2
 8009352:	b2da      	uxtb	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ams_error, 6u, 0x40u);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	795b      	ldrb	r3, [r3, #5]
 800935c:	2240      	movs	r2, #64	@ 0x40
 800935e:	2106      	movs	r1, #6
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff fef9 	bl	8009158 <pack_left_shift_u8>
 8009366:	4603      	mov	r3, r0
 8009368:	461a      	mov	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	4313      	orrs	r3, r2
 8009370:	b2da      	uxtb	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->imd_error, 7u, 0x80u);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	799b      	ldrb	r3, [r3, #6]
 800937a:	2280      	movs	r2, #128	@ 0x80
 800937c:	2107      	movs	r1, #7
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff feea 	bl	8009158 <pack_left_shift_u8>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	4313      	orrs	r3, r2
 800938e:	b2da      	uxtb	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->state_of_charge, 0u, 0x7fu);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	79db      	ldrb	r3, [r3, #7]
 8009398:	227f      	movs	r2, #127	@ 0x7f
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff fedb 	bl	8009158 <pack_left_shift_u8>
 80093a2:	4603      	mov	r3, r0
 80093a4:	4619      	mov	r1, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3301      	adds	r3, #1
 80093aa:	781a      	ldrb	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	430a      	orrs	r2, r1
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->balance_status, 7u, 0x80u);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	7a1b      	ldrb	r3, [r3, #8]
 80093ba:	2280      	movs	r2, #128	@ 0x80
 80093bc:	2107      	movs	r1, #7
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff feca 	bl	8009158 <pack_left_shift_u8>
 80093c4:	4603      	mov	r3, r0
 80093c6:	4619      	mov	r1, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	3301      	adds	r3, #1
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3301      	adds	r3, #1
 80093d2:	430a      	orrs	r2, r1
 80093d4:	b2d2      	uxtb	r2, r2
 80093d6:	701a      	strb	r2, [r3, #0]
    memcpy(&min_cell_voltage, &src_p->min_cell_voltage, sizeof(min_cell_voltage));
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	3310      	adds	r3, #16
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	753b      	strb	r3, [r7, #20]
    dst_p[2] |= pack_left_shift_u8(min_cell_voltage, 0u, 0xffu);
 80093e0:	7d3b      	ldrb	r3, [r7, #20]
 80093e2:	22ff      	movs	r2, #255	@ 0xff
 80093e4:	2100      	movs	r1, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff feb6 	bl	8009158 <pack_left_shift_u8>
 80093ec:	4603      	mov	r3, r0
 80093ee:	4619      	mov	r1, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3302      	adds	r3, #2
 80093f4:	781a      	ldrb	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3302      	adds	r3, #2
 80093fa:	430a      	orrs	r2, r1
 80093fc:	b2d2      	uxtb	r2, r2
 80093fe:	701a      	strb	r2, [r3, #0]
    memcpy(&max_cell_voltage, &src_p->max_cell_voltage, sizeof(max_cell_voltage));
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	3318      	adds	r3, #24
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	75bb      	strb	r3, [r7, #22]
    dst_p[3] |= pack_left_shift_u8(max_cell_voltage, 0u, 0xffu);
 8009408:	7dbb      	ldrb	r3, [r7, #22]
 800940a:	22ff      	movs	r2, #255	@ 0xff
 800940c:	2100      	movs	r1, #0
 800940e:	4618      	mov	r0, r3
 8009410:	f7ff fea2 	bl	8009158 <pack_left_shift_u8>
 8009414:	4603      	mov	r3, r0
 8009416:	4619      	mov	r1, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3303      	adds	r3, #3
 800941c:	781a      	ldrb	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3303      	adds	r3, #3
 8009422:	430a      	orrs	r2, r1
 8009424:	b2d2      	uxtb	r2, r2
 8009426:	701a      	strb	r2, [r3, #0]
    memcpy(&min_cell_temperature, &src_p->min_cell_temperature, sizeof(min_cell_temperature));
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	3320      	adds	r3, #32
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	757b      	strb	r3, [r7, #21]
    dst_p[4] |= pack_left_shift_u8(min_cell_temperature, 0u, 0xffu);
 8009430:	7d7b      	ldrb	r3, [r7, #21]
 8009432:	22ff      	movs	r2, #255	@ 0xff
 8009434:	2100      	movs	r1, #0
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff fe8e 	bl	8009158 <pack_left_shift_u8>
 800943c:	4603      	mov	r3, r0
 800943e:	4619      	mov	r1, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3304      	adds	r3, #4
 8009444:	781a      	ldrb	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3304      	adds	r3, #4
 800944a:	430a      	orrs	r2, r1
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	701a      	strb	r2, [r3, #0]
    memcpy(&max_cell_temperature, &src_p->max_cell_temperature, sizeof(max_cell_temperature));
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	3328      	adds	r3, #40	@ 0x28
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	75fb      	strb	r3, [r7, #23]
    dst_p[5] |= pack_left_shift_u8(max_cell_temperature, 0u, 0xffu);
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	22ff      	movs	r2, #255	@ 0xff
 800945c:	2100      	movs	r1, #0
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff fe7a 	bl	8009158 <pack_left_shift_u8>
 8009464:	4603      	mov	r3, r0
 8009466:	4619      	mov	r1, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3305      	adds	r3, #5
 800946c:	781a      	ldrb	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3305      	adds	r3, #5
 8009472:	430a      	orrs	r2, r1
 8009474:	b2d2      	uxtb	r2, r2
 8009476:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u8(src_p->fan_speed, 0u, 0x7fu);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800947e:	227f      	movs	r2, #127	@ 0x7f
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f7ff fe68 	bl	8009158 <pack_left_shift_u8>
 8009488:	4603      	mov	r3, r0
 800948a:	4619      	mov	r1, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3306      	adds	r3, #6
 8009490:	781a      	ldrb	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3306      	adds	r3, #6
 8009496:	430a      	orrs	r2, r1
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u8(src_p->fsm_state, 7u, 0x80u);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80094a2:	2280      	movs	r2, #128	@ 0x80
 80094a4:	2107      	movs	r1, #7
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7ff fe56 	bl	8009158 <pack_left_shift_u8>
 80094ac:	4603      	mov	r3, r0
 80094ae:	4619      	mov	r1, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3306      	adds	r3, #6
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3306      	adds	r3, #6
 80094ba:	430a      	orrs	r2, r1
 80094bc:	b2d2      	uxtb	r2, r2
 80094be:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u8(src_p->fsm_state, 1u, 0x07u);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80094c6:	2207      	movs	r2, #7
 80094c8:	2101      	movs	r1, #1
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff fe72 	bl	80091b4 <pack_right_shift_u8>
 80094d0:	4603      	mov	r3, r0
 80094d2:	4619      	mov	r1, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3307      	adds	r3, #7
 80094d8:	781a      	ldrb	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3307      	adds	r3, #7
 80094de:	430a      	orrs	r2, r1
 80094e0:	b2d2      	uxtb	r2, r2
 80094e2:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_left_shift_u8(src_p->ticks, 3u, 0xf8u);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80094ea:	22f8      	movs	r2, #248	@ 0xf8
 80094ec:	2103      	movs	r1, #3
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff fe32 	bl	8009158 <pack_left_shift_u8>
 80094f4:	4603      	mov	r3, r0
 80094f6:	4619      	mov	r1, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3307      	adds	r3, #7
 80094fc:	781a      	ldrb	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	430a      	orrs	r2, r1
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	701a      	strb	r2, [r3, #0]

    return (8);
 8009508:	2308      	movs	r3, #8
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	0000      	movs	r0, r0
 8009514:	0000      	movs	r0, r0
	...

08009518 <can1_ams_status_1_min_cell_voltage_encode>:
{
    return (value <= 1u);
}

double can1_ams_status_1_min_cell_voltage_encode(double value)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - 2.0) / 0.00784);
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800952a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800952e:	f7f6 fe4f 	bl	80001d0 <__aeabi_dsub>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4610      	mov	r0, r2
 8009538:	4619      	mov	r1, r3
 800953a:	a309      	add	r3, pc, #36	@ (adr r3, 8009560 <can1_ams_status_1_min_cell_voltage_encode+0x48>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f7f7 f928 	bl	8000794 <__aeabi_ddiv>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	ec43 2b17 	vmov	d7, r2, r3
}
 800954c:	eeb0 0a47 	vmov.f32	s0, s14
 8009550:	eef0 0a67 	vmov.f32	s1, s15
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w
 8009560:	fcce1c58 	.word	0xfcce1c58
 8009564:	3f800e6a 	.word	0x3f800e6a

08009568 <can1_ams_status_1_max_cell_voltage_encode>:
{
    return ((value >= 63.775510204081634) && (value <= 318.8775510204082));
}

double can1_ams_status_1_max_cell_voltage_encode(double value)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - 2.4) / 0.00784);
 8009572:	a30d      	add	r3, pc, #52	@ (adr r3, 80095a8 <can1_ams_status_1_max_cell_voltage_encode+0x40>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800957c:	f7f6 fe28 	bl	80001d0 <__aeabi_dsub>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4610      	mov	r0, r2
 8009586:	4619      	mov	r1, r3
 8009588:	a309      	add	r3, pc, #36	@ (adr r3, 80095b0 <can1_ams_status_1_max_cell_voltage_encode+0x48>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f7f7 f901 	bl	8000794 <__aeabi_ddiv>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	ec43 2b17 	vmov	d7, r2, r3
}
 800959a:	eeb0 0a47 	vmov.f32	s0, s14
 800959e:	eef0 0a67 	vmov.f32	s1, s15
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	33333333 	.word	0x33333333
 80095ac:	40033333 	.word	0x40033333
 80095b0:	fcce1c58 	.word	0xfcce1c58
 80095b4:	3f800e6a 	.word	0x3f800e6a

080095b8 <can1_ams_status_1_min_cell_temperature_encode>:
{
    return ((value >= 12.755102040816338) && (value <= 267.8571428571429));
}

double can1_ams_status_1_min_cell_temperature_encode(double value)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - -10.0) / 0.4);
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	4b0e      	ldr	r3, [pc, #56]	@ (8009600 <can1_ams_status_1_min_cell_temperature_encode+0x48>)
 80095c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095cc:	f7f6 fe02 	bl	80001d4 <__adddf3>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4610      	mov	r0, r2
 80095d6:	4619      	mov	r1, r3
 80095d8:	a307      	add	r3, pc, #28	@ (adr r3, 80095f8 <can1_ams_status_1_min_cell_temperature_encode+0x40>)
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f7f7 f8d9 	bl	8000794 <__aeabi_ddiv>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80095ea:	eeb0 0a47 	vmov.f32	s0, s14
 80095ee:	eef0 0a67 	vmov.f32	s1, s15
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	9999999a 	.word	0x9999999a
 80095fc:	3fd99999 	.word	0x3fd99999
 8009600:	40240000 	.word	0x40240000
 8009604:	00000000 	.word	0x00000000

08009608 <can1_ams_status_1_max_cell_temperature_encode>:
{
    return ((value >= 0.0) && (value <= 250.0));
}

double can1_ams_status_1_max_cell_temperature_encode(double value)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - -10.0) / 0.4);
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	4b0e      	ldr	r3, [pc, #56]	@ (8009650 <can1_ams_status_1_max_cell_temperature_encode+0x48>)
 8009618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800961c:	f7f6 fdda 	bl	80001d4 <__adddf3>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4610      	mov	r0, r2
 8009626:	4619      	mov	r1, r3
 8009628:	a307      	add	r3, pc, #28	@ (adr r3, 8009648 <can1_ams_status_1_max_cell_temperature_encode+0x40>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	f7f7 f8b1 	bl	8000794 <__aeabi_ddiv>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	ec43 2b17 	vmov	d7, r2, r3
}
 800963a:	eeb0 0a47 	vmov.f32	s0, s14
 800963e:	eef0 0a67 	vmov.f32	s1, s15
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	9999999a 	.word	0x9999999a
 800964c:	3fd99999 	.word	0x3fd99999
 8009650:	40240000 	.word	0x40240000

08009654 <can1_ams_status_1_ticks_encode>:
{
    return (value <= 15u);
}

uint8_t can1_ams_status_1_ticks_encode(double value)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value / 10.0);
 800965e:	f04f 0200 	mov.w	r2, #0
 8009662:	4b08      	ldr	r3, [pc, #32]	@ (8009684 <can1_ams_status_1_ticks_encode+0x30>)
 8009664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009668:	f7f7 f894 	bl	8000794 <__aeabi_ddiv>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4610      	mov	r0, r2
 8009672:	4619      	mov	r1, r3
 8009674:	f7f7 fa26 	bl	8000ac4 <__aeabi_d2uiz>
 8009678:	4603      	mov	r3, r0
 800967a:	b2db      	uxtb	r3, r3
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	40240000 	.word	0x40240000

08009688 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b07      	cmp	r3, #7
 8009698:	d802      	bhi.n	80096a0 <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 800969a:	f06f 0315 	mvn.w	r3, #21
 800969e:	e047      	b.n	8009730 <can1_dbu_status_1_unpack+0xa8>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2201      	movs	r2, #1
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff fdc9 	bl	8009240 <unpack_right_shift_u8>
 80096ae:	4603      	mov	r3, r0
 80096b0:	461a      	mov	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2202      	movs	r2, #2
 80096bc:	2101      	movs	r1, #1
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff fdbe 	bl	8009240 <unpack_right_shift_u8>
 80096c4:	4603      	mov	r3, r0
 80096c6:	461a      	mov	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	705a      	strb	r2, [r3, #1]
    dst_p->selected_mission = unpack_right_shift_u8(src_p[0], 2u, 0x1cu);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	221c      	movs	r2, #28
 80096d2:	2102      	movs	r1, #2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff fdb3 	bl	8009240 <unpack_right_shift_u8>
 80096da:	4603      	mov	r3, r0
 80096dc:	461a      	mov	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	709a      	strb	r2, [r3, #2]
    dbu_temperature = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	3306      	adds	r3, #6
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	22f0      	movs	r2, #240	@ 0xf0
 80096ea:	2104      	movs	r1, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff fdbf 	bl	8009270 <unpack_right_shift_u16>
 80096f2:	4603      	mov	r3, r0
 80096f4:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	3307      	adds	r3, #7
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	22ff      	movs	r2, #255	@ 0xff
 80096fe:	2104      	movs	r1, #4
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff fd85 	bl	8009210 <unpack_left_shift_u16>
 8009706:	4603      	mov	r3, r0
 8009708:	461a      	mov	r2, r3
 800970a:	8afb      	ldrh	r3, [r7, #22]
 800970c:	4313      	orrs	r3, r2
 800970e:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8009710:	8afb      	ldrh	r3, [r7, #22]
 8009712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009716:	2b00      	cmp	r3, #0
 8009718:	d005      	beq.n	8009726 <can1_dbu_status_1_unpack+0x9e>
        dbu_temperature |= 0xf000u;
 800971a:	8afb      	ldrh	r3, [r7, #22]
 800971c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009720:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8009724:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 8009726:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	809a      	strh	r2, [r3, #4]

    return (0);
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <can1_ams_cell_temperatures_pack>:

int can1_ams_cell_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_temperatures_t *src_p,
    size_t size)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b0a2      	sub	sp, #136	@ 0x88
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b07      	cmp	r3, #7
 8009748:	d803      	bhi.n	8009752 <can1_ams_cell_temperatures_pack+0x1a>
        return (-EINVAL);
 800974a:	f06f 0315 	mvn.w	r3, #21
 800974e:	f001 b90d 	b.w	800a96c <can1_ams_cell_temperatures_pack+0x1234>
    }

    memset(&dst_p[0], 0, 8);
 8009752:	2208      	movs	r2, #8
 8009754:	2100      	movs	r1, #0
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f007 f82e 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->temperature_multiplexor, 0u, 0x0fu);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	220f      	movs	r2, #15
 8009762:	2100      	movs	r1, #0
 8009764:	4618      	mov	r0, r3
 8009766:	f7ff fcf7 	bl	8009158 <pack_left_shift_u8>
 800976a:	4603      	mov	r3, r0
 800976c:	461a      	mov	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	4313      	orrs	r3, r2
 8009774:	b2da      	uxtb	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	701a      	strb	r2, [r3, #0]

    switch (src_p->temperature_multiplexor) {
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b0b      	cmp	r3, #11
 8009780:	f201 80f2 	bhi.w	800a968 <can1_ams_cell_temperatures_pack+0x1230>
 8009784:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <can1_ams_cell_temperatures_pack+0x54>)
 8009786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978a:	bf00      	nop
 800978c:	080097bd 	.word	0x080097bd
 8009790:	08009925 	.word	0x08009925
 8009794:	08009a8d 	.word	0x08009a8d
 8009798:	08009bf5 	.word	0x08009bf5
 800979c:	08009d5d 	.word	0x08009d5d
 80097a0:	08009ecb 	.word	0x08009ecb
 80097a4:	0800a051 	.word	0x0800a051
 80097a8:	0800a1d5 	.word	0x0800a1d5
 80097ac:	0800a359 	.word	0x0800a359
 80097b0:	0800a4dd 	.word	0x0800a4dd
 80097b4:	0800a661 	.word	0x0800a661
 80097b8:	0800a7e5 	.word	0x0800a7e5

    case 0:
        t1s1 = (uint16_t)src_p->t1s1;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80097c2:	833b      	strh	r3, [r7, #24]
        dst_p[0] |= pack_left_shift_u16(t1s1, 4u, 0xf0u);
 80097c4:	8b3b      	ldrh	r3, [r7, #24]
 80097c6:	22f0      	movs	r2, #240	@ 0xf0
 80097c8:	2104      	movs	r1, #4
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7ff fcdb 	bl	8009186 <pack_left_shift_u16>
 80097d0:	4603      	mov	r3, r0
 80097d2:	461a      	mov	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	4313      	orrs	r3, r2
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s1, 4u, 0xffu);
 80097e0:	8b3b      	ldrh	r3, [r7, #24]
 80097e2:	22ff      	movs	r2, #255	@ 0xff
 80097e4:	2104      	movs	r1, #4
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff fcfb 	bl	80091e2 <pack_right_shift_u16>
 80097ec:	4603      	mov	r3, r0
 80097ee:	4619      	mov	r1, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3301      	adds	r3, #1
 80097f4:	781a      	ldrb	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	430a      	orrs	r2, r1
 80097fc:	b2d2      	uxtb	r2, r2
 80097fe:	701a      	strb	r2, [r3, #0]
        t2s1 = (uint16_t)src_p->t2s1;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009806:	82fb      	strh	r3, [r7, #22]
        dst_p[2] |= pack_left_shift_u16(t2s1, 0u, 0xffu);
 8009808:	8afb      	ldrh	r3, [r7, #22]
 800980a:	22ff      	movs	r2, #255	@ 0xff
 800980c:	2100      	movs	r1, #0
 800980e:	4618      	mov	r0, r3
 8009810:	f7ff fcb9 	bl	8009186 <pack_left_shift_u16>
 8009814:	4603      	mov	r3, r0
 8009816:	4619      	mov	r1, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3302      	adds	r3, #2
 800981c:	781a      	ldrb	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3302      	adds	r3, #2
 8009822:	430a      	orrs	r2, r1
 8009824:	b2d2      	uxtb	r2, r2
 8009826:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s1, 8u, 0x0fu);
 8009828:	8afb      	ldrh	r3, [r7, #22]
 800982a:	220f      	movs	r2, #15
 800982c:	2108      	movs	r1, #8
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff fcd7 	bl	80091e2 <pack_right_shift_u16>
 8009834:	4603      	mov	r3, r0
 8009836:	4619      	mov	r1, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3303      	adds	r3, #3
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3303      	adds	r3, #3
 8009842:	430a      	orrs	r2, r1
 8009844:	b2d2      	uxtb	r2, r2
 8009846:	701a      	strb	r2, [r3, #0]
        t3s1 = (uint16_t)src_p->t3s1;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 800984e:	82bb      	strh	r3, [r7, #20]
        dst_p[3] |= pack_left_shift_u16(t3s1, 4u, 0xf0u);
 8009850:	8abb      	ldrh	r3, [r7, #20]
 8009852:	22f0      	movs	r2, #240	@ 0xf0
 8009854:	2104      	movs	r1, #4
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff fc95 	bl	8009186 <pack_left_shift_u16>
 800985c:	4603      	mov	r3, r0
 800985e:	4619      	mov	r1, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3303      	adds	r3, #3
 8009864:	781a      	ldrb	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3303      	adds	r3, #3
 800986a:	430a      	orrs	r2, r1
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s1, 4u, 0xffu);
 8009870:	8abb      	ldrh	r3, [r7, #20]
 8009872:	22ff      	movs	r2, #255	@ 0xff
 8009874:	2104      	movs	r1, #4
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff fcb3 	bl	80091e2 <pack_right_shift_u16>
 800987c:	4603      	mov	r3, r0
 800987e:	4619      	mov	r1, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	3304      	adds	r3, #4
 8009884:	781a      	ldrb	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3304      	adds	r3, #4
 800988a:	430a      	orrs	r2, r1
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	701a      	strb	r2, [r3, #0]
        t4s1 = (uint16_t)src_p->t4s1;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8009896:	827b      	strh	r3, [r7, #18]
        dst_p[5] |= pack_left_shift_u16(t4s1, 0u, 0xffu);
 8009898:	8a7b      	ldrh	r3, [r7, #18]
 800989a:	22ff      	movs	r2, #255	@ 0xff
 800989c:	2100      	movs	r1, #0
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fc71 	bl	8009186 <pack_left_shift_u16>
 80098a4:	4603      	mov	r3, r0
 80098a6:	4619      	mov	r1, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3305      	adds	r3, #5
 80098ac:	781a      	ldrb	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3305      	adds	r3, #5
 80098b2:	430a      	orrs	r2, r1
 80098b4:	b2d2      	uxtb	r2, r2
 80098b6:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s1, 8u, 0x0fu);
 80098b8:	8a7b      	ldrh	r3, [r7, #18]
 80098ba:	220f      	movs	r2, #15
 80098bc:	2108      	movs	r1, #8
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff fc8f 	bl	80091e2 <pack_right_shift_u16>
 80098c4:	4603      	mov	r3, r0
 80098c6:	4619      	mov	r1, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3306      	adds	r3, #6
 80098cc:	781a      	ldrb	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3306      	adds	r3, #6
 80098d2:	430a      	orrs	r2, r1
 80098d4:	b2d2      	uxtb	r2, r2
 80098d6:	701a      	strb	r2, [r3, #0]
        t5s1 = (uint16_t)src_p->t5s1;
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 80098de:	823b      	strh	r3, [r7, #16]
        dst_p[6] |= pack_left_shift_u16(t5s1, 4u, 0xf0u);
 80098e0:	8a3b      	ldrh	r3, [r7, #16]
 80098e2:	22f0      	movs	r2, #240	@ 0xf0
 80098e4:	2104      	movs	r1, #4
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fc4d 	bl	8009186 <pack_left_shift_u16>
 80098ec:	4603      	mov	r3, r0
 80098ee:	4619      	mov	r1, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3306      	adds	r3, #6
 80098f4:	781a      	ldrb	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3306      	adds	r3, #6
 80098fa:	430a      	orrs	r2, r1
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s1, 4u, 0xffu);
 8009900:	8a3b      	ldrh	r3, [r7, #16]
 8009902:	22ff      	movs	r2, #255	@ 0xff
 8009904:	2104      	movs	r1, #4
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fc6b 	bl	80091e2 <pack_right_shift_u16>
 800990c:	4603      	mov	r3, r0
 800990e:	4619      	mov	r1, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3307      	adds	r3, #7
 8009914:	781a      	ldrb	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3307      	adds	r3, #7
 800991a:	430a      	orrs	r2, r1
 800991c:	b2d2      	uxtb	r2, r2
 800991e:	701a      	strb	r2, [r3, #0]
        break;
 8009920:	f001 b823 	b.w	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 1:
        t1s2 = (uint16_t)src_p->t1s2;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800992a:	847b      	strh	r3, [r7, #34]	@ 0x22
        dst_p[0] |= pack_left_shift_u16(t1s2, 4u, 0xf0u);
 800992c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800992e:	22f0      	movs	r2, #240	@ 0xf0
 8009930:	2104      	movs	r1, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff fc27 	bl	8009186 <pack_left_shift_u16>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	4313      	orrs	r3, r2
 8009942:	b2da      	uxtb	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s2, 4u, 0xffu);
 8009948:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800994a:	22ff      	movs	r2, #255	@ 0xff
 800994c:	2104      	movs	r1, #4
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff fc47 	bl	80091e2 <pack_right_shift_u16>
 8009954:	4603      	mov	r3, r0
 8009956:	4619      	mov	r1, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	781a      	ldrb	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3301      	adds	r3, #1
 8009962:	430a      	orrs	r2, r1
 8009964:	b2d2      	uxtb	r2, r2
 8009966:	701a      	strb	r2, [r3, #0]
        t2s2 = (uint16_t)src_p->t2s2;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800996e:	843b      	strh	r3, [r7, #32]
        dst_p[2] |= pack_left_shift_u16(t2s2, 0u, 0xffu);
 8009970:	8c3b      	ldrh	r3, [r7, #32]
 8009972:	22ff      	movs	r2, #255	@ 0xff
 8009974:	2100      	movs	r1, #0
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fc05 	bl	8009186 <pack_left_shift_u16>
 800997c:	4603      	mov	r3, r0
 800997e:	4619      	mov	r1, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3302      	adds	r3, #2
 8009984:	781a      	ldrb	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3302      	adds	r3, #2
 800998a:	430a      	orrs	r2, r1
 800998c:	b2d2      	uxtb	r2, r2
 800998e:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s2, 8u, 0x0fu);
 8009990:	8c3b      	ldrh	r3, [r7, #32]
 8009992:	220f      	movs	r2, #15
 8009994:	2108      	movs	r1, #8
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff fc23 	bl	80091e2 <pack_right_shift_u16>
 800999c:	4603      	mov	r3, r0
 800999e:	4619      	mov	r1, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3303      	adds	r3, #3
 80099a4:	781a      	ldrb	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3303      	adds	r3, #3
 80099aa:	430a      	orrs	r2, r1
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	701a      	strb	r2, [r3, #0]
        t3s2 = (uint16_t)src_p->t3s2;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 80099b6:	83fb      	strh	r3, [r7, #30]
        dst_p[3] |= pack_left_shift_u16(t3s2, 4u, 0xf0u);
 80099b8:	8bfb      	ldrh	r3, [r7, #30]
 80099ba:	22f0      	movs	r2, #240	@ 0xf0
 80099bc:	2104      	movs	r1, #4
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff fbe1 	bl	8009186 <pack_left_shift_u16>
 80099c4:	4603      	mov	r3, r0
 80099c6:	4619      	mov	r1, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3303      	adds	r3, #3
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3303      	adds	r3, #3
 80099d2:	430a      	orrs	r2, r1
 80099d4:	b2d2      	uxtb	r2, r2
 80099d6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s2, 4u, 0xffu);
 80099d8:	8bfb      	ldrh	r3, [r7, #30]
 80099da:	22ff      	movs	r2, #255	@ 0xff
 80099dc:	2104      	movs	r1, #4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff fbff 	bl	80091e2 <pack_right_shift_u16>
 80099e4:	4603      	mov	r3, r0
 80099e6:	4619      	mov	r1, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3304      	adds	r3, #4
 80099ec:	781a      	ldrb	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	3304      	adds	r3, #4
 80099f2:	430a      	orrs	r2, r1
 80099f4:	b2d2      	uxtb	r2, r2
 80099f6:	701a      	strb	r2, [r3, #0]
        t4s2 = (uint16_t)src_p->t4s2;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 80099fe:	83bb      	strh	r3, [r7, #28]
        dst_p[5] |= pack_left_shift_u16(t4s2, 0u, 0xffu);
 8009a00:	8bbb      	ldrh	r3, [r7, #28]
 8009a02:	22ff      	movs	r2, #255	@ 0xff
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff fbbd 	bl	8009186 <pack_left_shift_u16>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3305      	adds	r3, #5
 8009a14:	781a      	ldrb	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3305      	adds	r3, #5
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s2, 8u, 0x0fu);
 8009a20:	8bbb      	ldrh	r3, [r7, #28]
 8009a22:	220f      	movs	r2, #15
 8009a24:	2108      	movs	r1, #8
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff fbdb 	bl	80091e2 <pack_right_shift_u16>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	4619      	mov	r1, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	3306      	adds	r3, #6
 8009a34:	781a      	ldrb	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3306      	adds	r3, #6
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	701a      	strb	r2, [r3, #0]
        t5s2 = (uint16_t)src_p->t5s2;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	@ 0x64
 8009a46:	837b      	strh	r3, [r7, #26]
        dst_p[6] |= pack_left_shift_u16(t5s2, 4u, 0xf0u);
 8009a48:	8b7b      	ldrh	r3, [r7, #26]
 8009a4a:	22f0      	movs	r2, #240	@ 0xf0
 8009a4c:	2104      	movs	r1, #4
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff fb99 	bl	8009186 <pack_left_shift_u16>
 8009a54:	4603      	mov	r3, r0
 8009a56:	4619      	mov	r1, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3306      	adds	r3, #6
 8009a5c:	781a      	ldrb	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3306      	adds	r3, #6
 8009a62:	430a      	orrs	r2, r1
 8009a64:	b2d2      	uxtb	r2, r2
 8009a66:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s2, 4u, 0xffu);
 8009a68:	8b7b      	ldrh	r3, [r7, #26]
 8009a6a:	22ff      	movs	r2, #255	@ 0xff
 8009a6c:	2104      	movs	r1, #4
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff fbb7 	bl	80091e2 <pack_right_shift_u16>
 8009a74:	4603      	mov	r3, r0
 8009a76:	4619      	mov	r1, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3307      	adds	r3, #7
 8009a7c:	781a      	ldrb	r2, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3307      	adds	r3, #7
 8009a82:	430a      	orrs	r2, r1
 8009a84:	b2d2      	uxtb	r2, r2
 8009a86:	701a      	strb	r2, [r3, #0]
        break;
 8009a88:	f000 bf6f 	b.w	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 2:
        t1s3 = (uint16_t)src_p->t1s3;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009a92:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        dst_p[0] |= pack_left_shift_u16(t1s3, 4u, 0xf0u);
 8009a94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009a96:	22f0      	movs	r2, #240	@ 0xf0
 8009a98:	2104      	movs	r1, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff fb73 	bl	8009186 <pack_left_shift_u16>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s3, 4u, 0xffu);
 8009ab0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009ab2:	22ff      	movs	r2, #255	@ 0xff
 8009ab4:	2104      	movs	r1, #4
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fb93 	bl	80091e2 <pack_right_shift_u16>
 8009abc:	4603      	mov	r3, r0
 8009abe:	4619      	mov	r1, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	430a      	orrs	r2, r1
 8009acc:	b2d2      	uxtb	r2, r2
 8009ace:	701a      	strb	r2, [r3, #0]
        t2s3 = (uint16_t)src_p->t2s3;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009ad6:	857b      	strh	r3, [r7, #42]	@ 0x2a
        dst_p[2] |= pack_left_shift_u16(t2s3, 0u, 0xffu);
 8009ad8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009ada:	22ff      	movs	r2, #255	@ 0xff
 8009adc:	2100      	movs	r1, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff fb51 	bl	8009186 <pack_left_shift_u16>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3302      	adds	r3, #2
 8009aec:	781a      	ldrb	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3302      	adds	r3, #2
 8009af2:	430a      	orrs	r2, r1
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s3, 8u, 0x0fu);
 8009af8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009afa:	220f      	movs	r2, #15
 8009afc:	2108      	movs	r1, #8
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff fb6f 	bl	80091e2 <pack_right_shift_u16>
 8009b04:	4603      	mov	r3, r0
 8009b06:	4619      	mov	r1, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	3303      	adds	r3, #3
 8009b0c:	781a      	ldrb	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3303      	adds	r3, #3
 8009b12:	430a      	orrs	r2, r1
 8009b14:	b2d2      	uxtb	r2, r2
 8009b16:	701a      	strb	r2, [r3, #0]
        t3s3 = (uint16_t)src_p->t3s3;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8009b1e:	853b      	strh	r3, [r7, #40]	@ 0x28
        dst_p[3] |= pack_left_shift_u16(t3s3, 4u, 0xf0u);
 8009b20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b22:	22f0      	movs	r2, #240	@ 0xf0
 8009b24:	2104      	movs	r1, #4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fb2d 	bl	8009186 <pack_left_shift_u16>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3303      	adds	r3, #3
 8009b34:	781a      	ldrb	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3303      	adds	r3, #3
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	b2d2      	uxtb	r2, r2
 8009b3e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s3, 4u, 0xffu);
 8009b40:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b42:	22ff      	movs	r2, #255	@ 0xff
 8009b44:	2104      	movs	r1, #4
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fb4b 	bl	80091e2 <pack_right_shift_u16>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4619      	mov	r1, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3304      	adds	r3, #4
 8009b54:	781a      	ldrb	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3304      	adds	r3, #4
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	b2d2      	uxtb	r2, r2
 8009b5e:	701a      	strb	r2, [r3, #0]
        t4s3 = (uint16_t)src_p->t4s3;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 8009b66:	84fb      	strh	r3, [r7, #38]	@ 0x26
        dst_p[5] |= pack_left_shift_u16(t4s3, 0u, 0xffu);
 8009b68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b6a:	22ff      	movs	r2, #255	@ 0xff
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff fb09 	bl	8009186 <pack_left_shift_u16>
 8009b74:	4603      	mov	r3, r0
 8009b76:	4619      	mov	r1, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3305      	adds	r3, #5
 8009b7c:	781a      	ldrb	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3305      	adds	r3, #5
 8009b82:	430a      	orrs	r2, r1
 8009b84:	b2d2      	uxtb	r2, r2
 8009b86:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s3, 8u, 0x0fu);
 8009b88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b8a:	220f      	movs	r2, #15
 8009b8c:	2108      	movs	r1, #8
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fb27 	bl	80091e2 <pack_right_shift_u16>
 8009b94:	4603      	mov	r3, r0
 8009b96:	4619      	mov	r1, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3306      	adds	r3, #6
 8009b9c:	781a      	ldrb	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3306      	adds	r3, #6
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	701a      	strb	r2, [r3, #0]
        t5s3 = (uint16_t)src_p->t5s3;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	@ 0x66
 8009bae:	84bb      	strh	r3, [r7, #36]	@ 0x24
        dst_p[6] |= pack_left_shift_u16(t5s3, 4u, 0xf0u);
 8009bb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009bb2:	22f0      	movs	r2, #240	@ 0xf0
 8009bb4:	2104      	movs	r1, #4
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff fae5 	bl	8009186 <pack_left_shift_u16>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3306      	adds	r3, #6
 8009bc4:	781a      	ldrb	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3306      	adds	r3, #6
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	b2d2      	uxtb	r2, r2
 8009bce:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s3, 4u, 0xffu);
 8009bd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009bd2:	22ff      	movs	r2, #255	@ 0xff
 8009bd4:	2104      	movs	r1, #4
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7ff fb03 	bl	80091e2 <pack_right_shift_u16>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	4619      	mov	r1, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3307      	adds	r3, #7
 8009be4:	781a      	ldrb	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3307      	adds	r3, #7
 8009bea:	430a      	orrs	r2, r1
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	701a      	strb	r2, [r3, #0]
        break;
 8009bf0:	f000 bebb 	b.w	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 3:
        t1s4 = (uint16_t)src_p->t1s4;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009bfa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        dst_p[0] |= pack_left_shift_u16(t1s4, 4u, 0xf0u);
 8009bfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bfe:	22f0      	movs	r2, #240	@ 0xf0
 8009c00:	2104      	movs	r1, #4
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff fabf 	bl	8009186 <pack_left_shift_u16>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s4, 4u, 0xffu);
 8009c18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009c1a:	22ff      	movs	r2, #255	@ 0xff
 8009c1c:	2104      	movs	r1, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fadf 	bl	80091e2 <pack_right_shift_u16>
 8009c24:	4603      	mov	r3, r0
 8009c26:	4619      	mov	r1, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	781a      	ldrb	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	430a      	orrs	r2, r1
 8009c34:	b2d2      	uxtb	r2, r2
 8009c36:	701a      	strb	r2, [r3, #0]
        t2s4 = (uint16_t)src_p->t2s4;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009c3e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        dst_p[2] |= pack_left_shift_u16(t2s4, 0u, 0xffu);
 8009c40:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009c42:	22ff      	movs	r2, #255	@ 0xff
 8009c44:	2100      	movs	r1, #0
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fa9d 	bl	8009186 <pack_left_shift_u16>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3302      	adds	r3, #2
 8009c54:	781a      	ldrb	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3302      	adds	r3, #2
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	b2d2      	uxtb	r2, r2
 8009c5e:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s4, 8u, 0x0fu);
 8009c60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009c62:	220f      	movs	r2, #15
 8009c64:	2108      	movs	r1, #8
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff fabb 	bl	80091e2 <pack_right_shift_u16>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	4619      	mov	r1, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3303      	adds	r3, #3
 8009c74:	781a      	ldrb	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3303      	adds	r3, #3
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	701a      	strb	r2, [r3, #0]
        t3s4 = (uint16_t)src_p->t3s4;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8009c86:	867b      	strh	r3, [r7, #50]	@ 0x32
        dst_p[3] |= pack_left_shift_u16(t3s4, 4u, 0xf0u);
 8009c88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009c8a:	22f0      	movs	r2, #240	@ 0xf0
 8009c8c:	2104      	movs	r1, #4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff fa79 	bl	8009186 <pack_left_shift_u16>
 8009c94:	4603      	mov	r3, r0
 8009c96:	4619      	mov	r1, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3303      	adds	r3, #3
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3303      	adds	r3, #3
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	b2d2      	uxtb	r2, r2
 8009ca6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s4, 4u, 0xffu);
 8009ca8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009caa:	22ff      	movs	r2, #255	@ 0xff
 8009cac:	2104      	movs	r1, #4
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fa97 	bl	80091e2 <pack_right_shift_u16>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	781a      	ldrb	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	b2d2      	uxtb	r2, r2
 8009cc6:	701a      	strb	r2, [r3, #0]
        t4s4 = (uint16_t)src_p->t4s4;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 8009cce:	863b      	strh	r3, [r7, #48]	@ 0x30
        dst_p[5] |= pack_left_shift_u16(t4s4, 0u, 0xffu);
 8009cd0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009cd2:	22ff      	movs	r2, #255	@ 0xff
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7ff fa55 	bl	8009186 <pack_left_shift_u16>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3305      	adds	r3, #5
 8009ce4:	781a      	ldrb	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3305      	adds	r3, #5
 8009cea:	430a      	orrs	r2, r1
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s4, 8u, 0x0fu);
 8009cf0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009cf2:	220f      	movs	r2, #15
 8009cf4:	2108      	movs	r1, #8
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff fa73 	bl	80091e2 <pack_right_shift_u16>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	4619      	mov	r1, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3306      	adds	r3, #6
 8009d04:	781a      	ldrb	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3306      	adds	r3, #6
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]
        t5s4 = (uint16_t)src_p->t5s4;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	@ 0x68
 8009d16:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        dst_p[6] |= pack_left_shift_u16(t5s4, 4u, 0xf0u);
 8009d18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009d1a:	22f0      	movs	r2, #240	@ 0xf0
 8009d1c:	2104      	movs	r1, #4
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fa31 	bl	8009186 <pack_left_shift_u16>
 8009d24:	4603      	mov	r3, r0
 8009d26:	4619      	mov	r1, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3306      	adds	r3, #6
 8009d2c:	781a      	ldrb	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3306      	adds	r3, #6
 8009d32:	430a      	orrs	r2, r1
 8009d34:	b2d2      	uxtb	r2, r2
 8009d36:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s4, 4u, 0xffu);
 8009d38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009d3a:	22ff      	movs	r2, #255	@ 0xff
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff fa4f 	bl	80091e2 <pack_right_shift_u16>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4619      	mov	r1, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3307      	adds	r3, #7
 8009d4c:	781a      	ldrb	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3307      	adds	r3, #7
 8009d52:	430a      	orrs	r2, r1
 8009d54:	b2d2      	uxtb	r2, r2
 8009d56:	701a      	strb	r2, [r3, #0]
        break;
 8009d58:	f000 be07 	b.w	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 4:
        t1s5 = (uint16_t)src_p->t1s5;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009d62:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        dst_p[0] |= pack_left_shift_u16(t1s5, 4u, 0xf0u);
 8009d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d6a:	22f0      	movs	r2, #240	@ 0xf0
 8009d6c:	2104      	movs	r1, #4
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff fa09 	bl	8009186 <pack_left_shift_u16>
 8009d74:	4603      	mov	r3, r0
 8009d76:	461a      	mov	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s5, 4u, 0xffu);
 8009d84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d88:	22ff      	movs	r2, #255	@ 0xff
 8009d8a:	2104      	movs	r1, #4
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff fa28 	bl	80091e2 <pack_right_shift_u16>
 8009d92:	4603      	mov	r3, r0
 8009d94:	4619      	mov	r1, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	430a      	orrs	r2, r1
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
        t2s5 = (uint16_t)src_p->t2s5;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8009dac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        dst_p[2] |= pack_left_shift_u16(t2s5, 0u, 0xffu);
 8009dae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009db0:	22ff      	movs	r2, #255	@ 0xff
 8009db2:	2100      	movs	r1, #0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff f9e6 	bl	8009186 <pack_left_shift_u16>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3302      	adds	r3, #2
 8009dc2:	781a      	ldrb	r2, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3302      	adds	r3, #2
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s5, 8u, 0x0fu);
 8009dce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009dd0:	220f      	movs	r2, #15
 8009dd2:	2108      	movs	r1, #8
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff fa04 	bl	80091e2 <pack_right_shift_u16>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	4619      	mov	r1, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3303      	adds	r3, #3
 8009de2:	781a      	ldrb	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3303      	adds	r3, #3
 8009de8:	430a      	orrs	r2, r1
 8009dea:	b2d2      	uxtb	r2, r2
 8009dec:	701a      	strb	r2, [r3, #0]
        t3s5 = (uint16_t)src_p->t3s5;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 8009df4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
        dst_p[3] |= pack_left_shift_u16(t3s5, 4u, 0xf0u);
 8009df6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009df8:	22f0      	movs	r2, #240	@ 0xf0
 8009dfa:	2104      	movs	r1, #4
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff f9c2 	bl	8009186 <pack_left_shift_u16>
 8009e02:	4603      	mov	r3, r0
 8009e04:	4619      	mov	r1, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3303      	adds	r3, #3
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	3303      	adds	r3, #3
 8009e10:	430a      	orrs	r2, r1
 8009e12:	b2d2      	uxtb	r2, r2
 8009e14:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s5, 4u, 0xffu);
 8009e16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009e18:	22ff      	movs	r2, #255	@ 0xff
 8009e1a:	2104      	movs	r1, #4
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff f9e0 	bl	80091e2 <pack_right_shift_u16>
 8009e22:	4603      	mov	r3, r0
 8009e24:	4619      	mov	r1, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	781a      	ldrb	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	430a      	orrs	r2, r1
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]
        t4s5 = (uint16_t)src_p->t4s5;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	@ 0x52
 8009e3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        dst_p[5] |= pack_left_shift_u16(t4s5, 0u, 0xffu);
 8009e3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009e40:	22ff      	movs	r2, #255	@ 0xff
 8009e42:	2100      	movs	r1, #0
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff f99e 	bl	8009186 <pack_left_shift_u16>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3305      	adds	r3, #5
 8009e52:	781a      	ldrb	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3305      	adds	r3, #5
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	b2d2      	uxtb	r2, r2
 8009e5c:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s5, 8u, 0x0fu);
 8009e5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009e60:	220f      	movs	r2, #15
 8009e62:	2108      	movs	r1, #8
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff f9bc 	bl	80091e2 <pack_right_shift_u16>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3306      	adds	r3, #6
 8009e72:	781a      	ldrb	r2, [r3, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3306      	adds	r3, #6
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	b2d2      	uxtb	r2, r2
 8009e7c:	701a      	strb	r2, [r3, #0]
        t5s5 = (uint16_t)src_p->t5s5;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	@ 0x6a
 8009e84:	873b      	strh	r3, [r7, #56]	@ 0x38
        dst_p[6] |= pack_left_shift_u16(t5s5, 4u, 0xf0u);
 8009e86:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009e88:	22f0      	movs	r2, #240	@ 0xf0
 8009e8a:	2104      	movs	r1, #4
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7ff f97a 	bl	8009186 <pack_left_shift_u16>
 8009e92:	4603      	mov	r3, r0
 8009e94:	4619      	mov	r1, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3306      	adds	r3, #6
 8009e9a:	781a      	ldrb	r2, [r3, #0]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3306      	adds	r3, #6
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s5, 4u, 0xffu);
 8009ea6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009ea8:	22ff      	movs	r2, #255	@ 0xff
 8009eaa:	2104      	movs	r1, #4
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7ff f998 	bl	80091e2 <pack_right_shift_u16>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3307      	adds	r3, #7
 8009eba:	781a      	ldrb	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3307      	adds	r3, #7
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
        break;
 8009ec6:	f000 bd50 	b.w	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 5:
        t1s6 = (uint16_t)src_p->t1s6;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009ed0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        dst_p[0] |= pack_left_shift_u16(t1s6, 4u, 0xf0u);
 8009ed4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009ed8:	22f0      	movs	r2, #240	@ 0xf0
 8009eda:	2104      	movs	r1, #4
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff f952 	bl	8009186 <pack_left_shift_u16>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s6, 4u, 0xffu);
 8009ef2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009ef6:	22ff      	movs	r2, #255	@ 0xff
 8009ef8:	2104      	movs	r1, #4
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff f971 	bl	80091e2 <pack_right_shift_u16>
 8009f00:	4603      	mov	r3, r0
 8009f02:	4619      	mov	r1, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3301      	adds	r3, #1
 8009f08:	781a      	ldrb	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
        t2s6 = (uint16_t)src_p->t2s6;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8009f1a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        dst_p[2] |= pack_left_shift_u16(t2s6, 0u, 0xffu);
 8009f1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009f22:	22ff      	movs	r2, #255	@ 0xff
 8009f24:	2100      	movs	r1, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff f92d 	bl	8009186 <pack_left_shift_u16>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	4619      	mov	r1, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3302      	adds	r3, #2
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3302      	adds	r3, #2
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	b2d2      	uxtb	r2, r2
 8009f3e:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s6, 8u, 0x0fu);
 8009f40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009f44:	220f      	movs	r2, #15
 8009f46:	2108      	movs	r1, #8
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7ff f94a 	bl	80091e2 <pack_right_shift_u16>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	4619      	mov	r1, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3303      	adds	r3, #3
 8009f56:	781a      	ldrb	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3303      	adds	r3, #3
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	701a      	strb	r2, [r3, #0]
        t3s6 = (uint16_t)src_p->t3s6;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009f68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        dst_p[3] |= pack_left_shift_u16(t3s6, 4u, 0xf0u);
 8009f6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009f70:	22f0      	movs	r2, #240	@ 0xf0
 8009f72:	2104      	movs	r1, #4
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff f906 	bl	8009186 <pack_left_shift_u16>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3303      	adds	r3, #3
 8009f82:	781a      	ldrb	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3303      	adds	r3, #3
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	b2d2      	uxtb	r2, r2
 8009f8c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s6, 4u, 0xffu);
 8009f8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009f92:	22ff      	movs	r2, #255	@ 0xff
 8009f94:	2104      	movs	r1, #4
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff f923 	bl	80091e2 <pack_right_shift_u16>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	781a      	ldrb	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	430a      	orrs	r2, r1
 8009fac:	b2d2      	uxtb	r2, r2
 8009fae:	701a      	strb	r2, [r3, #0]
        t4s6 = (uint16_t)src_p->t4s6;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	@ 0x54
 8009fb6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        dst_p[5] |= pack_left_shift_u16(t4s6, 0u, 0xffu);
 8009fba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009fbe:	22ff      	movs	r2, #255	@ 0xff
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7ff f8df 	bl	8009186 <pack_left_shift_u16>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	4619      	mov	r1, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3305      	adds	r3, #5
 8009fd0:	781a      	ldrb	r2, [r3, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3305      	adds	r3, #5
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	b2d2      	uxtb	r2, r2
 8009fda:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s6, 8u, 0x0fu);
 8009fdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009fe0:	220f      	movs	r2, #15
 8009fe2:	2108      	movs	r1, #8
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff f8fc 	bl	80091e2 <pack_right_shift_u16>
 8009fea:	4603      	mov	r3, r0
 8009fec:	4619      	mov	r1, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3306      	adds	r3, #6
 8009ff2:	781a      	ldrb	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3306      	adds	r3, #6
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	b2d2      	uxtb	r2, r2
 8009ffc:	701a      	strb	r2, [r3, #0]
        t5s6 = (uint16_t)src_p->t5s6;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	@ 0x6c
 800a004:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        dst_p[6] |= pack_left_shift_u16(t5s6, 4u, 0xf0u);
 800a008:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a00c:	22f0      	movs	r2, #240	@ 0xf0
 800a00e:	2104      	movs	r1, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff f8b8 	bl	8009186 <pack_left_shift_u16>
 800a016:	4603      	mov	r3, r0
 800a018:	4619      	mov	r1, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3306      	adds	r3, #6
 800a01e:	781a      	ldrb	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3306      	adds	r3, #6
 800a024:	430a      	orrs	r2, r1
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s6, 4u, 0xffu);
 800a02a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a02e:	22ff      	movs	r2, #255	@ 0xff
 800a030:	2104      	movs	r1, #4
 800a032:	4618      	mov	r0, r3
 800a034:	f7ff f8d5 	bl	80091e2 <pack_right_shift_u16>
 800a038:	4603      	mov	r3, r0
 800a03a:	4619      	mov	r1, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3307      	adds	r3, #7
 800a040:	781a      	ldrb	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3307      	adds	r3, #7
 800a046:	430a      	orrs	r2, r1
 800a048:	b2d2      	uxtb	r2, r2
 800a04a:	701a      	strb	r2, [r3, #0]
        break;
 800a04c:	f000 bc8d 	b.w	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 6:
        t1s7 = (uint16_t)src_p->t1s7;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a056:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        dst_p[0] |= pack_left_shift_u16(t1s7, 4u, 0xf0u);
 800a05a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a05e:	22f0      	movs	r2, #240	@ 0xf0
 800a060:	2104      	movs	r1, #4
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff f88f 	bl	8009186 <pack_left_shift_u16>
 800a068:	4603      	mov	r3, r0
 800a06a:	461a      	mov	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	4313      	orrs	r3, r2
 800a072:	b2da      	uxtb	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s7, 4u, 0xffu);
 800a078:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a07c:	22ff      	movs	r2, #255	@ 0xff
 800a07e:	2104      	movs	r1, #4
 800a080:	4618      	mov	r0, r3
 800a082:	f7ff f8ae 	bl	80091e2 <pack_right_shift_u16>
 800a086:	4603      	mov	r3, r0
 800a088:	4619      	mov	r1, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3301      	adds	r3, #1
 800a08e:	781a      	ldrb	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3301      	adds	r3, #1
 800a094:	430a      	orrs	r2, r1
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]
        t2s7 = (uint16_t)src_p->t2s7;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800a0a0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
        dst_p[2] |= pack_left_shift_u16(t2s7, 0u, 0xffu);
 800a0a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a0a8:	22ff      	movs	r2, #255	@ 0xff
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff f86a 	bl	8009186 <pack_left_shift_u16>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	781a      	ldrb	r2, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3302      	adds	r3, #2
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s7, 8u, 0x0fu);
 800a0c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a0ca:	220f      	movs	r2, #15
 800a0cc:	2108      	movs	r1, #8
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff f887 	bl	80091e2 <pack_right_shift_u16>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3303      	adds	r3, #3
 800a0dc:	781a      	ldrb	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3303      	adds	r3, #3
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	b2d2      	uxtb	r2, r2
 800a0e6:	701a      	strb	r2, [r3, #0]
        t3s7 = (uint16_t)src_p->t3s7;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a0ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        dst_p[3] |= pack_left_shift_u16(t3s7, 4u, 0xf0u);
 800a0f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800a0f6:	22f0      	movs	r2, #240	@ 0xf0
 800a0f8:	2104      	movs	r1, #4
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff f843 	bl	8009186 <pack_left_shift_u16>
 800a100:	4603      	mov	r3, r0
 800a102:	4619      	mov	r1, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3303      	adds	r3, #3
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3303      	adds	r3, #3
 800a10e:	430a      	orrs	r2, r1
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s7, 4u, 0xffu);
 800a114:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800a118:	22ff      	movs	r2, #255	@ 0xff
 800a11a:	2104      	movs	r1, #4
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff f860 	bl	80091e2 <pack_right_shift_u16>
 800a122:	4603      	mov	r3, r0
 800a124:	4619      	mov	r1, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3304      	adds	r3, #4
 800a12a:	781a      	ldrb	r2, [r3, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3304      	adds	r3, #4
 800a130:	430a      	orrs	r2, r1
 800a132:	b2d2      	uxtb	r2, r2
 800a134:	701a      	strb	r2, [r3, #0]
        t4s7 = (uint16_t)src_p->t4s7;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	@ 0x56
 800a13c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        dst_p[5] |= pack_left_shift_u16(t4s7, 0u, 0xffu);
 800a140:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a144:	22ff      	movs	r2, #255	@ 0xff
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff f81c 	bl	8009186 <pack_left_shift_u16>
 800a14e:	4603      	mov	r3, r0
 800a150:	4619      	mov	r1, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3305      	adds	r3, #5
 800a156:	781a      	ldrb	r2, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	3305      	adds	r3, #5
 800a15c:	430a      	orrs	r2, r1
 800a15e:	b2d2      	uxtb	r2, r2
 800a160:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s7, 8u, 0x0fu);
 800a162:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a166:	220f      	movs	r2, #15
 800a168:	2108      	movs	r1, #8
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff f839 	bl	80091e2 <pack_right_shift_u16>
 800a170:	4603      	mov	r3, r0
 800a172:	4619      	mov	r1, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3306      	adds	r3, #6
 800a178:	781a      	ldrb	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3306      	adds	r3, #6
 800a17e:	430a      	orrs	r2, r1
 800a180:	b2d2      	uxtb	r2, r2
 800a182:	701a      	strb	r2, [r3, #0]
        t5s7 = (uint16_t)src_p->t5s7;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	@ 0x6e
 800a18a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        dst_p[6] |= pack_left_shift_u16(t5s7, 4u, 0xf0u);
 800a18e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a192:	22f0      	movs	r2, #240	@ 0xf0
 800a194:	2104      	movs	r1, #4
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fff5 	bl	8009186 <pack_left_shift_u16>
 800a19c:	4603      	mov	r3, r0
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3306      	adds	r3, #6
 800a1a4:	781a      	ldrb	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3306      	adds	r3, #6
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	b2d2      	uxtb	r2, r2
 800a1ae:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s7, 4u, 0xffu);
 800a1b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a1b4:	22ff      	movs	r2, #255	@ 0xff
 800a1b6:	2104      	movs	r1, #4
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff f812 	bl	80091e2 <pack_right_shift_u16>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3307      	adds	r3, #7
 800a1c6:	781a      	ldrb	r2, [r3, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3307      	adds	r3, #7
 800a1cc:	430a      	orrs	r2, r1
 800a1ce:	b2d2      	uxtb	r2, r2
 800a1d0:	701a      	strb	r2, [r3, #0]
        break;
 800a1d2:	e3ca      	b.n	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 7:
        t1s8 = (uint16_t)src_p->t1s8;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a1da:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        dst_p[0] |= pack_left_shift_u16(t1s8, 4u, 0xf0u);
 800a1de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800a1e2:	22f0      	movs	r2, #240	@ 0xf0
 800a1e4:	2104      	movs	r1, #4
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe ffcd 	bl	8009186 <pack_left_shift_u16>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s8, 4u, 0xffu);
 800a1fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800a200:	22ff      	movs	r2, #255	@ 0xff
 800a202:	2104      	movs	r1, #4
 800a204:	4618      	mov	r0, r3
 800a206:	f7fe ffec 	bl	80091e2 <pack_right_shift_u16>
 800a20a:	4603      	mov	r3, r0
 800a20c:	4619      	mov	r1, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3301      	adds	r3, #1
 800a212:	781a      	ldrb	r2, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3301      	adds	r3, #1
 800a218:	430a      	orrs	r2, r1
 800a21a:	b2d2      	uxtb	r2, r2
 800a21c:	701a      	strb	r2, [r3, #0]
        t2s8 = (uint16_t)src_p->t2s8;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800a224:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
        dst_p[2] |= pack_left_shift_u16(t2s8, 0u, 0xffu);
 800a228:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800a22c:	22ff      	movs	r2, #255	@ 0xff
 800a22e:	2100      	movs	r1, #0
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe ffa8 	bl	8009186 <pack_left_shift_u16>
 800a236:	4603      	mov	r3, r0
 800a238:	4619      	mov	r1, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3302      	adds	r3, #2
 800a23e:	781a      	ldrb	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3302      	adds	r3, #2
 800a244:	430a      	orrs	r2, r1
 800a246:	b2d2      	uxtb	r2, r2
 800a248:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s8, 8u, 0x0fu);
 800a24a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800a24e:	220f      	movs	r2, #15
 800a250:	2108      	movs	r1, #8
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe ffc5 	bl	80091e2 <pack_right_shift_u16>
 800a258:	4603      	mov	r3, r0
 800a25a:	4619      	mov	r1, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3303      	adds	r3, #3
 800a260:	781a      	ldrb	r2, [r3, #0]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3303      	adds	r3, #3
 800a266:	430a      	orrs	r2, r1
 800a268:	b2d2      	uxtb	r2, r2
 800a26a:	701a      	strb	r2, [r3, #0]
        t3s8 = (uint16_t)src_p->t3s8;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a272:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
        dst_p[3] |= pack_left_shift_u16(t3s8, 4u, 0xf0u);
 800a276:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800a27a:	22f0      	movs	r2, #240	@ 0xf0
 800a27c:	2104      	movs	r1, #4
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe ff81 	bl	8009186 <pack_left_shift_u16>
 800a284:	4603      	mov	r3, r0
 800a286:	4619      	mov	r1, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3303      	adds	r3, #3
 800a28c:	781a      	ldrb	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3303      	adds	r3, #3
 800a292:	430a      	orrs	r2, r1
 800a294:	b2d2      	uxtb	r2, r2
 800a296:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s8, 4u, 0xffu);
 800a298:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800a29c:	22ff      	movs	r2, #255	@ 0xff
 800a29e:	2104      	movs	r1, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe ff9e 	bl	80091e2 <pack_right_shift_u16>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	781a      	ldrb	r2, [r3, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	701a      	strb	r2, [r3, #0]
        t4s8 = (uint16_t)src_p->t4s8;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 800a2c0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
        dst_p[5] |= pack_left_shift_u16(t4s8, 0u, 0xffu);
 800a2c4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800a2c8:	22ff      	movs	r2, #255	@ 0xff
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe ff5a 	bl	8009186 <pack_left_shift_u16>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3305      	adds	r3, #5
 800a2da:	781a      	ldrb	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3305      	adds	r3, #5
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s8, 8u, 0x0fu);
 800a2e6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800a2ea:	220f      	movs	r2, #15
 800a2ec:	2108      	movs	r1, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fe ff77 	bl	80091e2 <pack_right_shift_u16>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3306      	adds	r3, #6
 800a2fc:	781a      	ldrb	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3306      	adds	r3, #6
 800a302:	430a      	orrs	r2, r1
 800a304:	b2d2      	uxtb	r2, r2
 800a306:	701a      	strb	r2, [r3, #0]
        t5s8 = (uint16_t)src_p->t5s8;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	@ 0x70
 800a30e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        dst_p[6] |= pack_left_shift_u16(t5s8, 4u, 0xf0u);
 800a312:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a316:	22f0      	movs	r2, #240	@ 0xf0
 800a318:	2104      	movs	r1, #4
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe ff33 	bl	8009186 <pack_left_shift_u16>
 800a320:	4603      	mov	r3, r0
 800a322:	4619      	mov	r1, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3306      	adds	r3, #6
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3306      	adds	r3, #6
 800a32e:	430a      	orrs	r2, r1
 800a330:	b2d2      	uxtb	r2, r2
 800a332:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s8, 4u, 0xffu);
 800a334:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a338:	22ff      	movs	r2, #255	@ 0xff
 800a33a:	2104      	movs	r1, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe ff50 	bl	80091e2 <pack_right_shift_u16>
 800a342:	4603      	mov	r3, r0
 800a344:	4619      	mov	r1, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3307      	adds	r3, #7
 800a34a:	781a      	ldrb	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3307      	adds	r3, #7
 800a350:	430a      	orrs	r2, r1
 800a352:	b2d2      	uxtb	r2, r2
 800a354:	701a      	strb	r2, [r3, #0]
        break;
 800a356:	e308      	b.n	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 8:
        t1s9 = (uint16_t)src_p->t1s9;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a35e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        dst_p[0] |= pack_left_shift_u16(t1s9, 4u, 0xf0u);
 800a362:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a366:	22f0      	movs	r2, #240	@ 0xf0
 800a368:	2104      	movs	r1, #4
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe ff0b 	bl	8009186 <pack_left_shift_u16>
 800a370:	4603      	mov	r3, r0
 800a372:	461a      	mov	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	4313      	orrs	r3, r2
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s9, 4u, 0xffu);
 800a380:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a384:	22ff      	movs	r2, #255	@ 0xff
 800a386:	2104      	movs	r1, #4
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe ff2a 	bl	80091e2 <pack_right_shift_u16>
 800a38e:	4603      	mov	r3, r0
 800a390:	4619      	mov	r1, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3301      	adds	r3, #1
 800a396:	781a      	ldrb	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3301      	adds	r3, #1
 800a39c:	430a      	orrs	r2, r1
 800a39e:	b2d2      	uxtb	r2, r2
 800a3a0:	701a      	strb	r2, [r3, #0]
        t2s9 = (uint16_t)src_p->t2s9;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800a3a8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        dst_p[2] |= pack_left_shift_u16(t2s9, 0u, 0xffu);
 800a3ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a3b0:	22ff      	movs	r2, #255	@ 0xff
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe fee6 	bl	8009186 <pack_left_shift_u16>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	4619      	mov	r1, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	781a      	ldrb	r2, [r3, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3302      	adds	r3, #2
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	b2d2      	uxtb	r2, r2
 800a3cc:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s9, 8u, 0x0fu);
 800a3ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a3d2:	220f      	movs	r2, #15
 800a3d4:	2108      	movs	r1, #8
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe ff03 	bl	80091e2 <pack_right_shift_u16>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	4619      	mov	r1, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3303      	adds	r3, #3
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3303      	adds	r3, #3
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	701a      	strb	r2, [r3, #0]
        t3s9 = (uint16_t)src_p->t3s9;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800a3f6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
        dst_p[3] |= pack_left_shift_u16(t3s9, 4u, 0xf0u);
 800a3fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a3fe:	22f0      	movs	r2, #240	@ 0xf0
 800a400:	2104      	movs	r1, #4
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe febf 	bl	8009186 <pack_left_shift_u16>
 800a408:	4603      	mov	r3, r0
 800a40a:	4619      	mov	r1, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3303      	adds	r3, #3
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3303      	adds	r3, #3
 800a416:	430a      	orrs	r2, r1
 800a418:	b2d2      	uxtb	r2, r2
 800a41a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s9, 4u, 0xffu);
 800a41c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a420:	22ff      	movs	r2, #255	@ 0xff
 800a422:	2104      	movs	r1, #4
 800a424:	4618      	mov	r0, r3
 800a426:	f7fe fedc 	bl	80091e2 <pack_right_shift_u16>
 800a42a:	4603      	mov	r3, r0
 800a42c:	4619      	mov	r1, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3304      	adds	r3, #4
 800a432:	781a      	ldrb	r2, [r3, #0]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3304      	adds	r3, #4
 800a438:	430a      	orrs	r2, r1
 800a43a:	b2d2      	uxtb	r2, r2
 800a43c:	701a      	strb	r2, [r3, #0]
        t4s9 = (uint16_t)src_p->t4s9;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	@ 0x5a
 800a444:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        dst_p[5] |= pack_left_shift_u16(t4s9, 0u, 0xffu);
 800a448:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a44c:	22ff      	movs	r2, #255	@ 0xff
 800a44e:	2100      	movs	r1, #0
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe fe98 	bl	8009186 <pack_left_shift_u16>
 800a456:	4603      	mov	r3, r0
 800a458:	4619      	mov	r1, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3305      	adds	r3, #5
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3305      	adds	r3, #5
 800a464:	430a      	orrs	r2, r1
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s9, 8u, 0x0fu);
 800a46a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a46e:	220f      	movs	r2, #15
 800a470:	2108      	movs	r1, #8
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe feb5 	bl	80091e2 <pack_right_shift_u16>
 800a478:	4603      	mov	r3, r0
 800a47a:	4619      	mov	r1, r3
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	3306      	adds	r3, #6
 800a480:	781a      	ldrb	r2, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3306      	adds	r3, #6
 800a486:	430a      	orrs	r2, r1
 800a488:	b2d2      	uxtb	r2, r2
 800a48a:	701a      	strb	r2, [r3, #0]
        t5s9 = (uint16_t)src_p->t5s9;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	@ 0x72
 800a492:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        dst_p[6] |= pack_left_shift_u16(t5s9, 4u, 0xf0u);
 800a496:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800a49a:	22f0      	movs	r2, #240	@ 0xf0
 800a49c:	2104      	movs	r1, #4
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fe71 	bl	8009186 <pack_left_shift_u16>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3306      	adds	r3, #6
 800a4ac:	781a      	ldrb	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3306      	adds	r3, #6
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	b2d2      	uxtb	r2, r2
 800a4b6:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s9, 4u, 0xffu);
 800a4b8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800a4bc:	22ff      	movs	r2, #255	@ 0xff
 800a4be:	2104      	movs	r1, #4
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fe fe8e 	bl	80091e2 <pack_right_shift_u16>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3307      	adds	r3, #7
 800a4ce:	781a      	ldrb	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3307      	adds	r3, #7
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	701a      	strb	r2, [r3, #0]
        break;
 800a4da:	e246      	b.n	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 9:
        t1s10 = (uint16_t)src_p->t1s10;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a4e2:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
        dst_p[0] |= pack_left_shift_u16(t1s10, 4u, 0xf0u);
 800a4e6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800a4ea:	22f0      	movs	r2, #240	@ 0xf0
 800a4ec:	2104      	movs	r1, #4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fe fe49 	bl	8009186 <pack_left_shift_u16>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s10, 4u, 0xffu);
 800a504:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800a508:	22ff      	movs	r2, #255	@ 0xff
 800a50a:	2104      	movs	r1, #4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fe fe68 	bl	80091e2 <pack_right_shift_u16>
 800a512:	4603      	mov	r3, r0
 800a514:	4619      	mov	r1, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3301      	adds	r3, #1
 800a51a:	781a      	ldrb	r2, [r3, #0]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	3301      	adds	r3, #1
 800a520:	430a      	orrs	r2, r1
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	701a      	strb	r2, [r3, #0]
        t2s10 = (uint16_t)src_p->t2s10;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800a52c:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
        dst_p[2] |= pack_left_shift_u16(t2s10, 0u, 0xffu);
 800a530:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 800a534:	22ff      	movs	r2, #255	@ 0xff
 800a536:	2100      	movs	r1, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fe24 	bl	8009186 <pack_left_shift_u16>
 800a53e:	4603      	mov	r3, r0
 800a540:	4619      	mov	r1, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3302      	adds	r3, #2
 800a546:	781a      	ldrb	r2, [r3, #0]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3302      	adds	r3, #2
 800a54c:	430a      	orrs	r2, r1
 800a54e:	b2d2      	uxtb	r2, r2
 800a550:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s10, 8u, 0x0fu);
 800a552:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 800a556:	220f      	movs	r2, #15
 800a558:	2108      	movs	r1, #8
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fe41 	bl	80091e2 <pack_right_shift_u16>
 800a560:	4603      	mov	r3, r0
 800a562:	4619      	mov	r1, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	3303      	adds	r3, #3
 800a568:	781a      	ldrb	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3303      	adds	r3, #3
 800a56e:	430a      	orrs	r2, r1
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	701a      	strb	r2, [r3, #0]
        t3s10 = (uint16_t)src_p->t3s10;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800a57a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        dst_p[3] |= pack_left_shift_u16(t3s10, 4u, 0xf0u);
 800a57e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a582:	22f0      	movs	r2, #240	@ 0xf0
 800a584:	2104      	movs	r1, #4
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe fdfd 	bl	8009186 <pack_left_shift_u16>
 800a58c:	4603      	mov	r3, r0
 800a58e:	4619      	mov	r1, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	3303      	adds	r3, #3
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3303      	adds	r3, #3
 800a59a:	430a      	orrs	r2, r1
 800a59c:	b2d2      	uxtb	r2, r2
 800a59e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s10, 4u, 0xffu);
 800a5a0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a5a4:	22ff      	movs	r2, #255	@ 0xff
 800a5a6:	2104      	movs	r1, #4
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe fe1a 	bl	80091e2 <pack_right_shift_u16>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	781a      	ldrb	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	701a      	strb	r2, [r3, #0]
        t4s10 = (uint16_t)src_p->t4s10;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 800a5c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        dst_p[5] |= pack_left_shift_u16(t4s10, 0u, 0xffu);
 800a5cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a5d0:	22ff      	movs	r2, #255	@ 0xff
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe fdd6 	bl	8009186 <pack_left_shift_u16>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4619      	mov	r1, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3305      	adds	r3, #5
 800a5e2:	781a      	ldrb	r2, [r3, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	3305      	adds	r3, #5
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	b2d2      	uxtb	r2, r2
 800a5ec:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s10, 8u, 0x0fu);
 800a5ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a5f2:	220f      	movs	r2, #15
 800a5f4:	2108      	movs	r1, #8
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe fdf3 	bl	80091e2 <pack_right_shift_u16>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4619      	mov	r1, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3306      	adds	r3, #6
 800a604:	781a      	ldrb	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3306      	adds	r3, #6
 800a60a:	430a      	orrs	r2, r1
 800a60c:	b2d2      	uxtb	r2, r2
 800a60e:	701a      	strb	r2, [r3, #0]
        t5s10 = (uint16_t)src_p->t5s10;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800a616:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
        dst_p[6] |= pack_left_shift_u16(t5s10, 4u, 0xf0u);
 800a61a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a61e:	22f0      	movs	r2, #240	@ 0xf0
 800a620:	2104      	movs	r1, #4
 800a622:	4618      	mov	r0, r3
 800a624:	f7fe fdaf 	bl	8009186 <pack_left_shift_u16>
 800a628:	4603      	mov	r3, r0
 800a62a:	4619      	mov	r1, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	3306      	adds	r3, #6
 800a630:	781a      	ldrb	r2, [r3, #0]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3306      	adds	r3, #6
 800a636:	430a      	orrs	r2, r1
 800a638:	b2d2      	uxtb	r2, r2
 800a63a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s10, 4u, 0xffu);
 800a63c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a640:	22ff      	movs	r2, #255	@ 0xff
 800a642:	2104      	movs	r1, #4
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe fdcc 	bl	80091e2 <pack_right_shift_u16>
 800a64a:	4603      	mov	r3, r0
 800a64c:	4619      	mov	r1, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3307      	adds	r3, #7
 800a652:	781a      	ldrb	r2, [r3, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3307      	adds	r3, #7
 800a658:	430a      	orrs	r2, r1
 800a65a:	b2d2      	uxtb	r2, r2
 800a65c:	701a      	strb	r2, [r3, #0]
        break;
 800a65e:	e184      	b.n	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 10:
        t1s11 = (uint16_t)src_p->t1s11;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a666:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        dst_p[0] |= pack_left_shift_u16(t1s11, 4u, 0xf0u);
 800a66a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800a66e:	22f0      	movs	r2, #240	@ 0xf0
 800a670:	2104      	movs	r1, #4
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fd87 	bl	8009186 <pack_left_shift_u16>
 800a678:	4603      	mov	r3, r0
 800a67a:	461a      	mov	r2, r3
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	4313      	orrs	r3, r2
 800a682:	b2da      	uxtb	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s11, 4u, 0xffu);
 800a688:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800a68c:	22ff      	movs	r2, #255	@ 0xff
 800a68e:	2104      	movs	r1, #4
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe fda6 	bl	80091e2 <pack_right_shift_u16>
 800a696:	4603      	mov	r3, r0
 800a698:	4619      	mov	r1, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3301      	adds	r3, #1
 800a69e:	781a      	ldrb	r2, [r3, #0]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]
        t2s11 = (uint16_t)src_p->t2s11;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800a6b0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        dst_p[2] |= pack_left_shift_u16(t2s11, 0u, 0xffu);
 800a6b4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a6b8:	22ff      	movs	r2, #255	@ 0xff
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fe fd62 	bl	8009186 <pack_left_shift_u16>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	781a      	ldrb	r2, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	b2d2      	uxtb	r2, r2
 800a6d4:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s11, 8u, 0x0fu);
 800a6d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a6da:	220f      	movs	r2, #15
 800a6dc:	2108      	movs	r1, #8
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fe fd7f 	bl	80091e2 <pack_right_shift_u16>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3303      	adds	r3, #3
 800a6ec:	781a      	ldrb	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3303      	adds	r3, #3
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	b2d2      	uxtb	r2, r2
 800a6f6:	701a      	strb	r2, [r3, #0]
        t3s11 = (uint16_t)src_p->t3s11;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800a6fe:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
        dst_p[3] |= pack_left_shift_u16(t3s11, 4u, 0xf0u);
 800a702:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800a706:	22f0      	movs	r2, #240	@ 0xf0
 800a708:	2104      	movs	r1, #4
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe fd3b 	bl	8009186 <pack_left_shift_u16>
 800a710:	4603      	mov	r3, r0
 800a712:	4619      	mov	r1, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	3303      	adds	r3, #3
 800a718:	781a      	ldrb	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3303      	adds	r3, #3
 800a71e:	430a      	orrs	r2, r1
 800a720:	b2d2      	uxtb	r2, r2
 800a722:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s11, 4u, 0xffu);
 800a724:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800a728:	22ff      	movs	r2, #255	@ 0xff
 800a72a:	2104      	movs	r1, #4
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe fd58 	bl	80091e2 <pack_right_shift_u16>
 800a732:	4603      	mov	r3, r0
 800a734:	4619      	mov	r1, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3304      	adds	r3, #4
 800a73a:	781a      	ldrb	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3304      	adds	r3, #4
 800a740:	430a      	orrs	r2, r1
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	701a      	strb	r2, [r3, #0]
        t4s11 = (uint16_t)src_p->t4s11;
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	@ 0x5e
 800a74c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        dst_p[5] |= pack_left_shift_u16(t4s11, 0u, 0xffu);
 800a750:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800a754:	22ff      	movs	r2, #255	@ 0xff
 800a756:	2100      	movs	r1, #0
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fe fd14 	bl	8009186 <pack_left_shift_u16>
 800a75e:	4603      	mov	r3, r0
 800a760:	4619      	mov	r1, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3305      	adds	r3, #5
 800a766:	781a      	ldrb	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3305      	adds	r3, #5
 800a76c:	430a      	orrs	r2, r1
 800a76e:	b2d2      	uxtb	r2, r2
 800a770:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s11, 8u, 0x0fu);
 800a772:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800a776:	220f      	movs	r2, #15
 800a778:	2108      	movs	r1, #8
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe fd31 	bl	80091e2 <pack_right_shift_u16>
 800a780:	4603      	mov	r3, r0
 800a782:	4619      	mov	r1, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	3306      	adds	r3, #6
 800a788:	781a      	ldrb	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3306      	adds	r3, #6
 800a78e:	430a      	orrs	r2, r1
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	701a      	strb	r2, [r3, #0]
        t5s11 = (uint16_t)src_p->t5s11;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 800a79a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        dst_p[6] |= pack_left_shift_u16(t5s11, 4u, 0xf0u);
 800a79e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800a7a2:	22f0      	movs	r2, #240	@ 0xf0
 800a7a4:	2104      	movs	r1, #4
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fced 	bl	8009186 <pack_left_shift_u16>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3306      	adds	r3, #6
 800a7b4:	781a      	ldrb	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3306      	adds	r3, #6
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	b2d2      	uxtb	r2, r2
 800a7be:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s11, 4u, 0xffu);
 800a7c0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800a7c4:	22ff      	movs	r2, #255	@ 0xff
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fe fd0a 	bl	80091e2 <pack_right_shift_u16>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	3307      	adds	r3, #7
 800a7d6:	781a      	ldrb	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3307      	adds	r3, #7
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	b2d2      	uxtb	r2, r2
 800a7e0:	701a      	strb	r2, [r3, #0]
        break;
 800a7e2:	e0c2      	b.n	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    case 11:
        t1s12 = (uint16_t)src_p->t1s12;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a7ea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
        dst_p[0] |= pack_left_shift_u16(t1s12, 4u, 0xf0u);
 800a7ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a7f2:	22f0      	movs	r2, #240	@ 0xf0
 800a7f4:	2104      	movs	r1, #4
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fe fcc5 	bl	8009186 <pack_left_shift_u16>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	461a      	mov	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	4313      	orrs	r3, r2
 800a806:	b2da      	uxtb	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s12, 4u, 0xffu);
 800a80c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a810:	22ff      	movs	r2, #255	@ 0xff
 800a812:	2104      	movs	r1, #4
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe fce4 	bl	80091e2 <pack_right_shift_u16>
 800a81a:	4603      	mov	r3, r0
 800a81c:	4619      	mov	r1, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3301      	adds	r3, #1
 800a822:	781a      	ldrb	r2, [r3, #0]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	3301      	adds	r3, #1
 800a828:	430a      	orrs	r2, r1
 800a82a:	b2d2      	uxtb	r2, r2
 800a82c:	701a      	strb	r2, [r3, #0]
        t2s12 = (uint16_t)src_p->t2s12;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a834:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
        dst_p[2] |= pack_left_shift_u16(t2s12, 0u, 0xffu);
 800a838:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800a83c:	22ff      	movs	r2, #255	@ 0xff
 800a83e:	2100      	movs	r1, #0
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe fca0 	bl	8009186 <pack_left_shift_u16>
 800a846:	4603      	mov	r3, r0
 800a848:	4619      	mov	r1, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3302      	adds	r3, #2
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3302      	adds	r3, #2
 800a854:	430a      	orrs	r2, r1
 800a856:	b2d2      	uxtb	r2, r2
 800a858:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s12, 8u, 0x0fu);
 800a85a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800a85e:	220f      	movs	r2, #15
 800a860:	2108      	movs	r1, #8
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fcbd 	bl	80091e2 <pack_right_shift_u16>
 800a868:	4603      	mov	r3, r0
 800a86a:	4619      	mov	r1, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3303      	adds	r3, #3
 800a870:	781a      	ldrb	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3303      	adds	r3, #3
 800a876:	430a      	orrs	r2, r1
 800a878:	b2d2      	uxtb	r2, r2
 800a87a:	701a      	strb	r2, [r3, #0]
        t3s12 = (uint16_t)src_p->t3s12;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800a882:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
        dst_p[3] |= pack_left_shift_u16(t3s12, 4u, 0xf0u);
 800a886:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800a88a:	22f0      	movs	r2, #240	@ 0xf0
 800a88c:	2104      	movs	r1, #4
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe fc79 	bl	8009186 <pack_left_shift_u16>
 800a894:	4603      	mov	r3, r0
 800a896:	4619      	mov	r1, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3303      	adds	r3, #3
 800a89c:	781a      	ldrb	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3303      	adds	r3, #3
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	b2d2      	uxtb	r2, r2
 800a8a6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s12, 4u, 0xffu);
 800a8a8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800a8ac:	22ff      	movs	r2, #255	@ 0xff
 800a8ae:	2104      	movs	r1, #4
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fc96 	bl	80091e2 <pack_right_shift_u16>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3304      	adds	r3, #4
 800a8be:	781a      	ldrb	r2, [r3, #0]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	b2d2      	uxtb	r2, r2
 800a8c8:	701a      	strb	r2, [r3, #0]
        t4s12 = (uint16_t)src_p->t4s12;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 800a8d0:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
        dst_p[5] |= pack_left_shift_u16(t4s12, 0u, 0xffu);
 800a8d4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800a8d8:	22ff      	movs	r2, #255	@ 0xff
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe fc52 	bl	8009186 <pack_left_shift_u16>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3305      	adds	r3, #5
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	3305      	adds	r3, #5
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	b2d2      	uxtb	r2, r2
 800a8f4:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s12, 8u, 0x0fu);
 800a8f6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800a8fa:	220f      	movs	r2, #15
 800a8fc:	2108      	movs	r1, #8
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe fc6f 	bl	80091e2 <pack_right_shift_u16>
 800a904:	4603      	mov	r3, r0
 800a906:	4619      	mov	r1, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	3306      	adds	r3, #6
 800a90c:	781a      	ldrb	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3306      	adds	r3, #6
 800a912:	430a      	orrs	r2, r1
 800a914:	b2d2      	uxtb	r2, r2
 800a916:	701a      	strb	r2, [r3, #0]
        t5s12 = (uint16_t)src_p->t5s12;
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 800a91e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
        dst_p[6] |= pack_left_shift_u16(t5s12, 4u, 0xf0u);
 800a922:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800a926:	22f0      	movs	r2, #240	@ 0xf0
 800a928:	2104      	movs	r1, #4
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe fc2b 	bl	8009186 <pack_left_shift_u16>
 800a930:	4603      	mov	r3, r0
 800a932:	4619      	mov	r1, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3306      	adds	r3, #6
 800a938:	781a      	ldrb	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3306      	adds	r3, #6
 800a93e:	430a      	orrs	r2, r1
 800a940:	b2d2      	uxtb	r2, r2
 800a942:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s12, 4u, 0xffu);
 800a944:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800a948:	22ff      	movs	r2, #255	@ 0xff
 800a94a:	2104      	movs	r1, #4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fe fc48 	bl	80091e2 <pack_right_shift_u16>
 800a952:	4603      	mov	r3, r0
 800a954:	4619      	mov	r1, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3307      	adds	r3, #7
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	3307      	adds	r3, #7
 800a960:	430a      	orrs	r2, r1
 800a962:	b2d2      	uxtb	r2, r2
 800a964:	701a      	strb	r2, [r3, #0]
        break;
 800a966:	e000      	b.n	800a96a <can1_ams_cell_temperatures_pack+0x1232>

    default:
        break;
 800a968:	bf00      	nop
    }

    return (8);
 800a96a:	2308      	movs	r3, #8
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3788      	adds	r7, #136	@ 0x88
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	0000      	movs	r0, r0
	...

0800a978 <can1_ams_cell_temperatures_t1s1_encode>:
{
    return (value <= 15u);
}

int16_t can1_ams_cell_temperatures_t1s1_encode(double value)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800a982:	f04f 0200 	mov.w	r2, #0
 800a986:	4b10      	ldr	r3, [pc, #64]	@ (800a9c8 <can1_ams_cell_temperatures_t1s1_encode+0x50>)
 800a988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a98c:	f7f5 fc22 	bl	80001d4 <__adddf3>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4610      	mov	r0, r2
 800a996:	4619      	mov	r1, r3
 800a998:	a309      	add	r3, pc, #36	@ (adr r3, 800a9c0 <can1_ams_cell_temperatures_t1s1_encode+0x48>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f7f5 fef9 	bl	8000794 <__aeabi_ddiv>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	f7f6 f863 	bl	8000a74 <__aeabi_d2iz>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	b21b      	sxth	r3, r3
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	f3af 8000 	nop.w
 800a9c0:	757928e1 	.word	0x757928e1
 800a9c4:	3fa9018e 	.word	0x3fa9018e
 800a9c8:	40240000 	.word	0x40240000
 800a9cc:	00000000 	.word	0x00000000

0800a9d0 <can1_ams_cell_temperatures_t1s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s2_encode(double value)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	4b10      	ldr	r3, [pc, #64]	@ (800aa20 <can1_ams_cell_temperatures_t1s2_encode+0x50>)
 800a9e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9e4:	f7f5 fbf6 	bl	80001d4 <__adddf3>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	a309      	add	r3, pc, #36	@ (adr r3, 800aa18 <can1_ams_cell_temperatures_t1s2_encode+0x48>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f7f5 fecd 	bl	8000794 <__aeabi_ddiv>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4610      	mov	r0, r2
 800aa00:	4619      	mov	r1, r3
 800aa02:	f7f6 f837 	bl	8000a74 <__aeabi_d2iz>
 800aa06:	4603      	mov	r3, r0
 800aa08:	b21b      	sxth	r3, r3
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	f3af 8000 	nop.w
 800aa18:	757928e1 	.word	0x757928e1
 800aa1c:	3fa9018e 	.word	0x3fa9018e
 800aa20:	40240000 	.word	0x40240000
 800aa24:	00000000 	.word	0x00000000

0800aa28 <can1_ams_cell_temperatures_t1s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s3_encode(double value)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	4b10      	ldr	r3, [pc, #64]	@ (800aa78 <can1_ams_cell_temperatures_t1s3_encode+0x50>)
 800aa38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa3c:	f7f5 fbca 	bl	80001d4 <__adddf3>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4610      	mov	r0, r2
 800aa46:	4619      	mov	r1, r3
 800aa48:	a309      	add	r3, pc, #36	@ (adr r3, 800aa70 <can1_ams_cell_temperatures_t1s3_encode+0x48>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f5 fea1 	bl	8000794 <__aeabi_ddiv>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	4610      	mov	r0, r2
 800aa58:	4619      	mov	r1, r3
 800aa5a:	f7f6 f80b 	bl	8000a74 <__aeabi_d2iz>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	b21b      	sxth	r3, r3
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	f3af 8000 	nop.w
 800aa70:	757928e1 	.word	0x757928e1
 800aa74:	3fa9018e 	.word	0x3fa9018e
 800aa78:	40240000 	.word	0x40240000
 800aa7c:	00000000 	.word	0x00000000

0800aa80 <can1_ams_cell_temperatures_t1s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s4_encode(double value)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	4b10      	ldr	r3, [pc, #64]	@ (800aad0 <can1_ams_cell_temperatures_t1s4_encode+0x50>)
 800aa90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa94:	f7f5 fb9e 	bl	80001d4 <__adddf3>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	a309      	add	r3, pc, #36	@ (adr r3, 800aac8 <can1_ams_cell_temperatures_t1s4_encode+0x48>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fe75 	bl	8000794 <__aeabi_ddiv>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4610      	mov	r0, r2
 800aab0:	4619      	mov	r1, r3
 800aab2:	f7f5 ffdf 	bl	8000a74 <__aeabi_d2iz>
 800aab6:	4603      	mov	r3, r0
 800aab8:	b21b      	sxth	r3, r3
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	f3af 8000 	nop.w
 800aac8:	757928e1 	.word	0x757928e1
 800aacc:	3fa9018e 	.word	0x3fa9018e
 800aad0:	40240000 	.word	0x40240000
 800aad4:	00000000 	.word	0x00000000

0800aad8 <can1_ams_cell_temperatures_t1s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s5_encode(double value)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	4b10      	ldr	r3, [pc, #64]	@ (800ab28 <can1_ams_cell_temperatures_t1s5_encode+0x50>)
 800aae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaec:	f7f5 fb72 	bl	80001d4 <__adddf3>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	a309      	add	r3, pc, #36	@ (adr r3, 800ab20 <can1_ams_cell_temperatures_t1s5_encode+0x48>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	f7f5 fe49 	bl	8000794 <__aeabi_ddiv>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4610      	mov	r0, r2
 800ab08:	4619      	mov	r1, r3
 800ab0a:	f7f5 ffb3 	bl	8000a74 <__aeabi_d2iz>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	b21b      	sxth	r3, r3
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w
 800ab20:	757928e1 	.word	0x757928e1
 800ab24:	3fa9018e 	.word	0x3fa9018e
 800ab28:	40240000 	.word	0x40240000
 800ab2c:	00000000 	.word	0x00000000

0800ab30 <can1_ams_cell_temperatures_t1s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s6_encode(double value)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ab3a:	f04f 0200 	mov.w	r2, #0
 800ab3e:	4b10      	ldr	r3, [pc, #64]	@ (800ab80 <can1_ams_cell_temperatures_t1s6_encode+0x50>)
 800ab40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab44:	f7f5 fb46 	bl	80001d4 <__adddf3>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	4619      	mov	r1, r3
 800ab50:	a309      	add	r3, pc, #36	@ (adr r3, 800ab78 <can1_ams_cell_temperatures_t1s6_encode+0x48>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f7f5 fe1d 	bl	8000794 <__aeabi_ddiv>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4610      	mov	r0, r2
 800ab60:	4619      	mov	r1, r3
 800ab62:	f7f5 ff87 	bl	8000a74 <__aeabi_d2iz>
 800ab66:	4603      	mov	r3, r0
 800ab68:	b21b      	sxth	r3, r3
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	f3af 8000 	nop.w
 800ab78:	757928e1 	.word	0x757928e1
 800ab7c:	3fa9018e 	.word	0x3fa9018e
 800ab80:	40240000 	.word	0x40240000
 800ab84:	00000000 	.word	0x00000000

0800ab88 <can1_ams_cell_temperatures_t1s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s7_encode(double value)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ab92:	f04f 0200 	mov.w	r2, #0
 800ab96:	4b10      	ldr	r3, [pc, #64]	@ (800abd8 <can1_ams_cell_temperatures_t1s7_encode+0x50>)
 800ab98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab9c:	f7f5 fb1a 	bl	80001d4 <__adddf3>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4610      	mov	r0, r2
 800aba6:	4619      	mov	r1, r3
 800aba8:	a309      	add	r3, pc, #36	@ (adr r3, 800abd0 <can1_ams_cell_temperatures_t1s7_encode+0x48>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f7f5 fdf1 	bl	8000794 <__aeabi_ddiv>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	4610      	mov	r0, r2
 800abb8:	4619      	mov	r1, r3
 800abba:	f7f5 ff5b 	bl	8000a74 <__aeabi_d2iz>
 800abbe:	4603      	mov	r3, r0
 800abc0:	b21b      	sxth	r3, r3
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w
 800abd0:	757928e1 	.word	0x757928e1
 800abd4:	3fa9018e 	.word	0x3fa9018e
 800abd8:	40240000 	.word	0x40240000
 800abdc:	00000000 	.word	0x00000000

0800abe0 <can1_ams_cell_temperatures_t1s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s8_encode(double value)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800abea:	f04f 0200 	mov.w	r2, #0
 800abee:	4b10      	ldr	r3, [pc, #64]	@ (800ac30 <can1_ams_cell_temperatures_t1s8_encode+0x50>)
 800abf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abf4:	f7f5 faee 	bl	80001d4 <__adddf3>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4610      	mov	r0, r2
 800abfe:	4619      	mov	r1, r3
 800ac00:	a309      	add	r3, pc, #36	@ (adr r3, 800ac28 <can1_ams_cell_temperatures_t1s8_encode+0x48>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 fdc5 	bl	8000794 <__aeabi_ddiv>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4610      	mov	r0, r2
 800ac10:	4619      	mov	r1, r3
 800ac12:	f7f5 ff2f 	bl	8000a74 <__aeabi_d2iz>
 800ac16:	4603      	mov	r3, r0
 800ac18:	b21b      	sxth	r3, r3
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	f3af 8000 	nop.w
 800ac28:	757928e1 	.word	0x757928e1
 800ac2c:	3fa9018e 	.word	0x3fa9018e
 800ac30:	40240000 	.word	0x40240000
 800ac34:	00000000 	.word	0x00000000

0800ac38 <can1_ams_cell_temperatures_t1s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s9_encode(double value)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ac42:	f04f 0200 	mov.w	r2, #0
 800ac46:	4b10      	ldr	r3, [pc, #64]	@ (800ac88 <can1_ams_cell_temperatures_t1s9_encode+0x50>)
 800ac48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac4c:	f7f5 fac2 	bl	80001d4 <__adddf3>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4610      	mov	r0, r2
 800ac56:	4619      	mov	r1, r3
 800ac58:	a309      	add	r3, pc, #36	@ (adr r3, 800ac80 <can1_ams_cell_temperatures_t1s9_encode+0x48>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f7f5 fd99 	bl	8000794 <__aeabi_ddiv>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4610      	mov	r0, r2
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f7f5 ff03 	bl	8000a74 <__aeabi_d2iz>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	b21b      	sxth	r3, r3
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	f3af 8000 	nop.w
 800ac80:	757928e1 	.word	0x757928e1
 800ac84:	3fa9018e 	.word	0x3fa9018e
 800ac88:	40240000 	.word	0x40240000
 800ac8c:	00000000 	.word	0x00000000

0800ac90 <can1_ams_cell_temperatures_t1s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s10_encode(double value)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	4b10      	ldr	r3, [pc, #64]	@ (800ace0 <can1_ams_cell_temperatures_t1s10_encode+0x50>)
 800aca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aca4:	f7f5 fa96 	bl	80001d4 <__adddf3>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4610      	mov	r0, r2
 800acae:	4619      	mov	r1, r3
 800acb0:	a309      	add	r3, pc, #36	@ (adr r3, 800acd8 <can1_ams_cell_temperatures_t1s10_encode+0x48>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 fd6d 	bl	8000794 <__aeabi_ddiv>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4610      	mov	r0, r2
 800acc0:	4619      	mov	r1, r3
 800acc2:	f7f5 fed7 	bl	8000a74 <__aeabi_d2iz>
 800acc6:	4603      	mov	r3, r0
 800acc8:	b21b      	sxth	r3, r3
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	f3af 8000 	nop.w
 800acd8:	757928e1 	.word	0x757928e1
 800acdc:	3fa9018e 	.word	0x3fa9018e
 800ace0:	40240000 	.word	0x40240000
 800ace4:	00000000 	.word	0x00000000

0800ace8 <can1_ams_cell_temperatures_t1s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s11_encode(double value)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800acf2:	f04f 0200 	mov.w	r2, #0
 800acf6:	4b10      	ldr	r3, [pc, #64]	@ (800ad38 <can1_ams_cell_temperatures_t1s11_encode+0x50>)
 800acf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acfc:	f7f5 fa6a 	bl	80001d4 <__adddf3>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4610      	mov	r0, r2
 800ad06:	4619      	mov	r1, r3
 800ad08:	a309      	add	r3, pc, #36	@ (adr r3, 800ad30 <can1_ams_cell_temperatures_t1s11_encode+0x48>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f7f5 fd41 	bl	8000794 <__aeabi_ddiv>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	4610      	mov	r0, r2
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f7f5 feab 	bl	8000a74 <__aeabi_d2iz>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	b21b      	sxth	r3, r3
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	f3af 8000 	nop.w
 800ad30:	757928e1 	.word	0x757928e1
 800ad34:	3fa9018e 	.word	0x3fa9018e
 800ad38:	40240000 	.word	0x40240000
 800ad3c:	00000000 	.word	0x00000000

0800ad40 <can1_ams_cell_temperatures_t1s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s12_encode(double value)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ad4a:	f04f 0200 	mov.w	r2, #0
 800ad4e:	4b10      	ldr	r3, [pc, #64]	@ (800ad90 <can1_ams_cell_temperatures_t1s12_encode+0x50>)
 800ad50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad54:	f7f5 fa3e 	bl	80001d4 <__adddf3>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	4619      	mov	r1, r3
 800ad60:	a309      	add	r3, pc, #36	@ (adr r3, 800ad88 <can1_ams_cell_temperatures_t1s12_encode+0x48>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fd15 	bl	8000794 <__aeabi_ddiv>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4610      	mov	r0, r2
 800ad70:	4619      	mov	r1, r3
 800ad72:	f7f5 fe7f 	bl	8000a74 <__aeabi_d2iz>
 800ad76:	4603      	mov	r3, r0
 800ad78:	b21b      	sxth	r3, r3
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	f3af 8000 	nop.w
 800ad88:	757928e1 	.word	0x757928e1
 800ad8c:	3fa9018e 	.word	0x3fa9018e
 800ad90:	40240000 	.word	0x40240000
 800ad94:	00000000 	.word	0x00000000

0800ad98 <can1_ams_cell_temperatures_t2s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s2_encode(double value)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ada2:	f04f 0200 	mov.w	r2, #0
 800ada6:	4b10      	ldr	r3, [pc, #64]	@ (800ade8 <can1_ams_cell_temperatures_t2s2_encode+0x50>)
 800ada8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adac:	f7f5 fa12 	bl	80001d4 <__adddf3>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4610      	mov	r0, r2
 800adb6:	4619      	mov	r1, r3
 800adb8:	a309      	add	r3, pc, #36	@ (adr r3, 800ade0 <can1_ams_cell_temperatures_t2s2_encode+0x48>)
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	f7f5 fce9 	bl	8000794 <__aeabi_ddiv>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4610      	mov	r0, r2
 800adc8:	4619      	mov	r1, r3
 800adca:	f7f5 fe53 	bl	8000a74 <__aeabi_d2iz>
 800adce:	4603      	mov	r3, r0
 800add0:	b21b      	sxth	r3, r3
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w
 800ade0:	757928e1 	.word	0x757928e1
 800ade4:	3fa9018e 	.word	0x3fa9018e
 800ade8:	40240000 	.word	0x40240000
 800adec:	00000000 	.word	0x00000000

0800adf0 <can1_ams_cell_temperatures_t2s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s3_encode(double value)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	4b10      	ldr	r3, [pc, #64]	@ (800ae40 <can1_ams_cell_temperatures_t2s3_encode+0x50>)
 800ae00:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae04:	f7f5 f9e6 	bl	80001d4 <__adddf3>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	4619      	mov	r1, r3
 800ae10:	a309      	add	r3, pc, #36	@ (adr r3, 800ae38 <can1_ams_cell_temperatures_t2s3_encode+0x48>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	f7f5 fcbd 	bl	8000794 <__aeabi_ddiv>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	4610      	mov	r0, r2
 800ae20:	4619      	mov	r1, r3
 800ae22:	f7f5 fe27 	bl	8000a74 <__aeabi_d2iz>
 800ae26:	4603      	mov	r3, r0
 800ae28:	b21b      	sxth	r3, r3
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	f3af 8000 	nop.w
 800ae38:	757928e1 	.word	0x757928e1
 800ae3c:	3fa9018e 	.word	0x3fa9018e
 800ae40:	40240000 	.word	0x40240000
 800ae44:	00000000 	.word	0x00000000

0800ae48 <can1_ams_cell_temperatures_t2s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s4_encode(double value)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ae52:	f04f 0200 	mov.w	r2, #0
 800ae56:	4b10      	ldr	r3, [pc, #64]	@ (800ae98 <can1_ams_cell_temperatures_t2s4_encode+0x50>)
 800ae58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae5c:	f7f5 f9ba 	bl	80001d4 <__adddf3>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4610      	mov	r0, r2
 800ae66:	4619      	mov	r1, r3
 800ae68:	a309      	add	r3, pc, #36	@ (adr r3, 800ae90 <can1_ams_cell_temperatures_t2s4_encode+0x48>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	f7f5 fc91 	bl	8000794 <__aeabi_ddiv>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4610      	mov	r0, r2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f7f5 fdfb 	bl	8000a74 <__aeabi_d2iz>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	b21b      	sxth	r3, r3
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	f3af 8000 	nop.w
 800ae90:	757928e1 	.word	0x757928e1
 800ae94:	3fa9018e 	.word	0x3fa9018e
 800ae98:	40240000 	.word	0x40240000
 800ae9c:	00000000 	.word	0x00000000

0800aea0 <can1_ams_cell_temperatures_t2s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s5_encode(double value)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800aeaa:	f04f 0200 	mov.w	r2, #0
 800aeae:	4b10      	ldr	r3, [pc, #64]	@ (800aef0 <can1_ams_cell_temperatures_t2s5_encode+0x50>)
 800aeb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeb4:	f7f5 f98e 	bl	80001d4 <__adddf3>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4610      	mov	r0, r2
 800aebe:	4619      	mov	r1, r3
 800aec0:	a309      	add	r3, pc, #36	@ (adr r3, 800aee8 <can1_ams_cell_temperatures_t2s5_encode+0x48>)
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	f7f5 fc65 	bl	8000794 <__aeabi_ddiv>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4610      	mov	r0, r2
 800aed0:	4619      	mov	r1, r3
 800aed2:	f7f5 fdcf 	bl	8000a74 <__aeabi_d2iz>
 800aed6:	4603      	mov	r3, r0
 800aed8:	b21b      	sxth	r3, r3
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	f3af 8000 	nop.w
 800aee8:	757928e1 	.word	0x757928e1
 800aeec:	3fa9018e 	.word	0x3fa9018e
 800aef0:	40240000 	.word	0x40240000
 800aef4:	00000000 	.word	0x00000000

0800aef8 <can1_ams_cell_temperatures_t2s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s6_encode(double value)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800af02:	f04f 0200 	mov.w	r2, #0
 800af06:	4b10      	ldr	r3, [pc, #64]	@ (800af48 <can1_ams_cell_temperatures_t2s6_encode+0x50>)
 800af08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af0c:	f7f5 f962 	bl	80001d4 <__adddf3>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	4610      	mov	r0, r2
 800af16:	4619      	mov	r1, r3
 800af18:	a309      	add	r3, pc, #36	@ (adr r3, 800af40 <can1_ams_cell_temperatures_t2s6_encode+0x48>)
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f7f5 fc39 	bl	8000794 <__aeabi_ddiv>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	4610      	mov	r0, r2
 800af28:	4619      	mov	r1, r3
 800af2a:	f7f5 fda3 	bl	8000a74 <__aeabi_d2iz>
 800af2e:	4603      	mov	r3, r0
 800af30:	b21b      	sxth	r3, r3
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	f3af 8000 	nop.w
 800af40:	757928e1 	.word	0x757928e1
 800af44:	3fa9018e 	.word	0x3fa9018e
 800af48:	40240000 	.word	0x40240000
 800af4c:	00000000 	.word	0x00000000

0800af50 <can1_ams_cell_temperatures_t2s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s7_encode(double value)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800af5a:	f04f 0200 	mov.w	r2, #0
 800af5e:	4b10      	ldr	r3, [pc, #64]	@ (800afa0 <can1_ams_cell_temperatures_t2s7_encode+0x50>)
 800af60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af64:	f7f5 f936 	bl	80001d4 <__adddf3>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4610      	mov	r0, r2
 800af6e:	4619      	mov	r1, r3
 800af70:	a309      	add	r3, pc, #36	@ (adr r3, 800af98 <can1_ams_cell_temperatures_t2s7_encode+0x48>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 fc0d 	bl	8000794 <__aeabi_ddiv>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4610      	mov	r0, r2
 800af80:	4619      	mov	r1, r3
 800af82:	f7f5 fd77 	bl	8000a74 <__aeabi_d2iz>
 800af86:	4603      	mov	r3, r0
 800af88:	b21b      	sxth	r3, r3
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	f3af 8000 	nop.w
 800af98:	757928e1 	.word	0x757928e1
 800af9c:	3fa9018e 	.word	0x3fa9018e
 800afa0:	40240000 	.word	0x40240000
 800afa4:	00000000 	.word	0x00000000

0800afa8 <can1_ams_cell_temperatures_t2s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s8_encode(double value)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800afb2:	f04f 0200 	mov.w	r2, #0
 800afb6:	4b10      	ldr	r3, [pc, #64]	@ (800aff8 <can1_ams_cell_temperatures_t2s8_encode+0x50>)
 800afb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afbc:	f7f5 f90a 	bl	80001d4 <__adddf3>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	4610      	mov	r0, r2
 800afc6:	4619      	mov	r1, r3
 800afc8:	a309      	add	r3, pc, #36	@ (adr r3, 800aff0 <can1_ams_cell_temperatures_t2s8_encode+0x48>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 fbe1 	bl	8000794 <__aeabi_ddiv>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4610      	mov	r0, r2
 800afd8:	4619      	mov	r1, r3
 800afda:	f7f5 fd4b 	bl	8000a74 <__aeabi_d2iz>
 800afde:	4603      	mov	r3, r0
 800afe0:	b21b      	sxth	r3, r3
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	f3af 8000 	nop.w
 800aff0:	757928e1 	.word	0x757928e1
 800aff4:	3fa9018e 	.word	0x3fa9018e
 800aff8:	40240000 	.word	0x40240000
 800affc:	00000000 	.word	0x00000000

0800b000 <can1_ams_cell_temperatures_t2s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s9_encode(double value)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b00a:	f04f 0200 	mov.w	r2, #0
 800b00e:	4b10      	ldr	r3, [pc, #64]	@ (800b050 <can1_ams_cell_temperatures_t2s9_encode+0x50>)
 800b010:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b014:	f7f5 f8de 	bl	80001d4 <__adddf3>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4610      	mov	r0, r2
 800b01e:	4619      	mov	r1, r3
 800b020:	a309      	add	r3, pc, #36	@ (adr r3, 800b048 <can1_ams_cell_temperatures_t2s9_encode+0x48>)
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f7f5 fbb5 	bl	8000794 <__aeabi_ddiv>
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	4610      	mov	r0, r2
 800b030:	4619      	mov	r1, r3
 800b032:	f7f5 fd1f 	bl	8000a74 <__aeabi_d2iz>
 800b036:	4603      	mov	r3, r0
 800b038:	b21b      	sxth	r3, r3
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	f3af 8000 	nop.w
 800b048:	757928e1 	.word	0x757928e1
 800b04c:	3fa9018e 	.word	0x3fa9018e
 800b050:	40240000 	.word	0x40240000
 800b054:	00000000 	.word	0x00000000

0800b058 <can1_ams_cell_temperatures_t2s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s10_encode(double value)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b062:	f04f 0200 	mov.w	r2, #0
 800b066:	4b10      	ldr	r3, [pc, #64]	@ (800b0a8 <can1_ams_cell_temperatures_t2s10_encode+0x50>)
 800b068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b06c:	f7f5 f8b2 	bl	80001d4 <__adddf3>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4610      	mov	r0, r2
 800b076:	4619      	mov	r1, r3
 800b078:	a309      	add	r3, pc, #36	@ (adr r3, 800b0a0 <can1_ams_cell_temperatures_t2s10_encode+0x48>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f7f5 fb89 	bl	8000794 <__aeabi_ddiv>
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	4610      	mov	r0, r2
 800b088:	4619      	mov	r1, r3
 800b08a:	f7f5 fcf3 	bl	8000a74 <__aeabi_d2iz>
 800b08e:	4603      	mov	r3, r0
 800b090:	b21b      	sxth	r3, r3
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	f3af 8000 	nop.w
 800b0a0:	757928e1 	.word	0x757928e1
 800b0a4:	3fa9018e 	.word	0x3fa9018e
 800b0a8:	40240000 	.word	0x40240000
 800b0ac:	00000000 	.word	0x00000000

0800b0b0 <can1_ams_cell_temperatures_t2s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s11_encode(double value)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b0ba:	f04f 0200 	mov.w	r2, #0
 800b0be:	4b10      	ldr	r3, [pc, #64]	@ (800b100 <can1_ams_cell_temperatures_t2s11_encode+0x50>)
 800b0c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0c4:	f7f5 f886 	bl	80001d4 <__adddf3>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	a309      	add	r3, pc, #36	@ (adr r3, 800b0f8 <can1_ams_cell_temperatures_t2s11_encode+0x48>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f7f5 fb5d 	bl	8000794 <__aeabi_ddiv>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4610      	mov	r0, r2
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	f7f5 fcc7 	bl	8000a74 <__aeabi_d2iz>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	b21b      	sxth	r3, r3
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	f3af 8000 	nop.w
 800b0f8:	757928e1 	.word	0x757928e1
 800b0fc:	3fa9018e 	.word	0x3fa9018e
 800b100:	40240000 	.word	0x40240000
 800b104:	00000000 	.word	0x00000000

0800b108 <can1_ams_cell_temperatures_t2s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s12_encode(double value)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b112:	f04f 0200 	mov.w	r2, #0
 800b116:	4b10      	ldr	r3, [pc, #64]	@ (800b158 <can1_ams_cell_temperatures_t2s12_encode+0x50>)
 800b118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b11c:	f7f5 f85a 	bl	80001d4 <__adddf3>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4610      	mov	r0, r2
 800b126:	4619      	mov	r1, r3
 800b128:	a309      	add	r3, pc, #36	@ (adr r3, 800b150 <can1_ams_cell_temperatures_t2s12_encode+0x48>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	f7f5 fb31 	bl	8000794 <__aeabi_ddiv>
 800b132:	4602      	mov	r2, r0
 800b134:	460b      	mov	r3, r1
 800b136:	4610      	mov	r0, r2
 800b138:	4619      	mov	r1, r3
 800b13a:	f7f5 fc9b 	bl	8000a74 <__aeabi_d2iz>
 800b13e:	4603      	mov	r3, r0
 800b140:	b21b      	sxth	r3, r3
}
 800b142:	4618      	mov	r0, r3
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	f3af 8000 	nop.w
 800b150:	757928e1 	.word	0x757928e1
 800b154:	3fa9018e 	.word	0x3fa9018e
 800b158:	40240000 	.word	0x40240000
 800b15c:	00000000 	.word	0x00000000

0800b160 <can1_ams_cell_temperatures_t3s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s2_encode(double value)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	4b10      	ldr	r3, [pc, #64]	@ (800b1b0 <can1_ams_cell_temperatures_t3s2_encode+0x50>)
 800b170:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b174:	f7f5 f82e 	bl	80001d4 <__adddf3>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4610      	mov	r0, r2
 800b17e:	4619      	mov	r1, r3
 800b180:	a309      	add	r3, pc, #36	@ (adr r3, 800b1a8 <can1_ams_cell_temperatures_t3s2_encode+0x48>)
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f7f5 fb05 	bl	8000794 <__aeabi_ddiv>
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	4610      	mov	r0, r2
 800b190:	4619      	mov	r1, r3
 800b192:	f7f5 fc6f 	bl	8000a74 <__aeabi_d2iz>
 800b196:	4603      	mov	r3, r0
 800b198:	b21b      	sxth	r3, r3
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	f3af 8000 	nop.w
 800b1a8:	757928e1 	.word	0x757928e1
 800b1ac:	3fa9018e 	.word	0x3fa9018e
 800b1b0:	40240000 	.word	0x40240000
 800b1b4:	00000000 	.word	0x00000000

0800b1b8 <can1_ams_cell_temperatures_t3s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s3_encode(double value)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	4b10      	ldr	r3, [pc, #64]	@ (800b208 <can1_ams_cell_temperatures_t3s3_encode+0x50>)
 800b1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1cc:	f7f5 f802 	bl	80001d4 <__adddf3>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	a309      	add	r3, pc, #36	@ (adr r3, 800b200 <can1_ams_cell_temperatures_t3s3_encode+0x48>)
 800b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1de:	f7f5 fad9 	bl	8000794 <__aeabi_ddiv>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	f7f5 fc43 	bl	8000a74 <__aeabi_d2iz>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	b21b      	sxth	r3, r3
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	f3af 8000 	nop.w
 800b200:	757928e1 	.word	0x757928e1
 800b204:	3fa9018e 	.word	0x3fa9018e
 800b208:	40240000 	.word	0x40240000
 800b20c:	00000000 	.word	0x00000000

0800b210 <can1_ams_cell_temperatures_t3s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s4_encode(double value)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b21a:	f04f 0200 	mov.w	r2, #0
 800b21e:	4b10      	ldr	r3, [pc, #64]	@ (800b260 <can1_ams_cell_temperatures_t3s4_encode+0x50>)
 800b220:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b224:	f7f4 ffd6 	bl	80001d4 <__adddf3>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4610      	mov	r0, r2
 800b22e:	4619      	mov	r1, r3
 800b230:	a309      	add	r3, pc, #36	@ (adr r3, 800b258 <can1_ams_cell_temperatures_t3s4_encode+0x48>)
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f7f5 faad 	bl	8000794 <__aeabi_ddiv>
 800b23a:	4602      	mov	r2, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	4610      	mov	r0, r2
 800b240:	4619      	mov	r1, r3
 800b242:	f7f5 fc17 	bl	8000a74 <__aeabi_d2iz>
 800b246:	4603      	mov	r3, r0
 800b248:	b21b      	sxth	r3, r3
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	f3af 8000 	nop.w
 800b258:	757928e1 	.word	0x757928e1
 800b25c:	3fa9018e 	.word	0x3fa9018e
 800b260:	40240000 	.word	0x40240000
 800b264:	00000000 	.word	0x00000000

0800b268 <can1_ams_cell_temperatures_t3s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s5_encode(double value)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b272:	f04f 0200 	mov.w	r2, #0
 800b276:	4b10      	ldr	r3, [pc, #64]	@ (800b2b8 <can1_ams_cell_temperatures_t3s5_encode+0x50>)
 800b278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b27c:	f7f4 ffaa 	bl	80001d4 <__adddf3>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4610      	mov	r0, r2
 800b286:	4619      	mov	r1, r3
 800b288:	a309      	add	r3, pc, #36	@ (adr r3, 800b2b0 <can1_ams_cell_temperatures_t3s5_encode+0x48>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f5 fa81 	bl	8000794 <__aeabi_ddiv>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4610      	mov	r0, r2
 800b298:	4619      	mov	r1, r3
 800b29a:	f7f5 fbeb 	bl	8000a74 <__aeabi_d2iz>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	b21b      	sxth	r3, r3
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	f3af 8000 	nop.w
 800b2b0:	757928e1 	.word	0x757928e1
 800b2b4:	3fa9018e 	.word	0x3fa9018e
 800b2b8:	40240000 	.word	0x40240000
 800b2bc:	00000000 	.word	0x00000000

0800b2c0 <can1_ams_cell_temperatures_t3s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s6_encode(double value)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b2ca:	f04f 0200 	mov.w	r2, #0
 800b2ce:	4b10      	ldr	r3, [pc, #64]	@ (800b310 <can1_ams_cell_temperatures_t3s6_encode+0x50>)
 800b2d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2d4:	f7f4 ff7e 	bl	80001d4 <__adddf3>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4619      	mov	r1, r3
 800b2e0:	a309      	add	r3, pc, #36	@ (adr r3, 800b308 <can1_ams_cell_temperatures_t3s6_encode+0x48>)
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f7f5 fa55 	bl	8000794 <__aeabi_ddiv>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	f7f5 fbbf 	bl	8000a74 <__aeabi_d2iz>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	b21b      	sxth	r3, r3
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	f3af 8000 	nop.w
 800b308:	757928e1 	.word	0x757928e1
 800b30c:	3fa9018e 	.word	0x3fa9018e
 800b310:	40240000 	.word	0x40240000
 800b314:	00000000 	.word	0x00000000

0800b318 <can1_ams_cell_temperatures_t3s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s7_encode(double value)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b322:	f04f 0200 	mov.w	r2, #0
 800b326:	4b10      	ldr	r3, [pc, #64]	@ (800b368 <can1_ams_cell_temperatures_t3s7_encode+0x50>)
 800b328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b32c:	f7f4 ff52 	bl	80001d4 <__adddf3>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4610      	mov	r0, r2
 800b336:	4619      	mov	r1, r3
 800b338:	a309      	add	r3, pc, #36	@ (adr r3, 800b360 <can1_ams_cell_temperatures_t3s7_encode+0x48>)
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f7f5 fa29 	bl	8000794 <__aeabi_ddiv>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4610      	mov	r0, r2
 800b348:	4619      	mov	r1, r3
 800b34a:	f7f5 fb93 	bl	8000a74 <__aeabi_d2iz>
 800b34e:	4603      	mov	r3, r0
 800b350:	b21b      	sxth	r3, r3
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	f3af 8000 	nop.w
 800b360:	757928e1 	.word	0x757928e1
 800b364:	3fa9018e 	.word	0x3fa9018e
 800b368:	40240000 	.word	0x40240000
 800b36c:	00000000 	.word	0x00000000

0800b370 <can1_ams_cell_temperatures_t3s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s8_encode(double value)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b37a:	f04f 0200 	mov.w	r2, #0
 800b37e:	4b10      	ldr	r3, [pc, #64]	@ (800b3c0 <can1_ams_cell_temperatures_t3s8_encode+0x50>)
 800b380:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b384:	f7f4 ff26 	bl	80001d4 <__adddf3>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4610      	mov	r0, r2
 800b38e:	4619      	mov	r1, r3
 800b390:	a309      	add	r3, pc, #36	@ (adr r3, 800b3b8 <can1_ams_cell_temperatures_t3s8_encode+0x48>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f5 f9fd 	bl	8000794 <__aeabi_ddiv>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	4610      	mov	r0, r2
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	f7f5 fb67 	bl	8000a74 <__aeabi_d2iz>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	b21b      	sxth	r3, r3
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	f3af 8000 	nop.w
 800b3b8:	757928e1 	.word	0x757928e1
 800b3bc:	3fa9018e 	.word	0x3fa9018e
 800b3c0:	40240000 	.word	0x40240000
 800b3c4:	00000000 	.word	0x00000000

0800b3c8 <can1_ams_cell_temperatures_t3s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s9_encode(double value)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b3d2:	f04f 0200 	mov.w	r2, #0
 800b3d6:	4b10      	ldr	r3, [pc, #64]	@ (800b418 <can1_ams_cell_temperatures_t3s9_encode+0x50>)
 800b3d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3dc:	f7f4 fefa 	bl	80001d4 <__adddf3>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	a309      	add	r3, pc, #36	@ (adr r3, 800b410 <can1_ams_cell_temperatures_t3s9_encode+0x48>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	f7f5 f9d1 	bl	8000794 <__aeabi_ddiv>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	f7f5 fb3b 	bl	8000a74 <__aeabi_d2iz>
 800b3fe:	4603      	mov	r3, r0
 800b400:	b21b      	sxth	r3, r3
}
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	f3af 8000 	nop.w
 800b410:	757928e1 	.word	0x757928e1
 800b414:	3fa9018e 	.word	0x3fa9018e
 800b418:	40240000 	.word	0x40240000
 800b41c:	00000000 	.word	0x00000000

0800b420 <can1_ams_cell_temperatures_t3s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s10_encode(double value)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b42a:	f04f 0200 	mov.w	r2, #0
 800b42e:	4b10      	ldr	r3, [pc, #64]	@ (800b470 <can1_ams_cell_temperatures_t3s10_encode+0x50>)
 800b430:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b434:	f7f4 fece 	bl	80001d4 <__adddf3>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4610      	mov	r0, r2
 800b43e:	4619      	mov	r1, r3
 800b440:	a309      	add	r3, pc, #36	@ (adr r3, 800b468 <can1_ams_cell_temperatures_t3s10_encode+0x48>)
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f7f5 f9a5 	bl	8000794 <__aeabi_ddiv>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	4610      	mov	r0, r2
 800b450:	4619      	mov	r1, r3
 800b452:	f7f5 fb0f 	bl	8000a74 <__aeabi_d2iz>
 800b456:	4603      	mov	r3, r0
 800b458:	b21b      	sxth	r3, r3
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	f3af 8000 	nop.w
 800b468:	757928e1 	.word	0x757928e1
 800b46c:	3fa9018e 	.word	0x3fa9018e
 800b470:	40240000 	.word	0x40240000
 800b474:	00000000 	.word	0x00000000

0800b478 <can1_ams_cell_temperatures_t3s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s11_encode(double value)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	4b10      	ldr	r3, [pc, #64]	@ (800b4c8 <can1_ams_cell_temperatures_t3s11_encode+0x50>)
 800b488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b48c:	f7f4 fea2 	bl	80001d4 <__adddf3>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	4610      	mov	r0, r2
 800b496:	4619      	mov	r1, r3
 800b498:	a309      	add	r3, pc, #36	@ (adr r3, 800b4c0 <can1_ams_cell_temperatures_t3s11_encode+0x48>)
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f7f5 f979 	bl	8000794 <__aeabi_ddiv>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f7f5 fae3 	bl	8000a74 <__aeabi_d2iz>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	b21b      	sxth	r3, r3
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	f3af 8000 	nop.w
 800b4c0:	757928e1 	.word	0x757928e1
 800b4c4:	3fa9018e 	.word	0x3fa9018e
 800b4c8:	40240000 	.word	0x40240000
 800b4cc:	00000000 	.word	0x00000000

0800b4d0 <can1_ams_cell_temperatures_t3s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s12_encode(double value)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b4da:	f04f 0200 	mov.w	r2, #0
 800b4de:	4b10      	ldr	r3, [pc, #64]	@ (800b520 <can1_ams_cell_temperatures_t3s12_encode+0x50>)
 800b4e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4e4:	f7f4 fe76 	bl	80001d4 <__adddf3>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	a309      	add	r3, pc, #36	@ (adr r3, 800b518 <can1_ams_cell_temperatures_t3s12_encode+0x48>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f5 f94d 	bl	8000794 <__aeabi_ddiv>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4610      	mov	r0, r2
 800b500:	4619      	mov	r1, r3
 800b502:	f7f5 fab7 	bl	8000a74 <__aeabi_d2iz>
 800b506:	4603      	mov	r3, r0
 800b508:	b21b      	sxth	r3, r3
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3708      	adds	r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	f3af 8000 	nop.w
 800b518:	757928e1 	.word	0x757928e1
 800b51c:	3fa9018e 	.word	0x3fa9018e
 800b520:	40240000 	.word	0x40240000
 800b524:	00000000 	.word	0x00000000

0800b528 <can1_ams_cell_temperatures_t4s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s2_encode(double value)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b532:	f04f 0200 	mov.w	r2, #0
 800b536:	4b10      	ldr	r3, [pc, #64]	@ (800b578 <can1_ams_cell_temperatures_t4s2_encode+0x50>)
 800b538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b53c:	f7f4 fe4a 	bl	80001d4 <__adddf3>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4610      	mov	r0, r2
 800b546:	4619      	mov	r1, r3
 800b548:	a309      	add	r3, pc, #36	@ (adr r3, 800b570 <can1_ams_cell_temperatures_t4s2_encode+0x48>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f7f5 f921 	bl	8000794 <__aeabi_ddiv>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4610      	mov	r0, r2
 800b558:	4619      	mov	r1, r3
 800b55a:	f7f5 fa8b 	bl	8000a74 <__aeabi_d2iz>
 800b55e:	4603      	mov	r3, r0
 800b560:	b21b      	sxth	r3, r3
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	f3af 8000 	nop.w
 800b570:	757928e1 	.word	0x757928e1
 800b574:	3fa9018e 	.word	0x3fa9018e
 800b578:	40240000 	.word	0x40240000
 800b57c:	00000000 	.word	0x00000000

0800b580 <can1_ams_cell_temperatures_t4s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s3_encode(double value)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b58a:	f04f 0200 	mov.w	r2, #0
 800b58e:	4b10      	ldr	r3, [pc, #64]	@ (800b5d0 <can1_ams_cell_temperatures_t4s3_encode+0x50>)
 800b590:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b594:	f7f4 fe1e 	bl	80001d4 <__adddf3>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4610      	mov	r0, r2
 800b59e:	4619      	mov	r1, r3
 800b5a0:	a309      	add	r3, pc, #36	@ (adr r3, 800b5c8 <can1_ams_cell_temperatures_t4s3_encode+0x48>)
 800b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a6:	f7f5 f8f5 	bl	8000794 <__aeabi_ddiv>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	f7f5 fa5f 	bl	8000a74 <__aeabi_d2iz>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	b21b      	sxth	r3, r3
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	f3af 8000 	nop.w
 800b5c8:	757928e1 	.word	0x757928e1
 800b5cc:	3fa9018e 	.word	0x3fa9018e
 800b5d0:	40240000 	.word	0x40240000
 800b5d4:	00000000 	.word	0x00000000

0800b5d8 <can1_ams_cell_temperatures_t4s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s4_encode(double value)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b5e2:	f04f 0200 	mov.w	r2, #0
 800b5e6:	4b10      	ldr	r3, [pc, #64]	@ (800b628 <can1_ams_cell_temperatures_t4s4_encode+0x50>)
 800b5e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5ec:	f7f4 fdf2 	bl	80001d4 <__adddf3>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	a309      	add	r3, pc, #36	@ (adr r3, 800b620 <can1_ams_cell_temperatures_t4s4_encode+0x48>)
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f7f5 f8c9 	bl	8000794 <__aeabi_ddiv>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4610      	mov	r0, r2
 800b608:	4619      	mov	r1, r3
 800b60a:	f7f5 fa33 	bl	8000a74 <__aeabi_d2iz>
 800b60e:	4603      	mov	r3, r0
 800b610:	b21b      	sxth	r3, r3
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	f3af 8000 	nop.w
 800b620:	757928e1 	.word	0x757928e1
 800b624:	3fa9018e 	.word	0x3fa9018e
 800b628:	40240000 	.word	0x40240000
 800b62c:	00000000 	.word	0x00000000

0800b630 <can1_ams_cell_temperatures_t4s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s5_encode(double value)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b63a:	f04f 0200 	mov.w	r2, #0
 800b63e:	4b10      	ldr	r3, [pc, #64]	@ (800b680 <can1_ams_cell_temperatures_t4s5_encode+0x50>)
 800b640:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b644:	f7f4 fdc6 	bl	80001d4 <__adddf3>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4610      	mov	r0, r2
 800b64e:	4619      	mov	r1, r3
 800b650:	a309      	add	r3, pc, #36	@ (adr r3, 800b678 <can1_ams_cell_temperatures_t4s5_encode+0x48>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f7f5 f89d 	bl	8000794 <__aeabi_ddiv>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4610      	mov	r0, r2
 800b660:	4619      	mov	r1, r3
 800b662:	f7f5 fa07 	bl	8000a74 <__aeabi_d2iz>
 800b666:	4603      	mov	r3, r0
 800b668:	b21b      	sxth	r3, r3
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	f3af 8000 	nop.w
 800b678:	757928e1 	.word	0x757928e1
 800b67c:	3fa9018e 	.word	0x3fa9018e
 800b680:	40240000 	.word	0x40240000
 800b684:	00000000 	.word	0x00000000

0800b688 <can1_ams_cell_temperatures_t4s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s6_encode(double value)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b692:	f04f 0200 	mov.w	r2, #0
 800b696:	4b10      	ldr	r3, [pc, #64]	@ (800b6d8 <can1_ams_cell_temperatures_t4s6_encode+0x50>)
 800b698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b69c:	f7f4 fd9a 	bl	80001d4 <__adddf3>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	a309      	add	r3, pc, #36	@ (adr r3, 800b6d0 <can1_ams_cell_temperatures_t4s6_encode+0x48>)
 800b6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ae:	f7f5 f871 	bl	8000794 <__aeabi_ddiv>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f7f5 f9db 	bl	8000a74 <__aeabi_d2iz>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	b21b      	sxth	r3, r3
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	f3af 8000 	nop.w
 800b6d0:	757928e1 	.word	0x757928e1
 800b6d4:	3fa9018e 	.word	0x3fa9018e
 800b6d8:	40240000 	.word	0x40240000
 800b6dc:	00000000 	.word	0x00000000

0800b6e0 <can1_ams_cell_temperatures_t4s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s7_encode(double value)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b6ea:	f04f 0200 	mov.w	r2, #0
 800b6ee:	4b10      	ldr	r3, [pc, #64]	@ (800b730 <can1_ams_cell_temperatures_t4s7_encode+0x50>)
 800b6f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b6f4:	f7f4 fd6e 	bl	80001d4 <__adddf3>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	4619      	mov	r1, r3
 800b700:	a309      	add	r3, pc, #36	@ (adr r3, 800b728 <can1_ams_cell_temperatures_t4s7_encode+0x48>)
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f7f5 f845 	bl	8000794 <__aeabi_ddiv>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	4610      	mov	r0, r2
 800b710:	4619      	mov	r1, r3
 800b712:	f7f5 f9af 	bl	8000a74 <__aeabi_d2iz>
 800b716:	4603      	mov	r3, r0
 800b718:	b21b      	sxth	r3, r3
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	f3af 8000 	nop.w
 800b728:	757928e1 	.word	0x757928e1
 800b72c:	3fa9018e 	.word	0x3fa9018e
 800b730:	40240000 	.word	0x40240000
 800b734:	00000000 	.word	0x00000000

0800b738 <can1_ams_cell_temperatures_t4s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s8_encode(double value)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b742:	f04f 0200 	mov.w	r2, #0
 800b746:	4b10      	ldr	r3, [pc, #64]	@ (800b788 <can1_ams_cell_temperatures_t4s8_encode+0x50>)
 800b748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b74c:	f7f4 fd42 	bl	80001d4 <__adddf3>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4610      	mov	r0, r2
 800b756:	4619      	mov	r1, r3
 800b758:	a309      	add	r3, pc, #36	@ (adr r3, 800b780 <can1_ams_cell_temperatures_t4s8_encode+0x48>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f7f5 f819 	bl	8000794 <__aeabi_ddiv>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4610      	mov	r0, r2
 800b768:	4619      	mov	r1, r3
 800b76a:	f7f5 f983 	bl	8000a74 <__aeabi_d2iz>
 800b76e:	4603      	mov	r3, r0
 800b770:	b21b      	sxth	r3, r3
}
 800b772:	4618      	mov	r0, r3
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	f3af 8000 	nop.w
 800b780:	757928e1 	.word	0x757928e1
 800b784:	3fa9018e 	.word	0x3fa9018e
 800b788:	40240000 	.word	0x40240000
 800b78c:	00000000 	.word	0x00000000

0800b790 <can1_ams_cell_temperatures_t4s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s9_encode(double value)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b79a:	f04f 0200 	mov.w	r2, #0
 800b79e:	4b10      	ldr	r3, [pc, #64]	@ (800b7e0 <can1_ams_cell_temperatures_t4s9_encode+0x50>)
 800b7a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7a4:	f7f4 fd16 	bl	80001d4 <__adddf3>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	a309      	add	r3, pc, #36	@ (adr r3, 800b7d8 <can1_ams_cell_temperatures_t4s9_encode+0x48>)
 800b7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b6:	f7f4 ffed 	bl	8000794 <__aeabi_ddiv>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4610      	mov	r0, r2
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f7f5 f957 	bl	8000a74 <__aeabi_d2iz>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	b21b      	sxth	r3, r3
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	f3af 8000 	nop.w
 800b7d8:	757928e1 	.word	0x757928e1
 800b7dc:	3fa9018e 	.word	0x3fa9018e
 800b7e0:	40240000 	.word	0x40240000
 800b7e4:	00000000 	.word	0x00000000

0800b7e8 <can1_ams_cell_temperatures_t4s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s10_encode(double value)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b7f2:	f04f 0200 	mov.w	r2, #0
 800b7f6:	4b10      	ldr	r3, [pc, #64]	@ (800b838 <can1_ams_cell_temperatures_t4s10_encode+0x50>)
 800b7f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7fc:	f7f4 fcea 	bl	80001d4 <__adddf3>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4610      	mov	r0, r2
 800b806:	4619      	mov	r1, r3
 800b808:	a309      	add	r3, pc, #36	@ (adr r3, 800b830 <can1_ams_cell_temperatures_t4s10_encode+0x48>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f7f4 ffc1 	bl	8000794 <__aeabi_ddiv>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4610      	mov	r0, r2
 800b818:	4619      	mov	r1, r3
 800b81a:	f7f5 f92b 	bl	8000a74 <__aeabi_d2iz>
 800b81e:	4603      	mov	r3, r0
 800b820:	b21b      	sxth	r3, r3
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	f3af 8000 	nop.w
 800b830:	757928e1 	.word	0x757928e1
 800b834:	3fa9018e 	.word	0x3fa9018e
 800b838:	40240000 	.word	0x40240000
 800b83c:	00000000 	.word	0x00000000

0800b840 <can1_ams_cell_temperatures_t4s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s11_encode(double value)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b84a:	f04f 0200 	mov.w	r2, #0
 800b84e:	4b10      	ldr	r3, [pc, #64]	@ (800b890 <can1_ams_cell_temperatures_t4s11_encode+0x50>)
 800b850:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b854:	f7f4 fcbe 	bl	80001d4 <__adddf3>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4610      	mov	r0, r2
 800b85e:	4619      	mov	r1, r3
 800b860:	a309      	add	r3, pc, #36	@ (adr r3, 800b888 <can1_ams_cell_temperatures_t4s11_encode+0x48>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	f7f4 ff95 	bl	8000794 <__aeabi_ddiv>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4610      	mov	r0, r2
 800b870:	4619      	mov	r1, r3
 800b872:	f7f5 f8ff 	bl	8000a74 <__aeabi_d2iz>
 800b876:	4603      	mov	r3, r0
 800b878:	b21b      	sxth	r3, r3
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	f3af 8000 	nop.w
 800b888:	757928e1 	.word	0x757928e1
 800b88c:	3fa9018e 	.word	0x3fa9018e
 800b890:	40240000 	.word	0x40240000
 800b894:	00000000 	.word	0x00000000

0800b898 <can1_ams_cell_temperatures_t4s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s12_encode(double value)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b8a2:	f04f 0200 	mov.w	r2, #0
 800b8a6:	4b10      	ldr	r3, [pc, #64]	@ (800b8e8 <can1_ams_cell_temperatures_t4s12_encode+0x50>)
 800b8a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8ac:	f7f4 fc92 	bl	80001d4 <__adddf3>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	a309      	add	r3, pc, #36	@ (adr r3, 800b8e0 <can1_ams_cell_temperatures_t4s12_encode+0x48>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7f4 ff69 	bl	8000794 <__aeabi_ddiv>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f7f5 f8d3 	bl	8000a74 <__aeabi_d2iz>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	b21b      	sxth	r3, r3
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	f3af 8000 	nop.w
 800b8e0:	757928e1 	.word	0x757928e1
 800b8e4:	3fa9018e 	.word	0x3fa9018e
 800b8e8:	40240000 	.word	0x40240000
 800b8ec:	00000000 	.word	0x00000000

0800b8f0 <can1_ams_cell_temperatures_t5s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s2_encode(double value)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b8fa:	f04f 0200 	mov.w	r2, #0
 800b8fe:	4b10      	ldr	r3, [pc, #64]	@ (800b940 <can1_ams_cell_temperatures_t5s2_encode+0x50>)
 800b900:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b904:	f7f4 fc66 	bl	80001d4 <__adddf3>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4610      	mov	r0, r2
 800b90e:	4619      	mov	r1, r3
 800b910:	a309      	add	r3, pc, #36	@ (adr r3, 800b938 <can1_ams_cell_temperatures_t5s2_encode+0x48>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 ff3d 	bl	8000794 <__aeabi_ddiv>
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	4610      	mov	r0, r2
 800b920:	4619      	mov	r1, r3
 800b922:	f7f5 f8a7 	bl	8000a74 <__aeabi_d2iz>
 800b926:	4603      	mov	r3, r0
 800b928:	b21b      	sxth	r3, r3
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	f3af 8000 	nop.w
 800b938:	757928e1 	.word	0x757928e1
 800b93c:	3fa9018e 	.word	0x3fa9018e
 800b940:	40240000 	.word	0x40240000
 800b944:	00000000 	.word	0x00000000

0800b948 <can1_ams_cell_temperatures_t5s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s3_encode(double value)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b952:	f04f 0200 	mov.w	r2, #0
 800b956:	4b10      	ldr	r3, [pc, #64]	@ (800b998 <can1_ams_cell_temperatures_t5s3_encode+0x50>)
 800b958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b95c:	f7f4 fc3a 	bl	80001d4 <__adddf3>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4610      	mov	r0, r2
 800b966:	4619      	mov	r1, r3
 800b968:	a309      	add	r3, pc, #36	@ (adr r3, 800b990 <can1_ams_cell_temperatures_t5s3_encode+0x48>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f7f4 ff11 	bl	8000794 <__aeabi_ddiv>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
 800b976:	4610      	mov	r0, r2
 800b978:	4619      	mov	r1, r3
 800b97a:	f7f5 f87b 	bl	8000a74 <__aeabi_d2iz>
 800b97e:	4603      	mov	r3, r0
 800b980:	b21b      	sxth	r3, r3
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	f3af 8000 	nop.w
 800b990:	757928e1 	.word	0x757928e1
 800b994:	3fa9018e 	.word	0x3fa9018e
 800b998:	40240000 	.word	0x40240000
 800b99c:	00000000 	.word	0x00000000

0800b9a0 <can1_ams_cell_temperatures_t5s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s4_encode(double value)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800b9aa:	f04f 0200 	mov.w	r2, #0
 800b9ae:	4b10      	ldr	r3, [pc, #64]	@ (800b9f0 <can1_ams_cell_temperatures_t5s4_encode+0x50>)
 800b9b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9b4:	f7f4 fc0e 	bl	80001d4 <__adddf3>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4619      	mov	r1, r3
 800b9c0:	a309      	add	r3, pc, #36	@ (adr r3, 800b9e8 <can1_ams_cell_temperatures_t5s4_encode+0x48>)
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	f7f4 fee5 	bl	8000794 <__aeabi_ddiv>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	f7f5 f84f 	bl	8000a74 <__aeabi_d2iz>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	b21b      	sxth	r3, r3
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	f3af 8000 	nop.w
 800b9e8:	757928e1 	.word	0x757928e1
 800b9ec:	3fa9018e 	.word	0x3fa9018e
 800b9f0:	40240000 	.word	0x40240000
 800b9f4:	00000000 	.word	0x00000000

0800b9f8 <can1_ams_cell_temperatures_t5s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s5_encode(double value)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	4b10      	ldr	r3, [pc, #64]	@ (800ba48 <can1_ams_cell_temperatures_t5s5_encode+0x50>)
 800ba08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba0c:	f7f4 fbe2 	bl	80001d4 <__adddf3>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4610      	mov	r0, r2
 800ba16:	4619      	mov	r1, r3
 800ba18:	a309      	add	r3, pc, #36	@ (adr r3, 800ba40 <can1_ams_cell_temperatures_t5s5_encode+0x48>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	f7f4 feb9 	bl	8000794 <__aeabi_ddiv>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4610      	mov	r0, r2
 800ba28:	4619      	mov	r1, r3
 800ba2a:	f7f5 f823 	bl	8000a74 <__aeabi_d2iz>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	b21b      	sxth	r3, r3
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	f3af 8000 	nop.w
 800ba40:	757928e1 	.word	0x757928e1
 800ba44:	3fa9018e 	.word	0x3fa9018e
 800ba48:	40240000 	.word	0x40240000
 800ba4c:	00000000 	.word	0x00000000

0800ba50 <can1_ams_cell_temperatures_t5s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s6_encode(double value)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ba5a:	f04f 0200 	mov.w	r2, #0
 800ba5e:	4b10      	ldr	r3, [pc, #64]	@ (800baa0 <can1_ams_cell_temperatures_t5s6_encode+0x50>)
 800ba60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba64:	f7f4 fbb6 	bl	80001d4 <__adddf3>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4619      	mov	r1, r3
 800ba70:	a309      	add	r3, pc, #36	@ (adr r3, 800ba98 <can1_ams_cell_temperatures_t5s6_encode+0x48>)
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f7f4 fe8d 	bl	8000794 <__aeabi_ddiv>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4610      	mov	r0, r2
 800ba80:	4619      	mov	r1, r3
 800ba82:	f7f4 fff7 	bl	8000a74 <__aeabi_d2iz>
 800ba86:	4603      	mov	r3, r0
 800ba88:	b21b      	sxth	r3, r3
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	f3af 8000 	nop.w
 800ba98:	757928e1 	.word	0x757928e1
 800ba9c:	3fa9018e 	.word	0x3fa9018e
 800baa0:	40240000 	.word	0x40240000
 800baa4:	00000000 	.word	0x00000000

0800baa8 <can1_ams_cell_temperatures_t5s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s7_encode(double value)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	4b10      	ldr	r3, [pc, #64]	@ (800baf8 <can1_ams_cell_temperatures_t5s7_encode+0x50>)
 800bab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800babc:	f7f4 fb8a 	bl	80001d4 <__adddf3>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4610      	mov	r0, r2
 800bac6:	4619      	mov	r1, r3
 800bac8:	a309      	add	r3, pc, #36	@ (adr r3, 800baf0 <can1_ams_cell_temperatures_t5s7_encode+0x48>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	f7f4 fe61 	bl	8000794 <__aeabi_ddiv>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4610      	mov	r0, r2
 800bad8:	4619      	mov	r1, r3
 800bada:	f7f4 ffcb 	bl	8000a74 <__aeabi_d2iz>
 800bade:	4603      	mov	r3, r0
 800bae0:	b21b      	sxth	r3, r3
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	f3af 8000 	nop.w
 800baf0:	757928e1 	.word	0x757928e1
 800baf4:	3fa9018e 	.word	0x3fa9018e
 800baf8:	40240000 	.word	0x40240000
 800bafc:	00000000 	.word	0x00000000

0800bb00 <can1_ams_cell_temperatures_t5s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s8_encode(double value)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bb0a:	f04f 0200 	mov.w	r2, #0
 800bb0e:	4b10      	ldr	r3, [pc, #64]	@ (800bb50 <can1_ams_cell_temperatures_t5s8_encode+0x50>)
 800bb10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb14:	f7f4 fb5e 	bl	80001d4 <__adddf3>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	4619      	mov	r1, r3
 800bb20:	a309      	add	r3, pc, #36	@ (adr r3, 800bb48 <can1_ams_cell_temperatures_t5s8_encode+0x48>)
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	f7f4 fe35 	bl	8000794 <__aeabi_ddiv>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4610      	mov	r0, r2
 800bb30:	4619      	mov	r1, r3
 800bb32:	f7f4 ff9f 	bl	8000a74 <__aeabi_d2iz>
 800bb36:	4603      	mov	r3, r0
 800bb38:	b21b      	sxth	r3, r3
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	f3af 8000 	nop.w
 800bb48:	757928e1 	.word	0x757928e1
 800bb4c:	3fa9018e 	.word	0x3fa9018e
 800bb50:	40240000 	.word	0x40240000
 800bb54:	00000000 	.word	0x00000000

0800bb58 <can1_ams_cell_temperatures_t5s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s9_encode(double value)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bb62:	f04f 0200 	mov.w	r2, #0
 800bb66:	4b10      	ldr	r3, [pc, #64]	@ (800bba8 <can1_ams_cell_temperatures_t5s9_encode+0x50>)
 800bb68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb6c:	f7f4 fb32 	bl	80001d4 <__adddf3>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4610      	mov	r0, r2
 800bb76:	4619      	mov	r1, r3
 800bb78:	a309      	add	r3, pc, #36	@ (adr r3, 800bba0 <can1_ams_cell_temperatures_t5s9_encode+0x48>)
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f7f4 fe09 	bl	8000794 <__aeabi_ddiv>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4610      	mov	r0, r2
 800bb88:	4619      	mov	r1, r3
 800bb8a:	f7f4 ff73 	bl	8000a74 <__aeabi_d2iz>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	b21b      	sxth	r3, r3
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	f3af 8000 	nop.w
 800bba0:	757928e1 	.word	0x757928e1
 800bba4:	3fa9018e 	.word	0x3fa9018e
 800bba8:	40240000 	.word	0x40240000
 800bbac:	00000000 	.word	0x00000000

0800bbb0 <can1_ams_cell_temperatures_t5s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s10_encode(double value)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bbba:	f04f 0200 	mov.w	r2, #0
 800bbbe:	4b10      	ldr	r3, [pc, #64]	@ (800bc00 <can1_ams_cell_temperatures_t5s10_encode+0x50>)
 800bbc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bbc4:	f7f4 fb06 	bl	80001d4 <__adddf3>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4610      	mov	r0, r2
 800bbce:	4619      	mov	r1, r3
 800bbd0:	a309      	add	r3, pc, #36	@ (adr r3, 800bbf8 <can1_ams_cell_temperatures_t5s10_encode+0x48>)
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	f7f4 fddd 	bl	8000794 <__aeabi_ddiv>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4610      	mov	r0, r2
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	f7f4 ff47 	bl	8000a74 <__aeabi_d2iz>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	b21b      	sxth	r3, r3
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	f3af 8000 	nop.w
 800bbf8:	757928e1 	.word	0x757928e1
 800bbfc:	3fa9018e 	.word	0x3fa9018e
 800bc00:	40240000 	.word	0x40240000
 800bc04:	00000000 	.word	0x00000000

0800bc08 <can1_ams_cell_temperatures_t5s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s11_encode(double value)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bc12:	f04f 0200 	mov.w	r2, #0
 800bc16:	4b10      	ldr	r3, [pc, #64]	@ (800bc58 <can1_ams_cell_temperatures_t5s11_encode+0x50>)
 800bc18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc1c:	f7f4 fada 	bl	80001d4 <__adddf3>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	4610      	mov	r0, r2
 800bc26:	4619      	mov	r1, r3
 800bc28:	a309      	add	r3, pc, #36	@ (adr r3, 800bc50 <can1_ams_cell_temperatures_t5s11_encode+0x48>)
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	f7f4 fdb1 	bl	8000794 <__aeabi_ddiv>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	4610      	mov	r0, r2
 800bc38:	4619      	mov	r1, r3
 800bc3a:	f7f4 ff1b 	bl	8000a74 <__aeabi_d2iz>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	b21b      	sxth	r3, r3
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	f3af 8000 	nop.w
 800bc50:	757928e1 	.word	0x757928e1
 800bc54:	3fa9018e 	.word	0x3fa9018e
 800bc58:	40240000 	.word	0x40240000
 800bc5c:	00000000 	.word	0x00000000

0800bc60 <can1_ams_cell_temperatures_t5s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s12_encode(double value)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bc6a:	f04f 0200 	mov.w	r2, #0
 800bc6e:	4b10      	ldr	r3, [pc, #64]	@ (800bcb0 <can1_ams_cell_temperatures_t5s12_encode+0x50>)
 800bc70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc74:	f7f4 faae 	bl	80001d4 <__adddf3>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4610      	mov	r0, r2
 800bc7e:	4619      	mov	r1, r3
 800bc80:	a309      	add	r3, pc, #36	@ (adr r3, 800bca8 <can1_ams_cell_temperatures_t5s12_encode+0x48>)
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	f7f4 fd85 	bl	8000794 <__aeabi_ddiv>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4610      	mov	r0, r2
 800bc90:	4619      	mov	r1, r3
 800bc92:	f7f4 feef 	bl	8000a74 <__aeabi_d2iz>
 800bc96:	4603      	mov	r3, r0
 800bc98:	b21b      	sxth	r3, r3
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	f3af 8000 	nop.w
 800bca8:	757928e1 	.word	0x757928e1
 800bcac:	3fa9018e 	.word	0x3fa9018e
 800bcb0:	40240000 	.word	0x40240000

0800bcb4 <can1_ecu_status_unpack>:

int can1_ecu_status_unpack(
    struct can1_ecu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <can1_ecu_status_unpack+0x18>
        return (-EINVAL);
 800bcc6:	f06f 0315 	mvn.w	r3, #21
 800bcca:	e02c      	b.n	800bd26 <can1_ecu_status_unpack+0x72>
    }

    dst_p->ts_not_off = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fd fab3 	bl	8009240 <unpack_right_shift_u8>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	461a      	mov	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	701a      	strb	r2, [r3, #0]
    dst_p->rst_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2202      	movs	r2, #2
 800bce8:	2101      	movs	r1, #1
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fd faa8 	bl	8009240 <unpack_right_shift_u8>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	705a      	strb	r2, [r3, #1]
    dst_p->sidepanel_activate_ts_button = unpack_right_shift_u8(src_p[0], 2u, 0x04u);
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2204      	movs	r2, #4
 800bcfe:	2102      	movs	r1, #2
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd fa9d 	bl	8009240 <unpack_right_shift_u8>
 800bd06:	4603      	mov	r3, r0
 800bd08:	461a      	mov	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	709a      	strb	r2, [r3, #2]
    dst_p->ts_off = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2280      	movs	r2, #128	@ 0x80
 800bd14:	2107      	movs	r1, #7
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fd fa92 	bl	8009240 <unpack_right_shift_u8>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	461a      	mov	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	70da      	strb	r2, [r3, #3]

    return (0);
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <can1_ams_s01_voltages_1_pack>:

int can1_ams_s01_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s01_voltages_1_t *src_p,
    size_t size)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	60f8      	str	r0, [r7, #12]
 800bd36:	60b9      	str	r1, [r7, #8]
 800bd38:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b05      	cmp	r3, #5
 800bd3e:	d802      	bhi.n	800bd46 <can1_ams_s01_voltages_1_pack+0x18>
        return (-EINVAL);
 800bd40:	f06f 0315 	mvn.w	r3, #21
 800bd44:	e069      	b.n	800be1a <can1_ams_s01_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800bd46:	2206      	movs	r2, #6
 800bd48:	2100      	movs	r1, #0
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f004 fd34 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s01v01, 0u, 0xffu);
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	22ff      	movs	r2, #255	@ 0xff
 800bd56:	2100      	movs	r1, #0
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fd f9fd 	bl	8009158 <pack_left_shift_u8>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	461a      	mov	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s01v02, 0u, 0xffu);
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	22ff      	movs	r2, #255	@ 0xff
 800bd74:	2100      	movs	r1, #0
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fd f9ee 	bl	8009158 <pack_left_shift_u8>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	4619      	mov	r1, r3
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3301      	adds	r3, #1
 800bd84:	781a      	ldrb	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	430a      	orrs	r2, r1
 800bd8c:	b2d2      	uxtb	r2, r2
 800bd8e:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s01v03, 0u, 0xffu);
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	789b      	ldrb	r3, [r3, #2]
 800bd94:	22ff      	movs	r2, #255	@ 0xff
 800bd96:	2100      	movs	r1, #0
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fd f9dd 	bl	8009158 <pack_left_shift_u8>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	4619      	mov	r1, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3302      	adds	r3, #2
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3302      	adds	r3, #2
 800bdac:	430a      	orrs	r2, r1
 800bdae:	b2d2      	uxtb	r2, r2
 800bdb0:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s01v04, 0u, 0xffu);
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	78db      	ldrb	r3, [r3, #3]
 800bdb6:	22ff      	movs	r2, #255	@ 0xff
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fd f9cc 	bl	8009158 <pack_left_shift_u8>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	3303      	adds	r3, #3
 800bdc8:	781a      	ldrb	r2, [r3, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3303      	adds	r3, #3
 800bdce:	430a      	orrs	r2, r1
 800bdd0:	b2d2      	uxtb	r2, r2
 800bdd2:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s01v05, 0u, 0xffu);
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	791b      	ldrb	r3, [r3, #4]
 800bdd8:	22ff      	movs	r2, #255	@ 0xff
 800bdda:	2100      	movs	r1, #0
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fd f9bb 	bl	8009158 <pack_left_shift_u8>
 800bde2:	4603      	mov	r3, r0
 800bde4:	4619      	mov	r1, r3
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	3304      	adds	r3, #4
 800bdea:	781a      	ldrb	r2, [r3, #0]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	b2d2      	uxtb	r2, r2
 800bdf4:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s01v06, 0u, 0xffu);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	795b      	ldrb	r3, [r3, #5]
 800bdfa:	22ff      	movs	r2, #255	@ 0xff
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fd f9aa 	bl	8009158 <pack_left_shift_u8>
 800be04:	4603      	mov	r3, r0
 800be06:	4619      	mov	r1, r3
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3305      	adds	r3, #5
 800be0c:	781a      	ldrb	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3305      	adds	r3, #5
 800be12:	430a      	orrs	r2, r1
 800be14:	b2d2      	uxtb	r2, r2
 800be16:	701a      	strb	r2, [r3, #0]

    return (6);
 800be18:	2306      	movs	r3, #6
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	0000      	movs	r0, r0
 800be24:	0000      	movs	r0, r0
	...

0800be28 <can1_ams_s01_voltages_1_s01v01_encode>:

    return 0;
}

uint8_t can1_ams_s01_voltages_1_s01v01_encode(double value)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800be32:	f04f 0200 	mov.w	r2, #0
 800be36:	4b10      	ldr	r3, [pc, #64]	@ (800be78 <can1_ams_s01_voltages_1_s01v01_encode+0x50>)
 800be38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800be3c:	f7f4 f9c8 	bl	80001d0 <__aeabi_dsub>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4610      	mov	r0, r2
 800be46:	4619      	mov	r1, r3
 800be48:	a309      	add	r3, pc, #36	@ (adr r3, 800be70 <can1_ams_s01_voltages_1_s01v01_encode+0x48>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 fca1 	bl	8000794 <__aeabi_ddiv>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	4610      	mov	r0, r2
 800be58:	4619      	mov	r1, r3
 800be5a:	f7f4 fe33 	bl	8000ac4 <__aeabi_d2uiz>
 800be5e:	4603      	mov	r3, r0
 800be60:	b2db      	uxtb	r3, r3
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w
 800be70:	fcce1c58 	.word	0xfcce1c58
 800be74:	3f800e6a 	.word	0x3f800e6a
 800be78:	40040000 	.word	0x40040000
 800be7c:	00000000 	.word	0x00000000

0800be80 <can1_ams_s01_voltages_1_s01v02_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v02_encode(double value)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800be8a:	f04f 0200 	mov.w	r2, #0
 800be8e:	4b10      	ldr	r3, [pc, #64]	@ (800bed0 <can1_ams_s01_voltages_1_s01v02_encode+0x50>)
 800be90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800be94:	f7f4 f99c 	bl	80001d0 <__aeabi_dsub>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4610      	mov	r0, r2
 800be9e:	4619      	mov	r1, r3
 800bea0:	a309      	add	r3, pc, #36	@ (adr r3, 800bec8 <can1_ams_s01_voltages_1_s01v02_encode+0x48>)
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	f7f4 fc75 	bl	8000794 <__aeabi_ddiv>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	4610      	mov	r0, r2
 800beb0:	4619      	mov	r1, r3
 800beb2:	f7f4 fe07 	bl	8000ac4 <__aeabi_d2uiz>
 800beb6:	4603      	mov	r3, r0
 800beb8:	b2db      	uxtb	r3, r3
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	f3af 8000 	nop.w
 800bec8:	fcce1c58 	.word	0xfcce1c58
 800becc:	3f800e6a 	.word	0x3f800e6a
 800bed0:	40040000 	.word	0x40040000
 800bed4:	00000000 	.word	0x00000000

0800bed8 <can1_ams_s01_voltages_1_s01v03_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v03_encode(double value)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bee2:	f04f 0200 	mov.w	r2, #0
 800bee6:	4b10      	ldr	r3, [pc, #64]	@ (800bf28 <can1_ams_s01_voltages_1_s01v03_encode+0x50>)
 800bee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800beec:	f7f4 f970 	bl	80001d0 <__aeabi_dsub>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4610      	mov	r0, r2
 800bef6:	4619      	mov	r1, r3
 800bef8:	a309      	add	r3, pc, #36	@ (adr r3, 800bf20 <can1_ams_s01_voltages_1_s01v03_encode+0x48>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f7f4 fc49 	bl	8000794 <__aeabi_ddiv>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4610      	mov	r0, r2
 800bf08:	4619      	mov	r1, r3
 800bf0a:	f7f4 fddb 	bl	8000ac4 <__aeabi_d2uiz>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	b2db      	uxtb	r3, r3
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	f3af 8000 	nop.w
 800bf20:	fcce1c58 	.word	0xfcce1c58
 800bf24:	3f800e6a 	.word	0x3f800e6a
 800bf28:	40040000 	.word	0x40040000
 800bf2c:	00000000 	.word	0x00000000

0800bf30 <can1_ams_s01_voltages_1_s01v04_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v04_encode(double value)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bf3a:	f04f 0200 	mov.w	r2, #0
 800bf3e:	4b10      	ldr	r3, [pc, #64]	@ (800bf80 <can1_ams_s01_voltages_1_s01v04_encode+0x50>)
 800bf40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf44:	f7f4 f944 	bl	80001d0 <__aeabi_dsub>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	4619      	mov	r1, r3
 800bf50:	a309      	add	r3, pc, #36	@ (adr r3, 800bf78 <can1_ams_s01_voltages_1_s01v04_encode+0x48>)
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	f7f4 fc1d 	bl	8000794 <__aeabi_ddiv>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4610      	mov	r0, r2
 800bf60:	4619      	mov	r1, r3
 800bf62:	f7f4 fdaf 	bl	8000ac4 <__aeabi_d2uiz>
 800bf66:	4603      	mov	r3, r0
 800bf68:	b2db      	uxtb	r3, r3
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	f3af 8000 	nop.w
 800bf78:	fcce1c58 	.word	0xfcce1c58
 800bf7c:	3f800e6a 	.word	0x3f800e6a
 800bf80:	40040000 	.word	0x40040000
 800bf84:	00000000 	.word	0x00000000

0800bf88 <can1_ams_s01_voltages_1_s01v05_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v05_encode(double value)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	4b10      	ldr	r3, [pc, #64]	@ (800bfd8 <can1_ams_s01_voltages_1_s01v05_encode+0x50>)
 800bf98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf9c:	f7f4 f918 	bl	80001d0 <__aeabi_dsub>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	a309      	add	r3, pc, #36	@ (adr r3, 800bfd0 <can1_ams_s01_voltages_1_s01v05_encode+0x48>)
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	f7f4 fbf1 	bl	8000794 <__aeabi_ddiv>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	4619      	mov	r1, r3
 800bfba:	f7f4 fd83 	bl	8000ac4 <__aeabi_d2uiz>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	b2db      	uxtb	r3, r3
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	f3af 8000 	nop.w
 800bfd0:	fcce1c58 	.word	0xfcce1c58
 800bfd4:	3f800e6a 	.word	0x3f800e6a
 800bfd8:	40040000 	.word	0x40040000
 800bfdc:	00000000 	.word	0x00000000

0800bfe0 <can1_ams_s01_voltages_1_s01v06_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v06_encode(double value)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bfea:	f04f 0200 	mov.w	r2, #0
 800bfee:	4b10      	ldr	r3, [pc, #64]	@ (800c030 <can1_ams_s01_voltages_1_s01v06_encode+0x50>)
 800bff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bff4:	f7f4 f8ec 	bl	80001d0 <__aeabi_dsub>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	4610      	mov	r0, r2
 800bffe:	4619      	mov	r1, r3
 800c000:	a309      	add	r3, pc, #36	@ (adr r3, 800c028 <can1_ams_s01_voltages_1_s01v06_encode+0x48>)
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	f7f4 fbc5 	bl	8000794 <__aeabi_ddiv>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4610      	mov	r0, r2
 800c010:	4619      	mov	r1, r3
 800c012:	f7f4 fd57 	bl	8000ac4 <__aeabi_d2uiz>
 800c016:	4603      	mov	r3, r0
 800c018:	b2db      	uxtb	r3, r3
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	f3af 8000 	nop.w
 800c028:	fcce1c58 	.word	0xfcce1c58
 800c02c:	3f800e6a 	.word	0x3f800e6a
 800c030:	40040000 	.word	0x40040000

0800c034 <can1_ams_s01_voltages_2_pack>:

int can1_ams_s01_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s01_voltages_2_t *src_p,
    size_t size)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b04      	cmp	r3, #4
 800c044:	d802      	bhi.n	800c04c <can1_ams_s01_voltages_2_pack+0x18>
        return (-EINVAL);
 800c046:	f06f 0315 	mvn.w	r3, #21
 800c04a:	e058      	b.n	800c0fe <can1_ams_s01_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800c04c:	2205      	movs	r2, #5
 800c04e:	2100      	movs	r1, #0
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f004 fbb1 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s01v07, 0u, 0xffu);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	22ff      	movs	r2, #255	@ 0xff
 800c05c:	2100      	movs	r1, #0
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fd f87a 	bl	8009158 <pack_left_shift_u8>
 800c064:	4603      	mov	r3, r0
 800c066:	461a      	mov	r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s01v08, 0u, 0xffu);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	785b      	ldrb	r3, [r3, #1]
 800c078:	22ff      	movs	r2, #255	@ 0xff
 800c07a:	2100      	movs	r1, #0
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fd f86b 	bl	8009158 <pack_left_shift_u8>
 800c082:	4603      	mov	r3, r0
 800c084:	4619      	mov	r1, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3301      	adds	r3, #1
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3301      	adds	r3, #1
 800c090:	430a      	orrs	r2, r1
 800c092:	b2d2      	uxtb	r2, r2
 800c094:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s01v09, 0u, 0xffu);
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	789b      	ldrb	r3, [r3, #2]
 800c09a:	22ff      	movs	r2, #255	@ 0xff
 800c09c:	2100      	movs	r1, #0
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fd f85a 	bl	8009158 <pack_left_shift_u8>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3302      	adds	r3, #2
 800c0ac:	781a      	ldrb	r2, [r3, #0]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3302      	adds	r3, #2
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	b2d2      	uxtb	r2, r2
 800c0b6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s01v10, 0u, 0xffu);
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	78db      	ldrb	r3, [r3, #3]
 800c0bc:	22ff      	movs	r2, #255	@ 0xff
 800c0be:	2100      	movs	r1, #0
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fd f849 	bl	8009158 <pack_left_shift_u8>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3303      	adds	r3, #3
 800c0ce:	781a      	ldrb	r2, [r3, #0]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3303      	adds	r3, #3
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s01v11, 0u, 0xffu);
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	791b      	ldrb	r3, [r3, #4]
 800c0de:	22ff      	movs	r2, #255	@ 0xff
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fd f838 	bl	8009158 <pack_left_shift_u8>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	781a      	ldrb	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	b2d2      	uxtb	r2, r2
 800c0fa:	701a      	strb	r2, [r3, #0]

    return (5);
 800c0fc:	2305      	movs	r3, #5
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <can1_ams_s01_voltages_2_s01v07_encode>:

    return 0;
}

uint8_t can1_ams_s01_voltages_2_s01v07_encode(double value)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c112:	f04f 0200 	mov.w	r2, #0
 800c116:	4b10      	ldr	r3, [pc, #64]	@ (800c158 <can1_ams_s01_voltages_2_s01v07_encode+0x50>)
 800c118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c11c:	f7f4 f858 	bl	80001d0 <__aeabi_dsub>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	4610      	mov	r0, r2
 800c126:	4619      	mov	r1, r3
 800c128:	a309      	add	r3, pc, #36	@ (adr r3, 800c150 <can1_ams_s01_voltages_2_s01v07_encode+0x48>)
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	f7f4 fb31 	bl	8000794 <__aeabi_ddiv>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	4610      	mov	r0, r2
 800c138:	4619      	mov	r1, r3
 800c13a:	f7f4 fcc3 	bl	8000ac4 <__aeabi_d2uiz>
 800c13e:	4603      	mov	r3, r0
 800c140:	b2db      	uxtb	r3, r3
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	f3af 8000 	nop.w
 800c150:	fcce1c58 	.word	0xfcce1c58
 800c154:	3f800e6a 	.word	0x3f800e6a
 800c158:	40040000 	.word	0x40040000
 800c15c:	00000000 	.word	0x00000000

0800c160 <can1_ams_s01_voltages_2_s01v08_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v08_encode(double value)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c16a:	f04f 0200 	mov.w	r2, #0
 800c16e:	4b10      	ldr	r3, [pc, #64]	@ (800c1b0 <can1_ams_s01_voltages_2_s01v08_encode+0x50>)
 800c170:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c174:	f7f4 f82c 	bl	80001d0 <__aeabi_dsub>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	4610      	mov	r0, r2
 800c17e:	4619      	mov	r1, r3
 800c180:	a309      	add	r3, pc, #36	@ (adr r3, 800c1a8 <can1_ams_s01_voltages_2_s01v08_encode+0x48>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	f7f4 fb05 	bl	8000794 <__aeabi_ddiv>
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	4610      	mov	r0, r2
 800c190:	4619      	mov	r1, r3
 800c192:	f7f4 fc97 	bl	8000ac4 <__aeabi_d2uiz>
 800c196:	4603      	mov	r3, r0
 800c198:	b2db      	uxtb	r3, r3
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	f3af 8000 	nop.w
 800c1a8:	fcce1c58 	.word	0xfcce1c58
 800c1ac:	3f800e6a 	.word	0x3f800e6a
 800c1b0:	40040000 	.word	0x40040000
 800c1b4:	00000000 	.word	0x00000000

0800c1b8 <can1_ams_s01_voltages_2_s01v09_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v09_encode(double value)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c1c2:	f04f 0200 	mov.w	r2, #0
 800c1c6:	4b10      	ldr	r3, [pc, #64]	@ (800c208 <can1_ams_s01_voltages_2_s01v09_encode+0x50>)
 800c1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1cc:	f7f4 f800 	bl	80001d0 <__aeabi_dsub>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	a309      	add	r3, pc, #36	@ (adr r3, 800c200 <can1_ams_s01_voltages_2_s01v09_encode+0x48>)
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	f7f4 fad9 	bl	8000794 <__aeabi_ddiv>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f7f4 fc6b 	bl	8000ac4 <__aeabi_d2uiz>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	b2db      	uxtb	r3, r3
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	f3af 8000 	nop.w
 800c200:	fcce1c58 	.word	0xfcce1c58
 800c204:	3f800e6a 	.word	0x3f800e6a
 800c208:	40040000 	.word	0x40040000
 800c20c:	00000000 	.word	0x00000000

0800c210 <can1_ams_s01_voltages_2_s01v10_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v10_encode(double value)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c21a:	f04f 0200 	mov.w	r2, #0
 800c21e:	4b10      	ldr	r3, [pc, #64]	@ (800c260 <can1_ams_s01_voltages_2_s01v10_encode+0x50>)
 800c220:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c224:	f7f3 ffd4 	bl	80001d0 <__aeabi_dsub>
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	4610      	mov	r0, r2
 800c22e:	4619      	mov	r1, r3
 800c230:	a309      	add	r3, pc, #36	@ (adr r3, 800c258 <can1_ams_s01_voltages_2_s01v10_encode+0x48>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	f7f4 faad 	bl	8000794 <__aeabi_ddiv>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4610      	mov	r0, r2
 800c240:	4619      	mov	r1, r3
 800c242:	f7f4 fc3f 	bl	8000ac4 <__aeabi_d2uiz>
 800c246:	4603      	mov	r3, r0
 800c248:	b2db      	uxtb	r3, r3
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	f3af 8000 	nop.w
 800c258:	fcce1c58 	.word	0xfcce1c58
 800c25c:	3f800e6a 	.word	0x3f800e6a
 800c260:	40040000 	.word	0x40040000
 800c264:	00000000 	.word	0x00000000

0800c268 <can1_ams_s01_voltages_2_s01v11_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v11_encode(double value)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c272:	f04f 0200 	mov.w	r2, #0
 800c276:	4b10      	ldr	r3, [pc, #64]	@ (800c2b8 <can1_ams_s01_voltages_2_s01v11_encode+0x50>)
 800c278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c27c:	f7f3 ffa8 	bl	80001d0 <__aeabi_dsub>
 800c280:	4602      	mov	r2, r0
 800c282:	460b      	mov	r3, r1
 800c284:	4610      	mov	r0, r2
 800c286:	4619      	mov	r1, r3
 800c288:	a309      	add	r3, pc, #36	@ (adr r3, 800c2b0 <can1_ams_s01_voltages_2_s01v11_encode+0x48>)
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	f7f4 fa81 	bl	8000794 <__aeabi_ddiv>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	4610      	mov	r0, r2
 800c298:	4619      	mov	r1, r3
 800c29a:	f7f4 fc13 	bl	8000ac4 <__aeabi_d2uiz>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	b2db      	uxtb	r3, r3
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	f3af 8000 	nop.w
 800c2b0:	fcce1c58 	.word	0xfcce1c58
 800c2b4:	3f800e6a 	.word	0x3f800e6a
 800c2b8:	40040000 	.word	0x40040000

0800c2bc <can1_ams_s02_voltages_1_pack>:

int can1_ams_s02_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s02_voltages_1_t *src_p,
    size_t size)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b05      	cmp	r3, #5
 800c2cc:	d802      	bhi.n	800c2d4 <can1_ams_s02_voltages_1_pack+0x18>
        return (-EINVAL);
 800c2ce:	f06f 0315 	mvn.w	r3, #21
 800c2d2:	e069      	b.n	800c3a8 <can1_ams_s02_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800c2d4:	2206      	movs	r2, #6
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f004 fa6d 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s02v01, 0u, 0xffu);
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	22ff      	movs	r2, #255	@ 0xff
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fc ff36 	bl	8009158 <pack_left_shift_u8>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s02v02, 0u, 0xffu);
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	785b      	ldrb	r3, [r3, #1]
 800c300:	22ff      	movs	r2, #255	@ 0xff
 800c302:	2100      	movs	r1, #0
 800c304:	4618      	mov	r0, r3
 800c306:	f7fc ff27 	bl	8009158 <pack_left_shift_u8>
 800c30a:	4603      	mov	r3, r0
 800c30c:	4619      	mov	r1, r3
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3301      	adds	r3, #1
 800c312:	781a      	ldrb	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	3301      	adds	r3, #1
 800c318:	430a      	orrs	r2, r1
 800c31a:	b2d2      	uxtb	r2, r2
 800c31c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s02v03, 0u, 0xffu);
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	789b      	ldrb	r3, [r3, #2]
 800c322:	22ff      	movs	r2, #255	@ 0xff
 800c324:	2100      	movs	r1, #0
 800c326:	4618      	mov	r0, r3
 800c328:	f7fc ff16 	bl	8009158 <pack_left_shift_u8>
 800c32c:	4603      	mov	r3, r0
 800c32e:	4619      	mov	r1, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	3302      	adds	r3, #2
 800c334:	781a      	ldrb	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3302      	adds	r3, #2
 800c33a:	430a      	orrs	r2, r1
 800c33c:	b2d2      	uxtb	r2, r2
 800c33e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s02v04, 0u, 0xffu);
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	78db      	ldrb	r3, [r3, #3]
 800c344:	22ff      	movs	r2, #255	@ 0xff
 800c346:	2100      	movs	r1, #0
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fc ff05 	bl	8009158 <pack_left_shift_u8>
 800c34e:	4603      	mov	r3, r0
 800c350:	4619      	mov	r1, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3303      	adds	r3, #3
 800c356:	781a      	ldrb	r2, [r3, #0]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3303      	adds	r3, #3
 800c35c:	430a      	orrs	r2, r1
 800c35e:	b2d2      	uxtb	r2, r2
 800c360:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s02v05, 0u, 0xffu);
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	791b      	ldrb	r3, [r3, #4]
 800c366:	22ff      	movs	r2, #255	@ 0xff
 800c368:	2100      	movs	r1, #0
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fc fef4 	bl	8009158 <pack_left_shift_u8>
 800c370:	4603      	mov	r3, r0
 800c372:	4619      	mov	r1, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3304      	adds	r3, #4
 800c378:	781a      	ldrb	r2, [r3, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3304      	adds	r3, #4
 800c37e:	430a      	orrs	r2, r1
 800c380:	b2d2      	uxtb	r2, r2
 800c382:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s02v06, 0u, 0xffu);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	795b      	ldrb	r3, [r3, #5]
 800c388:	22ff      	movs	r2, #255	@ 0xff
 800c38a:	2100      	movs	r1, #0
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7fc fee3 	bl	8009158 <pack_left_shift_u8>
 800c392:	4603      	mov	r3, r0
 800c394:	4619      	mov	r1, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3305      	adds	r3, #5
 800c39a:	781a      	ldrb	r2, [r3, #0]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3305      	adds	r3, #5
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	b2d2      	uxtb	r2, r2
 800c3a4:	701a      	strb	r2, [r3, #0]

    return (6);
 800c3a6:	2306      	movs	r3, #6
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <can1_ams_s02_voltages_1_s02v01_encode>:

    return 0;
}

uint8_t can1_ams_s02_voltages_1_s02v01_encode(double value)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c3ba:	f04f 0200 	mov.w	r2, #0
 800c3be:	4b10      	ldr	r3, [pc, #64]	@ (800c400 <can1_ams_s02_voltages_1_s02v01_encode+0x50>)
 800c3c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3c4:	f7f3 ff04 	bl	80001d0 <__aeabi_dsub>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	a309      	add	r3, pc, #36	@ (adr r3, 800c3f8 <can1_ams_s02_voltages_1_s02v01_encode+0x48>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	f7f4 f9dd 	bl	8000794 <__aeabi_ddiv>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4610      	mov	r0, r2
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	f7f4 fb6f 	bl	8000ac4 <__aeabi_d2uiz>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	b2db      	uxtb	r3, r3
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	f3af 8000 	nop.w
 800c3f8:	fcce1c58 	.word	0xfcce1c58
 800c3fc:	3f800e6a 	.word	0x3f800e6a
 800c400:	40040000 	.word	0x40040000
 800c404:	00000000 	.word	0x00000000

0800c408 <can1_ams_s02_voltages_1_s02v02_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v02_encode(double value)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c412:	f04f 0200 	mov.w	r2, #0
 800c416:	4b10      	ldr	r3, [pc, #64]	@ (800c458 <can1_ams_s02_voltages_1_s02v02_encode+0x50>)
 800c418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c41c:	f7f3 fed8 	bl	80001d0 <__aeabi_dsub>
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	4610      	mov	r0, r2
 800c426:	4619      	mov	r1, r3
 800c428:	a309      	add	r3, pc, #36	@ (adr r3, 800c450 <can1_ams_s02_voltages_1_s02v02_encode+0x48>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f7f4 f9b1 	bl	8000794 <__aeabi_ddiv>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	4610      	mov	r0, r2
 800c438:	4619      	mov	r1, r3
 800c43a:	f7f4 fb43 	bl	8000ac4 <__aeabi_d2uiz>
 800c43e:	4603      	mov	r3, r0
 800c440:	b2db      	uxtb	r3, r3
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	f3af 8000 	nop.w
 800c450:	fcce1c58 	.word	0xfcce1c58
 800c454:	3f800e6a 	.word	0x3f800e6a
 800c458:	40040000 	.word	0x40040000
 800c45c:	00000000 	.word	0x00000000

0800c460 <can1_ams_s02_voltages_1_s02v03_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v03_encode(double value)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c46a:	f04f 0200 	mov.w	r2, #0
 800c46e:	4b10      	ldr	r3, [pc, #64]	@ (800c4b0 <can1_ams_s02_voltages_1_s02v03_encode+0x50>)
 800c470:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c474:	f7f3 feac 	bl	80001d0 <__aeabi_dsub>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4610      	mov	r0, r2
 800c47e:	4619      	mov	r1, r3
 800c480:	a309      	add	r3, pc, #36	@ (adr r3, 800c4a8 <can1_ams_s02_voltages_1_s02v03_encode+0x48>)
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	f7f4 f985 	bl	8000794 <__aeabi_ddiv>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4610      	mov	r0, r2
 800c490:	4619      	mov	r1, r3
 800c492:	f7f4 fb17 	bl	8000ac4 <__aeabi_d2uiz>
 800c496:	4603      	mov	r3, r0
 800c498:	b2db      	uxtb	r3, r3
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	f3af 8000 	nop.w
 800c4a8:	fcce1c58 	.word	0xfcce1c58
 800c4ac:	3f800e6a 	.word	0x3f800e6a
 800c4b0:	40040000 	.word	0x40040000
 800c4b4:	00000000 	.word	0x00000000

0800c4b8 <can1_ams_s02_voltages_1_s02v04_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v04_encode(double value)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c4c2:	f04f 0200 	mov.w	r2, #0
 800c4c6:	4b10      	ldr	r3, [pc, #64]	@ (800c508 <can1_ams_s02_voltages_1_s02v04_encode+0x50>)
 800c4c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4cc:	f7f3 fe80 	bl	80001d0 <__aeabi_dsub>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	a309      	add	r3, pc, #36	@ (adr r3, 800c500 <can1_ams_s02_voltages_1_s02v04_encode+0x48>)
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	f7f4 f959 	bl	8000794 <__aeabi_ddiv>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	f7f4 faeb 	bl	8000ac4 <__aeabi_d2uiz>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	b2db      	uxtb	r3, r3
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	f3af 8000 	nop.w
 800c500:	fcce1c58 	.word	0xfcce1c58
 800c504:	3f800e6a 	.word	0x3f800e6a
 800c508:	40040000 	.word	0x40040000
 800c50c:	00000000 	.word	0x00000000

0800c510 <can1_ams_s02_voltages_1_s02v05_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v05_encode(double value)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c51a:	f04f 0200 	mov.w	r2, #0
 800c51e:	4b10      	ldr	r3, [pc, #64]	@ (800c560 <can1_ams_s02_voltages_1_s02v05_encode+0x50>)
 800c520:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c524:	f7f3 fe54 	bl	80001d0 <__aeabi_dsub>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4610      	mov	r0, r2
 800c52e:	4619      	mov	r1, r3
 800c530:	a309      	add	r3, pc, #36	@ (adr r3, 800c558 <can1_ams_s02_voltages_1_s02v05_encode+0x48>)
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	f7f4 f92d 	bl	8000794 <__aeabi_ddiv>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4610      	mov	r0, r2
 800c540:	4619      	mov	r1, r3
 800c542:	f7f4 fabf 	bl	8000ac4 <__aeabi_d2uiz>
 800c546:	4603      	mov	r3, r0
 800c548:	b2db      	uxtb	r3, r3
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	f3af 8000 	nop.w
 800c558:	fcce1c58 	.word	0xfcce1c58
 800c55c:	3f800e6a 	.word	0x3f800e6a
 800c560:	40040000 	.word	0x40040000
 800c564:	00000000 	.word	0x00000000

0800c568 <can1_ams_s02_voltages_1_s02v06_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v06_encode(double value)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c572:	f04f 0200 	mov.w	r2, #0
 800c576:	4b10      	ldr	r3, [pc, #64]	@ (800c5b8 <can1_ams_s02_voltages_1_s02v06_encode+0x50>)
 800c578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c57c:	f7f3 fe28 	bl	80001d0 <__aeabi_dsub>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4610      	mov	r0, r2
 800c586:	4619      	mov	r1, r3
 800c588:	a309      	add	r3, pc, #36	@ (adr r3, 800c5b0 <can1_ams_s02_voltages_1_s02v06_encode+0x48>)
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f7f4 f901 	bl	8000794 <__aeabi_ddiv>
 800c592:	4602      	mov	r2, r0
 800c594:	460b      	mov	r3, r1
 800c596:	4610      	mov	r0, r2
 800c598:	4619      	mov	r1, r3
 800c59a:	f7f4 fa93 	bl	8000ac4 <__aeabi_d2uiz>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	b2db      	uxtb	r3, r3
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	f3af 8000 	nop.w
 800c5b0:	fcce1c58 	.word	0xfcce1c58
 800c5b4:	3f800e6a 	.word	0x3f800e6a
 800c5b8:	40040000 	.word	0x40040000

0800c5bc <can1_ams_s02_voltages_2_pack>:

int can1_ams_s02_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s02_voltages_2_t *src_p,
    size_t size)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2b04      	cmp	r3, #4
 800c5cc:	d802      	bhi.n	800c5d4 <can1_ams_s02_voltages_2_pack+0x18>
        return (-EINVAL);
 800c5ce:	f06f 0315 	mvn.w	r3, #21
 800c5d2:	e058      	b.n	800c686 <can1_ams_s02_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800c5d4:	2205      	movs	r2, #5
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f004 f8ed 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s02v07, 0u, 0xffu);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	22ff      	movs	r2, #255	@ 0xff
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fc fdb6 	bl	8009158 <pack_left_shift_u8>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s02v08, 0u, 0xffu);
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	785b      	ldrb	r3, [r3, #1]
 800c600:	22ff      	movs	r2, #255	@ 0xff
 800c602:	2100      	movs	r1, #0
 800c604:	4618      	mov	r0, r3
 800c606:	f7fc fda7 	bl	8009158 <pack_left_shift_u8>
 800c60a:	4603      	mov	r3, r0
 800c60c:	4619      	mov	r1, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3301      	adds	r3, #1
 800c612:	781a      	ldrb	r2, [r3, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	3301      	adds	r3, #1
 800c618:	430a      	orrs	r2, r1
 800c61a:	b2d2      	uxtb	r2, r2
 800c61c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s02v09, 0u, 0xffu);
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	789b      	ldrb	r3, [r3, #2]
 800c622:	22ff      	movs	r2, #255	@ 0xff
 800c624:	2100      	movs	r1, #0
 800c626:	4618      	mov	r0, r3
 800c628:	f7fc fd96 	bl	8009158 <pack_left_shift_u8>
 800c62c:	4603      	mov	r3, r0
 800c62e:	4619      	mov	r1, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3302      	adds	r3, #2
 800c634:	781a      	ldrb	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3302      	adds	r3, #2
 800c63a:	430a      	orrs	r2, r1
 800c63c:	b2d2      	uxtb	r2, r2
 800c63e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s02v10, 0u, 0xffu);
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	78db      	ldrb	r3, [r3, #3]
 800c644:	22ff      	movs	r2, #255	@ 0xff
 800c646:	2100      	movs	r1, #0
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fc fd85 	bl	8009158 <pack_left_shift_u8>
 800c64e:	4603      	mov	r3, r0
 800c650:	4619      	mov	r1, r3
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3303      	adds	r3, #3
 800c656:	781a      	ldrb	r2, [r3, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3303      	adds	r3, #3
 800c65c:	430a      	orrs	r2, r1
 800c65e:	b2d2      	uxtb	r2, r2
 800c660:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s02v11, 0u, 0xffu);
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	791b      	ldrb	r3, [r3, #4]
 800c666:	22ff      	movs	r2, #255	@ 0xff
 800c668:	2100      	movs	r1, #0
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fc fd74 	bl	8009158 <pack_left_shift_u8>
 800c670:	4603      	mov	r3, r0
 800c672:	4619      	mov	r1, r3
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3304      	adds	r3, #4
 800c678:	781a      	ldrb	r2, [r3, #0]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3304      	adds	r3, #4
 800c67e:	430a      	orrs	r2, r1
 800c680:	b2d2      	uxtb	r2, r2
 800c682:	701a      	strb	r2, [r3, #0]

    return (5);
 800c684:	2305      	movs	r3, #5
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
	...

0800c690 <can1_ams_s02_voltages_2_s02v07_encode>:

    return 0;
}

uint8_t can1_ams_s02_voltages_2_s02v07_encode(double value)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c69a:	f04f 0200 	mov.w	r2, #0
 800c69e:	4b10      	ldr	r3, [pc, #64]	@ (800c6e0 <can1_ams_s02_voltages_2_s02v07_encode+0x50>)
 800c6a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6a4:	f7f3 fd94 	bl	80001d0 <__aeabi_dsub>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	a309      	add	r3, pc, #36	@ (adr r3, 800c6d8 <can1_ams_s02_voltages_2_s02v07_encode+0x48>)
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	f7f4 f86d 	bl	8000794 <__aeabi_ddiv>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	4610      	mov	r0, r2
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	f7f4 f9ff 	bl	8000ac4 <__aeabi_d2uiz>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	b2db      	uxtb	r3, r3
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	f3af 8000 	nop.w
 800c6d8:	fcce1c58 	.word	0xfcce1c58
 800c6dc:	3f800e6a 	.word	0x3f800e6a
 800c6e0:	40040000 	.word	0x40040000
 800c6e4:	00000000 	.word	0x00000000

0800c6e8 <can1_ams_s02_voltages_2_s02v08_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v08_encode(double value)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c6f2:	f04f 0200 	mov.w	r2, #0
 800c6f6:	4b10      	ldr	r3, [pc, #64]	@ (800c738 <can1_ams_s02_voltages_2_s02v08_encode+0x50>)
 800c6f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6fc:	f7f3 fd68 	bl	80001d0 <__aeabi_dsub>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4610      	mov	r0, r2
 800c706:	4619      	mov	r1, r3
 800c708:	a309      	add	r3, pc, #36	@ (adr r3, 800c730 <can1_ams_s02_voltages_2_s02v08_encode+0x48>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f7f4 f841 	bl	8000794 <__aeabi_ddiv>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4610      	mov	r0, r2
 800c718:	4619      	mov	r1, r3
 800c71a:	f7f4 f9d3 	bl	8000ac4 <__aeabi_d2uiz>
 800c71e:	4603      	mov	r3, r0
 800c720:	b2db      	uxtb	r3, r3
}
 800c722:	4618      	mov	r0, r3
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	f3af 8000 	nop.w
 800c730:	fcce1c58 	.word	0xfcce1c58
 800c734:	3f800e6a 	.word	0x3f800e6a
 800c738:	40040000 	.word	0x40040000
 800c73c:	00000000 	.word	0x00000000

0800c740 <can1_ams_s02_voltages_2_s02v09_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v09_encode(double value)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c74a:	f04f 0200 	mov.w	r2, #0
 800c74e:	4b10      	ldr	r3, [pc, #64]	@ (800c790 <can1_ams_s02_voltages_2_s02v09_encode+0x50>)
 800c750:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c754:	f7f3 fd3c 	bl	80001d0 <__aeabi_dsub>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	4610      	mov	r0, r2
 800c75e:	4619      	mov	r1, r3
 800c760:	a309      	add	r3, pc, #36	@ (adr r3, 800c788 <can1_ams_s02_voltages_2_s02v09_encode+0x48>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	f7f4 f815 	bl	8000794 <__aeabi_ddiv>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4610      	mov	r0, r2
 800c770:	4619      	mov	r1, r3
 800c772:	f7f4 f9a7 	bl	8000ac4 <__aeabi_d2uiz>
 800c776:	4603      	mov	r3, r0
 800c778:	b2db      	uxtb	r3, r3
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	f3af 8000 	nop.w
 800c788:	fcce1c58 	.word	0xfcce1c58
 800c78c:	3f800e6a 	.word	0x3f800e6a
 800c790:	40040000 	.word	0x40040000
 800c794:	00000000 	.word	0x00000000

0800c798 <can1_ams_s02_voltages_2_s02v10_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v10_encode(double value)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c7a2:	f04f 0200 	mov.w	r2, #0
 800c7a6:	4b10      	ldr	r3, [pc, #64]	@ (800c7e8 <can1_ams_s02_voltages_2_s02v10_encode+0x50>)
 800c7a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7ac:	f7f3 fd10 	bl	80001d0 <__aeabi_dsub>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	a309      	add	r3, pc, #36	@ (adr r3, 800c7e0 <can1_ams_s02_voltages_2_s02v10_encode+0x48>)
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	f7f3 ffe9 	bl	8000794 <__aeabi_ddiv>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	f7f4 f97b 	bl	8000ac4 <__aeabi_d2uiz>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	b2db      	uxtb	r3, r3
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	f3af 8000 	nop.w
 800c7e0:	fcce1c58 	.word	0xfcce1c58
 800c7e4:	3f800e6a 	.word	0x3f800e6a
 800c7e8:	40040000 	.word	0x40040000

0800c7ec <can1_ams_s03_voltages_1_pack>:

int can1_ams_s03_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s03_voltages_1_t *src_p,
    size_t size)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b05      	cmp	r3, #5
 800c7fc:	d802      	bhi.n	800c804 <can1_ams_s03_voltages_1_pack+0x18>
        return (-EINVAL);
 800c7fe:	f06f 0315 	mvn.w	r3, #21
 800c802:	e069      	b.n	800c8d8 <can1_ams_s03_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800c804:	2206      	movs	r2, #6
 800c806:	2100      	movs	r1, #0
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f003 ffd5 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s03v01, 0u, 0xffu);
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	22ff      	movs	r2, #255	@ 0xff
 800c814:	2100      	movs	r1, #0
 800c816:	4618      	mov	r0, r3
 800c818:	f7fc fc9e 	bl	8009158 <pack_left_shift_u8>
 800c81c:	4603      	mov	r3, r0
 800c81e:	461a      	mov	r2, r3
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	4313      	orrs	r3, r2
 800c826:	b2da      	uxtb	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s03v02, 0u, 0xffu);
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	785b      	ldrb	r3, [r3, #1]
 800c830:	22ff      	movs	r2, #255	@ 0xff
 800c832:	2100      	movs	r1, #0
 800c834:	4618      	mov	r0, r3
 800c836:	f7fc fc8f 	bl	8009158 <pack_left_shift_u8>
 800c83a:	4603      	mov	r3, r0
 800c83c:	4619      	mov	r1, r3
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3301      	adds	r3, #1
 800c842:	781a      	ldrb	r2, [r3, #0]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3301      	adds	r3, #1
 800c848:	430a      	orrs	r2, r1
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s03v03, 0u, 0xffu);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	789b      	ldrb	r3, [r3, #2]
 800c852:	22ff      	movs	r2, #255	@ 0xff
 800c854:	2100      	movs	r1, #0
 800c856:	4618      	mov	r0, r3
 800c858:	f7fc fc7e 	bl	8009158 <pack_left_shift_u8>
 800c85c:	4603      	mov	r3, r0
 800c85e:	4619      	mov	r1, r3
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3302      	adds	r3, #2
 800c864:	781a      	ldrb	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3302      	adds	r3, #2
 800c86a:	430a      	orrs	r2, r1
 800c86c:	b2d2      	uxtb	r2, r2
 800c86e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s03v04, 0u, 0xffu);
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	78db      	ldrb	r3, [r3, #3]
 800c874:	22ff      	movs	r2, #255	@ 0xff
 800c876:	2100      	movs	r1, #0
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fc fc6d 	bl	8009158 <pack_left_shift_u8>
 800c87e:	4603      	mov	r3, r0
 800c880:	4619      	mov	r1, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3303      	adds	r3, #3
 800c886:	781a      	ldrb	r2, [r3, #0]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3303      	adds	r3, #3
 800c88c:	430a      	orrs	r2, r1
 800c88e:	b2d2      	uxtb	r2, r2
 800c890:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s03v05, 0u, 0xffu);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	791b      	ldrb	r3, [r3, #4]
 800c896:	22ff      	movs	r2, #255	@ 0xff
 800c898:	2100      	movs	r1, #0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fc fc5c 	bl	8009158 <pack_left_shift_u8>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	781a      	ldrb	r2, [r3, #0]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	b2d2      	uxtb	r2, r2
 800c8b2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s03v06, 0u, 0xffu);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	795b      	ldrb	r3, [r3, #5]
 800c8b8:	22ff      	movs	r2, #255	@ 0xff
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fc fc4b 	bl	8009158 <pack_left_shift_u8>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3305      	adds	r3, #5
 800c8ca:	781a      	ldrb	r2, [r3, #0]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	3305      	adds	r3, #5
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	b2d2      	uxtb	r2, r2
 800c8d4:	701a      	strb	r2, [r3, #0]

    return (6);
 800c8d6:	2306      	movs	r3, #6
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <can1_ams_s03_voltages_1_s03v01_encode>:

    return 0;
}

uint8_t can1_ams_s03_voltages_1_s03v01_encode(double value)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c8ea:	f04f 0200 	mov.w	r2, #0
 800c8ee:	4b10      	ldr	r3, [pc, #64]	@ (800c930 <can1_ams_s03_voltages_1_s03v01_encode+0x50>)
 800c8f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8f4:	f7f3 fc6c 	bl	80001d0 <__aeabi_dsub>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4619      	mov	r1, r3
 800c900:	a309      	add	r3, pc, #36	@ (adr r3, 800c928 <can1_ams_s03_voltages_1_s03v01_encode+0x48>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 ff45 	bl	8000794 <__aeabi_ddiv>
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	4610      	mov	r0, r2
 800c910:	4619      	mov	r1, r3
 800c912:	f7f4 f8d7 	bl	8000ac4 <__aeabi_d2uiz>
 800c916:	4603      	mov	r3, r0
 800c918:	b2db      	uxtb	r3, r3
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	f3af 8000 	nop.w
 800c928:	fcce1c58 	.word	0xfcce1c58
 800c92c:	3f800e6a 	.word	0x3f800e6a
 800c930:	40040000 	.word	0x40040000
 800c934:	00000000 	.word	0x00000000

0800c938 <can1_ams_s03_voltages_1_s03v02_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v02_encode(double value)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c942:	f04f 0200 	mov.w	r2, #0
 800c946:	4b10      	ldr	r3, [pc, #64]	@ (800c988 <can1_ams_s03_voltages_1_s03v02_encode+0x50>)
 800c948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c94c:	f7f3 fc40 	bl	80001d0 <__aeabi_dsub>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4610      	mov	r0, r2
 800c956:	4619      	mov	r1, r3
 800c958:	a309      	add	r3, pc, #36	@ (adr r3, 800c980 <can1_ams_s03_voltages_1_s03v02_encode+0x48>)
 800c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95e:	f7f3 ff19 	bl	8000794 <__aeabi_ddiv>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4610      	mov	r0, r2
 800c968:	4619      	mov	r1, r3
 800c96a:	f7f4 f8ab 	bl	8000ac4 <__aeabi_d2uiz>
 800c96e:	4603      	mov	r3, r0
 800c970:	b2db      	uxtb	r3, r3
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	f3af 8000 	nop.w
 800c980:	fcce1c58 	.word	0xfcce1c58
 800c984:	3f800e6a 	.word	0x3f800e6a
 800c988:	40040000 	.word	0x40040000
 800c98c:	00000000 	.word	0x00000000

0800c990 <can1_ams_s03_voltages_1_s03v03_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v03_encode(double value)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c99a:	f04f 0200 	mov.w	r2, #0
 800c99e:	4b10      	ldr	r3, [pc, #64]	@ (800c9e0 <can1_ams_s03_voltages_1_s03v03_encode+0x50>)
 800c9a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9a4:	f7f3 fc14 	bl	80001d0 <__aeabi_dsub>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	a309      	add	r3, pc, #36	@ (adr r3, 800c9d8 <can1_ams_s03_voltages_1_s03v03_encode+0x48>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	f7f3 feed 	bl	8000794 <__aeabi_ddiv>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4610      	mov	r0, r2
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	f7f4 f87f 	bl	8000ac4 <__aeabi_d2uiz>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	b2db      	uxtb	r3, r3
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	f3af 8000 	nop.w
 800c9d8:	fcce1c58 	.word	0xfcce1c58
 800c9dc:	3f800e6a 	.word	0x3f800e6a
 800c9e0:	40040000 	.word	0x40040000
 800c9e4:	00000000 	.word	0x00000000

0800c9e8 <can1_ams_s03_voltages_1_s03v04_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v04_encode(double value)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c9f2:	f04f 0200 	mov.w	r2, #0
 800c9f6:	4b10      	ldr	r3, [pc, #64]	@ (800ca38 <can1_ams_s03_voltages_1_s03v04_encode+0x50>)
 800c9f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9fc:	f7f3 fbe8 	bl	80001d0 <__aeabi_dsub>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4610      	mov	r0, r2
 800ca06:	4619      	mov	r1, r3
 800ca08:	a309      	add	r3, pc, #36	@ (adr r3, 800ca30 <can1_ams_s03_voltages_1_s03v04_encode+0x48>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fec1 	bl	8000794 <__aeabi_ddiv>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4610      	mov	r0, r2
 800ca18:	4619      	mov	r1, r3
 800ca1a:	f7f4 f853 	bl	8000ac4 <__aeabi_d2uiz>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	b2db      	uxtb	r3, r3
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	f3af 8000 	nop.w
 800ca30:	fcce1c58 	.word	0xfcce1c58
 800ca34:	3f800e6a 	.word	0x3f800e6a
 800ca38:	40040000 	.word	0x40040000
 800ca3c:	00000000 	.word	0x00000000

0800ca40 <can1_ams_s03_voltages_1_s03v05_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v05_encode(double value)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ca4a:	f04f 0200 	mov.w	r2, #0
 800ca4e:	4b10      	ldr	r3, [pc, #64]	@ (800ca90 <can1_ams_s03_voltages_1_s03v05_encode+0x50>)
 800ca50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca54:	f7f3 fbbc 	bl	80001d0 <__aeabi_dsub>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	4619      	mov	r1, r3
 800ca60:	a309      	add	r3, pc, #36	@ (adr r3, 800ca88 <can1_ams_s03_voltages_1_s03v05_encode+0x48>)
 800ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca66:	f7f3 fe95 	bl	8000794 <__aeabi_ddiv>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	4610      	mov	r0, r2
 800ca70:	4619      	mov	r1, r3
 800ca72:	f7f4 f827 	bl	8000ac4 <__aeabi_d2uiz>
 800ca76:	4603      	mov	r3, r0
 800ca78:	b2db      	uxtb	r3, r3
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	f3af 8000 	nop.w
 800ca88:	fcce1c58 	.word	0xfcce1c58
 800ca8c:	3f800e6a 	.word	0x3f800e6a
 800ca90:	40040000 	.word	0x40040000
 800ca94:	00000000 	.word	0x00000000

0800ca98 <can1_ams_s03_voltages_1_s03v06_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v06_encode(double value)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800caa2:	f04f 0200 	mov.w	r2, #0
 800caa6:	4b10      	ldr	r3, [pc, #64]	@ (800cae8 <can1_ams_s03_voltages_1_s03v06_encode+0x50>)
 800caa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caac:	f7f3 fb90 	bl	80001d0 <__aeabi_dsub>
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	4610      	mov	r0, r2
 800cab6:	4619      	mov	r1, r3
 800cab8:	a309      	add	r3, pc, #36	@ (adr r3, 800cae0 <can1_ams_s03_voltages_1_s03v06_encode+0x48>)
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	f7f3 fe69 	bl	8000794 <__aeabi_ddiv>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	4610      	mov	r0, r2
 800cac8:	4619      	mov	r1, r3
 800caca:	f7f3 fffb 	bl	8000ac4 <__aeabi_d2uiz>
 800cace:	4603      	mov	r3, r0
 800cad0:	b2db      	uxtb	r3, r3
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	f3af 8000 	nop.w
 800cae0:	fcce1c58 	.word	0xfcce1c58
 800cae4:	3f800e6a 	.word	0x3f800e6a
 800cae8:	40040000 	.word	0x40040000

0800caec <can1_ams_s03_voltages_2_pack>:

int can1_ams_s03_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s03_voltages_2_t *src_p,
    size_t size)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b04      	cmp	r3, #4
 800cafc:	d802      	bhi.n	800cb04 <can1_ams_s03_voltages_2_pack+0x18>
        return (-EINVAL);
 800cafe:	f06f 0315 	mvn.w	r3, #21
 800cb02:	e058      	b.n	800cbb6 <can1_ams_s03_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800cb04:	2205      	movs	r2, #5
 800cb06:	2100      	movs	r1, #0
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f003 fe55 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s03v07, 0u, 0xffu);
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	22ff      	movs	r2, #255	@ 0xff
 800cb14:	2100      	movs	r1, #0
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fc fb1e 	bl	8009158 <pack_left_shift_u8>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	b2da      	uxtb	r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s03v08, 0u, 0xffu);
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	785b      	ldrb	r3, [r3, #1]
 800cb30:	22ff      	movs	r2, #255	@ 0xff
 800cb32:	2100      	movs	r1, #0
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fc fb0f 	bl	8009158 <pack_left_shift_u8>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3301      	adds	r3, #1
 800cb42:	781a      	ldrb	r2, [r3, #0]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3301      	adds	r3, #1
 800cb48:	430a      	orrs	r2, r1
 800cb4a:	b2d2      	uxtb	r2, r2
 800cb4c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s03v09, 0u, 0xffu);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	789b      	ldrb	r3, [r3, #2]
 800cb52:	22ff      	movs	r2, #255	@ 0xff
 800cb54:	2100      	movs	r1, #0
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fc fafe 	bl	8009158 <pack_left_shift_u8>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	4619      	mov	r1, r3
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3302      	adds	r3, #2
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3302      	adds	r3, #2
 800cb6a:	430a      	orrs	r2, r1
 800cb6c:	b2d2      	uxtb	r2, r2
 800cb6e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s03v10, 0u, 0xffu);
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	78db      	ldrb	r3, [r3, #3]
 800cb74:	22ff      	movs	r2, #255	@ 0xff
 800cb76:	2100      	movs	r1, #0
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fc faed 	bl	8009158 <pack_left_shift_u8>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	4619      	mov	r1, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3303      	adds	r3, #3
 800cb86:	781a      	ldrb	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3303      	adds	r3, #3
 800cb8c:	430a      	orrs	r2, r1
 800cb8e:	b2d2      	uxtb	r2, r2
 800cb90:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s03v11, 0u, 0xffu);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	791b      	ldrb	r3, [r3, #4]
 800cb96:	22ff      	movs	r2, #255	@ 0xff
 800cb98:	2100      	movs	r1, #0
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fc fadc 	bl	8009158 <pack_left_shift_u8>
 800cba0:	4603      	mov	r3, r0
 800cba2:	4619      	mov	r1, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	3304      	adds	r3, #4
 800cba8:	781a      	ldrb	r2, [r3, #0]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3304      	adds	r3, #4
 800cbae:	430a      	orrs	r2, r1
 800cbb0:	b2d2      	uxtb	r2, r2
 800cbb2:	701a      	strb	r2, [r3, #0]

    return (5);
 800cbb4:	2305      	movs	r3, #5
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
	...

0800cbc0 <can1_ams_s03_voltages_2_s03v07_encode>:

    return 0;
}

uint8_t can1_ams_s03_voltages_2_s03v07_encode(double value)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cbca:	f04f 0200 	mov.w	r2, #0
 800cbce:	4b10      	ldr	r3, [pc, #64]	@ (800cc10 <can1_ams_s03_voltages_2_s03v07_encode+0x50>)
 800cbd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbd4:	f7f3 fafc 	bl	80001d0 <__aeabi_dsub>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4610      	mov	r0, r2
 800cbde:	4619      	mov	r1, r3
 800cbe0:	a309      	add	r3, pc, #36	@ (adr r3, 800cc08 <can1_ams_s03_voltages_2_s03v07_encode+0x48>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fdd5 	bl	8000794 <__aeabi_ddiv>
 800cbea:	4602      	mov	r2, r0
 800cbec:	460b      	mov	r3, r1
 800cbee:	4610      	mov	r0, r2
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	f7f3 ff67 	bl	8000ac4 <__aeabi_d2uiz>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	b2db      	uxtb	r3, r3
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	f3af 8000 	nop.w
 800cc08:	fcce1c58 	.word	0xfcce1c58
 800cc0c:	3f800e6a 	.word	0x3f800e6a
 800cc10:	40040000 	.word	0x40040000
 800cc14:	00000000 	.word	0x00000000

0800cc18 <can1_ams_s03_voltages_2_s03v08_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v08_encode(double value)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cc22:	f04f 0200 	mov.w	r2, #0
 800cc26:	4b10      	ldr	r3, [pc, #64]	@ (800cc68 <can1_ams_s03_voltages_2_s03v08_encode+0x50>)
 800cc28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc2c:	f7f3 fad0 	bl	80001d0 <__aeabi_dsub>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	4610      	mov	r0, r2
 800cc36:	4619      	mov	r1, r3
 800cc38:	a309      	add	r3, pc, #36	@ (adr r3, 800cc60 <can1_ams_s03_voltages_2_s03v08_encode+0x48>)
 800cc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3e:	f7f3 fda9 	bl	8000794 <__aeabi_ddiv>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	4610      	mov	r0, r2
 800cc48:	4619      	mov	r1, r3
 800cc4a:	f7f3 ff3b 	bl	8000ac4 <__aeabi_d2uiz>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	b2db      	uxtb	r3, r3
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	f3af 8000 	nop.w
 800cc60:	fcce1c58 	.word	0xfcce1c58
 800cc64:	3f800e6a 	.word	0x3f800e6a
 800cc68:	40040000 	.word	0x40040000
 800cc6c:	00000000 	.word	0x00000000

0800cc70 <can1_ams_s03_voltages_2_s03v09_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v09_encode(double value)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cc7a:	f04f 0200 	mov.w	r2, #0
 800cc7e:	4b10      	ldr	r3, [pc, #64]	@ (800ccc0 <can1_ams_s03_voltages_2_s03v09_encode+0x50>)
 800cc80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc84:	f7f3 faa4 	bl	80001d0 <__aeabi_dsub>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	4619      	mov	r1, r3
 800cc90:	a309      	add	r3, pc, #36	@ (adr r3, 800ccb8 <can1_ams_s03_voltages_2_s03v09_encode+0x48>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	f7f3 fd7d 	bl	8000794 <__aeabi_ddiv>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	4610      	mov	r0, r2
 800cca0:	4619      	mov	r1, r3
 800cca2:	f7f3 ff0f 	bl	8000ac4 <__aeabi_d2uiz>
 800cca6:	4603      	mov	r3, r0
 800cca8:	b2db      	uxtb	r3, r3
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	f3af 8000 	nop.w
 800ccb8:	fcce1c58 	.word	0xfcce1c58
 800ccbc:	3f800e6a 	.word	0x3f800e6a
 800ccc0:	40040000 	.word	0x40040000
 800ccc4:	00000000 	.word	0x00000000

0800ccc8 <can1_ams_s03_voltages_2_s03v10_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v10_encode(double value)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ccd2:	f04f 0200 	mov.w	r2, #0
 800ccd6:	4b10      	ldr	r3, [pc, #64]	@ (800cd18 <can1_ams_s03_voltages_2_s03v10_encode+0x50>)
 800ccd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccdc:	f7f3 fa78 	bl	80001d0 <__aeabi_dsub>
 800cce0:	4602      	mov	r2, r0
 800cce2:	460b      	mov	r3, r1
 800cce4:	4610      	mov	r0, r2
 800cce6:	4619      	mov	r1, r3
 800cce8:	a309      	add	r3, pc, #36	@ (adr r3, 800cd10 <can1_ams_s03_voltages_2_s03v10_encode+0x48>)
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	f7f3 fd51 	bl	8000794 <__aeabi_ddiv>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f7f3 fee3 	bl	8000ac4 <__aeabi_d2uiz>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	b2db      	uxtb	r3, r3
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w
 800cd10:	fcce1c58 	.word	0xfcce1c58
 800cd14:	3f800e6a 	.word	0x3f800e6a
 800cd18:	40040000 	.word	0x40040000
 800cd1c:	00000000 	.word	0x00000000

0800cd20 <can1_ams_s03_voltages_2_s03v11_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v11_encode(double value)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cd2a:	f04f 0200 	mov.w	r2, #0
 800cd2e:	4b10      	ldr	r3, [pc, #64]	@ (800cd70 <can1_ams_s03_voltages_2_s03v11_encode+0x50>)
 800cd30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd34:	f7f3 fa4c 	bl	80001d0 <__aeabi_dsub>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	4619      	mov	r1, r3
 800cd40:	a309      	add	r3, pc, #36	@ (adr r3, 800cd68 <can1_ams_s03_voltages_2_s03v11_encode+0x48>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	f7f3 fd25 	bl	8000794 <__aeabi_ddiv>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	4610      	mov	r0, r2
 800cd50:	4619      	mov	r1, r3
 800cd52:	f7f3 feb7 	bl	8000ac4 <__aeabi_d2uiz>
 800cd56:	4603      	mov	r3, r0
 800cd58:	b2db      	uxtb	r3, r3
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	f3af 8000 	nop.w
 800cd68:	fcce1c58 	.word	0xfcce1c58
 800cd6c:	3f800e6a 	.word	0x3f800e6a
 800cd70:	40040000 	.word	0x40040000

0800cd74 <can1_ams_s04_voltages_1_pack>:

int can1_ams_s04_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s04_voltages_1_t *src_p,
    size_t size)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b05      	cmp	r3, #5
 800cd84:	d802      	bhi.n	800cd8c <can1_ams_s04_voltages_1_pack+0x18>
        return (-EINVAL);
 800cd86:	f06f 0315 	mvn.w	r3, #21
 800cd8a:	e069      	b.n	800ce60 <can1_ams_s04_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800cd8c:	2206      	movs	r2, #6
 800cd8e:	2100      	movs	r1, #0
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f003 fd11 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s04v01, 0u, 0xffu);
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	22ff      	movs	r2, #255	@ 0xff
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fc f9da 	bl	8009158 <pack_left_shift_u8>
 800cda4:	4603      	mov	r3, r0
 800cda6:	461a      	mov	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s04v02, 0u, 0xffu);
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	785b      	ldrb	r3, [r3, #1]
 800cdb8:	22ff      	movs	r2, #255	@ 0xff
 800cdba:	2100      	movs	r1, #0
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fc f9cb 	bl	8009158 <pack_left_shift_u8>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	781a      	ldrb	r2, [r3, #0]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	430a      	orrs	r2, r1
 800cdd2:	b2d2      	uxtb	r2, r2
 800cdd4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s04v03, 0u, 0xffu);
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	789b      	ldrb	r3, [r3, #2]
 800cdda:	22ff      	movs	r2, #255	@ 0xff
 800cddc:	2100      	movs	r1, #0
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fc f9ba 	bl	8009158 <pack_left_shift_u8>
 800cde4:	4603      	mov	r3, r0
 800cde6:	4619      	mov	r1, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	3302      	adds	r3, #2
 800cdec:	781a      	ldrb	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	3302      	adds	r3, #2
 800cdf2:	430a      	orrs	r2, r1
 800cdf4:	b2d2      	uxtb	r2, r2
 800cdf6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s04v04, 0u, 0xffu);
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	78db      	ldrb	r3, [r3, #3]
 800cdfc:	22ff      	movs	r2, #255	@ 0xff
 800cdfe:	2100      	movs	r1, #0
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fc f9a9 	bl	8009158 <pack_left_shift_u8>
 800ce06:	4603      	mov	r3, r0
 800ce08:	4619      	mov	r1, r3
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	3303      	adds	r3, #3
 800ce0e:	781a      	ldrb	r2, [r3, #0]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	3303      	adds	r3, #3
 800ce14:	430a      	orrs	r2, r1
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s04v05, 0u, 0xffu);
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	791b      	ldrb	r3, [r3, #4]
 800ce1e:	22ff      	movs	r2, #255	@ 0xff
 800ce20:	2100      	movs	r1, #0
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fc f998 	bl	8009158 <pack_left_shift_u8>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	781a      	ldrb	r2, [r3, #0]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	3304      	adds	r3, #4
 800ce36:	430a      	orrs	r2, r1
 800ce38:	b2d2      	uxtb	r2, r2
 800ce3a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s04v06, 0u, 0xffu);
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	795b      	ldrb	r3, [r3, #5]
 800ce40:	22ff      	movs	r2, #255	@ 0xff
 800ce42:	2100      	movs	r1, #0
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7fc f987 	bl	8009158 <pack_left_shift_u8>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3305      	adds	r3, #5
 800ce52:	781a      	ldrb	r2, [r3, #0]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	3305      	adds	r3, #5
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	b2d2      	uxtb	r2, r2
 800ce5c:	701a      	strb	r2, [r3, #0]

    return (6);
 800ce5e:	2306      	movs	r3, #6
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <can1_ams_s04_voltages_1_s04v01_encode>:

    return 0;
}

uint8_t can1_ams_s04_voltages_1_s04v01_encode(double value)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ce72:	f04f 0200 	mov.w	r2, #0
 800ce76:	4b10      	ldr	r3, [pc, #64]	@ (800ceb8 <can1_ams_s04_voltages_1_s04v01_encode+0x50>)
 800ce78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce7c:	f7f3 f9a8 	bl	80001d0 <__aeabi_dsub>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4610      	mov	r0, r2
 800ce86:	4619      	mov	r1, r3
 800ce88:	a309      	add	r3, pc, #36	@ (adr r3, 800ceb0 <can1_ams_s04_voltages_1_s04v01_encode+0x48>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f7f3 fc81 	bl	8000794 <__aeabi_ddiv>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	4610      	mov	r0, r2
 800ce98:	4619      	mov	r1, r3
 800ce9a:	f7f3 fe13 	bl	8000ac4 <__aeabi_d2uiz>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	b2db      	uxtb	r3, r3
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w
 800ceb0:	fcce1c58 	.word	0xfcce1c58
 800ceb4:	3f800e6a 	.word	0x3f800e6a
 800ceb8:	40040000 	.word	0x40040000
 800cebc:	00000000 	.word	0x00000000

0800cec0 <can1_ams_s04_voltages_1_s04v02_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v02_encode(double value)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ceca:	f04f 0200 	mov.w	r2, #0
 800cece:	4b10      	ldr	r3, [pc, #64]	@ (800cf10 <can1_ams_s04_voltages_1_s04v02_encode+0x50>)
 800ced0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ced4:	f7f3 f97c 	bl	80001d0 <__aeabi_dsub>
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	4610      	mov	r0, r2
 800cede:	4619      	mov	r1, r3
 800cee0:	a309      	add	r3, pc, #36	@ (adr r3, 800cf08 <can1_ams_s04_voltages_1_s04v02_encode+0x48>)
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	f7f3 fc55 	bl	8000794 <__aeabi_ddiv>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	4610      	mov	r0, r2
 800cef0:	4619      	mov	r1, r3
 800cef2:	f7f3 fde7 	bl	8000ac4 <__aeabi_d2uiz>
 800cef6:	4603      	mov	r3, r0
 800cef8:	b2db      	uxtb	r3, r3
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	f3af 8000 	nop.w
 800cf08:	fcce1c58 	.word	0xfcce1c58
 800cf0c:	3f800e6a 	.word	0x3f800e6a
 800cf10:	40040000 	.word	0x40040000
 800cf14:	00000000 	.word	0x00000000

0800cf18 <can1_ams_s04_voltages_1_s04v03_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v03_encode(double value)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cf22:	f04f 0200 	mov.w	r2, #0
 800cf26:	4b10      	ldr	r3, [pc, #64]	@ (800cf68 <can1_ams_s04_voltages_1_s04v03_encode+0x50>)
 800cf28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf2c:	f7f3 f950 	bl	80001d0 <__aeabi_dsub>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4610      	mov	r0, r2
 800cf36:	4619      	mov	r1, r3
 800cf38:	a309      	add	r3, pc, #36	@ (adr r3, 800cf60 <can1_ams_s04_voltages_1_s04v03_encode+0x48>)
 800cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3e:	f7f3 fc29 	bl	8000794 <__aeabi_ddiv>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	4610      	mov	r0, r2
 800cf48:	4619      	mov	r1, r3
 800cf4a:	f7f3 fdbb 	bl	8000ac4 <__aeabi_d2uiz>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	b2db      	uxtb	r3, r3
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	f3af 8000 	nop.w
 800cf60:	fcce1c58 	.word	0xfcce1c58
 800cf64:	3f800e6a 	.word	0x3f800e6a
 800cf68:	40040000 	.word	0x40040000
 800cf6c:	00000000 	.word	0x00000000

0800cf70 <can1_ams_s04_voltages_1_s04v04_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v04_encode(double value)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	4b10      	ldr	r3, [pc, #64]	@ (800cfc0 <can1_ams_s04_voltages_1_s04v04_encode+0x50>)
 800cf80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf84:	f7f3 f924 	bl	80001d0 <__aeabi_dsub>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4619      	mov	r1, r3
 800cf90:	a309      	add	r3, pc, #36	@ (adr r3, 800cfb8 <can1_ams_s04_voltages_1_s04v04_encode+0x48>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	f7f3 fbfd 	bl	8000794 <__aeabi_ddiv>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4610      	mov	r0, r2
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	f7f3 fd8f 	bl	8000ac4 <__aeabi_d2uiz>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	b2db      	uxtb	r3, r3
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	f3af 8000 	nop.w
 800cfb8:	fcce1c58 	.word	0xfcce1c58
 800cfbc:	3f800e6a 	.word	0x3f800e6a
 800cfc0:	40040000 	.word	0x40040000
 800cfc4:	00000000 	.word	0x00000000

0800cfc8 <can1_ams_s04_voltages_1_s04v05_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v05_encode(double value)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cfd2:	f04f 0200 	mov.w	r2, #0
 800cfd6:	4b10      	ldr	r3, [pc, #64]	@ (800d018 <can1_ams_s04_voltages_1_s04v05_encode+0x50>)
 800cfd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfdc:	f7f3 f8f8 	bl	80001d0 <__aeabi_dsub>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	a309      	add	r3, pc, #36	@ (adr r3, 800d010 <can1_ams_s04_voltages_1_s04v05_encode+0x48>)
 800cfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfee:	f7f3 fbd1 	bl	8000794 <__aeabi_ddiv>
 800cff2:	4602      	mov	r2, r0
 800cff4:	460b      	mov	r3, r1
 800cff6:	4610      	mov	r0, r2
 800cff8:	4619      	mov	r1, r3
 800cffa:	f7f3 fd63 	bl	8000ac4 <__aeabi_d2uiz>
 800cffe:	4603      	mov	r3, r0
 800d000:	b2db      	uxtb	r3, r3
}
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	f3af 8000 	nop.w
 800d010:	fcce1c58 	.word	0xfcce1c58
 800d014:	3f800e6a 	.word	0x3f800e6a
 800d018:	40040000 	.word	0x40040000
 800d01c:	00000000 	.word	0x00000000

0800d020 <can1_ams_s04_voltages_1_s04v06_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v06_encode(double value)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d02a:	f04f 0200 	mov.w	r2, #0
 800d02e:	4b10      	ldr	r3, [pc, #64]	@ (800d070 <can1_ams_s04_voltages_1_s04v06_encode+0x50>)
 800d030:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d034:	f7f3 f8cc 	bl	80001d0 <__aeabi_dsub>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4610      	mov	r0, r2
 800d03e:	4619      	mov	r1, r3
 800d040:	a309      	add	r3, pc, #36	@ (adr r3, 800d068 <can1_ams_s04_voltages_1_s04v06_encode+0x48>)
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	f7f3 fba5 	bl	8000794 <__aeabi_ddiv>
 800d04a:	4602      	mov	r2, r0
 800d04c:	460b      	mov	r3, r1
 800d04e:	4610      	mov	r0, r2
 800d050:	4619      	mov	r1, r3
 800d052:	f7f3 fd37 	bl	8000ac4 <__aeabi_d2uiz>
 800d056:	4603      	mov	r3, r0
 800d058:	b2db      	uxtb	r3, r3
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	f3af 8000 	nop.w
 800d068:	fcce1c58 	.word	0xfcce1c58
 800d06c:	3f800e6a 	.word	0x3f800e6a
 800d070:	40040000 	.word	0x40040000

0800d074 <can1_ams_s04_voltages_2_pack>:

int can1_ams_s04_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s04_voltages_2_t *src_p,
    size_t size)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b04      	cmp	r3, #4
 800d084:	d802      	bhi.n	800d08c <can1_ams_s04_voltages_2_pack+0x18>
        return (-EINVAL);
 800d086:	f06f 0315 	mvn.w	r3, #21
 800d08a:	e058      	b.n	800d13e <can1_ams_s04_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800d08c:	2205      	movs	r2, #5
 800d08e:	2100      	movs	r1, #0
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f003 fb91 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s04v07, 0u, 0xffu);
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	22ff      	movs	r2, #255	@ 0xff
 800d09c:	2100      	movs	r1, #0
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fc f85a 	bl	8009158 <pack_left_shift_u8>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s04v08, 0u, 0xffu);
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	785b      	ldrb	r3, [r3, #1]
 800d0b8:	22ff      	movs	r2, #255	@ 0xff
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fc f84b 	bl	8009158 <pack_left_shift_u8>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	781a      	ldrb	r2, [r3, #0]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	b2d2      	uxtb	r2, r2
 800d0d4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s04v09, 0u, 0xffu);
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	789b      	ldrb	r3, [r3, #2]
 800d0da:	22ff      	movs	r2, #255	@ 0xff
 800d0dc:	2100      	movs	r1, #0
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fc f83a 	bl	8009158 <pack_left_shift_u8>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3302      	adds	r3, #2
 800d0ec:	781a      	ldrb	r2, [r3, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3302      	adds	r3, #2
 800d0f2:	430a      	orrs	r2, r1
 800d0f4:	b2d2      	uxtb	r2, r2
 800d0f6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s04v10, 0u, 0xffu);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	78db      	ldrb	r3, [r3, #3]
 800d0fc:	22ff      	movs	r2, #255	@ 0xff
 800d0fe:	2100      	movs	r1, #0
 800d100:	4618      	mov	r0, r3
 800d102:	f7fc f829 	bl	8009158 <pack_left_shift_u8>
 800d106:	4603      	mov	r3, r0
 800d108:	4619      	mov	r1, r3
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3303      	adds	r3, #3
 800d10e:	781a      	ldrb	r2, [r3, #0]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3303      	adds	r3, #3
 800d114:	430a      	orrs	r2, r1
 800d116:	b2d2      	uxtb	r2, r2
 800d118:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s04v11, 0u, 0xffu);
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	791b      	ldrb	r3, [r3, #4]
 800d11e:	22ff      	movs	r2, #255	@ 0xff
 800d120:	2100      	movs	r1, #0
 800d122:	4618      	mov	r0, r3
 800d124:	f7fc f818 	bl	8009158 <pack_left_shift_u8>
 800d128:	4603      	mov	r3, r0
 800d12a:	4619      	mov	r1, r3
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	3304      	adds	r3, #4
 800d130:	781a      	ldrb	r2, [r3, #0]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3304      	adds	r3, #4
 800d136:	430a      	orrs	r2, r1
 800d138:	b2d2      	uxtb	r2, r2
 800d13a:	701a      	strb	r2, [r3, #0]

    return (5);
 800d13c:	2305      	movs	r3, #5
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
	...

0800d148 <can1_ams_s04_voltages_2_s04v07_encode>:

    return 0;
}

uint8_t can1_ams_s04_voltages_2_s04v07_encode(double value)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d152:	f04f 0200 	mov.w	r2, #0
 800d156:	4b10      	ldr	r3, [pc, #64]	@ (800d198 <can1_ams_s04_voltages_2_s04v07_encode+0x50>)
 800d158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d15c:	f7f3 f838 	bl	80001d0 <__aeabi_dsub>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4610      	mov	r0, r2
 800d166:	4619      	mov	r1, r3
 800d168:	a309      	add	r3, pc, #36	@ (adr r3, 800d190 <can1_ams_s04_voltages_2_s04v07_encode+0x48>)
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	f7f3 fb11 	bl	8000794 <__aeabi_ddiv>
 800d172:	4602      	mov	r2, r0
 800d174:	460b      	mov	r3, r1
 800d176:	4610      	mov	r0, r2
 800d178:	4619      	mov	r1, r3
 800d17a:	f7f3 fca3 	bl	8000ac4 <__aeabi_d2uiz>
 800d17e:	4603      	mov	r3, r0
 800d180:	b2db      	uxtb	r3, r3
}
 800d182:	4618      	mov	r0, r3
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	f3af 8000 	nop.w
 800d190:	fcce1c58 	.word	0xfcce1c58
 800d194:	3f800e6a 	.word	0x3f800e6a
 800d198:	40040000 	.word	0x40040000
 800d19c:	00000000 	.word	0x00000000

0800d1a0 <can1_ams_s04_voltages_2_s04v08_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v08_encode(double value)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d1aa:	f04f 0200 	mov.w	r2, #0
 800d1ae:	4b10      	ldr	r3, [pc, #64]	@ (800d1f0 <can1_ams_s04_voltages_2_s04v08_encode+0x50>)
 800d1b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1b4:	f7f3 f80c 	bl	80001d0 <__aeabi_dsub>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4610      	mov	r0, r2
 800d1be:	4619      	mov	r1, r3
 800d1c0:	a309      	add	r3, pc, #36	@ (adr r3, 800d1e8 <can1_ams_s04_voltages_2_s04v08_encode+0x48>)
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	f7f3 fae5 	bl	8000794 <__aeabi_ddiv>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	f7f3 fc77 	bl	8000ac4 <__aeabi_d2uiz>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	b2db      	uxtb	r3, r3
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	f3af 8000 	nop.w
 800d1e8:	fcce1c58 	.word	0xfcce1c58
 800d1ec:	3f800e6a 	.word	0x3f800e6a
 800d1f0:	40040000 	.word	0x40040000
 800d1f4:	00000000 	.word	0x00000000

0800d1f8 <can1_ams_s04_voltages_2_s04v09_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v09_encode(double value)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d202:	f04f 0200 	mov.w	r2, #0
 800d206:	4b10      	ldr	r3, [pc, #64]	@ (800d248 <can1_ams_s04_voltages_2_s04v09_encode+0x50>)
 800d208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d20c:	f7f2 ffe0 	bl	80001d0 <__aeabi_dsub>
 800d210:	4602      	mov	r2, r0
 800d212:	460b      	mov	r3, r1
 800d214:	4610      	mov	r0, r2
 800d216:	4619      	mov	r1, r3
 800d218:	a309      	add	r3, pc, #36	@ (adr r3, 800d240 <can1_ams_s04_voltages_2_s04v09_encode+0x48>)
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	f7f3 fab9 	bl	8000794 <__aeabi_ddiv>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	4610      	mov	r0, r2
 800d228:	4619      	mov	r1, r3
 800d22a:	f7f3 fc4b 	bl	8000ac4 <__aeabi_d2uiz>
 800d22e:	4603      	mov	r3, r0
 800d230:	b2db      	uxtb	r3, r3
}
 800d232:	4618      	mov	r0, r3
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	f3af 8000 	nop.w
 800d240:	fcce1c58 	.word	0xfcce1c58
 800d244:	3f800e6a 	.word	0x3f800e6a
 800d248:	40040000 	.word	0x40040000
 800d24c:	00000000 	.word	0x00000000

0800d250 <can1_ams_s04_voltages_2_s04v10_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v10_encode(double value)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d25a:	f04f 0200 	mov.w	r2, #0
 800d25e:	4b10      	ldr	r3, [pc, #64]	@ (800d2a0 <can1_ams_s04_voltages_2_s04v10_encode+0x50>)
 800d260:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d264:	f7f2 ffb4 	bl	80001d0 <__aeabi_dsub>
 800d268:	4602      	mov	r2, r0
 800d26a:	460b      	mov	r3, r1
 800d26c:	4610      	mov	r0, r2
 800d26e:	4619      	mov	r1, r3
 800d270:	a309      	add	r3, pc, #36	@ (adr r3, 800d298 <can1_ams_s04_voltages_2_s04v10_encode+0x48>)
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	f7f3 fa8d 	bl	8000794 <__aeabi_ddiv>
 800d27a:	4602      	mov	r2, r0
 800d27c:	460b      	mov	r3, r1
 800d27e:	4610      	mov	r0, r2
 800d280:	4619      	mov	r1, r3
 800d282:	f7f3 fc1f 	bl	8000ac4 <__aeabi_d2uiz>
 800d286:	4603      	mov	r3, r0
 800d288:	b2db      	uxtb	r3, r3
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	f3af 8000 	nop.w
 800d298:	fcce1c58 	.word	0xfcce1c58
 800d29c:	3f800e6a 	.word	0x3f800e6a
 800d2a0:	40040000 	.word	0x40040000

0800d2a4 <can1_ams_s05_voltages_1_pack>:

int can1_ams_s05_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s05_voltages_1_t *src_p,
    size_t size)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b05      	cmp	r3, #5
 800d2b4:	d802      	bhi.n	800d2bc <can1_ams_s05_voltages_1_pack+0x18>
        return (-EINVAL);
 800d2b6:	f06f 0315 	mvn.w	r3, #21
 800d2ba:	e069      	b.n	800d390 <can1_ams_s05_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800d2bc:	2206      	movs	r2, #6
 800d2be:	2100      	movs	r1, #0
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f003 fa79 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s05v01, 0u, 0xffu);
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	22ff      	movs	r2, #255	@ 0xff
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fb ff42 	bl	8009158 <pack_left_shift_u8>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s05v02, 0u, 0xffu);
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	785b      	ldrb	r3, [r3, #1]
 800d2e8:	22ff      	movs	r2, #255	@ 0xff
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fb ff33 	bl	8009158 <pack_left_shift_u8>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	781a      	ldrb	r2, [r3, #0]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	3301      	adds	r3, #1
 800d300:	430a      	orrs	r2, r1
 800d302:	b2d2      	uxtb	r2, r2
 800d304:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s05v03, 0u, 0xffu);
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	789b      	ldrb	r3, [r3, #2]
 800d30a:	22ff      	movs	r2, #255	@ 0xff
 800d30c:	2100      	movs	r1, #0
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fb ff22 	bl	8009158 <pack_left_shift_u8>
 800d314:	4603      	mov	r3, r0
 800d316:	4619      	mov	r1, r3
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	3302      	adds	r3, #2
 800d31c:	781a      	ldrb	r2, [r3, #0]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	3302      	adds	r3, #2
 800d322:	430a      	orrs	r2, r1
 800d324:	b2d2      	uxtb	r2, r2
 800d326:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s05v04, 0u, 0xffu);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	78db      	ldrb	r3, [r3, #3]
 800d32c:	22ff      	movs	r2, #255	@ 0xff
 800d32e:	2100      	movs	r1, #0
 800d330:	4618      	mov	r0, r3
 800d332:	f7fb ff11 	bl	8009158 <pack_left_shift_u8>
 800d336:	4603      	mov	r3, r0
 800d338:	4619      	mov	r1, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	3303      	adds	r3, #3
 800d33e:	781a      	ldrb	r2, [r3, #0]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	3303      	adds	r3, #3
 800d344:	430a      	orrs	r2, r1
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s05v05, 0u, 0xffu);
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	791b      	ldrb	r3, [r3, #4]
 800d34e:	22ff      	movs	r2, #255	@ 0xff
 800d350:	2100      	movs	r1, #0
 800d352:	4618      	mov	r0, r3
 800d354:	f7fb ff00 	bl	8009158 <pack_left_shift_u8>
 800d358:	4603      	mov	r3, r0
 800d35a:	4619      	mov	r1, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3304      	adds	r3, #4
 800d360:	781a      	ldrb	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3304      	adds	r3, #4
 800d366:	430a      	orrs	r2, r1
 800d368:	b2d2      	uxtb	r2, r2
 800d36a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s05v06, 0u, 0xffu);
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	795b      	ldrb	r3, [r3, #5]
 800d370:	22ff      	movs	r2, #255	@ 0xff
 800d372:	2100      	movs	r1, #0
 800d374:	4618      	mov	r0, r3
 800d376:	f7fb feef 	bl	8009158 <pack_left_shift_u8>
 800d37a:	4603      	mov	r3, r0
 800d37c:	4619      	mov	r1, r3
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3305      	adds	r3, #5
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	3305      	adds	r3, #5
 800d388:	430a      	orrs	r2, r1
 800d38a:	b2d2      	uxtb	r2, r2
 800d38c:	701a      	strb	r2, [r3, #0]

    return (6);
 800d38e:	2306      	movs	r3, #6
}
 800d390:	4618      	mov	r0, r3
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <can1_ams_s05_voltages_1_s05v01_encode>:

    return 0;
}

uint8_t can1_ams_s05_voltages_1_s05v01_encode(double value)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d3a2:	f04f 0200 	mov.w	r2, #0
 800d3a6:	4b10      	ldr	r3, [pc, #64]	@ (800d3e8 <can1_ams_s05_voltages_1_s05v01_encode+0x50>)
 800d3a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3ac:	f7f2 ff10 	bl	80001d0 <__aeabi_dsub>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	a309      	add	r3, pc, #36	@ (adr r3, 800d3e0 <can1_ams_s05_voltages_1_s05v01_encode+0x48>)
 800d3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3be:	f7f3 f9e9 	bl	8000794 <__aeabi_ddiv>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	f7f3 fb7b 	bl	8000ac4 <__aeabi_d2uiz>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	b2db      	uxtb	r3, r3
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	f3af 8000 	nop.w
 800d3e0:	fcce1c58 	.word	0xfcce1c58
 800d3e4:	3f800e6a 	.word	0x3f800e6a
 800d3e8:	40040000 	.word	0x40040000
 800d3ec:	00000000 	.word	0x00000000

0800d3f0 <can1_ams_s05_voltages_1_s05v02_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v02_encode(double value)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d3fa:	f04f 0200 	mov.w	r2, #0
 800d3fe:	4b10      	ldr	r3, [pc, #64]	@ (800d440 <can1_ams_s05_voltages_1_s05v02_encode+0x50>)
 800d400:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d404:	f7f2 fee4 	bl	80001d0 <__aeabi_dsub>
 800d408:	4602      	mov	r2, r0
 800d40a:	460b      	mov	r3, r1
 800d40c:	4610      	mov	r0, r2
 800d40e:	4619      	mov	r1, r3
 800d410:	a309      	add	r3, pc, #36	@ (adr r3, 800d438 <can1_ams_s05_voltages_1_s05v02_encode+0x48>)
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	f7f3 f9bd 	bl	8000794 <__aeabi_ddiv>
 800d41a:	4602      	mov	r2, r0
 800d41c:	460b      	mov	r3, r1
 800d41e:	4610      	mov	r0, r2
 800d420:	4619      	mov	r1, r3
 800d422:	f7f3 fb4f 	bl	8000ac4 <__aeabi_d2uiz>
 800d426:	4603      	mov	r3, r0
 800d428:	b2db      	uxtb	r3, r3
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	f3af 8000 	nop.w
 800d438:	fcce1c58 	.word	0xfcce1c58
 800d43c:	3f800e6a 	.word	0x3f800e6a
 800d440:	40040000 	.word	0x40040000
 800d444:	00000000 	.word	0x00000000

0800d448 <can1_ams_s05_voltages_1_s05v03_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v03_encode(double value)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d452:	f04f 0200 	mov.w	r2, #0
 800d456:	4b10      	ldr	r3, [pc, #64]	@ (800d498 <can1_ams_s05_voltages_1_s05v03_encode+0x50>)
 800d458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d45c:	f7f2 feb8 	bl	80001d0 <__aeabi_dsub>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	4610      	mov	r0, r2
 800d466:	4619      	mov	r1, r3
 800d468:	a309      	add	r3, pc, #36	@ (adr r3, 800d490 <can1_ams_s05_voltages_1_s05v03_encode+0x48>)
 800d46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46e:	f7f3 f991 	bl	8000794 <__aeabi_ddiv>
 800d472:	4602      	mov	r2, r0
 800d474:	460b      	mov	r3, r1
 800d476:	4610      	mov	r0, r2
 800d478:	4619      	mov	r1, r3
 800d47a:	f7f3 fb23 	bl	8000ac4 <__aeabi_d2uiz>
 800d47e:	4603      	mov	r3, r0
 800d480:	b2db      	uxtb	r3, r3
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	f3af 8000 	nop.w
 800d490:	fcce1c58 	.word	0xfcce1c58
 800d494:	3f800e6a 	.word	0x3f800e6a
 800d498:	40040000 	.word	0x40040000
 800d49c:	00000000 	.word	0x00000000

0800d4a0 <can1_ams_s05_voltages_1_s05v04_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v04_encode(double value)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d4aa:	f04f 0200 	mov.w	r2, #0
 800d4ae:	4b10      	ldr	r3, [pc, #64]	@ (800d4f0 <can1_ams_s05_voltages_1_s05v04_encode+0x50>)
 800d4b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d4b4:	f7f2 fe8c 	bl	80001d0 <__aeabi_dsub>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4610      	mov	r0, r2
 800d4be:	4619      	mov	r1, r3
 800d4c0:	a309      	add	r3, pc, #36	@ (adr r3, 800d4e8 <can1_ams_s05_voltages_1_s05v04_encode+0x48>)
 800d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c6:	f7f3 f965 	bl	8000794 <__aeabi_ddiv>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4610      	mov	r0, r2
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	f7f3 faf7 	bl	8000ac4 <__aeabi_d2uiz>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	b2db      	uxtb	r3, r3
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	f3af 8000 	nop.w
 800d4e8:	fcce1c58 	.word	0xfcce1c58
 800d4ec:	3f800e6a 	.word	0x3f800e6a
 800d4f0:	40040000 	.word	0x40040000
 800d4f4:	00000000 	.word	0x00000000

0800d4f8 <can1_ams_s05_voltages_1_s05v05_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v05_encode(double value)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d502:	f04f 0200 	mov.w	r2, #0
 800d506:	4b10      	ldr	r3, [pc, #64]	@ (800d548 <can1_ams_s05_voltages_1_s05v05_encode+0x50>)
 800d508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d50c:	f7f2 fe60 	bl	80001d0 <__aeabi_dsub>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4610      	mov	r0, r2
 800d516:	4619      	mov	r1, r3
 800d518:	a309      	add	r3, pc, #36	@ (adr r3, 800d540 <can1_ams_s05_voltages_1_s05v05_encode+0x48>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f7f3 f939 	bl	8000794 <__aeabi_ddiv>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	4610      	mov	r0, r2
 800d528:	4619      	mov	r1, r3
 800d52a:	f7f3 facb 	bl	8000ac4 <__aeabi_d2uiz>
 800d52e:	4603      	mov	r3, r0
 800d530:	b2db      	uxtb	r3, r3
}
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	f3af 8000 	nop.w
 800d540:	fcce1c58 	.word	0xfcce1c58
 800d544:	3f800e6a 	.word	0x3f800e6a
 800d548:	40040000 	.word	0x40040000
 800d54c:	00000000 	.word	0x00000000

0800d550 <can1_ams_s05_voltages_1_s05v06_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v06_encode(double value)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d55a:	f04f 0200 	mov.w	r2, #0
 800d55e:	4b10      	ldr	r3, [pc, #64]	@ (800d5a0 <can1_ams_s05_voltages_1_s05v06_encode+0x50>)
 800d560:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d564:	f7f2 fe34 	bl	80001d0 <__aeabi_dsub>
 800d568:	4602      	mov	r2, r0
 800d56a:	460b      	mov	r3, r1
 800d56c:	4610      	mov	r0, r2
 800d56e:	4619      	mov	r1, r3
 800d570:	a309      	add	r3, pc, #36	@ (adr r3, 800d598 <can1_ams_s05_voltages_1_s05v06_encode+0x48>)
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f7f3 f90d 	bl	8000794 <__aeabi_ddiv>
 800d57a:	4602      	mov	r2, r0
 800d57c:	460b      	mov	r3, r1
 800d57e:	4610      	mov	r0, r2
 800d580:	4619      	mov	r1, r3
 800d582:	f7f3 fa9f 	bl	8000ac4 <__aeabi_d2uiz>
 800d586:	4603      	mov	r3, r0
 800d588:	b2db      	uxtb	r3, r3
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	f3af 8000 	nop.w
 800d598:	fcce1c58 	.word	0xfcce1c58
 800d59c:	3f800e6a 	.word	0x3f800e6a
 800d5a0:	40040000 	.word	0x40040000

0800d5a4 <can1_ams_s05_voltages_2_pack>:

int can1_ams_s05_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s05_voltages_2_t *src_p,
    size_t size)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b04      	cmp	r3, #4
 800d5b4:	d802      	bhi.n	800d5bc <can1_ams_s05_voltages_2_pack+0x18>
        return (-EINVAL);
 800d5b6:	f06f 0315 	mvn.w	r3, #21
 800d5ba:	e058      	b.n	800d66e <can1_ams_s05_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800d5bc:	2205      	movs	r2, #5
 800d5be:	2100      	movs	r1, #0
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f003 f8f9 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s05v07, 0u, 0xffu);
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	22ff      	movs	r2, #255	@ 0xff
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fb fdc2 	bl	8009158 <pack_left_shift_u8>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s05v08, 0u, 0xffu);
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	785b      	ldrb	r3, [r3, #1]
 800d5e8:	22ff      	movs	r2, #255	@ 0xff
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fb fdb3 	bl	8009158 <pack_left_shift_u8>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	781a      	ldrb	r2, [r3, #0]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	430a      	orrs	r2, r1
 800d602:	b2d2      	uxtb	r2, r2
 800d604:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s05v09, 0u, 0xffu);
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	789b      	ldrb	r3, [r3, #2]
 800d60a:	22ff      	movs	r2, #255	@ 0xff
 800d60c:	2100      	movs	r1, #0
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fb fda2 	bl	8009158 <pack_left_shift_u8>
 800d614:	4603      	mov	r3, r0
 800d616:	4619      	mov	r1, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	3302      	adds	r3, #2
 800d61c:	781a      	ldrb	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	3302      	adds	r3, #2
 800d622:	430a      	orrs	r2, r1
 800d624:	b2d2      	uxtb	r2, r2
 800d626:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s05v10, 0u, 0xffu);
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	78db      	ldrb	r3, [r3, #3]
 800d62c:	22ff      	movs	r2, #255	@ 0xff
 800d62e:	2100      	movs	r1, #0
 800d630:	4618      	mov	r0, r3
 800d632:	f7fb fd91 	bl	8009158 <pack_left_shift_u8>
 800d636:	4603      	mov	r3, r0
 800d638:	4619      	mov	r1, r3
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	3303      	adds	r3, #3
 800d63e:	781a      	ldrb	r2, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3303      	adds	r3, #3
 800d644:	430a      	orrs	r2, r1
 800d646:	b2d2      	uxtb	r2, r2
 800d648:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s05v11, 0u, 0xffu);
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	791b      	ldrb	r3, [r3, #4]
 800d64e:	22ff      	movs	r2, #255	@ 0xff
 800d650:	2100      	movs	r1, #0
 800d652:	4618      	mov	r0, r3
 800d654:	f7fb fd80 	bl	8009158 <pack_left_shift_u8>
 800d658:	4603      	mov	r3, r0
 800d65a:	4619      	mov	r1, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	3304      	adds	r3, #4
 800d660:	781a      	ldrb	r2, [r3, #0]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	3304      	adds	r3, #4
 800d666:	430a      	orrs	r2, r1
 800d668:	b2d2      	uxtb	r2, r2
 800d66a:	701a      	strb	r2, [r3, #0]

    return (5);
 800d66c:	2305      	movs	r3, #5
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
	...

0800d678 <can1_ams_s05_voltages_2_s05v07_encode>:

    return 0;
}

uint8_t can1_ams_s05_voltages_2_s05v07_encode(double value)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d682:	f04f 0200 	mov.w	r2, #0
 800d686:	4b10      	ldr	r3, [pc, #64]	@ (800d6c8 <can1_ams_s05_voltages_2_s05v07_encode+0x50>)
 800d688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d68c:	f7f2 fda0 	bl	80001d0 <__aeabi_dsub>
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	4610      	mov	r0, r2
 800d696:	4619      	mov	r1, r3
 800d698:	a309      	add	r3, pc, #36	@ (adr r3, 800d6c0 <can1_ams_s05_voltages_2_s05v07_encode+0x48>)
 800d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69e:	f7f3 f879 	bl	8000794 <__aeabi_ddiv>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	f7f3 fa0b 	bl	8000ac4 <__aeabi_d2uiz>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	b2db      	uxtb	r3, r3
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	f3af 8000 	nop.w
 800d6c0:	fcce1c58 	.word	0xfcce1c58
 800d6c4:	3f800e6a 	.word	0x3f800e6a
 800d6c8:	40040000 	.word	0x40040000
 800d6cc:	00000000 	.word	0x00000000

0800d6d0 <can1_ams_s05_voltages_2_s05v08_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v08_encode(double value)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d6da:	f04f 0200 	mov.w	r2, #0
 800d6de:	4b10      	ldr	r3, [pc, #64]	@ (800d720 <can1_ams_s05_voltages_2_s05v08_encode+0x50>)
 800d6e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d6e4:	f7f2 fd74 	bl	80001d0 <__aeabi_dsub>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	a309      	add	r3, pc, #36	@ (adr r3, 800d718 <can1_ams_s05_voltages_2_s05v08_encode+0x48>)
 800d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f6:	f7f3 f84d 	bl	8000794 <__aeabi_ddiv>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4610      	mov	r0, r2
 800d700:	4619      	mov	r1, r3
 800d702:	f7f3 f9df 	bl	8000ac4 <__aeabi_d2uiz>
 800d706:	4603      	mov	r3, r0
 800d708:	b2db      	uxtb	r3, r3
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	f3af 8000 	nop.w
 800d718:	fcce1c58 	.word	0xfcce1c58
 800d71c:	3f800e6a 	.word	0x3f800e6a
 800d720:	40040000 	.word	0x40040000
 800d724:	00000000 	.word	0x00000000

0800d728 <can1_ams_s05_voltages_2_s05v09_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v09_encode(double value)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d732:	f04f 0200 	mov.w	r2, #0
 800d736:	4b10      	ldr	r3, [pc, #64]	@ (800d778 <can1_ams_s05_voltages_2_s05v09_encode+0x50>)
 800d738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d73c:	f7f2 fd48 	bl	80001d0 <__aeabi_dsub>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	4610      	mov	r0, r2
 800d746:	4619      	mov	r1, r3
 800d748:	a309      	add	r3, pc, #36	@ (adr r3, 800d770 <can1_ams_s05_voltages_2_s05v09_encode+0x48>)
 800d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74e:	f7f3 f821 	bl	8000794 <__aeabi_ddiv>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	4610      	mov	r0, r2
 800d758:	4619      	mov	r1, r3
 800d75a:	f7f3 f9b3 	bl	8000ac4 <__aeabi_d2uiz>
 800d75e:	4603      	mov	r3, r0
 800d760:	b2db      	uxtb	r3, r3
}
 800d762:	4618      	mov	r0, r3
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	f3af 8000 	nop.w
 800d770:	fcce1c58 	.word	0xfcce1c58
 800d774:	3f800e6a 	.word	0x3f800e6a
 800d778:	40040000 	.word	0x40040000
 800d77c:	00000000 	.word	0x00000000

0800d780 <can1_ams_s05_voltages_2_s05v10_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v10_encode(double value)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d78a:	f04f 0200 	mov.w	r2, #0
 800d78e:	4b10      	ldr	r3, [pc, #64]	@ (800d7d0 <can1_ams_s05_voltages_2_s05v10_encode+0x50>)
 800d790:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d794:	f7f2 fd1c 	bl	80001d0 <__aeabi_dsub>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4610      	mov	r0, r2
 800d79e:	4619      	mov	r1, r3
 800d7a0:	a309      	add	r3, pc, #36	@ (adr r3, 800d7c8 <can1_ams_s05_voltages_2_s05v10_encode+0x48>)
 800d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a6:	f7f2 fff5 	bl	8000794 <__aeabi_ddiv>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	f7f3 f987 	bl	8000ac4 <__aeabi_d2uiz>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	b2db      	uxtb	r3, r3
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	f3af 8000 	nop.w
 800d7c8:	fcce1c58 	.word	0xfcce1c58
 800d7cc:	3f800e6a 	.word	0x3f800e6a
 800d7d0:	40040000 	.word	0x40040000
 800d7d4:	00000000 	.word	0x00000000

0800d7d8 <can1_ams_s05_voltages_2_s05v11_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v11_encode(double value)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d7e2:	f04f 0200 	mov.w	r2, #0
 800d7e6:	4b10      	ldr	r3, [pc, #64]	@ (800d828 <can1_ams_s05_voltages_2_s05v11_encode+0x50>)
 800d7e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7ec:	f7f2 fcf0 	bl	80001d0 <__aeabi_dsub>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	4610      	mov	r0, r2
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	a309      	add	r3, pc, #36	@ (adr r3, 800d820 <can1_ams_s05_voltages_2_s05v11_encode+0x48>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f7f2 ffc9 	bl	8000794 <__aeabi_ddiv>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4610      	mov	r0, r2
 800d808:	4619      	mov	r1, r3
 800d80a:	f7f3 f95b 	bl	8000ac4 <__aeabi_d2uiz>
 800d80e:	4603      	mov	r3, r0
 800d810:	b2db      	uxtb	r3, r3
}
 800d812:	4618      	mov	r0, r3
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	f3af 8000 	nop.w
 800d820:	fcce1c58 	.word	0xfcce1c58
 800d824:	3f800e6a 	.word	0x3f800e6a
 800d828:	40040000 	.word	0x40040000

0800d82c <can1_ams_s06_voltages_1_pack>:

int can1_ams_s06_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s06_voltages_1_t *src_p,
    size_t size)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b05      	cmp	r3, #5
 800d83c:	d802      	bhi.n	800d844 <can1_ams_s06_voltages_1_pack+0x18>
        return (-EINVAL);
 800d83e:	f06f 0315 	mvn.w	r3, #21
 800d842:	e069      	b.n	800d918 <can1_ams_s06_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800d844:	2206      	movs	r2, #6
 800d846:	2100      	movs	r1, #0
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f002 ffb5 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s06v01, 0u, 0xffu);
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	22ff      	movs	r2, #255	@ 0xff
 800d854:	2100      	movs	r1, #0
 800d856:	4618      	mov	r0, r3
 800d858:	f7fb fc7e 	bl	8009158 <pack_left_shift_u8>
 800d85c:	4603      	mov	r3, r0
 800d85e:	461a      	mov	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	4313      	orrs	r3, r2
 800d866:	b2da      	uxtb	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s06v02, 0u, 0xffu);
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	785b      	ldrb	r3, [r3, #1]
 800d870:	22ff      	movs	r2, #255	@ 0xff
 800d872:	2100      	movs	r1, #0
 800d874:	4618      	mov	r0, r3
 800d876:	f7fb fc6f 	bl	8009158 <pack_left_shift_u8>
 800d87a:	4603      	mov	r3, r0
 800d87c:	4619      	mov	r1, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3301      	adds	r3, #1
 800d882:	781a      	ldrb	r2, [r3, #0]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3301      	adds	r3, #1
 800d888:	430a      	orrs	r2, r1
 800d88a:	b2d2      	uxtb	r2, r2
 800d88c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s06v03, 0u, 0xffu);
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	789b      	ldrb	r3, [r3, #2]
 800d892:	22ff      	movs	r2, #255	@ 0xff
 800d894:	2100      	movs	r1, #0
 800d896:	4618      	mov	r0, r3
 800d898:	f7fb fc5e 	bl	8009158 <pack_left_shift_u8>
 800d89c:	4603      	mov	r3, r0
 800d89e:	4619      	mov	r1, r3
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	3302      	adds	r3, #2
 800d8a4:	781a      	ldrb	r2, [r3, #0]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3302      	adds	r3, #2
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	b2d2      	uxtb	r2, r2
 800d8ae:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s06v04, 0u, 0xffu);
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	78db      	ldrb	r3, [r3, #3]
 800d8b4:	22ff      	movs	r2, #255	@ 0xff
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fb fc4d 	bl	8009158 <pack_left_shift_u8>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3303      	adds	r3, #3
 800d8c6:	781a      	ldrb	r2, [r3, #0]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	3303      	adds	r3, #3
 800d8cc:	430a      	orrs	r2, r1
 800d8ce:	b2d2      	uxtb	r2, r2
 800d8d0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s06v05, 0u, 0xffu);
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	791b      	ldrb	r3, [r3, #4]
 800d8d6:	22ff      	movs	r2, #255	@ 0xff
 800d8d8:	2100      	movs	r1, #0
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fb fc3c 	bl	8009158 <pack_left_shift_u8>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	781a      	ldrb	r2, [r3, #0]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	b2d2      	uxtb	r2, r2
 800d8f2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s06v06, 0u, 0xffu);
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	795b      	ldrb	r3, [r3, #5]
 800d8f8:	22ff      	movs	r2, #255	@ 0xff
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fb fc2b 	bl	8009158 <pack_left_shift_u8>
 800d902:	4603      	mov	r3, r0
 800d904:	4619      	mov	r1, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	3305      	adds	r3, #5
 800d90a:	781a      	ldrb	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	3305      	adds	r3, #5
 800d910:	430a      	orrs	r2, r1
 800d912:	b2d2      	uxtb	r2, r2
 800d914:	701a      	strb	r2, [r3, #0]

    return (6);
 800d916:	2306      	movs	r3, #6
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <can1_ams_s06_voltages_1_s06v01_encode>:

    return 0;
}

uint8_t can1_ams_s06_voltages_1_s06v01_encode(double value)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d92a:	f04f 0200 	mov.w	r2, #0
 800d92e:	4b10      	ldr	r3, [pc, #64]	@ (800d970 <can1_ams_s06_voltages_1_s06v01_encode+0x50>)
 800d930:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d934:	f7f2 fc4c 	bl	80001d0 <__aeabi_dsub>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4610      	mov	r0, r2
 800d93e:	4619      	mov	r1, r3
 800d940:	a309      	add	r3, pc, #36	@ (adr r3, 800d968 <can1_ams_s06_voltages_1_s06v01_encode+0x48>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 ff25 	bl	8000794 <__aeabi_ddiv>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	4610      	mov	r0, r2
 800d950:	4619      	mov	r1, r3
 800d952:	f7f3 f8b7 	bl	8000ac4 <__aeabi_d2uiz>
 800d956:	4603      	mov	r3, r0
 800d958:	b2db      	uxtb	r3, r3
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3708      	adds	r7, #8
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	f3af 8000 	nop.w
 800d968:	fcce1c58 	.word	0xfcce1c58
 800d96c:	3f800e6a 	.word	0x3f800e6a
 800d970:	40040000 	.word	0x40040000
 800d974:	00000000 	.word	0x00000000

0800d978 <can1_ams_s06_voltages_1_s06v02_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v02_encode(double value)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d982:	f04f 0200 	mov.w	r2, #0
 800d986:	4b10      	ldr	r3, [pc, #64]	@ (800d9c8 <can1_ams_s06_voltages_1_s06v02_encode+0x50>)
 800d988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d98c:	f7f2 fc20 	bl	80001d0 <__aeabi_dsub>
 800d990:	4602      	mov	r2, r0
 800d992:	460b      	mov	r3, r1
 800d994:	4610      	mov	r0, r2
 800d996:	4619      	mov	r1, r3
 800d998:	a309      	add	r3, pc, #36	@ (adr r3, 800d9c0 <can1_ams_s06_voltages_1_s06v02_encode+0x48>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	f7f2 fef9 	bl	8000794 <__aeabi_ddiv>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	f7f3 f88b 	bl	8000ac4 <__aeabi_d2uiz>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	b2db      	uxtb	r3, r3
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	f3af 8000 	nop.w
 800d9c0:	fcce1c58 	.word	0xfcce1c58
 800d9c4:	3f800e6a 	.word	0x3f800e6a
 800d9c8:	40040000 	.word	0x40040000
 800d9cc:	00000000 	.word	0x00000000

0800d9d0 <can1_ams_s06_voltages_1_s06v03_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v03_encode(double value)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d9da:	f04f 0200 	mov.w	r2, #0
 800d9de:	4b10      	ldr	r3, [pc, #64]	@ (800da20 <can1_ams_s06_voltages_1_s06v03_encode+0x50>)
 800d9e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9e4:	f7f2 fbf4 	bl	80001d0 <__aeabi_dsub>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	a309      	add	r3, pc, #36	@ (adr r3, 800da18 <can1_ams_s06_voltages_1_s06v03_encode+0x48>)
 800d9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f6:	f7f2 fecd 	bl	8000794 <__aeabi_ddiv>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4610      	mov	r0, r2
 800da00:	4619      	mov	r1, r3
 800da02:	f7f3 f85f 	bl	8000ac4 <__aeabi_d2uiz>
 800da06:	4603      	mov	r3, r0
 800da08:	b2db      	uxtb	r3, r3
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	f3af 8000 	nop.w
 800da18:	fcce1c58 	.word	0xfcce1c58
 800da1c:	3f800e6a 	.word	0x3f800e6a
 800da20:	40040000 	.word	0x40040000
 800da24:	00000000 	.word	0x00000000

0800da28 <can1_ams_s06_voltages_1_s06v04_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v04_encode(double value)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800da32:	f04f 0200 	mov.w	r2, #0
 800da36:	4b10      	ldr	r3, [pc, #64]	@ (800da78 <can1_ams_s06_voltages_1_s06v04_encode+0x50>)
 800da38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da3c:	f7f2 fbc8 	bl	80001d0 <__aeabi_dsub>
 800da40:	4602      	mov	r2, r0
 800da42:	460b      	mov	r3, r1
 800da44:	4610      	mov	r0, r2
 800da46:	4619      	mov	r1, r3
 800da48:	a309      	add	r3, pc, #36	@ (adr r3, 800da70 <can1_ams_s06_voltages_1_s06v04_encode+0x48>)
 800da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4e:	f7f2 fea1 	bl	8000794 <__aeabi_ddiv>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4610      	mov	r0, r2
 800da58:	4619      	mov	r1, r3
 800da5a:	f7f3 f833 	bl	8000ac4 <__aeabi_d2uiz>
 800da5e:	4603      	mov	r3, r0
 800da60:	b2db      	uxtb	r3, r3
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	f3af 8000 	nop.w
 800da70:	fcce1c58 	.word	0xfcce1c58
 800da74:	3f800e6a 	.word	0x3f800e6a
 800da78:	40040000 	.word	0x40040000
 800da7c:	00000000 	.word	0x00000000

0800da80 <can1_ams_s06_voltages_1_s06v05_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v05_encode(double value)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800da8a:	f04f 0200 	mov.w	r2, #0
 800da8e:	4b10      	ldr	r3, [pc, #64]	@ (800dad0 <can1_ams_s06_voltages_1_s06v05_encode+0x50>)
 800da90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da94:	f7f2 fb9c 	bl	80001d0 <__aeabi_dsub>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4610      	mov	r0, r2
 800da9e:	4619      	mov	r1, r3
 800daa0:	a309      	add	r3, pc, #36	@ (adr r3, 800dac8 <can1_ams_s06_voltages_1_s06v05_encode+0x48>)
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	f7f2 fe75 	bl	8000794 <__aeabi_ddiv>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4610      	mov	r0, r2
 800dab0:	4619      	mov	r1, r3
 800dab2:	f7f3 f807 	bl	8000ac4 <__aeabi_d2uiz>
 800dab6:	4603      	mov	r3, r0
 800dab8:	b2db      	uxtb	r3, r3
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	f3af 8000 	nop.w
 800dac8:	fcce1c58 	.word	0xfcce1c58
 800dacc:	3f800e6a 	.word	0x3f800e6a
 800dad0:	40040000 	.word	0x40040000
 800dad4:	00000000 	.word	0x00000000

0800dad8 <can1_ams_s06_voltages_1_s06v06_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v06_encode(double value)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800dae2:	f04f 0200 	mov.w	r2, #0
 800dae6:	4b10      	ldr	r3, [pc, #64]	@ (800db28 <can1_ams_s06_voltages_1_s06v06_encode+0x50>)
 800dae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800daec:	f7f2 fb70 	bl	80001d0 <__aeabi_dsub>
 800daf0:	4602      	mov	r2, r0
 800daf2:	460b      	mov	r3, r1
 800daf4:	4610      	mov	r0, r2
 800daf6:	4619      	mov	r1, r3
 800daf8:	a309      	add	r3, pc, #36	@ (adr r3, 800db20 <can1_ams_s06_voltages_1_s06v06_encode+0x48>)
 800dafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafe:	f7f2 fe49 	bl	8000794 <__aeabi_ddiv>
 800db02:	4602      	mov	r2, r0
 800db04:	460b      	mov	r3, r1
 800db06:	4610      	mov	r0, r2
 800db08:	4619      	mov	r1, r3
 800db0a:	f7f2 ffdb 	bl	8000ac4 <__aeabi_d2uiz>
 800db0e:	4603      	mov	r3, r0
 800db10:	b2db      	uxtb	r3, r3
}
 800db12:	4618      	mov	r0, r3
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	f3af 8000 	nop.w
 800db20:	fcce1c58 	.word	0xfcce1c58
 800db24:	3f800e6a 	.word	0x3f800e6a
 800db28:	40040000 	.word	0x40040000

0800db2c <can1_ams_s06_voltages_2_pack>:

int can1_ams_s06_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s06_voltages_2_t *src_p,
    size_t size)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b04      	cmp	r3, #4
 800db3c:	d802      	bhi.n	800db44 <can1_ams_s06_voltages_2_pack+0x18>
        return (-EINVAL);
 800db3e:	f06f 0315 	mvn.w	r3, #21
 800db42:	e058      	b.n	800dbf6 <can1_ams_s06_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800db44:	2205      	movs	r2, #5
 800db46:	2100      	movs	r1, #0
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f002 fe35 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s06v07, 0u, 0xffu);
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	22ff      	movs	r2, #255	@ 0xff
 800db54:	2100      	movs	r1, #0
 800db56:	4618      	mov	r0, r3
 800db58:	f7fb fafe 	bl	8009158 <pack_left_shift_u8>
 800db5c:	4603      	mov	r3, r0
 800db5e:	461a      	mov	r2, r3
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	4313      	orrs	r3, r2
 800db66:	b2da      	uxtb	r2, r3
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s06v08, 0u, 0xffu);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	785b      	ldrb	r3, [r3, #1]
 800db70:	22ff      	movs	r2, #255	@ 0xff
 800db72:	2100      	movs	r1, #0
 800db74:	4618      	mov	r0, r3
 800db76:	f7fb faef 	bl	8009158 <pack_left_shift_u8>
 800db7a:	4603      	mov	r3, r0
 800db7c:	4619      	mov	r1, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3301      	adds	r3, #1
 800db82:	781a      	ldrb	r2, [r3, #0]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	3301      	adds	r3, #1
 800db88:	430a      	orrs	r2, r1
 800db8a:	b2d2      	uxtb	r2, r2
 800db8c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s06v09, 0u, 0xffu);
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	789b      	ldrb	r3, [r3, #2]
 800db92:	22ff      	movs	r2, #255	@ 0xff
 800db94:	2100      	movs	r1, #0
 800db96:	4618      	mov	r0, r3
 800db98:	f7fb fade 	bl	8009158 <pack_left_shift_u8>
 800db9c:	4603      	mov	r3, r0
 800db9e:	4619      	mov	r1, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	3302      	adds	r3, #2
 800dba4:	781a      	ldrb	r2, [r3, #0]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	3302      	adds	r3, #2
 800dbaa:	430a      	orrs	r2, r1
 800dbac:	b2d2      	uxtb	r2, r2
 800dbae:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s06v10, 0u, 0xffu);
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	78db      	ldrb	r3, [r3, #3]
 800dbb4:	22ff      	movs	r2, #255	@ 0xff
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fb facd 	bl	8009158 <pack_left_shift_u8>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	3303      	adds	r3, #3
 800dbc6:	781a      	ldrb	r2, [r3, #0]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	3303      	adds	r3, #3
 800dbcc:	430a      	orrs	r2, r1
 800dbce:	b2d2      	uxtb	r2, r2
 800dbd0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s06v11, 0u, 0xffu);
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	791b      	ldrb	r3, [r3, #4]
 800dbd6:	22ff      	movs	r2, #255	@ 0xff
 800dbd8:	2100      	movs	r1, #0
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fb fabc 	bl	8009158 <pack_left_shift_u8>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	781a      	ldrb	r2, [r3, #0]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3304      	adds	r3, #4
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	701a      	strb	r2, [r3, #0]

    return (5);
 800dbf4:	2305      	movs	r3, #5
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
	...

0800dc00 <can1_ams_s06_voltages_2_s06v07_encode>:

    return 0;
}

uint8_t can1_ams_s06_voltages_2_s06v07_encode(double value)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800dc0a:	f04f 0200 	mov.w	r2, #0
 800dc0e:	4b10      	ldr	r3, [pc, #64]	@ (800dc50 <can1_ams_s06_voltages_2_s06v07_encode+0x50>)
 800dc10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc14:	f7f2 fadc 	bl	80001d0 <__aeabi_dsub>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4619      	mov	r1, r3
 800dc20:	a309      	add	r3, pc, #36	@ (adr r3, 800dc48 <can1_ams_s06_voltages_2_s06v07_encode+0x48>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	f7f2 fdb5 	bl	8000794 <__aeabi_ddiv>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	4610      	mov	r0, r2
 800dc30:	4619      	mov	r1, r3
 800dc32:	f7f2 ff47 	bl	8000ac4 <__aeabi_d2uiz>
 800dc36:	4603      	mov	r3, r0
 800dc38:	b2db      	uxtb	r3, r3
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	f3af 8000 	nop.w
 800dc48:	fcce1c58 	.word	0xfcce1c58
 800dc4c:	3f800e6a 	.word	0x3f800e6a
 800dc50:	40040000 	.word	0x40040000
 800dc54:	00000000 	.word	0x00000000

0800dc58 <can1_ams_s06_voltages_2_s06v08_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v08_encode(double value)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800dc62:	f04f 0200 	mov.w	r2, #0
 800dc66:	4b10      	ldr	r3, [pc, #64]	@ (800dca8 <can1_ams_s06_voltages_2_s06v08_encode+0x50>)
 800dc68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc6c:	f7f2 fab0 	bl	80001d0 <__aeabi_dsub>
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	4610      	mov	r0, r2
 800dc76:	4619      	mov	r1, r3
 800dc78:	a309      	add	r3, pc, #36	@ (adr r3, 800dca0 <can1_ams_s06_voltages_2_s06v08_encode+0x48>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	f7f2 fd89 	bl	8000794 <__aeabi_ddiv>
 800dc82:	4602      	mov	r2, r0
 800dc84:	460b      	mov	r3, r1
 800dc86:	4610      	mov	r0, r2
 800dc88:	4619      	mov	r1, r3
 800dc8a:	f7f2 ff1b 	bl	8000ac4 <__aeabi_d2uiz>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	b2db      	uxtb	r3, r3
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	f3af 8000 	nop.w
 800dca0:	fcce1c58 	.word	0xfcce1c58
 800dca4:	3f800e6a 	.word	0x3f800e6a
 800dca8:	40040000 	.word	0x40040000
 800dcac:	00000000 	.word	0x00000000

0800dcb0 <can1_ams_s06_voltages_2_s06v09_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v09_encode(double value)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800dcba:	f04f 0200 	mov.w	r2, #0
 800dcbe:	4b10      	ldr	r3, [pc, #64]	@ (800dd00 <can1_ams_s06_voltages_2_s06v09_encode+0x50>)
 800dcc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dcc4:	f7f2 fa84 	bl	80001d0 <__aeabi_dsub>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	4610      	mov	r0, r2
 800dcce:	4619      	mov	r1, r3
 800dcd0:	a309      	add	r3, pc, #36	@ (adr r3, 800dcf8 <can1_ams_s06_voltages_2_s06v09_encode+0x48>)
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	f7f2 fd5d 	bl	8000794 <__aeabi_ddiv>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4610      	mov	r0, r2
 800dce0:	4619      	mov	r1, r3
 800dce2:	f7f2 feef 	bl	8000ac4 <__aeabi_d2uiz>
 800dce6:	4603      	mov	r3, r0
 800dce8:	b2db      	uxtb	r3, r3
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	f3af 8000 	nop.w
 800dcf8:	fcce1c58 	.word	0xfcce1c58
 800dcfc:	3f800e6a 	.word	0x3f800e6a
 800dd00:	40040000 	.word	0x40040000
 800dd04:	00000000 	.word	0x00000000

0800dd08 <can1_ams_s06_voltages_2_s06v10_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v10_encode(double value)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800dd12:	f04f 0200 	mov.w	r2, #0
 800dd16:	4b10      	ldr	r3, [pc, #64]	@ (800dd58 <can1_ams_s06_voltages_2_s06v10_encode+0x50>)
 800dd18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd1c:	f7f2 fa58 	bl	80001d0 <__aeabi_dsub>
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	4610      	mov	r0, r2
 800dd26:	4619      	mov	r1, r3
 800dd28:	a309      	add	r3, pc, #36	@ (adr r3, 800dd50 <can1_ams_s06_voltages_2_s06v10_encode+0x48>)
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	f7f2 fd31 	bl	8000794 <__aeabi_ddiv>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4610      	mov	r0, r2
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f7f2 fec3 	bl	8000ac4 <__aeabi_d2uiz>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	b2db      	uxtb	r3, r3
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	f3af 8000 	nop.w
 800dd50:	fcce1c58 	.word	0xfcce1c58
 800dd54:	3f800e6a 	.word	0x3f800e6a
 800dd58:	40040000 	.word	0x40040000

0800dd5c <can1_ams_s07_voltages_1_pack>:

int can1_ams_s07_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s07_voltages_1_t *src_p,
    size_t size)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b05      	cmp	r3, #5
 800dd6c:	d802      	bhi.n	800dd74 <can1_ams_s07_voltages_1_pack+0x18>
        return (-EINVAL);
 800dd6e:	f06f 0315 	mvn.w	r3, #21
 800dd72:	e069      	b.n	800de48 <can1_ams_s07_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800dd74:	2206      	movs	r2, #6
 800dd76:	2100      	movs	r1, #0
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f002 fd1d 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s07v01, 0u, 0xffu);
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	22ff      	movs	r2, #255	@ 0xff
 800dd84:	2100      	movs	r1, #0
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fb f9e6 	bl	8009158 <pack_left_shift_u8>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	461a      	mov	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s07v02, 0u, 0xffu);
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	785b      	ldrb	r3, [r3, #1]
 800dda0:	22ff      	movs	r2, #255	@ 0xff
 800dda2:	2100      	movs	r1, #0
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fb f9d7 	bl	8009158 <pack_left_shift_u8>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	4619      	mov	r1, r3
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	781a      	ldrb	r2, [r3, #0]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	430a      	orrs	r2, r1
 800ddba:	b2d2      	uxtb	r2, r2
 800ddbc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s07v03, 0u, 0xffu);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	789b      	ldrb	r3, [r3, #2]
 800ddc2:	22ff      	movs	r2, #255	@ 0xff
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fb f9c6 	bl	8009158 <pack_left_shift_u8>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	4619      	mov	r1, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3302      	adds	r3, #2
 800ddd4:	781a      	ldrb	r2, [r3, #0]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3302      	adds	r3, #2
 800ddda:	430a      	orrs	r2, r1
 800dddc:	b2d2      	uxtb	r2, r2
 800ddde:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s07v04, 0u, 0xffu);
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	78db      	ldrb	r3, [r3, #3]
 800dde4:	22ff      	movs	r2, #255	@ 0xff
 800dde6:	2100      	movs	r1, #0
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fb f9b5 	bl	8009158 <pack_left_shift_u8>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	3303      	adds	r3, #3
 800ddf6:	781a      	ldrb	r2, [r3, #0]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3303      	adds	r3, #3
 800ddfc:	430a      	orrs	r2, r1
 800ddfe:	b2d2      	uxtb	r2, r2
 800de00:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s07v05, 0u, 0xffu);
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	791b      	ldrb	r3, [r3, #4]
 800de06:	22ff      	movs	r2, #255	@ 0xff
 800de08:	2100      	movs	r1, #0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fb f9a4 	bl	8009158 <pack_left_shift_u8>
 800de10:	4603      	mov	r3, r0
 800de12:	4619      	mov	r1, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3304      	adds	r3, #4
 800de18:	781a      	ldrb	r2, [r3, #0]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	3304      	adds	r3, #4
 800de1e:	430a      	orrs	r2, r1
 800de20:	b2d2      	uxtb	r2, r2
 800de22:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s07v06, 0u, 0xffu);
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	795b      	ldrb	r3, [r3, #5]
 800de28:	22ff      	movs	r2, #255	@ 0xff
 800de2a:	2100      	movs	r1, #0
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fb f993 	bl	8009158 <pack_left_shift_u8>
 800de32:	4603      	mov	r3, r0
 800de34:	4619      	mov	r1, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	3305      	adds	r3, #5
 800de3a:	781a      	ldrb	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	3305      	adds	r3, #5
 800de40:	430a      	orrs	r2, r1
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	701a      	strb	r2, [r3, #0]

    return (6);
 800de46:	2306      	movs	r3, #6
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <can1_ams_s07_voltages_1_s07v01_encode>:

    return 0;
}

uint8_t can1_ams_s07_voltages_1_s07v01_encode(double value)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800de5a:	f04f 0200 	mov.w	r2, #0
 800de5e:	4b10      	ldr	r3, [pc, #64]	@ (800dea0 <can1_ams_s07_voltages_1_s07v01_encode+0x50>)
 800de60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de64:	f7f2 f9b4 	bl	80001d0 <__aeabi_dsub>
 800de68:	4602      	mov	r2, r0
 800de6a:	460b      	mov	r3, r1
 800de6c:	4610      	mov	r0, r2
 800de6e:	4619      	mov	r1, r3
 800de70:	a309      	add	r3, pc, #36	@ (adr r3, 800de98 <can1_ams_s07_voltages_1_s07v01_encode+0x48>)
 800de72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de76:	f7f2 fc8d 	bl	8000794 <__aeabi_ddiv>
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	4610      	mov	r0, r2
 800de80:	4619      	mov	r1, r3
 800de82:	f7f2 fe1f 	bl	8000ac4 <__aeabi_d2uiz>
 800de86:	4603      	mov	r3, r0
 800de88:	b2db      	uxtb	r3, r3
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	f3af 8000 	nop.w
 800de98:	fcce1c58 	.word	0xfcce1c58
 800de9c:	3f800e6a 	.word	0x3f800e6a
 800dea0:	40040000 	.word	0x40040000
 800dea4:	00000000 	.word	0x00000000

0800dea8 <can1_ams_s07_voltages_1_s07v02_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v02_encode(double value)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800deb2:	f04f 0200 	mov.w	r2, #0
 800deb6:	4b10      	ldr	r3, [pc, #64]	@ (800def8 <can1_ams_s07_voltages_1_s07v02_encode+0x50>)
 800deb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800debc:	f7f2 f988 	bl	80001d0 <__aeabi_dsub>
 800dec0:	4602      	mov	r2, r0
 800dec2:	460b      	mov	r3, r1
 800dec4:	4610      	mov	r0, r2
 800dec6:	4619      	mov	r1, r3
 800dec8:	a309      	add	r3, pc, #36	@ (adr r3, 800def0 <can1_ams_s07_voltages_1_s07v02_encode+0x48>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f7f2 fc61 	bl	8000794 <__aeabi_ddiv>
 800ded2:	4602      	mov	r2, r0
 800ded4:	460b      	mov	r3, r1
 800ded6:	4610      	mov	r0, r2
 800ded8:	4619      	mov	r1, r3
 800deda:	f7f2 fdf3 	bl	8000ac4 <__aeabi_d2uiz>
 800dede:	4603      	mov	r3, r0
 800dee0:	b2db      	uxtb	r3, r3
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	f3af 8000 	nop.w
 800def0:	fcce1c58 	.word	0xfcce1c58
 800def4:	3f800e6a 	.word	0x3f800e6a
 800def8:	40040000 	.word	0x40040000
 800defc:	00000000 	.word	0x00000000

0800df00 <can1_ams_s07_voltages_1_s07v03_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v03_encode(double value)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800df0a:	f04f 0200 	mov.w	r2, #0
 800df0e:	4b10      	ldr	r3, [pc, #64]	@ (800df50 <can1_ams_s07_voltages_1_s07v03_encode+0x50>)
 800df10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df14:	f7f2 f95c 	bl	80001d0 <__aeabi_dsub>
 800df18:	4602      	mov	r2, r0
 800df1a:	460b      	mov	r3, r1
 800df1c:	4610      	mov	r0, r2
 800df1e:	4619      	mov	r1, r3
 800df20:	a309      	add	r3, pc, #36	@ (adr r3, 800df48 <can1_ams_s07_voltages_1_s07v03_encode+0x48>)
 800df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df26:	f7f2 fc35 	bl	8000794 <__aeabi_ddiv>
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	4610      	mov	r0, r2
 800df30:	4619      	mov	r1, r3
 800df32:	f7f2 fdc7 	bl	8000ac4 <__aeabi_d2uiz>
 800df36:	4603      	mov	r3, r0
 800df38:	b2db      	uxtb	r3, r3
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	f3af 8000 	nop.w
 800df48:	fcce1c58 	.word	0xfcce1c58
 800df4c:	3f800e6a 	.word	0x3f800e6a
 800df50:	40040000 	.word	0x40040000
 800df54:	00000000 	.word	0x00000000

0800df58 <can1_ams_s07_voltages_1_s07v04_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v04_encode(double value)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800df62:	f04f 0200 	mov.w	r2, #0
 800df66:	4b10      	ldr	r3, [pc, #64]	@ (800dfa8 <can1_ams_s07_voltages_1_s07v04_encode+0x50>)
 800df68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df6c:	f7f2 f930 	bl	80001d0 <__aeabi_dsub>
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	4610      	mov	r0, r2
 800df76:	4619      	mov	r1, r3
 800df78:	a309      	add	r3, pc, #36	@ (adr r3, 800dfa0 <can1_ams_s07_voltages_1_s07v04_encode+0x48>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	f7f2 fc09 	bl	8000794 <__aeabi_ddiv>
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	4610      	mov	r0, r2
 800df88:	4619      	mov	r1, r3
 800df8a:	f7f2 fd9b 	bl	8000ac4 <__aeabi_d2uiz>
 800df8e:	4603      	mov	r3, r0
 800df90:	b2db      	uxtb	r3, r3
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	f3af 8000 	nop.w
 800dfa0:	fcce1c58 	.word	0xfcce1c58
 800dfa4:	3f800e6a 	.word	0x3f800e6a
 800dfa8:	40040000 	.word	0x40040000
 800dfac:	00000000 	.word	0x00000000

0800dfb0 <can1_ams_s07_voltages_1_s07v05_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v05_encode(double value)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800dfba:	f04f 0200 	mov.w	r2, #0
 800dfbe:	4b10      	ldr	r3, [pc, #64]	@ (800e000 <can1_ams_s07_voltages_1_s07v05_encode+0x50>)
 800dfc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dfc4:	f7f2 f904 	bl	80001d0 <__aeabi_dsub>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4619      	mov	r1, r3
 800dfd0:	a309      	add	r3, pc, #36	@ (adr r3, 800dff8 <can1_ams_s07_voltages_1_s07v05_encode+0x48>)
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	f7f2 fbdd 	bl	8000794 <__aeabi_ddiv>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	460b      	mov	r3, r1
 800dfde:	4610      	mov	r0, r2
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	f7f2 fd6f 	bl	8000ac4 <__aeabi_d2uiz>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	b2db      	uxtb	r3, r3
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	f3af 8000 	nop.w
 800dff8:	fcce1c58 	.word	0xfcce1c58
 800dffc:	3f800e6a 	.word	0x3f800e6a
 800e000:	40040000 	.word	0x40040000
 800e004:	00000000 	.word	0x00000000

0800e008 <can1_ams_s07_voltages_1_s07v06_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v06_encode(double value)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e012:	f04f 0200 	mov.w	r2, #0
 800e016:	4b10      	ldr	r3, [pc, #64]	@ (800e058 <can1_ams_s07_voltages_1_s07v06_encode+0x50>)
 800e018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e01c:	f7f2 f8d8 	bl	80001d0 <__aeabi_dsub>
 800e020:	4602      	mov	r2, r0
 800e022:	460b      	mov	r3, r1
 800e024:	4610      	mov	r0, r2
 800e026:	4619      	mov	r1, r3
 800e028:	a309      	add	r3, pc, #36	@ (adr r3, 800e050 <can1_ams_s07_voltages_1_s07v06_encode+0x48>)
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	f7f2 fbb1 	bl	8000794 <__aeabi_ddiv>
 800e032:	4602      	mov	r2, r0
 800e034:	460b      	mov	r3, r1
 800e036:	4610      	mov	r0, r2
 800e038:	4619      	mov	r1, r3
 800e03a:	f7f2 fd43 	bl	8000ac4 <__aeabi_d2uiz>
 800e03e:	4603      	mov	r3, r0
 800e040:	b2db      	uxtb	r3, r3
}
 800e042:	4618      	mov	r0, r3
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	f3af 8000 	nop.w
 800e050:	fcce1c58 	.word	0xfcce1c58
 800e054:	3f800e6a 	.word	0x3f800e6a
 800e058:	40040000 	.word	0x40040000

0800e05c <can1_ams_s07_voltages_2_pack>:

int can1_ams_s07_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s07_voltages_2_t *src_p,
    size_t size)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b04      	cmp	r3, #4
 800e06c:	d802      	bhi.n	800e074 <can1_ams_s07_voltages_2_pack+0x18>
        return (-EINVAL);
 800e06e:	f06f 0315 	mvn.w	r3, #21
 800e072:	e058      	b.n	800e126 <can1_ams_s07_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800e074:	2205      	movs	r2, #5
 800e076:	2100      	movs	r1, #0
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f002 fb9d 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s07v07, 0u, 0xffu);
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	22ff      	movs	r2, #255	@ 0xff
 800e084:	2100      	movs	r1, #0
 800e086:	4618      	mov	r0, r3
 800e088:	f7fb f866 	bl	8009158 <pack_left_shift_u8>
 800e08c:	4603      	mov	r3, r0
 800e08e:	461a      	mov	r2, r3
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	4313      	orrs	r3, r2
 800e096:	b2da      	uxtb	r2, r3
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s07v08, 0u, 0xffu);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	785b      	ldrb	r3, [r3, #1]
 800e0a0:	22ff      	movs	r2, #255	@ 0xff
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fb f857 	bl	8009158 <pack_left_shift_u8>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	781a      	ldrb	r2, [r3, #0]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	430a      	orrs	r2, r1
 800e0ba:	b2d2      	uxtb	r2, r2
 800e0bc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s07v09, 0u, 0xffu);
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	789b      	ldrb	r3, [r3, #2]
 800e0c2:	22ff      	movs	r2, #255	@ 0xff
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fb f846 	bl	8009158 <pack_left_shift_u8>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	3302      	adds	r3, #2
 800e0d4:	781a      	ldrb	r2, [r3, #0]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	3302      	adds	r3, #2
 800e0da:	430a      	orrs	r2, r1
 800e0dc:	b2d2      	uxtb	r2, r2
 800e0de:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s07v10, 0u, 0xffu);
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	78db      	ldrb	r3, [r3, #3]
 800e0e4:	22ff      	movs	r2, #255	@ 0xff
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fb f835 	bl	8009158 <pack_left_shift_u8>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3303      	adds	r3, #3
 800e0f6:	781a      	ldrb	r2, [r3, #0]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3303      	adds	r3, #3
 800e0fc:	430a      	orrs	r2, r1
 800e0fe:	b2d2      	uxtb	r2, r2
 800e100:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s07v11, 0u, 0xffu);
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	791b      	ldrb	r3, [r3, #4]
 800e106:	22ff      	movs	r2, #255	@ 0xff
 800e108:	2100      	movs	r1, #0
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fb f824 	bl	8009158 <pack_left_shift_u8>
 800e110:	4603      	mov	r3, r0
 800e112:	4619      	mov	r1, r3
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3304      	adds	r3, #4
 800e118:	781a      	ldrb	r2, [r3, #0]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	3304      	adds	r3, #4
 800e11e:	430a      	orrs	r2, r1
 800e120:	b2d2      	uxtb	r2, r2
 800e122:	701a      	strb	r2, [r3, #0]

    return (5);
 800e124:	2305      	movs	r3, #5
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
	...

0800e130 <can1_ams_s07_voltages_2_s07v07_encode>:

    return 0;
}

uint8_t can1_ams_s07_voltages_2_s07v07_encode(double value)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e13a:	f04f 0200 	mov.w	r2, #0
 800e13e:	4b10      	ldr	r3, [pc, #64]	@ (800e180 <can1_ams_s07_voltages_2_s07v07_encode+0x50>)
 800e140:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e144:	f7f2 f844 	bl	80001d0 <__aeabi_dsub>
 800e148:	4602      	mov	r2, r0
 800e14a:	460b      	mov	r3, r1
 800e14c:	4610      	mov	r0, r2
 800e14e:	4619      	mov	r1, r3
 800e150:	a309      	add	r3, pc, #36	@ (adr r3, 800e178 <can1_ams_s07_voltages_2_s07v07_encode+0x48>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f2 fb1d 	bl	8000794 <__aeabi_ddiv>
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4610      	mov	r0, r2
 800e160:	4619      	mov	r1, r3
 800e162:	f7f2 fcaf 	bl	8000ac4 <__aeabi_d2uiz>
 800e166:	4603      	mov	r3, r0
 800e168:	b2db      	uxtb	r3, r3
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	f3af 8000 	nop.w
 800e178:	fcce1c58 	.word	0xfcce1c58
 800e17c:	3f800e6a 	.word	0x3f800e6a
 800e180:	40040000 	.word	0x40040000
 800e184:	00000000 	.word	0x00000000

0800e188 <can1_ams_s07_voltages_2_s07v08_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v08_encode(double value)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e192:	f04f 0200 	mov.w	r2, #0
 800e196:	4b10      	ldr	r3, [pc, #64]	@ (800e1d8 <can1_ams_s07_voltages_2_s07v08_encode+0x50>)
 800e198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e19c:	f7f2 f818 	bl	80001d0 <__aeabi_dsub>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	a309      	add	r3, pc, #36	@ (adr r3, 800e1d0 <can1_ams_s07_voltages_2_s07v08_encode+0x48>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	f7f2 faf1 	bl	8000794 <__aeabi_ddiv>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f7f2 fc83 	bl	8000ac4 <__aeabi_d2uiz>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	b2db      	uxtb	r3, r3
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	f3af 8000 	nop.w
 800e1d0:	fcce1c58 	.word	0xfcce1c58
 800e1d4:	3f800e6a 	.word	0x3f800e6a
 800e1d8:	40040000 	.word	0x40040000
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <can1_ams_s07_voltages_2_s07v09_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v09_encode(double value)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e1ea:	f04f 0200 	mov.w	r2, #0
 800e1ee:	4b10      	ldr	r3, [pc, #64]	@ (800e230 <can1_ams_s07_voltages_2_s07v09_encode+0x50>)
 800e1f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e1f4:	f7f1 ffec 	bl	80001d0 <__aeabi_dsub>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	4619      	mov	r1, r3
 800e200:	a309      	add	r3, pc, #36	@ (adr r3, 800e228 <can1_ams_s07_voltages_2_s07v09_encode+0x48>)
 800e202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e206:	f7f2 fac5 	bl	8000794 <__aeabi_ddiv>
 800e20a:	4602      	mov	r2, r0
 800e20c:	460b      	mov	r3, r1
 800e20e:	4610      	mov	r0, r2
 800e210:	4619      	mov	r1, r3
 800e212:	f7f2 fc57 	bl	8000ac4 <__aeabi_d2uiz>
 800e216:	4603      	mov	r3, r0
 800e218:	b2db      	uxtb	r3, r3
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	f3af 8000 	nop.w
 800e228:	fcce1c58 	.word	0xfcce1c58
 800e22c:	3f800e6a 	.word	0x3f800e6a
 800e230:	40040000 	.word	0x40040000
 800e234:	00000000 	.word	0x00000000

0800e238 <can1_ams_s07_voltages_2_s07v10_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v10_encode(double value)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e242:	f04f 0200 	mov.w	r2, #0
 800e246:	4b10      	ldr	r3, [pc, #64]	@ (800e288 <can1_ams_s07_voltages_2_s07v10_encode+0x50>)
 800e248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e24c:	f7f1 ffc0 	bl	80001d0 <__aeabi_dsub>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4610      	mov	r0, r2
 800e256:	4619      	mov	r1, r3
 800e258:	a309      	add	r3, pc, #36	@ (adr r3, 800e280 <can1_ams_s07_voltages_2_s07v10_encode+0x48>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 fa99 	bl	8000794 <__aeabi_ddiv>
 800e262:	4602      	mov	r2, r0
 800e264:	460b      	mov	r3, r1
 800e266:	4610      	mov	r0, r2
 800e268:	4619      	mov	r1, r3
 800e26a:	f7f2 fc2b 	bl	8000ac4 <__aeabi_d2uiz>
 800e26e:	4603      	mov	r3, r0
 800e270:	b2db      	uxtb	r3, r3
}
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	f3af 8000 	nop.w
 800e280:	fcce1c58 	.word	0xfcce1c58
 800e284:	3f800e6a 	.word	0x3f800e6a
 800e288:	40040000 	.word	0x40040000
 800e28c:	00000000 	.word	0x00000000

0800e290 <can1_ams_s07_voltages_2_s07v11_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v11_encode(double value)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e29a:	f04f 0200 	mov.w	r2, #0
 800e29e:	4b10      	ldr	r3, [pc, #64]	@ (800e2e0 <can1_ams_s07_voltages_2_s07v11_encode+0x50>)
 800e2a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e2a4:	f7f1 ff94 	bl	80001d0 <__aeabi_dsub>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	4610      	mov	r0, r2
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	a309      	add	r3, pc, #36	@ (adr r3, 800e2d8 <can1_ams_s07_voltages_2_s07v11_encode+0x48>)
 800e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b6:	f7f2 fa6d 	bl	8000794 <__aeabi_ddiv>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4610      	mov	r0, r2
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	f7f2 fbff 	bl	8000ac4 <__aeabi_d2uiz>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	b2db      	uxtb	r3, r3
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	f3af 8000 	nop.w
 800e2d8:	fcce1c58 	.word	0xfcce1c58
 800e2dc:	3f800e6a 	.word	0x3f800e6a
 800e2e0:	40040000 	.word	0x40040000

0800e2e4 <can1_ams_s08_voltages_1_pack>:

int can1_ams_s08_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s08_voltages_1_t *src_p,
    size_t size)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2b05      	cmp	r3, #5
 800e2f4:	d802      	bhi.n	800e2fc <can1_ams_s08_voltages_1_pack+0x18>
        return (-EINVAL);
 800e2f6:	f06f 0315 	mvn.w	r3, #21
 800e2fa:	e069      	b.n	800e3d0 <can1_ams_s08_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800e2fc:	2206      	movs	r2, #6
 800e2fe:	2100      	movs	r1, #0
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f002 fa59 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s08v01, 0u, 0xffu);
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	22ff      	movs	r2, #255	@ 0xff
 800e30c:	2100      	movs	r1, #0
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fa ff22 	bl	8009158 <pack_left_shift_u8>
 800e314:	4603      	mov	r3, r0
 800e316:	461a      	mov	r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s08v02, 0u, 0xffu);
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	785b      	ldrb	r3, [r3, #1]
 800e328:	22ff      	movs	r2, #255	@ 0xff
 800e32a:	2100      	movs	r1, #0
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fa ff13 	bl	8009158 <pack_left_shift_u8>
 800e332:	4603      	mov	r3, r0
 800e334:	4619      	mov	r1, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	3301      	adds	r3, #1
 800e33a:	781a      	ldrb	r2, [r3, #0]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	3301      	adds	r3, #1
 800e340:	430a      	orrs	r2, r1
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s08v03, 0u, 0xffu);
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	789b      	ldrb	r3, [r3, #2]
 800e34a:	22ff      	movs	r2, #255	@ 0xff
 800e34c:	2100      	movs	r1, #0
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fa ff02 	bl	8009158 <pack_left_shift_u8>
 800e354:	4603      	mov	r3, r0
 800e356:	4619      	mov	r1, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	3302      	adds	r3, #2
 800e35c:	781a      	ldrb	r2, [r3, #0]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3302      	adds	r3, #2
 800e362:	430a      	orrs	r2, r1
 800e364:	b2d2      	uxtb	r2, r2
 800e366:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s08v04, 0u, 0xffu);
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	78db      	ldrb	r3, [r3, #3]
 800e36c:	22ff      	movs	r2, #255	@ 0xff
 800e36e:	2100      	movs	r1, #0
 800e370:	4618      	mov	r0, r3
 800e372:	f7fa fef1 	bl	8009158 <pack_left_shift_u8>
 800e376:	4603      	mov	r3, r0
 800e378:	4619      	mov	r1, r3
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	3303      	adds	r3, #3
 800e37e:	781a      	ldrb	r2, [r3, #0]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3303      	adds	r3, #3
 800e384:	430a      	orrs	r2, r1
 800e386:	b2d2      	uxtb	r2, r2
 800e388:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s08v05, 0u, 0xffu);
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	791b      	ldrb	r3, [r3, #4]
 800e38e:	22ff      	movs	r2, #255	@ 0xff
 800e390:	2100      	movs	r1, #0
 800e392:	4618      	mov	r0, r3
 800e394:	f7fa fee0 	bl	8009158 <pack_left_shift_u8>
 800e398:	4603      	mov	r3, r0
 800e39a:	4619      	mov	r1, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	3304      	adds	r3, #4
 800e3a0:	781a      	ldrb	r2, [r3, #0]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	430a      	orrs	r2, r1
 800e3a8:	b2d2      	uxtb	r2, r2
 800e3aa:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s08v06, 0u, 0xffu);
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	795b      	ldrb	r3, [r3, #5]
 800e3b0:	22ff      	movs	r2, #255	@ 0xff
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fa fecf 	bl	8009158 <pack_left_shift_u8>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	4619      	mov	r1, r3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	3305      	adds	r3, #5
 800e3c2:	781a      	ldrb	r2, [r3, #0]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	3305      	adds	r3, #5
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	b2d2      	uxtb	r2, r2
 800e3cc:	701a      	strb	r2, [r3, #0]

    return (6);
 800e3ce:	2306      	movs	r3, #6
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3710      	adds	r7, #16
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <can1_ams_s08_voltages_1_s08v01_encode>:

    return 0;
}

uint8_t can1_ams_s08_voltages_1_s08v01_encode(double value)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e3e2:	f04f 0200 	mov.w	r2, #0
 800e3e6:	4b10      	ldr	r3, [pc, #64]	@ (800e428 <can1_ams_s08_voltages_1_s08v01_encode+0x50>)
 800e3e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3ec:	f7f1 fef0 	bl	80001d0 <__aeabi_dsub>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	a309      	add	r3, pc, #36	@ (adr r3, 800e420 <can1_ams_s08_voltages_1_s08v01_encode+0x48>)
 800e3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fe:	f7f2 f9c9 	bl	8000794 <__aeabi_ddiv>
 800e402:	4602      	mov	r2, r0
 800e404:	460b      	mov	r3, r1
 800e406:	4610      	mov	r0, r2
 800e408:	4619      	mov	r1, r3
 800e40a:	f7f2 fb5b 	bl	8000ac4 <__aeabi_d2uiz>
 800e40e:	4603      	mov	r3, r0
 800e410:	b2db      	uxtb	r3, r3
}
 800e412:	4618      	mov	r0, r3
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	f3af 8000 	nop.w
 800e420:	fcce1c58 	.word	0xfcce1c58
 800e424:	3f800e6a 	.word	0x3f800e6a
 800e428:	40040000 	.word	0x40040000
 800e42c:	00000000 	.word	0x00000000

0800e430 <can1_ams_s08_voltages_1_s08v02_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v02_encode(double value)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e43a:	f04f 0200 	mov.w	r2, #0
 800e43e:	4b10      	ldr	r3, [pc, #64]	@ (800e480 <can1_ams_s08_voltages_1_s08v02_encode+0x50>)
 800e440:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e444:	f7f1 fec4 	bl	80001d0 <__aeabi_dsub>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4610      	mov	r0, r2
 800e44e:	4619      	mov	r1, r3
 800e450:	a309      	add	r3, pc, #36	@ (adr r3, 800e478 <can1_ams_s08_voltages_1_s08v02_encode+0x48>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	f7f2 f99d 	bl	8000794 <__aeabi_ddiv>
 800e45a:	4602      	mov	r2, r0
 800e45c:	460b      	mov	r3, r1
 800e45e:	4610      	mov	r0, r2
 800e460:	4619      	mov	r1, r3
 800e462:	f7f2 fb2f 	bl	8000ac4 <__aeabi_d2uiz>
 800e466:	4603      	mov	r3, r0
 800e468:	b2db      	uxtb	r3, r3
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	f3af 8000 	nop.w
 800e478:	fcce1c58 	.word	0xfcce1c58
 800e47c:	3f800e6a 	.word	0x3f800e6a
 800e480:	40040000 	.word	0x40040000
 800e484:	00000000 	.word	0x00000000

0800e488 <can1_ams_s08_voltages_1_s08v03_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v03_encode(double value)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e492:	f04f 0200 	mov.w	r2, #0
 800e496:	4b10      	ldr	r3, [pc, #64]	@ (800e4d8 <can1_ams_s08_voltages_1_s08v03_encode+0x50>)
 800e498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e49c:	f7f1 fe98 	bl	80001d0 <__aeabi_dsub>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4610      	mov	r0, r2
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	a309      	add	r3, pc, #36	@ (adr r3, 800e4d0 <can1_ams_s08_voltages_1_s08v03_encode+0x48>)
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	f7f2 f971 	bl	8000794 <__aeabi_ddiv>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f7f2 fb03 	bl	8000ac4 <__aeabi_d2uiz>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	b2db      	uxtb	r3, r3
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	f3af 8000 	nop.w
 800e4d0:	fcce1c58 	.word	0xfcce1c58
 800e4d4:	3f800e6a 	.word	0x3f800e6a
 800e4d8:	40040000 	.word	0x40040000
 800e4dc:	00000000 	.word	0x00000000

0800e4e0 <can1_ams_s08_voltages_1_s08v04_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v04_encode(double value)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e4ea:	f04f 0200 	mov.w	r2, #0
 800e4ee:	4b10      	ldr	r3, [pc, #64]	@ (800e530 <can1_ams_s08_voltages_1_s08v04_encode+0x50>)
 800e4f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e4f4:	f7f1 fe6c 	bl	80001d0 <__aeabi_dsub>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	4619      	mov	r1, r3
 800e500:	a309      	add	r3, pc, #36	@ (adr r3, 800e528 <can1_ams_s08_voltages_1_s08v04_encode+0x48>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f2 f945 	bl	8000794 <__aeabi_ddiv>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4610      	mov	r0, r2
 800e510:	4619      	mov	r1, r3
 800e512:	f7f2 fad7 	bl	8000ac4 <__aeabi_d2uiz>
 800e516:	4603      	mov	r3, r0
 800e518:	b2db      	uxtb	r3, r3
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	f3af 8000 	nop.w
 800e528:	fcce1c58 	.word	0xfcce1c58
 800e52c:	3f800e6a 	.word	0x3f800e6a
 800e530:	40040000 	.word	0x40040000
 800e534:	00000000 	.word	0x00000000

0800e538 <can1_ams_s08_voltages_1_s08v05_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v05_encode(double value)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e542:	f04f 0200 	mov.w	r2, #0
 800e546:	4b10      	ldr	r3, [pc, #64]	@ (800e588 <can1_ams_s08_voltages_1_s08v05_encode+0x50>)
 800e548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e54c:	f7f1 fe40 	bl	80001d0 <__aeabi_dsub>
 800e550:	4602      	mov	r2, r0
 800e552:	460b      	mov	r3, r1
 800e554:	4610      	mov	r0, r2
 800e556:	4619      	mov	r1, r3
 800e558:	a309      	add	r3, pc, #36	@ (adr r3, 800e580 <can1_ams_s08_voltages_1_s08v05_encode+0x48>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f2 f919 	bl	8000794 <__aeabi_ddiv>
 800e562:	4602      	mov	r2, r0
 800e564:	460b      	mov	r3, r1
 800e566:	4610      	mov	r0, r2
 800e568:	4619      	mov	r1, r3
 800e56a:	f7f2 faab 	bl	8000ac4 <__aeabi_d2uiz>
 800e56e:	4603      	mov	r3, r0
 800e570:	b2db      	uxtb	r3, r3
}
 800e572:	4618      	mov	r0, r3
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	f3af 8000 	nop.w
 800e580:	fcce1c58 	.word	0xfcce1c58
 800e584:	3f800e6a 	.word	0x3f800e6a
 800e588:	40040000 	.word	0x40040000
 800e58c:	00000000 	.word	0x00000000

0800e590 <can1_ams_s08_voltages_1_s08v06_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v06_encode(double value)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e59a:	f04f 0200 	mov.w	r2, #0
 800e59e:	4b10      	ldr	r3, [pc, #64]	@ (800e5e0 <can1_ams_s08_voltages_1_s08v06_encode+0x50>)
 800e5a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e5a4:	f7f1 fe14 	bl	80001d0 <__aeabi_dsub>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	4610      	mov	r0, r2
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	a309      	add	r3, pc, #36	@ (adr r3, 800e5d8 <can1_ams_s08_voltages_1_s08v06_encode+0x48>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	f7f2 f8ed 	bl	8000794 <__aeabi_ddiv>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	4610      	mov	r0, r2
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	f7f2 fa7f 	bl	8000ac4 <__aeabi_d2uiz>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	b2db      	uxtb	r3, r3
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	f3af 8000 	nop.w
 800e5d8:	fcce1c58 	.word	0xfcce1c58
 800e5dc:	3f800e6a 	.word	0x3f800e6a
 800e5e0:	40040000 	.word	0x40040000

0800e5e4 <can1_ams_s08_voltages_2_pack>:

int can1_ams_s08_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s08_voltages_2_t *src_p,
    size_t size)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b04      	cmp	r3, #4
 800e5f4:	d802      	bhi.n	800e5fc <can1_ams_s08_voltages_2_pack+0x18>
        return (-EINVAL);
 800e5f6:	f06f 0315 	mvn.w	r3, #21
 800e5fa:	e058      	b.n	800e6ae <can1_ams_s08_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800e5fc:	2205      	movs	r2, #5
 800e5fe:	2100      	movs	r1, #0
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f002 f8d9 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s08v07, 0u, 0xffu);
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	22ff      	movs	r2, #255	@ 0xff
 800e60c:	2100      	movs	r1, #0
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fa fda2 	bl	8009158 <pack_left_shift_u8>
 800e614:	4603      	mov	r3, r0
 800e616:	461a      	mov	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s08v08, 0u, 0xffu);
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	785b      	ldrb	r3, [r3, #1]
 800e628:	22ff      	movs	r2, #255	@ 0xff
 800e62a:	2100      	movs	r1, #0
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fa fd93 	bl	8009158 <pack_left_shift_u8>
 800e632:	4603      	mov	r3, r0
 800e634:	4619      	mov	r1, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3301      	adds	r3, #1
 800e63a:	781a      	ldrb	r2, [r3, #0]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	3301      	adds	r3, #1
 800e640:	430a      	orrs	r2, r1
 800e642:	b2d2      	uxtb	r2, r2
 800e644:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s08v09, 0u, 0xffu);
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	789b      	ldrb	r3, [r3, #2]
 800e64a:	22ff      	movs	r2, #255	@ 0xff
 800e64c:	2100      	movs	r1, #0
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fa fd82 	bl	8009158 <pack_left_shift_u8>
 800e654:	4603      	mov	r3, r0
 800e656:	4619      	mov	r1, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	3302      	adds	r3, #2
 800e65c:	781a      	ldrb	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3302      	adds	r3, #2
 800e662:	430a      	orrs	r2, r1
 800e664:	b2d2      	uxtb	r2, r2
 800e666:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s08v10, 0u, 0xffu);
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	78db      	ldrb	r3, [r3, #3]
 800e66c:	22ff      	movs	r2, #255	@ 0xff
 800e66e:	2100      	movs	r1, #0
 800e670:	4618      	mov	r0, r3
 800e672:	f7fa fd71 	bl	8009158 <pack_left_shift_u8>
 800e676:	4603      	mov	r3, r0
 800e678:	4619      	mov	r1, r3
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	3303      	adds	r3, #3
 800e67e:	781a      	ldrb	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	3303      	adds	r3, #3
 800e684:	430a      	orrs	r2, r1
 800e686:	b2d2      	uxtb	r2, r2
 800e688:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s08v11, 0u, 0xffu);
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	791b      	ldrb	r3, [r3, #4]
 800e68e:	22ff      	movs	r2, #255	@ 0xff
 800e690:	2100      	movs	r1, #0
 800e692:	4618      	mov	r0, r3
 800e694:	f7fa fd60 	bl	8009158 <pack_left_shift_u8>
 800e698:	4603      	mov	r3, r0
 800e69a:	4619      	mov	r1, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	3304      	adds	r3, #4
 800e6a0:	781a      	ldrb	r2, [r3, #0]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	430a      	orrs	r2, r1
 800e6a8:	b2d2      	uxtb	r2, r2
 800e6aa:	701a      	strb	r2, [r3, #0]

    return (5);
 800e6ac:	2305      	movs	r3, #5
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
	...

0800e6b8 <can1_ams_s08_voltages_2_s08v07_encode>:

    return 0;
}

uint8_t can1_ams_s08_voltages_2_s08v07_encode(double value)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e6c2:	f04f 0200 	mov.w	r2, #0
 800e6c6:	4b10      	ldr	r3, [pc, #64]	@ (800e708 <can1_ams_s08_voltages_2_s08v07_encode+0x50>)
 800e6c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e6cc:	f7f1 fd80 	bl	80001d0 <__aeabi_dsub>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	4610      	mov	r0, r2
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	a309      	add	r3, pc, #36	@ (adr r3, 800e700 <can1_ams_s08_voltages_2_s08v07_encode+0x48>)
 800e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6de:	f7f2 f859 	bl	8000794 <__aeabi_ddiv>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4610      	mov	r0, r2
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	f7f2 f9eb 	bl	8000ac4 <__aeabi_d2uiz>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	b2db      	uxtb	r3, r3
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	f3af 8000 	nop.w
 800e700:	fcce1c58 	.word	0xfcce1c58
 800e704:	3f800e6a 	.word	0x3f800e6a
 800e708:	40040000 	.word	0x40040000
 800e70c:	00000000 	.word	0x00000000

0800e710 <can1_ams_s08_voltages_2_s08v08_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v08_encode(double value)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e71a:	f04f 0200 	mov.w	r2, #0
 800e71e:	4b10      	ldr	r3, [pc, #64]	@ (800e760 <can1_ams_s08_voltages_2_s08v08_encode+0x50>)
 800e720:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e724:	f7f1 fd54 	bl	80001d0 <__aeabi_dsub>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4610      	mov	r0, r2
 800e72e:	4619      	mov	r1, r3
 800e730:	a309      	add	r3, pc, #36	@ (adr r3, 800e758 <can1_ams_s08_voltages_2_s08v08_encode+0x48>)
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	f7f2 f82d 	bl	8000794 <__aeabi_ddiv>
 800e73a:	4602      	mov	r2, r0
 800e73c:	460b      	mov	r3, r1
 800e73e:	4610      	mov	r0, r2
 800e740:	4619      	mov	r1, r3
 800e742:	f7f2 f9bf 	bl	8000ac4 <__aeabi_d2uiz>
 800e746:	4603      	mov	r3, r0
 800e748:	b2db      	uxtb	r3, r3
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	f3af 8000 	nop.w
 800e758:	fcce1c58 	.word	0xfcce1c58
 800e75c:	3f800e6a 	.word	0x3f800e6a
 800e760:	40040000 	.word	0x40040000
 800e764:	00000000 	.word	0x00000000

0800e768 <can1_ams_s08_voltages_2_s08v09_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v09_encode(double value)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e772:	f04f 0200 	mov.w	r2, #0
 800e776:	4b10      	ldr	r3, [pc, #64]	@ (800e7b8 <can1_ams_s08_voltages_2_s08v09_encode+0x50>)
 800e778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e77c:	f7f1 fd28 	bl	80001d0 <__aeabi_dsub>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	4610      	mov	r0, r2
 800e786:	4619      	mov	r1, r3
 800e788:	a309      	add	r3, pc, #36	@ (adr r3, 800e7b0 <can1_ams_s08_voltages_2_s08v09_encode+0x48>)
 800e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78e:	f7f2 f801 	bl	8000794 <__aeabi_ddiv>
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	4610      	mov	r0, r2
 800e798:	4619      	mov	r1, r3
 800e79a:	f7f2 f993 	bl	8000ac4 <__aeabi_d2uiz>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	b2db      	uxtb	r3, r3
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	f3af 8000 	nop.w
 800e7b0:	fcce1c58 	.word	0xfcce1c58
 800e7b4:	3f800e6a 	.word	0x3f800e6a
 800e7b8:	40040000 	.word	0x40040000
 800e7bc:	00000000 	.word	0x00000000

0800e7c0 <can1_ams_s08_voltages_2_s08v10_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v10_encode(double value)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e7ca:	f04f 0200 	mov.w	r2, #0
 800e7ce:	4b10      	ldr	r3, [pc, #64]	@ (800e810 <can1_ams_s08_voltages_2_s08v10_encode+0x50>)
 800e7d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e7d4:	f7f1 fcfc 	bl	80001d0 <__aeabi_dsub>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4610      	mov	r0, r2
 800e7de:	4619      	mov	r1, r3
 800e7e0:	a309      	add	r3, pc, #36	@ (adr r3, 800e808 <can1_ams_s08_voltages_2_s08v10_encode+0x48>)
 800e7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e6:	f7f1 ffd5 	bl	8000794 <__aeabi_ddiv>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4610      	mov	r0, r2
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	f7f2 f967 	bl	8000ac4 <__aeabi_d2uiz>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	b2db      	uxtb	r3, r3
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	f3af 8000 	nop.w
 800e808:	fcce1c58 	.word	0xfcce1c58
 800e80c:	3f800e6a 	.word	0x3f800e6a
 800e810:	40040000 	.word	0x40040000

0800e814 <can1_ams_s09_voltages_1_pack>:

int can1_ams_s09_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s09_voltages_1_t *src_p,
    size_t size)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b05      	cmp	r3, #5
 800e824:	d802      	bhi.n	800e82c <can1_ams_s09_voltages_1_pack+0x18>
        return (-EINVAL);
 800e826:	f06f 0315 	mvn.w	r3, #21
 800e82a:	e069      	b.n	800e900 <can1_ams_s09_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800e82c:	2206      	movs	r2, #6
 800e82e:	2100      	movs	r1, #0
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f001 ffc1 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s09v01, 0u, 0xffu);
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	22ff      	movs	r2, #255	@ 0xff
 800e83c:	2100      	movs	r1, #0
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fa fc8a 	bl	8009158 <pack_left_shift_u8>
 800e844:	4603      	mov	r3, r0
 800e846:	461a      	mov	r2, r3
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s09v02, 0u, 0xffu);
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	785b      	ldrb	r3, [r3, #1]
 800e858:	22ff      	movs	r2, #255	@ 0xff
 800e85a:	2100      	movs	r1, #0
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fa fc7b 	bl	8009158 <pack_left_shift_u8>
 800e862:	4603      	mov	r3, r0
 800e864:	4619      	mov	r1, r3
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	3301      	adds	r3, #1
 800e86a:	781a      	ldrb	r2, [r3, #0]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	3301      	adds	r3, #1
 800e870:	430a      	orrs	r2, r1
 800e872:	b2d2      	uxtb	r2, r2
 800e874:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s09v03, 0u, 0xffu);
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	789b      	ldrb	r3, [r3, #2]
 800e87a:	22ff      	movs	r2, #255	@ 0xff
 800e87c:	2100      	movs	r1, #0
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fa fc6a 	bl	8009158 <pack_left_shift_u8>
 800e884:	4603      	mov	r3, r0
 800e886:	4619      	mov	r1, r3
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	3302      	adds	r3, #2
 800e88c:	781a      	ldrb	r2, [r3, #0]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	3302      	adds	r3, #2
 800e892:	430a      	orrs	r2, r1
 800e894:	b2d2      	uxtb	r2, r2
 800e896:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s09v04, 0u, 0xffu);
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	78db      	ldrb	r3, [r3, #3]
 800e89c:	22ff      	movs	r2, #255	@ 0xff
 800e89e:	2100      	movs	r1, #0
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fa fc59 	bl	8009158 <pack_left_shift_u8>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	3303      	adds	r3, #3
 800e8ae:	781a      	ldrb	r2, [r3, #0]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	3303      	adds	r3, #3
 800e8b4:	430a      	orrs	r2, r1
 800e8b6:	b2d2      	uxtb	r2, r2
 800e8b8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s09v05, 0u, 0xffu);
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	791b      	ldrb	r3, [r3, #4]
 800e8be:	22ff      	movs	r2, #255	@ 0xff
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fa fc48 	bl	8009158 <pack_left_shift_u8>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	781a      	ldrb	r2, [r3, #0]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	430a      	orrs	r2, r1
 800e8d8:	b2d2      	uxtb	r2, r2
 800e8da:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s09v06, 0u, 0xffu);
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	795b      	ldrb	r3, [r3, #5]
 800e8e0:	22ff      	movs	r2, #255	@ 0xff
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fa fc37 	bl	8009158 <pack_left_shift_u8>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	3305      	adds	r3, #5
 800e8f2:	781a      	ldrb	r2, [r3, #0]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	3305      	adds	r3, #5
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	b2d2      	uxtb	r2, r2
 800e8fc:	701a      	strb	r2, [r3, #0]

    return (6);
 800e8fe:	2306      	movs	r3, #6
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <can1_ams_s09_voltages_1_s09v01_encode>:

    return 0;
}

uint8_t can1_ams_s09_voltages_1_s09v01_encode(double value)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e912:	f04f 0200 	mov.w	r2, #0
 800e916:	4b10      	ldr	r3, [pc, #64]	@ (800e958 <can1_ams_s09_voltages_1_s09v01_encode+0x50>)
 800e918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e91c:	f7f1 fc58 	bl	80001d0 <__aeabi_dsub>
 800e920:	4602      	mov	r2, r0
 800e922:	460b      	mov	r3, r1
 800e924:	4610      	mov	r0, r2
 800e926:	4619      	mov	r1, r3
 800e928:	a309      	add	r3, pc, #36	@ (adr r3, 800e950 <can1_ams_s09_voltages_1_s09v01_encode+0x48>)
 800e92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92e:	f7f1 ff31 	bl	8000794 <__aeabi_ddiv>
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	4610      	mov	r0, r2
 800e938:	4619      	mov	r1, r3
 800e93a:	f7f2 f8c3 	bl	8000ac4 <__aeabi_d2uiz>
 800e93e:	4603      	mov	r3, r0
 800e940:	b2db      	uxtb	r3, r3
}
 800e942:	4618      	mov	r0, r3
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	f3af 8000 	nop.w
 800e950:	fcce1c58 	.word	0xfcce1c58
 800e954:	3f800e6a 	.word	0x3f800e6a
 800e958:	40040000 	.word	0x40040000
 800e95c:	00000000 	.word	0x00000000

0800e960 <can1_ams_s09_voltages_1_s09v02_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v02_encode(double value)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e96a:	f04f 0200 	mov.w	r2, #0
 800e96e:	4b10      	ldr	r3, [pc, #64]	@ (800e9b0 <can1_ams_s09_voltages_1_s09v02_encode+0x50>)
 800e970:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e974:	f7f1 fc2c 	bl	80001d0 <__aeabi_dsub>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	4610      	mov	r0, r2
 800e97e:	4619      	mov	r1, r3
 800e980:	a309      	add	r3, pc, #36	@ (adr r3, 800e9a8 <can1_ams_s09_voltages_1_s09v02_encode+0x48>)
 800e982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e986:	f7f1 ff05 	bl	8000794 <__aeabi_ddiv>
 800e98a:	4602      	mov	r2, r0
 800e98c:	460b      	mov	r3, r1
 800e98e:	4610      	mov	r0, r2
 800e990:	4619      	mov	r1, r3
 800e992:	f7f2 f897 	bl	8000ac4 <__aeabi_d2uiz>
 800e996:	4603      	mov	r3, r0
 800e998:	b2db      	uxtb	r3, r3
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	f3af 8000 	nop.w
 800e9a8:	fcce1c58 	.word	0xfcce1c58
 800e9ac:	3f800e6a 	.word	0x3f800e6a
 800e9b0:	40040000 	.word	0x40040000
 800e9b4:	00000000 	.word	0x00000000

0800e9b8 <can1_ams_s09_voltages_1_s09v03_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v03_encode(double value)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800e9c2:	f04f 0200 	mov.w	r2, #0
 800e9c6:	4b10      	ldr	r3, [pc, #64]	@ (800ea08 <can1_ams_s09_voltages_1_s09v03_encode+0x50>)
 800e9c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e9cc:	f7f1 fc00 	bl	80001d0 <__aeabi_dsub>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4610      	mov	r0, r2
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	a309      	add	r3, pc, #36	@ (adr r3, 800ea00 <can1_ams_s09_voltages_1_s09v03_encode+0x48>)
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	f7f1 fed9 	bl	8000794 <__aeabi_ddiv>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	f7f2 f86b 	bl	8000ac4 <__aeabi_d2uiz>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	b2db      	uxtb	r3, r3
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	f3af 8000 	nop.w
 800ea00:	fcce1c58 	.word	0xfcce1c58
 800ea04:	3f800e6a 	.word	0x3f800e6a
 800ea08:	40040000 	.word	0x40040000
 800ea0c:	00000000 	.word	0x00000000

0800ea10 <can1_ams_s09_voltages_1_s09v04_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v04_encode(double value)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ea1a:	f04f 0200 	mov.w	r2, #0
 800ea1e:	4b10      	ldr	r3, [pc, #64]	@ (800ea60 <can1_ams_s09_voltages_1_s09v04_encode+0x50>)
 800ea20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ea24:	f7f1 fbd4 	bl	80001d0 <__aeabi_dsub>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	4619      	mov	r1, r3
 800ea30:	a309      	add	r3, pc, #36	@ (adr r3, 800ea58 <can1_ams_s09_voltages_1_s09v04_encode+0x48>)
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	f7f1 fead 	bl	8000794 <__aeabi_ddiv>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4610      	mov	r0, r2
 800ea40:	4619      	mov	r1, r3
 800ea42:	f7f2 f83f 	bl	8000ac4 <__aeabi_d2uiz>
 800ea46:	4603      	mov	r3, r0
 800ea48:	b2db      	uxtb	r3, r3
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	f3af 8000 	nop.w
 800ea58:	fcce1c58 	.word	0xfcce1c58
 800ea5c:	3f800e6a 	.word	0x3f800e6a
 800ea60:	40040000 	.word	0x40040000
 800ea64:	00000000 	.word	0x00000000

0800ea68 <can1_ams_s09_voltages_1_s09v05_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v05_encode(double value)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ea72:	f04f 0200 	mov.w	r2, #0
 800ea76:	4b10      	ldr	r3, [pc, #64]	@ (800eab8 <can1_ams_s09_voltages_1_s09v05_encode+0x50>)
 800ea78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ea7c:	f7f1 fba8 	bl	80001d0 <__aeabi_dsub>
 800ea80:	4602      	mov	r2, r0
 800ea82:	460b      	mov	r3, r1
 800ea84:	4610      	mov	r0, r2
 800ea86:	4619      	mov	r1, r3
 800ea88:	a309      	add	r3, pc, #36	@ (adr r3, 800eab0 <can1_ams_s09_voltages_1_s09v05_encode+0x48>)
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	f7f1 fe81 	bl	8000794 <__aeabi_ddiv>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	4610      	mov	r0, r2
 800ea98:	4619      	mov	r1, r3
 800ea9a:	f7f2 f813 	bl	8000ac4 <__aeabi_d2uiz>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	b2db      	uxtb	r3, r3
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3708      	adds	r7, #8
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	f3af 8000 	nop.w
 800eab0:	fcce1c58 	.word	0xfcce1c58
 800eab4:	3f800e6a 	.word	0x3f800e6a
 800eab8:	40040000 	.word	0x40040000
 800eabc:	00000000 	.word	0x00000000

0800eac0 <can1_ams_s09_voltages_1_s09v06_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v06_encode(double value)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800eaca:	f04f 0200 	mov.w	r2, #0
 800eace:	4b10      	ldr	r3, [pc, #64]	@ (800eb10 <can1_ams_s09_voltages_1_s09v06_encode+0x50>)
 800ead0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ead4:	f7f1 fb7c 	bl	80001d0 <__aeabi_dsub>
 800ead8:	4602      	mov	r2, r0
 800eada:	460b      	mov	r3, r1
 800eadc:	4610      	mov	r0, r2
 800eade:	4619      	mov	r1, r3
 800eae0:	a309      	add	r3, pc, #36	@ (adr r3, 800eb08 <can1_ams_s09_voltages_1_s09v06_encode+0x48>)
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	f7f1 fe55 	bl	8000794 <__aeabi_ddiv>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	4610      	mov	r0, r2
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	f7f1 ffe7 	bl	8000ac4 <__aeabi_d2uiz>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	b2db      	uxtb	r3, r3
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	f3af 8000 	nop.w
 800eb08:	fcce1c58 	.word	0xfcce1c58
 800eb0c:	3f800e6a 	.word	0x3f800e6a
 800eb10:	40040000 	.word	0x40040000

0800eb14 <can1_ams_s09_voltages_2_pack>:

int can1_ams_s09_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s09_voltages_2_t *src_p,
    size_t size)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b04      	cmp	r3, #4
 800eb24:	d802      	bhi.n	800eb2c <can1_ams_s09_voltages_2_pack+0x18>
        return (-EINVAL);
 800eb26:	f06f 0315 	mvn.w	r3, #21
 800eb2a:	e058      	b.n	800ebde <can1_ams_s09_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800eb2c:	2205      	movs	r2, #5
 800eb2e:	2100      	movs	r1, #0
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f001 fe41 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s09v07, 0u, 0xffu);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	22ff      	movs	r2, #255	@ 0xff
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fa fb0a 	bl	8009158 <pack_left_shift_u8>
 800eb44:	4603      	mov	r3, r0
 800eb46:	461a      	mov	r2, r3
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s09v08, 0u, 0xffu);
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	785b      	ldrb	r3, [r3, #1]
 800eb58:	22ff      	movs	r2, #255	@ 0xff
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fa fafb 	bl	8009158 <pack_left_shift_u8>
 800eb62:	4603      	mov	r3, r0
 800eb64:	4619      	mov	r1, r3
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	781a      	ldrb	r2, [r3, #0]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	430a      	orrs	r2, r1
 800eb72:	b2d2      	uxtb	r2, r2
 800eb74:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s09v09, 0u, 0xffu);
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	789b      	ldrb	r3, [r3, #2]
 800eb7a:	22ff      	movs	r2, #255	@ 0xff
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fa faea 	bl	8009158 <pack_left_shift_u8>
 800eb84:	4603      	mov	r3, r0
 800eb86:	4619      	mov	r1, r3
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	3302      	adds	r3, #2
 800eb8c:	781a      	ldrb	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	3302      	adds	r3, #2
 800eb92:	430a      	orrs	r2, r1
 800eb94:	b2d2      	uxtb	r2, r2
 800eb96:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s09v10, 0u, 0xffu);
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	78db      	ldrb	r3, [r3, #3]
 800eb9c:	22ff      	movs	r2, #255	@ 0xff
 800eb9e:	2100      	movs	r1, #0
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7fa fad9 	bl	8009158 <pack_left_shift_u8>
 800eba6:	4603      	mov	r3, r0
 800eba8:	4619      	mov	r1, r3
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	3303      	adds	r3, #3
 800ebae:	781a      	ldrb	r2, [r3, #0]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3303      	adds	r3, #3
 800ebb4:	430a      	orrs	r2, r1
 800ebb6:	b2d2      	uxtb	r2, r2
 800ebb8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s09v11, 0u, 0xffu);
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	791b      	ldrb	r3, [r3, #4]
 800ebbe:	22ff      	movs	r2, #255	@ 0xff
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fa fac8 	bl	8009158 <pack_left_shift_u8>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	4619      	mov	r1, r3
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	3304      	adds	r3, #4
 800ebd0:	781a      	ldrb	r2, [r3, #0]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	430a      	orrs	r2, r1
 800ebd8:	b2d2      	uxtb	r2, r2
 800ebda:	701a      	strb	r2, [r3, #0]

    return (5);
 800ebdc:	2305      	movs	r3, #5
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
	...

0800ebe8 <can1_ams_s09_voltages_2_s09v07_encode>:

    return 0;
}

uint8_t can1_ams_s09_voltages_2_s09v07_encode(double value)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ebf2:	f04f 0200 	mov.w	r2, #0
 800ebf6:	4b10      	ldr	r3, [pc, #64]	@ (800ec38 <can1_ams_s09_voltages_2_s09v07_encode+0x50>)
 800ebf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ebfc:	f7f1 fae8 	bl	80001d0 <__aeabi_dsub>
 800ec00:	4602      	mov	r2, r0
 800ec02:	460b      	mov	r3, r1
 800ec04:	4610      	mov	r0, r2
 800ec06:	4619      	mov	r1, r3
 800ec08:	a309      	add	r3, pc, #36	@ (adr r3, 800ec30 <can1_ams_s09_voltages_2_s09v07_encode+0x48>)
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f7f1 fdc1 	bl	8000794 <__aeabi_ddiv>
 800ec12:	4602      	mov	r2, r0
 800ec14:	460b      	mov	r3, r1
 800ec16:	4610      	mov	r0, r2
 800ec18:	4619      	mov	r1, r3
 800ec1a:	f7f1 ff53 	bl	8000ac4 <__aeabi_d2uiz>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	b2db      	uxtb	r3, r3
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3708      	adds	r7, #8
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	f3af 8000 	nop.w
 800ec30:	fcce1c58 	.word	0xfcce1c58
 800ec34:	3f800e6a 	.word	0x3f800e6a
 800ec38:	40040000 	.word	0x40040000
 800ec3c:	00000000 	.word	0x00000000

0800ec40 <can1_ams_s09_voltages_2_s09v08_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v08_encode(double value)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ec4a:	f04f 0200 	mov.w	r2, #0
 800ec4e:	4b10      	ldr	r3, [pc, #64]	@ (800ec90 <can1_ams_s09_voltages_2_s09v08_encode+0x50>)
 800ec50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ec54:	f7f1 fabc 	bl	80001d0 <__aeabi_dsub>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4610      	mov	r0, r2
 800ec5e:	4619      	mov	r1, r3
 800ec60:	a309      	add	r3, pc, #36	@ (adr r3, 800ec88 <can1_ams_s09_voltages_2_s09v08_encode+0x48>)
 800ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec66:	f7f1 fd95 	bl	8000794 <__aeabi_ddiv>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	4610      	mov	r0, r2
 800ec70:	4619      	mov	r1, r3
 800ec72:	f7f1 ff27 	bl	8000ac4 <__aeabi_d2uiz>
 800ec76:	4603      	mov	r3, r0
 800ec78:	b2db      	uxtb	r3, r3
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	f3af 8000 	nop.w
 800ec88:	fcce1c58 	.word	0xfcce1c58
 800ec8c:	3f800e6a 	.word	0x3f800e6a
 800ec90:	40040000 	.word	0x40040000
 800ec94:	00000000 	.word	0x00000000

0800ec98 <can1_ams_s09_voltages_2_s09v09_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v09_encode(double value)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800eca2:	f04f 0200 	mov.w	r2, #0
 800eca6:	4b10      	ldr	r3, [pc, #64]	@ (800ece8 <can1_ams_s09_voltages_2_s09v09_encode+0x50>)
 800eca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ecac:	f7f1 fa90 	bl	80001d0 <__aeabi_dsub>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	4610      	mov	r0, r2
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	a309      	add	r3, pc, #36	@ (adr r3, 800ece0 <can1_ams_s09_voltages_2_s09v09_encode+0x48>)
 800ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbe:	f7f1 fd69 	bl	8000794 <__aeabi_ddiv>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	4610      	mov	r0, r2
 800ecc8:	4619      	mov	r1, r3
 800ecca:	f7f1 fefb 	bl	8000ac4 <__aeabi_d2uiz>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	b2db      	uxtb	r3, r3
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	f3af 8000 	nop.w
 800ece0:	fcce1c58 	.word	0xfcce1c58
 800ece4:	3f800e6a 	.word	0x3f800e6a
 800ece8:	40040000 	.word	0x40040000
 800ecec:	00000000 	.word	0x00000000

0800ecf0 <can1_ams_s09_voltages_2_s09v10_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v10_encode(double value)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ecfa:	f04f 0200 	mov.w	r2, #0
 800ecfe:	4b10      	ldr	r3, [pc, #64]	@ (800ed40 <can1_ams_s09_voltages_2_s09v10_encode+0x50>)
 800ed00:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed04:	f7f1 fa64 	bl	80001d0 <__aeabi_dsub>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4610      	mov	r0, r2
 800ed0e:	4619      	mov	r1, r3
 800ed10:	a309      	add	r3, pc, #36	@ (adr r3, 800ed38 <can1_ams_s09_voltages_2_s09v10_encode+0x48>)
 800ed12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed16:	f7f1 fd3d 	bl	8000794 <__aeabi_ddiv>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4610      	mov	r0, r2
 800ed20:	4619      	mov	r1, r3
 800ed22:	f7f1 fecf 	bl	8000ac4 <__aeabi_d2uiz>
 800ed26:	4603      	mov	r3, r0
 800ed28:	b2db      	uxtb	r3, r3
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	f3af 8000 	nop.w
 800ed38:	fcce1c58 	.word	0xfcce1c58
 800ed3c:	3f800e6a 	.word	0x3f800e6a
 800ed40:	40040000 	.word	0x40040000
 800ed44:	00000000 	.word	0x00000000

0800ed48 <can1_ams_s09_voltages_2_s09v11_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v11_encode(double value)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ed52:	f04f 0200 	mov.w	r2, #0
 800ed56:	4b10      	ldr	r3, [pc, #64]	@ (800ed98 <can1_ams_s09_voltages_2_s09v11_encode+0x50>)
 800ed58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed5c:	f7f1 fa38 	bl	80001d0 <__aeabi_dsub>
 800ed60:	4602      	mov	r2, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	4610      	mov	r0, r2
 800ed66:	4619      	mov	r1, r3
 800ed68:	a309      	add	r3, pc, #36	@ (adr r3, 800ed90 <can1_ams_s09_voltages_2_s09v11_encode+0x48>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fd11 	bl	8000794 <__aeabi_ddiv>
 800ed72:	4602      	mov	r2, r0
 800ed74:	460b      	mov	r3, r1
 800ed76:	4610      	mov	r0, r2
 800ed78:	4619      	mov	r1, r3
 800ed7a:	f7f1 fea3 	bl	8000ac4 <__aeabi_d2uiz>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	b2db      	uxtb	r3, r3
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	f3af 8000 	nop.w
 800ed90:	fcce1c58 	.word	0xfcce1c58
 800ed94:	3f800e6a 	.word	0x3f800e6a
 800ed98:	40040000 	.word	0x40040000

0800ed9c <can1_ams_s10_voltages_1_pack>:

int can1_ams_s10_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s10_voltages_1_t *src_p,
    size_t size)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b05      	cmp	r3, #5
 800edac:	d802      	bhi.n	800edb4 <can1_ams_s10_voltages_1_pack+0x18>
        return (-EINVAL);
 800edae:	f06f 0315 	mvn.w	r3, #21
 800edb2:	e069      	b.n	800ee88 <can1_ams_s10_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800edb4:	2206      	movs	r2, #6
 800edb6:	2100      	movs	r1, #0
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f001 fcfd 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s10v01, 0u, 0xffu);
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	22ff      	movs	r2, #255	@ 0xff
 800edc4:	2100      	movs	r1, #0
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7fa f9c6 	bl	8009158 <pack_left_shift_u8>
 800edcc:	4603      	mov	r3, r0
 800edce:	461a      	mov	r2, r3
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s10v02, 0u, 0xffu);
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	785b      	ldrb	r3, [r3, #1]
 800ede0:	22ff      	movs	r2, #255	@ 0xff
 800ede2:	2100      	movs	r1, #0
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7fa f9b7 	bl	8009158 <pack_left_shift_u8>
 800edea:	4603      	mov	r3, r0
 800edec:	4619      	mov	r1, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	3301      	adds	r3, #1
 800edf2:	781a      	ldrb	r2, [r3, #0]
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	3301      	adds	r3, #1
 800edf8:	430a      	orrs	r2, r1
 800edfa:	b2d2      	uxtb	r2, r2
 800edfc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s10v03, 0u, 0xffu);
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	789b      	ldrb	r3, [r3, #2]
 800ee02:	22ff      	movs	r2, #255	@ 0xff
 800ee04:	2100      	movs	r1, #0
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fa f9a6 	bl	8009158 <pack_left_shift_u8>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	4619      	mov	r1, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	3302      	adds	r3, #2
 800ee14:	781a      	ldrb	r2, [r3, #0]
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	3302      	adds	r3, #2
 800ee1a:	430a      	orrs	r2, r1
 800ee1c:	b2d2      	uxtb	r2, r2
 800ee1e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s10v04, 0u, 0xffu);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	78db      	ldrb	r3, [r3, #3]
 800ee24:	22ff      	movs	r2, #255	@ 0xff
 800ee26:	2100      	movs	r1, #0
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fa f995 	bl	8009158 <pack_left_shift_u8>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	4619      	mov	r1, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	3303      	adds	r3, #3
 800ee36:	781a      	ldrb	r2, [r3, #0]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	3303      	adds	r3, #3
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	b2d2      	uxtb	r2, r2
 800ee40:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s10v05, 0u, 0xffu);
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	791b      	ldrb	r3, [r3, #4]
 800ee46:	22ff      	movs	r2, #255	@ 0xff
 800ee48:	2100      	movs	r1, #0
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7fa f984 	bl	8009158 <pack_left_shift_u8>
 800ee50:	4603      	mov	r3, r0
 800ee52:	4619      	mov	r1, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	3304      	adds	r3, #4
 800ee58:	781a      	ldrb	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	430a      	orrs	r2, r1
 800ee60:	b2d2      	uxtb	r2, r2
 800ee62:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s10v06, 0u, 0xffu);
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	795b      	ldrb	r3, [r3, #5]
 800ee68:	22ff      	movs	r2, #255	@ 0xff
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fa f973 	bl	8009158 <pack_left_shift_u8>
 800ee72:	4603      	mov	r3, r0
 800ee74:	4619      	mov	r1, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3305      	adds	r3, #5
 800ee7a:	781a      	ldrb	r2, [r3, #0]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	3305      	adds	r3, #5
 800ee80:	430a      	orrs	r2, r1
 800ee82:	b2d2      	uxtb	r2, r2
 800ee84:	701a      	strb	r2, [r3, #0]

    return (6);
 800ee86:	2306      	movs	r3, #6
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <can1_ams_s10_voltages_1_s10v01_encode>:

    return 0;
}

uint8_t can1_ams_s10_voltages_1_s10v01_encode(double value)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ee9a:	f04f 0200 	mov.w	r2, #0
 800ee9e:	4b10      	ldr	r3, [pc, #64]	@ (800eee0 <can1_ams_s10_voltages_1_s10v01_encode+0x50>)
 800eea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eea4:	f7f1 f994 	bl	80001d0 <__aeabi_dsub>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	460b      	mov	r3, r1
 800eeac:	4610      	mov	r0, r2
 800eeae:	4619      	mov	r1, r3
 800eeb0:	a309      	add	r3, pc, #36	@ (adr r3, 800eed8 <can1_ams_s10_voltages_1_s10v01_encode+0x48>)
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	f7f1 fc6d 	bl	8000794 <__aeabi_ddiv>
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	4610      	mov	r0, r2
 800eec0:	4619      	mov	r1, r3
 800eec2:	f7f1 fdff 	bl	8000ac4 <__aeabi_d2uiz>
 800eec6:	4603      	mov	r3, r0
 800eec8:	b2db      	uxtb	r3, r3
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	f3af 8000 	nop.w
 800eed8:	fcce1c58 	.word	0xfcce1c58
 800eedc:	3f800e6a 	.word	0x3f800e6a
 800eee0:	40040000 	.word	0x40040000
 800eee4:	00000000 	.word	0x00000000

0800eee8 <can1_ams_s10_voltages_1_s10v02_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v02_encode(double value)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800eef2:	f04f 0200 	mov.w	r2, #0
 800eef6:	4b10      	ldr	r3, [pc, #64]	@ (800ef38 <can1_ams_s10_voltages_1_s10v02_encode+0x50>)
 800eef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eefc:	f7f1 f968 	bl	80001d0 <__aeabi_dsub>
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
 800ef04:	4610      	mov	r0, r2
 800ef06:	4619      	mov	r1, r3
 800ef08:	a309      	add	r3, pc, #36	@ (adr r3, 800ef30 <can1_ams_s10_voltages_1_s10v02_encode+0x48>)
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f7f1 fc41 	bl	8000794 <__aeabi_ddiv>
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	4610      	mov	r0, r2
 800ef18:	4619      	mov	r1, r3
 800ef1a:	f7f1 fdd3 	bl	8000ac4 <__aeabi_d2uiz>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	b2db      	uxtb	r3, r3
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	f3af 8000 	nop.w
 800ef30:	fcce1c58 	.word	0xfcce1c58
 800ef34:	3f800e6a 	.word	0x3f800e6a
 800ef38:	40040000 	.word	0x40040000
 800ef3c:	00000000 	.word	0x00000000

0800ef40 <can1_ams_s10_voltages_1_s10v03_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v03_encode(double value)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ef4a:	f04f 0200 	mov.w	r2, #0
 800ef4e:	4b10      	ldr	r3, [pc, #64]	@ (800ef90 <can1_ams_s10_voltages_1_s10v03_encode+0x50>)
 800ef50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef54:	f7f1 f93c 	bl	80001d0 <__aeabi_dsub>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	4610      	mov	r0, r2
 800ef5e:	4619      	mov	r1, r3
 800ef60:	a309      	add	r3, pc, #36	@ (adr r3, 800ef88 <can1_ams_s10_voltages_1_s10v03_encode+0x48>)
 800ef62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef66:	f7f1 fc15 	bl	8000794 <__aeabi_ddiv>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	4610      	mov	r0, r2
 800ef70:	4619      	mov	r1, r3
 800ef72:	f7f1 fda7 	bl	8000ac4 <__aeabi_d2uiz>
 800ef76:	4603      	mov	r3, r0
 800ef78:	b2db      	uxtb	r3, r3
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	f3af 8000 	nop.w
 800ef88:	fcce1c58 	.word	0xfcce1c58
 800ef8c:	3f800e6a 	.word	0x3f800e6a
 800ef90:	40040000 	.word	0x40040000
 800ef94:	00000000 	.word	0x00000000

0800ef98 <can1_ams_s10_voltages_1_s10v04_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v04_encode(double value)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800efa2:	f04f 0200 	mov.w	r2, #0
 800efa6:	4b10      	ldr	r3, [pc, #64]	@ (800efe8 <can1_ams_s10_voltages_1_s10v04_encode+0x50>)
 800efa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800efac:	f7f1 f910 	bl	80001d0 <__aeabi_dsub>
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4610      	mov	r0, r2
 800efb6:	4619      	mov	r1, r3
 800efb8:	a309      	add	r3, pc, #36	@ (adr r3, 800efe0 <can1_ams_s10_voltages_1_s10v04_encode+0x48>)
 800efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbe:	f7f1 fbe9 	bl	8000794 <__aeabi_ddiv>
 800efc2:	4602      	mov	r2, r0
 800efc4:	460b      	mov	r3, r1
 800efc6:	4610      	mov	r0, r2
 800efc8:	4619      	mov	r1, r3
 800efca:	f7f1 fd7b 	bl	8000ac4 <__aeabi_d2uiz>
 800efce:	4603      	mov	r3, r0
 800efd0:	b2db      	uxtb	r3, r3
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	f3af 8000 	nop.w
 800efe0:	fcce1c58 	.word	0xfcce1c58
 800efe4:	3f800e6a 	.word	0x3f800e6a
 800efe8:	40040000 	.word	0x40040000
 800efec:	00000000 	.word	0x00000000

0800eff0 <can1_ams_s10_voltages_1_s10v05_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v05_encode(double value)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800effa:	f04f 0200 	mov.w	r2, #0
 800effe:	4b10      	ldr	r3, [pc, #64]	@ (800f040 <can1_ams_s10_voltages_1_s10v05_encode+0x50>)
 800f000:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f004:	f7f1 f8e4 	bl	80001d0 <__aeabi_dsub>
 800f008:	4602      	mov	r2, r0
 800f00a:	460b      	mov	r3, r1
 800f00c:	4610      	mov	r0, r2
 800f00e:	4619      	mov	r1, r3
 800f010:	a309      	add	r3, pc, #36	@ (adr r3, 800f038 <can1_ams_s10_voltages_1_s10v05_encode+0x48>)
 800f012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f016:	f7f1 fbbd 	bl	8000794 <__aeabi_ddiv>
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	4610      	mov	r0, r2
 800f020:	4619      	mov	r1, r3
 800f022:	f7f1 fd4f 	bl	8000ac4 <__aeabi_d2uiz>
 800f026:	4603      	mov	r3, r0
 800f028:	b2db      	uxtb	r3, r3
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	f3af 8000 	nop.w
 800f038:	fcce1c58 	.word	0xfcce1c58
 800f03c:	3f800e6a 	.word	0x3f800e6a
 800f040:	40040000 	.word	0x40040000
 800f044:	00000000 	.word	0x00000000

0800f048 <can1_ams_s10_voltages_1_s10v06_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v06_encode(double value)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f052:	f04f 0200 	mov.w	r2, #0
 800f056:	4b10      	ldr	r3, [pc, #64]	@ (800f098 <can1_ams_s10_voltages_1_s10v06_encode+0x50>)
 800f058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f05c:	f7f1 f8b8 	bl	80001d0 <__aeabi_dsub>
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	4610      	mov	r0, r2
 800f066:	4619      	mov	r1, r3
 800f068:	a309      	add	r3, pc, #36	@ (adr r3, 800f090 <can1_ams_s10_voltages_1_s10v06_encode+0x48>)
 800f06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06e:	f7f1 fb91 	bl	8000794 <__aeabi_ddiv>
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	4610      	mov	r0, r2
 800f078:	4619      	mov	r1, r3
 800f07a:	f7f1 fd23 	bl	8000ac4 <__aeabi_d2uiz>
 800f07e:	4603      	mov	r3, r0
 800f080:	b2db      	uxtb	r3, r3
}
 800f082:	4618      	mov	r0, r3
 800f084:	3708      	adds	r7, #8
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	f3af 8000 	nop.w
 800f090:	fcce1c58 	.word	0xfcce1c58
 800f094:	3f800e6a 	.word	0x3f800e6a
 800f098:	40040000 	.word	0x40040000

0800f09c <can1_ams_s10_voltages_2_pack>:

int can1_ams_s10_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s10_voltages_2_t *src_p,
    size_t size)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d802      	bhi.n	800f0b4 <can1_ams_s10_voltages_2_pack+0x18>
        return (-EINVAL);
 800f0ae:	f06f 0315 	mvn.w	r3, #21
 800f0b2:	e058      	b.n	800f166 <can1_ams_s10_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800f0b4:	2205      	movs	r2, #5
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f001 fb7d 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s10v07, 0u, 0xffu);
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	22ff      	movs	r2, #255	@ 0xff
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fa f846 	bl	8009158 <pack_left_shift_u8>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	4313      	orrs	r3, r2
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s10v08, 0u, 0xffu);
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	785b      	ldrb	r3, [r3, #1]
 800f0e0:	22ff      	movs	r2, #255	@ 0xff
 800f0e2:	2100      	movs	r1, #0
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fa f837 	bl	8009158 <pack_left_shift_u8>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	781a      	ldrb	r2, [r3, #0]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	430a      	orrs	r2, r1
 800f0fa:	b2d2      	uxtb	r2, r2
 800f0fc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s10v09, 0u, 0xffu);
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	789b      	ldrb	r3, [r3, #2]
 800f102:	22ff      	movs	r2, #255	@ 0xff
 800f104:	2100      	movs	r1, #0
 800f106:	4618      	mov	r0, r3
 800f108:	f7fa f826 	bl	8009158 <pack_left_shift_u8>
 800f10c:	4603      	mov	r3, r0
 800f10e:	4619      	mov	r1, r3
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	3302      	adds	r3, #2
 800f114:	781a      	ldrb	r2, [r3, #0]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	3302      	adds	r3, #2
 800f11a:	430a      	orrs	r2, r1
 800f11c:	b2d2      	uxtb	r2, r2
 800f11e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s10v10, 0u, 0xffu);
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	78db      	ldrb	r3, [r3, #3]
 800f124:	22ff      	movs	r2, #255	@ 0xff
 800f126:	2100      	movs	r1, #0
 800f128:	4618      	mov	r0, r3
 800f12a:	f7fa f815 	bl	8009158 <pack_left_shift_u8>
 800f12e:	4603      	mov	r3, r0
 800f130:	4619      	mov	r1, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	3303      	adds	r3, #3
 800f136:	781a      	ldrb	r2, [r3, #0]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	3303      	adds	r3, #3
 800f13c:	430a      	orrs	r2, r1
 800f13e:	b2d2      	uxtb	r2, r2
 800f140:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s10v11, 0u, 0xffu);
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	791b      	ldrb	r3, [r3, #4]
 800f146:	22ff      	movs	r2, #255	@ 0xff
 800f148:	2100      	movs	r1, #0
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fa f804 	bl	8009158 <pack_left_shift_u8>
 800f150:	4603      	mov	r3, r0
 800f152:	4619      	mov	r1, r3
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	3304      	adds	r3, #4
 800f158:	781a      	ldrb	r2, [r3, #0]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	3304      	adds	r3, #4
 800f15e:	430a      	orrs	r2, r1
 800f160:	b2d2      	uxtb	r2, r2
 800f162:	701a      	strb	r2, [r3, #0]

    return (5);
 800f164:	2305      	movs	r3, #5
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
	...

0800f170 <can1_ams_s10_voltages_2_s10v07_encode>:

    return 0;
}

uint8_t can1_ams_s10_voltages_2_s10v07_encode(double value)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f17a:	f04f 0200 	mov.w	r2, #0
 800f17e:	4b10      	ldr	r3, [pc, #64]	@ (800f1c0 <can1_ams_s10_voltages_2_s10v07_encode+0x50>)
 800f180:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f184:	f7f1 f824 	bl	80001d0 <__aeabi_dsub>
 800f188:	4602      	mov	r2, r0
 800f18a:	460b      	mov	r3, r1
 800f18c:	4610      	mov	r0, r2
 800f18e:	4619      	mov	r1, r3
 800f190:	a309      	add	r3, pc, #36	@ (adr r3, 800f1b8 <can1_ams_s10_voltages_2_s10v07_encode+0x48>)
 800f192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f196:	f7f1 fafd 	bl	8000794 <__aeabi_ddiv>
 800f19a:	4602      	mov	r2, r0
 800f19c:	460b      	mov	r3, r1
 800f19e:	4610      	mov	r0, r2
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	f7f1 fc8f 	bl	8000ac4 <__aeabi_d2uiz>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	b2db      	uxtb	r3, r3
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	f3af 8000 	nop.w
 800f1b8:	fcce1c58 	.word	0xfcce1c58
 800f1bc:	3f800e6a 	.word	0x3f800e6a
 800f1c0:	40040000 	.word	0x40040000
 800f1c4:	00000000 	.word	0x00000000

0800f1c8 <can1_ams_s10_voltages_2_s10v08_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v08_encode(double value)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f1d2:	f04f 0200 	mov.w	r2, #0
 800f1d6:	4b10      	ldr	r3, [pc, #64]	@ (800f218 <can1_ams_s10_voltages_2_s10v08_encode+0x50>)
 800f1d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1dc:	f7f0 fff8 	bl	80001d0 <__aeabi_dsub>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	a309      	add	r3, pc, #36	@ (adr r3, 800f210 <can1_ams_s10_voltages_2_s10v08_encode+0x48>)
 800f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ee:	f7f1 fad1 	bl	8000794 <__aeabi_ddiv>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	4610      	mov	r0, r2
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	f7f1 fc63 	bl	8000ac4 <__aeabi_d2uiz>
 800f1fe:	4603      	mov	r3, r0
 800f200:	b2db      	uxtb	r3, r3
}
 800f202:	4618      	mov	r0, r3
 800f204:	3708      	adds	r7, #8
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	f3af 8000 	nop.w
 800f210:	fcce1c58 	.word	0xfcce1c58
 800f214:	3f800e6a 	.word	0x3f800e6a
 800f218:	40040000 	.word	0x40040000
 800f21c:	00000000 	.word	0x00000000

0800f220 <can1_ams_s10_voltages_2_s10v09_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v09_encode(double value)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f22a:	f04f 0200 	mov.w	r2, #0
 800f22e:	4b10      	ldr	r3, [pc, #64]	@ (800f270 <can1_ams_s10_voltages_2_s10v09_encode+0x50>)
 800f230:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f234:	f7f0 ffcc 	bl	80001d0 <__aeabi_dsub>
 800f238:	4602      	mov	r2, r0
 800f23a:	460b      	mov	r3, r1
 800f23c:	4610      	mov	r0, r2
 800f23e:	4619      	mov	r1, r3
 800f240:	a309      	add	r3, pc, #36	@ (adr r3, 800f268 <can1_ams_s10_voltages_2_s10v09_encode+0x48>)
 800f242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f246:	f7f1 faa5 	bl	8000794 <__aeabi_ddiv>
 800f24a:	4602      	mov	r2, r0
 800f24c:	460b      	mov	r3, r1
 800f24e:	4610      	mov	r0, r2
 800f250:	4619      	mov	r1, r3
 800f252:	f7f1 fc37 	bl	8000ac4 <__aeabi_d2uiz>
 800f256:	4603      	mov	r3, r0
 800f258:	b2db      	uxtb	r3, r3
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3708      	adds	r7, #8
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	f3af 8000 	nop.w
 800f268:	fcce1c58 	.word	0xfcce1c58
 800f26c:	3f800e6a 	.word	0x3f800e6a
 800f270:	40040000 	.word	0x40040000
 800f274:	00000000 	.word	0x00000000

0800f278 <can1_ams_s10_voltages_2_s10v10_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v10_encode(double value)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f282:	f04f 0200 	mov.w	r2, #0
 800f286:	4b10      	ldr	r3, [pc, #64]	@ (800f2c8 <can1_ams_s10_voltages_2_s10v10_encode+0x50>)
 800f288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f28c:	f7f0 ffa0 	bl	80001d0 <__aeabi_dsub>
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	4610      	mov	r0, r2
 800f296:	4619      	mov	r1, r3
 800f298:	a309      	add	r3, pc, #36	@ (adr r3, 800f2c0 <can1_ams_s10_voltages_2_s10v10_encode+0x48>)
 800f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29e:	f7f1 fa79 	bl	8000794 <__aeabi_ddiv>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	4610      	mov	r0, r2
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	f7f1 fc0b 	bl	8000ac4 <__aeabi_d2uiz>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	b2db      	uxtb	r3, r3
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	f3af 8000 	nop.w
 800f2c0:	fcce1c58 	.word	0xfcce1c58
 800f2c4:	3f800e6a 	.word	0x3f800e6a
 800f2c8:	40040000 	.word	0x40040000

0800f2cc <can1_ams_s11_voltages_1_pack>:

int can1_ams_s11_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s11_voltages_1_t *src_p,
    size_t size)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b05      	cmp	r3, #5
 800f2dc:	d802      	bhi.n	800f2e4 <can1_ams_s11_voltages_1_pack+0x18>
        return (-EINVAL);
 800f2de:	f06f 0315 	mvn.w	r3, #21
 800f2e2:	e069      	b.n	800f3b8 <can1_ams_s11_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800f2e4:	2206      	movs	r2, #6
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f001 fa65 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s11v01, 0u, 0xffu);
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	22ff      	movs	r2, #255	@ 0xff
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7f9 ff2e 	bl	8009158 <pack_left_shift_u8>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	461a      	mov	r2, r3
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	4313      	orrs	r3, r2
 800f306:	b2da      	uxtb	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s11v02, 0u, 0xffu);
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	785b      	ldrb	r3, [r3, #1]
 800f310:	22ff      	movs	r2, #255	@ 0xff
 800f312:	2100      	movs	r1, #0
 800f314:	4618      	mov	r0, r3
 800f316:	f7f9 ff1f 	bl	8009158 <pack_left_shift_u8>
 800f31a:	4603      	mov	r3, r0
 800f31c:	4619      	mov	r1, r3
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3301      	adds	r3, #1
 800f322:	781a      	ldrb	r2, [r3, #0]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	3301      	adds	r3, #1
 800f328:	430a      	orrs	r2, r1
 800f32a:	b2d2      	uxtb	r2, r2
 800f32c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s11v03, 0u, 0xffu);
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	789b      	ldrb	r3, [r3, #2]
 800f332:	22ff      	movs	r2, #255	@ 0xff
 800f334:	2100      	movs	r1, #0
 800f336:	4618      	mov	r0, r3
 800f338:	f7f9 ff0e 	bl	8009158 <pack_left_shift_u8>
 800f33c:	4603      	mov	r3, r0
 800f33e:	4619      	mov	r1, r3
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	3302      	adds	r3, #2
 800f344:	781a      	ldrb	r2, [r3, #0]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	3302      	adds	r3, #2
 800f34a:	430a      	orrs	r2, r1
 800f34c:	b2d2      	uxtb	r2, r2
 800f34e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s11v04, 0u, 0xffu);
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	78db      	ldrb	r3, [r3, #3]
 800f354:	22ff      	movs	r2, #255	@ 0xff
 800f356:	2100      	movs	r1, #0
 800f358:	4618      	mov	r0, r3
 800f35a:	f7f9 fefd 	bl	8009158 <pack_left_shift_u8>
 800f35e:	4603      	mov	r3, r0
 800f360:	4619      	mov	r1, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	3303      	adds	r3, #3
 800f366:	781a      	ldrb	r2, [r3, #0]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	3303      	adds	r3, #3
 800f36c:	430a      	orrs	r2, r1
 800f36e:	b2d2      	uxtb	r2, r2
 800f370:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s11v05, 0u, 0xffu);
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	791b      	ldrb	r3, [r3, #4]
 800f376:	22ff      	movs	r2, #255	@ 0xff
 800f378:	2100      	movs	r1, #0
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7f9 feec 	bl	8009158 <pack_left_shift_u8>
 800f380:	4603      	mov	r3, r0
 800f382:	4619      	mov	r1, r3
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	3304      	adds	r3, #4
 800f388:	781a      	ldrb	r2, [r3, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	3304      	adds	r3, #4
 800f38e:	430a      	orrs	r2, r1
 800f390:	b2d2      	uxtb	r2, r2
 800f392:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s11v06, 0u, 0xffu);
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	795b      	ldrb	r3, [r3, #5]
 800f398:	22ff      	movs	r2, #255	@ 0xff
 800f39a:	2100      	movs	r1, #0
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f9 fedb 	bl	8009158 <pack_left_shift_u8>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	3305      	adds	r3, #5
 800f3aa:	781a      	ldrb	r2, [r3, #0]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	3305      	adds	r3, #5
 800f3b0:	430a      	orrs	r2, r1
 800f3b2:	b2d2      	uxtb	r2, r2
 800f3b4:	701a      	strb	r2, [r3, #0]

    return (6);
 800f3b6:	2306      	movs	r3, #6
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3710      	adds	r7, #16
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <can1_ams_s11_voltages_1_s11v01_encode>:

    return 0;
}

uint8_t can1_ams_s11_voltages_1_s11v01_encode(double value)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f3ca:	f04f 0200 	mov.w	r2, #0
 800f3ce:	4b10      	ldr	r3, [pc, #64]	@ (800f410 <can1_ams_s11_voltages_1_s11v01_encode+0x50>)
 800f3d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3d4:	f7f0 fefc 	bl	80001d0 <__aeabi_dsub>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	460b      	mov	r3, r1
 800f3dc:	4610      	mov	r0, r2
 800f3de:	4619      	mov	r1, r3
 800f3e0:	a309      	add	r3, pc, #36	@ (adr r3, 800f408 <can1_ams_s11_voltages_1_s11v01_encode+0x48>)
 800f3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e6:	f7f1 f9d5 	bl	8000794 <__aeabi_ddiv>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	4610      	mov	r0, r2
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	f7f1 fb67 	bl	8000ac4 <__aeabi_d2uiz>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	b2db      	uxtb	r3, r3
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3708      	adds	r7, #8
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	f3af 8000 	nop.w
 800f408:	fcce1c58 	.word	0xfcce1c58
 800f40c:	3f800e6a 	.word	0x3f800e6a
 800f410:	40040000 	.word	0x40040000
 800f414:	00000000 	.word	0x00000000

0800f418 <can1_ams_s11_voltages_1_s11v02_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v02_encode(double value)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f422:	f04f 0200 	mov.w	r2, #0
 800f426:	4b10      	ldr	r3, [pc, #64]	@ (800f468 <can1_ams_s11_voltages_1_s11v02_encode+0x50>)
 800f428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f42c:	f7f0 fed0 	bl	80001d0 <__aeabi_dsub>
 800f430:	4602      	mov	r2, r0
 800f432:	460b      	mov	r3, r1
 800f434:	4610      	mov	r0, r2
 800f436:	4619      	mov	r1, r3
 800f438:	a309      	add	r3, pc, #36	@ (adr r3, 800f460 <can1_ams_s11_voltages_1_s11v02_encode+0x48>)
 800f43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43e:	f7f1 f9a9 	bl	8000794 <__aeabi_ddiv>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	4610      	mov	r0, r2
 800f448:	4619      	mov	r1, r3
 800f44a:	f7f1 fb3b 	bl	8000ac4 <__aeabi_d2uiz>
 800f44e:	4603      	mov	r3, r0
 800f450:	b2db      	uxtb	r3, r3
}
 800f452:	4618      	mov	r0, r3
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	f3af 8000 	nop.w
 800f460:	fcce1c58 	.word	0xfcce1c58
 800f464:	3f800e6a 	.word	0x3f800e6a
 800f468:	40040000 	.word	0x40040000
 800f46c:	00000000 	.word	0x00000000

0800f470 <can1_ams_s11_voltages_1_s11v03_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v03_encode(double value)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f47a:	f04f 0200 	mov.w	r2, #0
 800f47e:	4b10      	ldr	r3, [pc, #64]	@ (800f4c0 <can1_ams_s11_voltages_1_s11v03_encode+0x50>)
 800f480:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f484:	f7f0 fea4 	bl	80001d0 <__aeabi_dsub>
 800f488:	4602      	mov	r2, r0
 800f48a:	460b      	mov	r3, r1
 800f48c:	4610      	mov	r0, r2
 800f48e:	4619      	mov	r1, r3
 800f490:	a309      	add	r3, pc, #36	@ (adr r3, 800f4b8 <can1_ams_s11_voltages_1_s11v03_encode+0x48>)
 800f492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f496:	f7f1 f97d 	bl	8000794 <__aeabi_ddiv>
 800f49a:	4602      	mov	r2, r0
 800f49c:	460b      	mov	r3, r1
 800f49e:	4610      	mov	r0, r2
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	f7f1 fb0f 	bl	8000ac4 <__aeabi_d2uiz>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	b2db      	uxtb	r3, r3
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	f3af 8000 	nop.w
 800f4b8:	fcce1c58 	.word	0xfcce1c58
 800f4bc:	3f800e6a 	.word	0x3f800e6a
 800f4c0:	40040000 	.word	0x40040000
 800f4c4:	00000000 	.word	0x00000000

0800f4c8 <can1_ams_s11_voltages_1_s11v04_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v04_encode(double value)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f4d2:	f04f 0200 	mov.w	r2, #0
 800f4d6:	4b10      	ldr	r3, [pc, #64]	@ (800f518 <can1_ams_s11_voltages_1_s11v04_encode+0x50>)
 800f4d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4dc:	f7f0 fe78 	bl	80001d0 <__aeabi_dsub>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	460b      	mov	r3, r1
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	a309      	add	r3, pc, #36	@ (adr r3, 800f510 <can1_ams_s11_voltages_1_s11v04_encode+0x48>)
 800f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ee:	f7f1 f951 	bl	8000794 <__aeabi_ddiv>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	4610      	mov	r0, r2
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	f7f1 fae3 	bl	8000ac4 <__aeabi_d2uiz>
 800f4fe:	4603      	mov	r3, r0
 800f500:	b2db      	uxtb	r3, r3
}
 800f502:	4618      	mov	r0, r3
 800f504:	3708      	adds	r7, #8
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	f3af 8000 	nop.w
 800f510:	fcce1c58 	.word	0xfcce1c58
 800f514:	3f800e6a 	.word	0x3f800e6a
 800f518:	40040000 	.word	0x40040000
 800f51c:	00000000 	.word	0x00000000

0800f520 <can1_ams_s11_voltages_1_s11v05_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v05_encode(double value)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f52a:	f04f 0200 	mov.w	r2, #0
 800f52e:	4b10      	ldr	r3, [pc, #64]	@ (800f570 <can1_ams_s11_voltages_1_s11v05_encode+0x50>)
 800f530:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f534:	f7f0 fe4c 	bl	80001d0 <__aeabi_dsub>
 800f538:	4602      	mov	r2, r0
 800f53a:	460b      	mov	r3, r1
 800f53c:	4610      	mov	r0, r2
 800f53e:	4619      	mov	r1, r3
 800f540:	a309      	add	r3, pc, #36	@ (adr r3, 800f568 <can1_ams_s11_voltages_1_s11v05_encode+0x48>)
 800f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f546:	f7f1 f925 	bl	8000794 <__aeabi_ddiv>
 800f54a:	4602      	mov	r2, r0
 800f54c:	460b      	mov	r3, r1
 800f54e:	4610      	mov	r0, r2
 800f550:	4619      	mov	r1, r3
 800f552:	f7f1 fab7 	bl	8000ac4 <__aeabi_d2uiz>
 800f556:	4603      	mov	r3, r0
 800f558:	b2db      	uxtb	r3, r3
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	f3af 8000 	nop.w
 800f568:	fcce1c58 	.word	0xfcce1c58
 800f56c:	3f800e6a 	.word	0x3f800e6a
 800f570:	40040000 	.word	0x40040000
 800f574:	00000000 	.word	0x00000000

0800f578 <can1_ams_s11_voltages_1_s11v06_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v06_encode(double value)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f582:	f04f 0200 	mov.w	r2, #0
 800f586:	4b10      	ldr	r3, [pc, #64]	@ (800f5c8 <can1_ams_s11_voltages_1_s11v06_encode+0x50>)
 800f588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f58c:	f7f0 fe20 	bl	80001d0 <__aeabi_dsub>
 800f590:	4602      	mov	r2, r0
 800f592:	460b      	mov	r3, r1
 800f594:	4610      	mov	r0, r2
 800f596:	4619      	mov	r1, r3
 800f598:	a309      	add	r3, pc, #36	@ (adr r3, 800f5c0 <can1_ams_s11_voltages_1_s11v06_encode+0x48>)
 800f59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59e:	f7f1 f8f9 	bl	8000794 <__aeabi_ddiv>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	4610      	mov	r0, r2
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	f7f1 fa8b 	bl	8000ac4 <__aeabi_d2uiz>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	b2db      	uxtb	r3, r3
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	f3af 8000 	nop.w
 800f5c0:	fcce1c58 	.word	0xfcce1c58
 800f5c4:	3f800e6a 	.word	0x3f800e6a
 800f5c8:	40040000 	.word	0x40040000

0800f5cc <can1_ams_s11_voltages_2_pack>:

int can1_ams_s11_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s11_voltages_2_t *src_p,
    size_t size)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b04      	cmp	r3, #4
 800f5dc:	d802      	bhi.n	800f5e4 <can1_ams_s11_voltages_2_pack+0x18>
        return (-EINVAL);
 800f5de:	f06f 0315 	mvn.w	r3, #21
 800f5e2:	e058      	b.n	800f696 <can1_ams_s11_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800f5e4:	2205      	movs	r2, #5
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f001 f8e5 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s11v07, 0u, 0xffu);
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	22ff      	movs	r2, #255	@ 0xff
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7f9 fdae 	bl	8009158 <pack_left_shift_u8>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	461a      	mov	r2, r3
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	4313      	orrs	r3, r2
 800f606:	b2da      	uxtb	r2, r3
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s11v08, 0u, 0xffu);
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	785b      	ldrb	r3, [r3, #1]
 800f610:	22ff      	movs	r2, #255	@ 0xff
 800f612:	2100      	movs	r1, #0
 800f614:	4618      	mov	r0, r3
 800f616:	f7f9 fd9f 	bl	8009158 <pack_left_shift_u8>
 800f61a:	4603      	mov	r3, r0
 800f61c:	4619      	mov	r1, r3
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	3301      	adds	r3, #1
 800f622:	781a      	ldrb	r2, [r3, #0]
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	3301      	adds	r3, #1
 800f628:	430a      	orrs	r2, r1
 800f62a:	b2d2      	uxtb	r2, r2
 800f62c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s11v09, 0u, 0xffu);
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	789b      	ldrb	r3, [r3, #2]
 800f632:	22ff      	movs	r2, #255	@ 0xff
 800f634:	2100      	movs	r1, #0
 800f636:	4618      	mov	r0, r3
 800f638:	f7f9 fd8e 	bl	8009158 <pack_left_shift_u8>
 800f63c:	4603      	mov	r3, r0
 800f63e:	4619      	mov	r1, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	3302      	adds	r3, #2
 800f644:	781a      	ldrb	r2, [r3, #0]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	3302      	adds	r3, #2
 800f64a:	430a      	orrs	r2, r1
 800f64c:	b2d2      	uxtb	r2, r2
 800f64e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s11v10, 0u, 0xffu);
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	78db      	ldrb	r3, [r3, #3]
 800f654:	22ff      	movs	r2, #255	@ 0xff
 800f656:	2100      	movs	r1, #0
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f9 fd7d 	bl	8009158 <pack_left_shift_u8>
 800f65e:	4603      	mov	r3, r0
 800f660:	4619      	mov	r1, r3
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	3303      	adds	r3, #3
 800f666:	781a      	ldrb	r2, [r3, #0]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	3303      	adds	r3, #3
 800f66c:	430a      	orrs	r2, r1
 800f66e:	b2d2      	uxtb	r2, r2
 800f670:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s11v11, 0u, 0xffu);
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	791b      	ldrb	r3, [r3, #4]
 800f676:	22ff      	movs	r2, #255	@ 0xff
 800f678:	2100      	movs	r1, #0
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7f9 fd6c 	bl	8009158 <pack_left_shift_u8>
 800f680:	4603      	mov	r3, r0
 800f682:	4619      	mov	r1, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	3304      	adds	r3, #4
 800f688:	781a      	ldrb	r2, [r3, #0]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	3304      	adds	r3, #4
 800f68e:	430a      	orrs	r2, r1
 800f690:	b2d2      	uxtb	r2, r2
 800f692:	701a      	strb	r2, [r3, #0]

    return (5);
 800f694:	2305      	movs	r3, #5
}
 800f696:	4618      	mov	r0, r3
 800f698:	3710      	adds	r7, #16
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
	...

0800f6a0 <can1_ams_s11_voltages_2_s11v07_encode>:

    return 0;
}

uint8_t can1_ams_s11_voltages_2_s11v07_encode(double value)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f6aa:	f04f 0200 	mov.w	r2, #0
 800f6ae:	4b10      	ldr	r3, [pc, #64]	@ (800f6f0 <can1_ams_s11_voltages_2_s11v07_encode+0x50>)
 800f6b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f6b4:	f7f0 fd8c 	bl	80001d0 <__aeabi_dsub>
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	4610      	mov	r0, r2
 800f6be:	4619      	mov	r1, r3
 800f6c0:	a309      	add	r3, pc, #36	@ (adr r3, 800f6e8 <can1_ams_s11_voltages_2_s11v07_encode+0x48>)
 800f6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c6:	f7f1 f865 	bl	8000794 <__aeabi_ddiv>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4610      	mov	r0, r2
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	f7f1 f9f7 	bl	8000ac4 <__aeabi_d2uiz>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	b2db      	uxtb	r3, r3
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	f3af 8000 	nop.w
 800f6e8:	fcce1c58 	.word	0xfcce1c58
 800f6ec:	3f800e6a 	.word	0x3f800e6a
 800f6f0:	40040000 	.word	0x40040000
 800f6f4:	00000000 	.word	0x00000000

0800f6f8 <can1_ams_s11_voltages_2_s11v08_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v08_encode(double value)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f702:	f04f 0200 	mov.w	r2, #0
 800f706:	4b10      	ldr	r3, [pc, #64]	@ (800f748 <can1_ams_s11_voltages_2_s11v08_encode+0x50>)
 800f708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f70c:	f7f0 fd60 	bl	80001d0 <__aeabi_dsub>
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	4610      	mov	r0, r2
 800f716:	4619      	mov	r1, r3
 800f718:	a309      	add	r3, pc, #36	@ (adr r3, 800f740 <can1_ams_s11_voltages_2_s11v08_encode+0x48>)
 800f71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71e:	f7f1 f839 	bl	8000794 <__aeabi_ddiv>
 800f722:	4602      	mov	r2, r0
 800f724:	460b      	mov	r3, r1
 800f726:	4610      	mov	r0, r2
 800f728:	4619      	mov	r1, r3
 800f72a:	f7f1 f9cb 	bl	8000ac4 <__aeabi_d2uiz>
 800f72e:	4603      	mov	r3, r0
 800f730:	b2db      	uxtb	r3, r3
}
 800f732:	4618      	mov	r0, r3
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	f3af 8000 	nop.w
 800f740:	fcce1c58 	.word	0xfcce1c58
 800f744:	3f800e6a 	.word	0x3f800e6a
 800f748:	40040000 	.word	0x40040000
 800f74c:	00000000 	.word	0x00000000

0800f750 <can1_ams_s11_voltages_2_s11v09_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v09_encode(double value)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f75a:	f04f 0200 	mov.w	r2, #0
 800f75e:	4b10      	ldr	r3, [pc, #64]	@ (800f7a0 <can1_ams_s11_voltages_2_s11v09_encode+0x50>)
 800f760:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f764:	f7f0 fd34 	bl	80001d0 <__aeabi_dsub>
 800f768:	4602      	mov	r2, r0
 800f76a:	460b      	mov	r3, r1
 800f76c:	4610      	mov	r0, r2
 800f76e:	4619      	mov	r1, r3
 800f770:	a309      	add	r3, pc, #36	@ (adr r3, 800f798 <can1_ams_s11_voltages_2_s11v09_encode+0x48>)
 800f772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f776:	f7f1 f80d 	bl	8000794 <__aeabi_ddiv>
 800f77a:	4602      	mov	r2, r0
 800f77c:	460b      	mov	r3, r1
 800f77e:	4610      	mov	r0, r2
 800f780:	4619      	mov	r1, r3
 800f782:	f7f1 f99f 	bl	8000ac4 <__aeabi_d2uiz>
 800f786:	4603      	mov	r3, r0
 800f788:	b2db      	uxtb	r3, r3
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	f3af 8000 	nop.w
 800f798:	fcce1c58 	.word	0xfcce1c58
 800f79c:	3f800e6a 	.word	0x3f800e6a
 800f7a0:	40040000 	.word	0x40040000
 800f7a4:	00000000 	.word	0x00000000

0800f7a8 <can1_ams_s11_voltages_2_s11v10_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v10_encode(double value)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f7b2:	f04f 0200 	mov.w	r2, #0
 800f7b6:	4b10      	ldr	r3, [pc, #64]	@ (800f7f8 <can1_ams_s11_voltages_2_s11v10_encode+0x50>)
 800f7b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7bc:	f7f0 fd08 	bl	80001d0 <__aeabi_dsub>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	a309      	add	r3, pc, #36	@ (adr r3, 800f7f0 <can1_ams_s11_voltages_2_s11v10_encode+0x48>)
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	f7f0 ffe1 	bl	8000794 <__aeabi_ddiv>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	4610      	mov	r0, r2
 800f7d8:	4619      	mov	r1, r3
 800f7da:	f7f1 f973 	bl	8000ac4 <__aeabi_d2uiz>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	b2db      	uxtb	r3, r3
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3708      	adds	r7, #8
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	f3af 8000 	nop.w
 800f7f0:	fcce1c58 	.word	0xfcce1c58
 800f7f4:	3f800e6a 	.word	0x3f800e6a
 800f7f8:	40040000 	.word	0x40040000
 800f7fc:	00000000 	.word	0x00000000

0800f800 <can1_ams_s11_voltages_2_s11v11_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v11_encode(double value)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f80a:	f04f 0200 	mov.w	r2, #0
 800f80e:	4b10      	ldr	r3, [pc, #64]	@ (800f850 <can1_ams_s11_voltages_2_s11v11_encode+0x50>)
 800f810:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f814:	f7f0 fcdc 	bl	80001d0 <__aeabi_dsub>
 800f818:	4602      	mov	r2, r0
 800f81a:	460b      	mov	r3, r1
 800f81c:	4610      	mov	r0, r2
 800f81e:	4619      	mov	r1, r3
 800f820:	a309      	add	r3, pc, #36	@ (adr r3, 800f848 <can1_ams_s11_voltages_2_s11v11_encode+0x48>)
 800f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f826:	f7f0 ffb5 	bl	8000794 <__aeabi_ddiv>
 800f82a:	4602      	mov	r2, r0
 800f82c:	460b      	mov	r3, r1
 800f82e:	4610      	mov	r0, r2
 800f830:	4619      	mov	r1, r3
 800f832:	f7f1 f947 	bl	8000ac4 <__aeabi_d2uiz>
 800f836:	4603      	mov	r3, r0
 800f838:	b2db      	uxtb	r3, r3
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3708      	adds	r7, #8
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	f3af 8000 	nop.w
 800f848:	fcce1c58 	.word	0xfcce1c58
 800f84c:	3f800e6a 	.word	0x3f800e6a
 800f850:	40040000 	.word	0x40040000

0800f854 <can1_ams_s12_voltages_1_pack>:

int can1_ams_s12_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s12_voltages_1_t *src_p,
    size_t size)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b05      	cmp	r3, #5
 800f864:	d802      	bhi.n	800f86c <can1_ams_s12_voltages_1_pack+0x18>
        return (-EINVAL);
 800f866:	f06f 0315 	mvn.w	r3, #21
 800f86a:	e069      	b.n	800f940 <can1_ams_s12_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800f86c:	2206      	movs	r2, #6
 800f86e:	2100      	movs	r1, #0
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f000 ffa1 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s12v01, 0u, 0xffu);
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	22ff      	movs	r2, #255	@ 0xff
 800f87c:	2100      	movs	r1, #0
 800f87e:	4618      	mov	r0, r3
 800f880:	f7f9 fc6a 	bl	8009158 <pack_left_shift_u8>
 800f884:	4603      	mov	r3, r0
 800f886:	461a      	mov	r2, r3
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	4313      	orrs	r3, r2
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s12v02, 0u, 0xffu);
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	785b      	ldrb	r3, [r3, #1]
 800f898:	22ff      	movs	r2, #255	@ 0xff
 800f89a:	2100      	movs	r1, #0
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7f9 fc5b 	bl	8009158 <pack_left_shift_u8>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	781a      	ldrb	r2, [r3, #0]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	430a      	orrs	r2, r1
 800f8b2:	b2d2      	uxtb	r2, r2
 800f8b4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s12v03, 0u, 0xffu);
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	789b      	ldrb	r3, [r3, #2]
 800f8ba:	22ff      	movs	r2, #255	@ 0xff
 800f8bc:	2100      	movs	r1, #0
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7f9 fc4a 	bl	8009158 <pack_left_shift_u8>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	3302      	adds	r3, #2
 800f8cc:	781a      	ldrb	r2, [r3, #0]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	3302      	adds	r3, #2
 800f8d2:	430a      	orrs	r2, r1
 800f8d4:	b2d2      	uxtb	r2, r2
 800f8d6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s12v04, 0u, 0xffu);
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	78db      	ldrb	r3, [r3, #3]
 800f8dc:	22ff      	movs	r2, #255	@ 0xff
 800f8de:	2100      	movs	r1, #0
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7f9 fc39 	bl	8009158 <pack_left_shift_u8>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	3303      	adds	r3, #3
 800f8ee:	781a      	ldrb	r2, [r3, #0]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	3303      	adds	r3, #3
 800f8f4:	430a      	orrs	r2, r1
 800f8f6:	b2d2      	uxtb	r2, r2
 800f8f8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s12v05, 0u, 0xffu);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	791b      	ldrb	r3, [r3, #4]
 800f8fe:	22ff      	movs	r2, #255	@ 0xff
 800f900:	2100      	movs	r1, #0
 800f902:	4618      	mov	r0, r3
 800f904:	f7f9 fc28 	bl	8009158 <pack_left_shift_u8>
 800f908:	4603      	mov	r3, r0
 800f90a:	4619      	mov	r1, r3
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	3304      	adds	r3, #4
 800f910:	781a      	ldrb	r2, [r3, #0]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3304      	adds	r3, #4
 800f916:	430a      	orrs	r2, r1
 800f918:	b2d2      	uxtb	r2, r2
 800f91a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s12v06, 0u, 0xffu);
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	795b      	ldrb	r3, [r3, #5]
 800f920:	22ff      	movs	r2, #255	@ 0xff
 800f922:	2100      	movs	r1, #0
 800f924:	4618      	mov	r0, r3
 800f926:	f7f9 fc17 	bl	8009158 <pack_left_shift_u8>
 800f92a:	4603      	mov	r3, r0
 800f92c:	4619      	mov	r1, r3
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	3305      	adds	r3, #5
 800f932:	781a      	ldrb	r2, [r3, #0]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	3305      	adds	r3, #5
 800f938:	430a      	orrs	r2, r1
 800f93a:	b2d2      	uxtb	r2, r2
 800f93c:	701a      	strb	r2, [r3, #0]

    return (6);
 800f93e:	2306      	movs	r3, #6
}
 800f940:	4618      	mov	r0, r3
 800f942:	3710      	adds	r7, #16
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <can1_ams_s12_voltages_1_s12v01_encode>:

    return 0;
}

uint8_t can1_ams_s12_voltages_1_s12v01_encode(double value)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f952:	f04f 0200 	mov.w	r2, #0
 800f956:	4b10      	ldr	r3, [pc, #64]	@ (800f998 <can1_ams_s12_voltages_1_s12v01_encode+0x50>)
 800f958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f95c:	f7f0 fc38 	bl	80001d0 <__aeabi_dsub>
 800f960:	4602      	mov	r2, r0
 800f962:	460b      	mov	r3, r1
 800f964:	4610      	mov	r0, r2
 800f966:	4619      	mov	r1, r3
 800f968:	a309      	add	r3, pc, #36	@ (adr r3, 800f990 <can1_ams_s12_voltages_1_s12v01_encode+0x48>)
 800f96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96e:	f7f0 ff11 	bl	8000794 <__aeabi_ddiv>
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	4610      	mov	r0, r2
 800f978:	4619      	mov	r1, r3
 800f97a:	f7f1 f8a3 	bl	8000ac4 <__aeabi_d2uiz>
 800f97e:	4603      	mov	r3, r0
 800f980:	b2db      	uxtb	r3, r3
}
 800f982:	4618      	mov	r0, r3
 800f984:	3708      	adds	r7, #8
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	f3af 8000 	nop.w
 800f990:	fcce1c58 	.word	0xfcce1c58
 800f994:	3f800e6a 	.word	0x3f800e6a
 800f998:	40040000 	.word	0x40040000
 800f99c:	00000000 	.word	0x00000000

0800f9a0 <can1_ams_s12_voltages_1_s12v02_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v02_encode(double value)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800f9aa:	f04f 0200 	mov.w	r2, #0
 800f9ae:	4b10      	ldr	r3, [pc, #64]	@ (800f9f0 <can1_ams_s12_voltages_1_s12v02_encode+0x50>)
 800f9b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9b4:	f7f0 fc0c 	bl	80001d0 <__aeabi_dsub>
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	460b      	mov	r3, r1
 800f9bc:	4610      	mov	r0, r2
 800f9be:	4619      	mov	r1, r3
 800f9c0:	a309      	add	r3, pc, #36	@ (adr r3, 800f9e8 <can1_ams_s12_voltages_1_s12v02_encode+0x48>)
 800f9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c6:	f7f0 fee5 	bl	8000794 <__aeabi_ddiv>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	f7f1 f877 	bl	8000ac4 <__aeabi_d2uiz>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	b2db      	uxtb	r3, r3
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	f3af 8000 	nop.w
 800f9e8:	fcce1c58 	.word	0xfcce1c58
 800f9ec:	3f800e6a 	.word	0x3f800e6a
 800f9f0:	40040000 	.word	0x40040000
 800f9f4:	00000000 	.word	0x00000000

0800f9f8 <can1_ams_s12_voltages_1_s12v03_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v03_encode(double value)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800fa02:	f04f 0200 	mov.w	r2, #0
 800fa06:	4b10      	ldr	r3, [pc, #64]	@ (800fa48 <can1_ams_s12_voltages_1_s12v03_encode+0x50>)
 800fa08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa0c:	f7f0 fbe0 	bl	80001d0 <__aeabi_dsub>
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	4610      	mov	r0, r2
 800fa16:	4619      	mov	r1, r3
 800fa18:	a309      	add	r3, pc, #36	@ (adr r3, 800fa40 <can1_ams_s12_voltages_1_s12v03_encode+0x48>)
 800fa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1e:	f7f0 feb9 	bl	8000794 <__aeabi_ddiv>
 800fa22:	4602      	mov	r2, r0
 800fa24:	460b      	mov	r3, r1
 800fa26:	4610      	mov	r0, r2
 800fa28:	4619      	mov	r1, r3
 800fa2a:	f7f1 f84b 	bl	8000ac4 <__aeabi_d2uiz>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	b2db      	uxtb	r3, r3
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	f3af 8000 	nop.w
 800fa40:	fcce1c58 	.word	0xfcce1c58
 800fa44:	3f800e6a 	.word	0x3f800e6a
 800fa48:	40040000 	.word	0x40040000
 800fa4c:	00000000 	.word	0x00000000

0800fa50 <can1_ams_s12_voltages_1_s12v04_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v04_encode(double value)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800fa5a:	f04f 0200 	mov.w	r2, #0
 800fa5e:	4b10      	ldr	r3, [pc, #64]	@ (800faa0 <can1_ams_s12_voltages_1_s12v04_encode+0x50>)
 800fa60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa64:	f7f0 fbb4 	bl	80001d0 <__aeabi_dsub>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	4619      	mov	r1, r3
 800fa70:	a309      	add	r3, pc, #36	@ (adr r3, 800fa98 <can1_ams_s12_voltages_1_s12v04_encode+0x48>)
 800fa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa76:	f7f0 fe8d 	bl	8000794 <__aeabi_ddiv>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	4610      	mov	r0, r2
 800fa80:	4619      	mov	r1, r3
 800fa82:	f7f1 f81f 	bl	8000ac4 <__aeabi_d2uiz>
 800fa86:	4603      	mov	r3, r0
 800fa88:	b2db      	uxtb	r3, r3
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3708      	adds	r7, #8
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	f3af 8000 	nop.w
 800fa98:	fcce1c58 	.word	0xfcce1c58
 800fa9c:	3f800e6a 	.word	0x3f800e6a
 800faa0:	40040000 	.word	0x40040000
 800faa4:	00000000 	.word	0x00000000

0800faa8 <can1_ams_s12_voltages_1_s12v05_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v05_encode(double value)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800fab2:	f04f 0200 	mov.w	r2, #0
 800fab6:	4b10      	ldr	r3, [pc, #64]	@ (800faf8 <can1_ams_s12_voltages_1_s12v05_encode+0x50>)
 800fab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fabc:	f7f0 fb88 	bl	80001d0 <__aeabi_dsub>
 800fac0:	4602      	mov	r2, r0
 800fac2:	460b      	mov	r3, r1
 800fac4:	4610      	mov	r0, r2
 800fac6:	4619      	mov	r1, r3
 800fac8:	a309      	add	r3, pc, #36	@ (adr r3, 800faf0 <can1_ams_s12_voltages_1_s12v05_encode+0x48>)
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	f7f0 fe61 	bl	8000794 <__aeabi_ddiv>
 800fad2:	4602      	mov	r2, r0
 800fad4:	460b      	mov	r3, r1
 800fad6:	4610      	mov	r0, r2
 800fad8:	4619      	mov	r1, r3
 800fada:	f7f0 fff3 	bl	8000ac4 <__aeabi_d2uiz>
 800fade:	4603      	mov	r3, r0
 800fae0:	b2db      	uxtb	r3, r3
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	f3af 8000 	nop.w
 800faf0:	fcce1c58 	.word	0xfcce1c58
 800faf4:	3f800e6a 	.word	0x3f800e6a
 800faf8:	40040000 	.word	0x40040000
 800fafc:	00000000 	.word	0x00000000

0800fb00 <can1_ams_s12_voltages_1_s12v06_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v06_encode(double value)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800fb0a:	f04f 0200 	mov.w	r2, #0
 800fb0e:	4b10      	ldr	r3, [pc, #64]	@ (800fb50 <can1_ams_s12_voltages_1_s12v06_encode+0x50>)
 800fb10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fb14:	f7f0 fb5c 	bl	80001d0 <__aeabi_dsub>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	4619      	mov	r1, r3
 800fb20:	a309      	add	r3, pc, #36	@ (adr r3, 800fb48 <can1_ams_s12_voltages_1_s12v06_encode+0x48>)
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	f7f0 fe35 	bl	8000794 <__aeabi_ddiv>
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	4610      	mov	r0, r2
 800fb30:	4619      	mov	r1, r3
 800fb32:	f7f0 ffc7 	bl	8000ac4 <__aeabi_d2uiz>
 800fb36:	4603      	mov	r3, r0
 800fb38:	b2db      	uxtb	r3, r3
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3708      	adds	r7, #8
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}
 800fb42:	bf00      	nop
 800fb44:	f3af 8000 	nop.w
 800fb48:	fcce1c58 	.word	0xfcce1c58
 800fb4c:	3f800e6a 	.word	0x3f800e6a
 800fb50:	40040000 	.word	0x40040000

0800fb54 <can1_ams_s12_voltages_2_pack>:

int can1_ams_s12_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s12_voltages_2_t *src_p,
    size_t size)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2b04      	cmp	r3, #4
 800fb64:	d802      	bhi.n	800fb6c <can1_ams_s12_voltages_2_pack+0x18>
        return (-EINVAL);
 800fb66:	f06f 0315 	mvn.w	r3, #21
 800fb6a:	e058      	b.n	800fc1e <can1_ams_s12_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800fb6c:	2205      	movs	r2, #5
 800fb6e:	2100      	movs	r1, #0
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f000 fe21 	bl	80107b8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s12v07, 0u, 0xffu);
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	22ff      	movs	r2, #255	@ 0xff
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7f9 faea 	bl	8009158 <pack_left_shift_u8>
 800fb84:	4603      	mov	r3, r0
 800fb86:	461a      	mov	r2, r3
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	b2da      	uxtb	r2, r3
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s12v08, 0u, 0xffu);
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	22ff      	movs	r2, #255	@ 0xff
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7f9 fadb 	bl	8009158 <pack_left_shift_u8>
 800fba2:	4603      	mov	r3, r0
 800fba4:	4619      	mov	r1, r3
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	781a      	ldrb	r2, [r3, #0]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	430a      	orrs	r2, r1
 800fbb2:	b2d2      	uxtb	r2, r2
 800fbb4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s12v09, 0u, 0xffu);
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	789b      	ldrb	r3, [r3, #2]
 800fbba:	22ff      	movs	r2, #255	@ 0xff
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7f9 faca 	bl	8009158 <pack_left_shift_u8>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	3302      	adds	r3, #2
 800fbcc:	781a      	ldrb	r2, [r3, #0]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	430a      	orrs	r2, r1
 800fbd4:	b2d2      	uxtb	r2, r2
 800fbd6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s12v10, 0u, 0xffu);
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	78db      	ldrb	r3, [r3, #3]
 800fbdc:	22ff      	movs	r2, #255	@ 0xff
 800fbde:	2100      	movs	r1, #0
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7f9 fab9 	bl	8009158 <pack_left_shift_u8>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	4619      	mov	r1, r3
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	3303      	adds	r3, #3
 800fbee:	781a      	ldrb	r2, [r3, #0]
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	3303      	adds	r3, #3
 800fbf4:	430a      	orrs	r2, r1
 800fbf6:	b2d2      	uxtb	r2, r2
 800fbf8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s12v11, 0u, 0xffu);
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	791b      	ldrb	r3, [r3, #4]
 800fbfe:	22ff      	movs	r2, #255	@ 0xff
 800fc00:	2100      	movs	r1, #0
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7f9 faa8 	bl	8009158 <pack_left_shift_u8>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	3304      	adds	r3, #4
 800fc10:	781a      	ldrb	r2, [r3, #0]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	3304      	adds	r3, #4
 800fc16:	430a      	orrs	r2, r1
 800fc18:	b2d2      	uxtb	r2, r2
 800fc1a:	701a      	strb	r2, [r3, #0]

    return (5);
 800fc1c:	2305      	movs	r3, #5
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
	...

0800fc28 <can1_ams_s12_voltages_2_s12v07_encode>:

    return 0;
}

uint8_t can1_ams_s12_voltages_2_s12v07_encode(double value)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800fc32:	f04f 0200 	mov.w	r2, #0
 800fc36:	4b10      	ldr	r3, [pc, #64]	@ (800fc78 <can1_ams_s12_voltages_2_s12v07_encode+0x50>)
 800fc38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fc3c:	f7f0 fac8 	bl	80001d0 <__aeabi_dsub>
 800fc40:	4602      	mov	r2, r0
 800fc42:	460b      	mov	r3, r1
 800fc44:	4610      	mov	r0, r2
 800fc46:	4619      	mov	r1, r3
 800fc48:	a309      	add	r3, pc, #36	@ (adr r3, 800fc70 <can1_ams_s12_voltages_2_s12v07_encode+0x48>)
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	f7f0 fda1 	bl	8000794 <__aeabi_ddiv>
 800fc52:	4602      	mov	r2, r0
 800fc54:	460b      	mov	r3, r1
 800fc56:	4610      	mov	r0, r2
 800fc58:	4619      	mov	r1, r3
 800fc5a:	f7f0 ff33 	bl	8000ac4 <__aeabi_d2uiz>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	b2db      	uxtb	r3, r3
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3708      	adds	r7, #8
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	f3af 8000 	nop.w
 800fc70:	fcce1c58 	.word	0xfcce1c58
 800fc74:	3f800e6a 	.word	0x3f800e6a
 800fc78:	40040000 	.word	0x40040000
 800fc7c:	00000000 	.word	0x00000000

0800fc80 <can1_ams_s12_voltages_2_s12v08_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v08_encode(double value)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800fc8a:	f04f 0200 	mov.w	r2, #0
 800fc8e:	4b10      	ldr	r3, [pc, #64]	@ (800fcd0 <can1_ams_s12_voltages_2_s12v08_encode+0x50>)
 800fc90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fc94:	f7f0 fa9c 	bl	80001d0 <__aeabi_dsub>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	4610      	mov	r0, r2
 800fc9e:	4619      	mov	r1, r3
 800fca0:	a309      	add	r3, pc, #36	@ (adr r3, 800fcc8 <can1_ams_s12_voltages_2_s12v08_encode+0x48>)
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	f7f0 fd75 	bl	8000794 <__aeabi_ddiv>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4610      	mov	r0, r2
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	f7f0 ff07 	bl	8000ac4 <__aeabi_d2uiz>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	b2db      	uxtb	r3, r3
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	f3af 8000 	nop.w
 800fcc8:	fcce1c58 	.word	0xfcce1c58
 800fccc:	3f800e6a 	.word	0x3f800e6a
 800fcd0:	40040000 	.word	0x40040000
 800fcd4:	00000000 	.word	0x00000000

0800fcd8 <can1_ams_s12_voltages_2_s12v09_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v09_encode(double value)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800fce2:	f04f 0200 	mov.w	r2, #0
 800fce6:	4b10      	ldr	r3, [pc, #64]	@ (800fd28 <can1_ams_s12_voltages_2_s12v09_encode+0x50>)
 800fce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fcec:	f7f0 fa70 	bl	80001d0 <__aeabi_dsub>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	4610      	mov	r0, r2
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	a309      	add	r3, pc, #36	@ (adr r3, 800fd20 <can1_ams_s12_voltages_2_s12v09_encode+0x48>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fd49 	bl	8000794 <__aeabi_ddiv>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4610      	mov	r0, r2
 800fd08:	4619      	mov	r1, r3
 800fd0a:	f7f0 fedb 	bl	8000ac4 <__aeabi_d2uiz>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	b2db      	uxtb	r3, r3
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3708      	adds	r7, #8
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	f3af 8000 	nop.w
 800fd20:	fcce1c58 	.word	0xfcce1c58
 800fd24:	3f800e6a 	.word	0x3f800e6a
 800fd28:	40040000 	.word	0x40040000
 800fd2c:	00000000 	.word	0x00000000

0800fd30 <can1_ams_s12_voltages_2_s12v10_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v10_encode(double value)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800fd3a:	f04f 0200 	mov.w	r2, #0
 800fd3e:	4b10      	ldr	r3, [pc, #64]	@ (800fd80 <can1_ams_s12_voltages_2_s12v10_encode+0x50>)
 800fd40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fd44:	f7f0 fa44 	bl	80001d0 <__aeabi_dsub>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4610      	mov	r0, r2
 800fd4e:	4619      	mov	r1, r3
 800fd50:	a309      	add	r3, pc, #36	@ (adr r3, 800fd78 <can1_ams_s12_voltages_2_s12v10_encode+0x48>)
 800fd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd56:	f7f0 fd1d 	bl	8000794 <__aeabi_ddiv>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	4610      	mov	r0, r2
 800fd60:	4619      	mov	r1, r3
 800fd62:	f7f0 feaf 	bl	8000ac4 <__aeabi_d2uiz>
 800fd66:	4603      	mov	r3, r0
 800fd68:	b2db      	uxtb	r3, r3
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	f3af 8000 	nop.w
 800fd78:	fcce1c58 	.word	0xfcce1c58
 800fd7c:	3f800e6a 	.word	0x3f800e6a
 800fd80:	40040000 	.word	0x40040000

0800fd84 <can1_ams_parameters_set_unpack>:

int can1_ams_parameters_set_unpack(
    struct can1_ams_parameters_set_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2b07      	cmp	r3, #7
 800fd94:	d802      	bhi.n	800fd9c <can1_ams_parameters_set_unpack+0x18>
        return (-EINVAL);
 800fd96:	f06f 0315 	mvn.w	r3, #21
 800fd9a:	e05f      	b.n	800fe5c <can1_ams_parameters_set_unpack+0xd8>
    }

    dst_p->cell_under_voltage_treshold = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	22ff      	movs	r2, #255	@ 0xff
 800fda2:	2100      	movs	r1, #0
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7f9 fa4b 	bl	8009240 <unpack_right_shift_u8>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	461a      	mov	r2, r3
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	701a      	strb	r2, [r3, #0]
    dst_p->cell_over_voltage_treshold = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	22ff      	movs	r2, #255	@ 0xff
 800fdba:	2100      	movs	r1, #0
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7f9 fa3f 	bl	8009240 <unpack_right_shift_u8>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	705a      	strb	r2, [r3, #1]
    dst_p->voltage_time_constraint = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	3302      	adds	r3, #2
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	22ff      	movs	r2, #255	@ 0xff
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7f9 fa33 	bl	8009240 <unpack_right_shift_u8>
 800fdda:	4603      	mov	r3, r0
 800fddc:	461a      	mov	r2, r3
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	709a      	strb	r2, [r3, #2]
    dst_p->temperature_time_constraint = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	3303      	adds	r3, #3
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	22ff      	movs	r2, #255	@ 0xff
 800fdea:	2100      	movs	r1, #0
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7f9 fa27 	bl	8009240 <unpack_right_shift_u8>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	70da      	strb	r2, [r3, #3]
    dst_p->current_time_constraint = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	22ff      	movs	r2, #255	@ 0xff
 800fe02:	2100      	movs	r1, #0
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7f9 fa1b 	bl	8009240 <unpack_right_shift_u8>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	711a      	strb	r2, [r3, #4]
    dst_p->voltage_drive_lower_bound = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	3305      	adds	r3, #5
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	22ff      	movs	r2, #255	@ 0xff
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7f9 fa0f 	bl	8009240 <unpack_right_shift_u8>
 800fe22:	4603      	mov	r3, r0
 800fe24:	461a      	mov	r2, r3
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	715a      	strb	r2, [r3, #5]
    dst_p->voltage_lower_bound = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	3306      	adds	r3, #6
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	22ff      	movs	r2, #255	@ 0xff
 800fe32:	2100      	movs	r1, #0
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7f9 fa03 	bl	8009240 <unpack_right_shift_u8>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	719a      	strb	r2, [r3, #6]
    dst_p->start_balancing = unpack_right_shift_u8(src_p[7], 0u, 0x01u);
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	3307      	adds	r3, #7
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	2100      	movs	r1, #0
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7f9 f9f7 	bl	8009240 <unpack_right_shift_u8>
 800fe52:	4603      	mov	r3, r0
 800fe54:	461a      	mov	r2, r3
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	71da      	strb	r2, [r3, #7]

    return (0);
 800fe5a:	2300      	movs	r3, #0
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3710      	adds	r7, #16
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <unpack_left_shift_u32>:

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	71fb      	strb	r3, [r7, #7]
 800fe6e:	460b      	mov	r3, r1
 800fe70:	71bb      	strb	r3, [r7, #6]
 800fe72:	4613      	mov	r3, r2
 800fe74:	717b      	strb	r3, [r7, #5]
    return (uint32_t)((uint32_t)(value & mask) << shift);
 800fe76:	79fa      	ldrb	r2, [r7, #7]
 800fe78:	797b      	ldrb	r3, [r7, #5]
 800fe7a:	4013      	ands	r3, r2
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	461a      	mov	r2, r3
 800fe80:	79bb      	ldrb	r3, [r7, #6]
 800fe82:	fa02 f303 	lsl.w	r3, r2, r3
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr

0800fe92 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800fe92:	b480      	push	{r7}
 800fe94:	b083      	sub	sp, #12
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	4603      	mov	r3, r0
 800fe9a:	71fb      	strb	r3, [r7, #7]
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	71bb      	strb	r3, [r7, #6]
 800fea0:	4613      	mov	r3, r2
 800fea2:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800fea4:	79fa      	ldrb	r2, [r7, #7]
 800fea6:	797b      	ldrb	r3, [r7, #5]
 800fea8:	4013      	ands	r3, r2
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	461a      	mov	r2, r3
 800feae:	79bb      	ldrb	r3, [r7, #6]
 800feb0:	fa42 f303 	asr.w	r3, r2, r3
 800feb4:	b2db      	uxtb	r3, r3
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	370c      	adds	r7, #12
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <unpack_right_shift_u32>:

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800fec2:	b480      	push	{r7}
 800fec4:	b083      	sub	sp, #12
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	4603      	mov	r3, r0
 800feca:	71fb      	strb	r3, [r7, #7]
 800fecc:	460b      	mov	r3, r1
 800fece:	71bb      	strb	r3, [r7, #6]
 800fed0:	4613      	mov	r3, r2
 800fed2:	717b      	strb	r3, [r7, #5]
    return (uint32_t)((uint32_t)(value & mask) >> shift);
 800fed4:	79fa      	ldrb	r2, [r7, #7]
 800fed6:	797b      	ldrb	r3, [r7, #5]
 800fed8:	4013      	ands	r3, r2
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	461a      	mov	r2, r3
 800fede:	79bb      	ldrb	r3, [r7, #6]
 800fee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <can2_ivt_msg_result_wh_unpack>:

int can2_ivt_msg_result_wh_unpack(
    struct can2_ivt_msg_result_wh_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_wh;

    if (size < 6u) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b05      	cmp	r3, #5
 800ff00:	d802      	bhi.n	800ff08 <can2_ivt_msg_result_wh_unpack+0x18>
        return (-EINVAL);
 800ff02:	f06f 0315 	mvn.w	r3, #21
 800ff06:	e077      	b.n	800fff8 <can2_ivt_msg_result_wh_unpack+0x108>
    }

    dst_p->ivt_id_result_wh = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	22ff      	movs	r2, #255	@ 0xff
 800ff0e:	2100      	movs	r1, #0
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7ff ffbe 	bl	800fe92 <unpack_right_shift_u8>
 800ff16:	4603      	mov	r3, r0
 800ff18:	461a      	mov	r2, r3
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_wh_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	3301      	adds	r3, #1
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	2280      	movs	r2, #128	@ 0x80
 800ff26:	2107      	movs	r1, #7
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7ff ffb2 	bl	800fe92 <unpack_right_shift_u8>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	461a      	mov	r2, r3
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_wh_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	2240      	movs	r2, #64	@ 0x40
 800ff3e:	2106      	movs	r1, #6
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7ff ffa6 	bl	800fe92 <unpack_right_shift_u8>
 800ff46:	4603      	mov	r3, r0
 800ff48:	461a      	mov	r2, r3
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_wh_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	3301      	adds	r3, #1
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	2220      	movs	r2, #32
 800ff56:	2105      	movs	r1, #5
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7ff ff9a 	bl	800fe92 <unpack_right_shift_u8>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	461a      	mov	r2, r3
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_wh_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	2210      	movs	r2, #16
 800ff6e:	2104      	movs	r1, #4
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff ff8e 	bl	800fe92 <unpack_right_shift_u8>
 800ff76:	4603      	mov	r3, r0
 800ff78:	461a      	mov	r2, r3
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_wh = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	3301      	adds	r3, #1
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	220f      	movs	r2, #15
 800ff86:	2100      	movs	r1, #0
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7ff ff82 	bl	800fe92 <unpack_right_shift_u8>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	461a      	mov	r2, r3
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	715a      	strb	r2, [r3, #5]
    ivt_result_wh = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	3302      	adds	r3, #2
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	22ff      	movs	r2, #255	@ 0xff
 800ff9e:	2118      	movs	r1, #24
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7ff ff5f 	bl	800fe64 <unpack_left_shift_u32>
 800ffa6:	6178      	str	r0, [r7, #20]
    ivt_result_wh |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	3303      	adds	r3, #3
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	22ff      	movs	r2, #255	@ 0xff
 800ffb0:	2110      	movs	r1, #16
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7ff ff56 	bl	800fe64 <unpack_left_shift_u32>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	617b      	str	r3, [r7, #20]
    ivt_result_wh |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	22ff      	movs	r2, #255	@ 0xff
 800ffc8:	2108      	movs	r1, #8
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7ff ff4a 	bl	800fe64 <unpack_left_shift_u32>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	617b      	str	r3, [r7, #20]
    ivt_result_wh |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	3305      	adds	r3, #5
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	22ff      	movs	r2, #255	@ 0xff
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7ff ff6d 	bl	800fec2 <unpack_right_shift_u32>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_wh = (int32_t)ivt_result_wh;
 800fff0:	697a      	ldr	r2, [r7, #20]
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	609a      	str	r2, [r3, #8]

    return (0);
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3718      	adds	r7, #24
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <can2_ivt_msg_result_as_unpack>:

int can2_ivt_msg_result_as_unpack(
    struct can2_ivt_msg_result_as_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_as;

    if (size < 6u) {
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b05      	cmp	r3, #5
 8010010:	d802      	bhi.n	8010018 <can2_ivt_msg_result_as_unpack+0x18>
        return (-EINVAL);
 8010012:	f06f 0315 	mvn.w	r3, #21
 8010016:	e077      	b.n	8010108 <can2_ivt_msg_result_as_unpack+0x108>
    }

    dst_p->ivt_id_result_as = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	22ff      	movs	r2, #255	@ 0xff
 801001e:	2100      	movs	r1, #0
 8010020:	4618      	mov	r0, r3
 8010022:	f7ff ff36 	bl	800fe92 <unpack_right_shift_u8>
 8010026:	4603      	mov	r3, r0
 8010028:	461a      	mov	r2, r3
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_as_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	3301      	adds	r3, #1
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	2280      	movs	r2, #128	@ 0x80
 8010036:	2107      	movs	r1, #7
 8010038:	4618      	mov	r0, r3
 801003a:	f7ff ff2a 	bl	800fe92 <unpack_right_shift_u8>
 801003e:	4603      	mov	r3, r0
 8010040:	461a      	mov	r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_as_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	3301      	adds	r3, #1
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	2240      	movs	r2, #64	@ 0x40
 801004e:	2106      	movs	r1, #6
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff ff1e 	bl	800fe92 <unpack_right_shift_u8>
 8010056:	4603      	mov	r3, r0
 8010058:	461a      	mov	r2, r3
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_as_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	3301      	adds	r3, #1
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2220      	movs	r2, #32
 8010066:	2105      	movs	r1, #5
 8010068:	4618      	mov	r0, r3
 801006a:	f7ff ff12 	bl	800fe92 <unpack_right_shift_u8>
 801006e:	4603      	mov	r3, r0
 8010070:	461a      	mov	r2, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_as_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	3301      	adds	r3, #1
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	2210      	movs	r2, #16
 801007e:	2104      	movs	r1, #4
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff ff06 	bl	800fe92 <unpack_right_shift_u8>
 8010086:	4603      	mov	r3, r0
 8010088:	461a      	mov	r2, r3
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_as = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	3301      	adds	r3, #1
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	220f      	movs	r2, #15
 8010096:	2100      	movs	r1, #0
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff fefa 	bl	800fe92 <unpack_right_shift_u8>
 801009e:	4603      	mov	r3, r0
 80100a0:	461a      	mov	r2, r3
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	715a      	strb	r2, [r3, #5]
    ivt_result_as = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	3302      	adds	r3, #2
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	22ff      	movs	r2, #255	@ 0xff
 80100ae:	2118      	movs	r1, #24
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7ff fed7 	bl	800fe64 <unpack_left_shift_u32>
 80100b6:	6178      	str	r0, [r7, #20]
    ivt_result_as |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	3303      	adds	r3, #3
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	22ff      	movs	r2, #255	@ 0xff
 80100c0:	2110      	movs	r1, #16
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7ff fece 	bl	800fe64 <unpack_left_shift_u32>
 80100c8:	4602      	mov	r2, r0
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	4313      	orrs	r3, r2
 80100ce:	617b      	str	r3, [r7, #20]
    ivt_result_as |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	3304      	adds	r3, #4
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	22ff      	movs	r2, #255	@ 0xff
 80100d8:	2108      	movs	r1, #8
 80100da:	4618      	mov	r0, r3
 80100dc:	f7ff fec2 	bl	800fe64 <unpack_left_shift_u32>
 80100e0:	4602      	mov	r2, r0
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	617b      	str	r3, [r7, #20]
    ivt_result_as |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	3305      	adds	r3, #5
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	22ff      	movs	r2, #255	@ 0xff
 80100f0:	2100      	movs	r1, #0
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7ff fee5 	bl	800fec2 <unpack_right_shift_u32>
 80100f8:	4602      	mov	r2, r0
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	4313      	orrs	r3, r2
 80100fe:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_as = (int32_t)ivt_result_as;
 8010100:	697a      	ldr	r2, [r7, #20]
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	609a      	str	r2, [r3, #8]

    return (0);
 8010106:	2300      	movs	r3, #0
}
 8010108:	4618      	mov	r0, r3
 801010a:	3718      	adds	r7, #24
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <can2_ivt_msg_result_w_unpack>:

int can2_ivt_msg_result_w_unpack(
    struct can2_ivt_msg_result_w_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b086      	sub	sp, #24
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_w;

    if (size < 6u) {
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b05      	cmp	r3, #5
 8010120:	d802      	bhi.n	8010128 <can2_ivt_msg_result_w_unpack+0x18>
        return (-EINVAL);
 8010122:	f06f 0315 	mvn.w	r3, #21
 8010126:	e077      	b.n	8010218 <can2_ivt_msg_result_w_unpack+0x108>
    }

    dst_p->ivt_id_result_w = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	22ff      	movs	r2, #255	@ 0xff
 801012e:	2100      	movs	r1, #0
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff feae 	bl	800fe92 <unpack_right_shift_u8>
 8010136:	4603      	mov	r3, r0
 8010138:	461a      	mov	r2, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_w_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	3301      	adds	r3, #1
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2280      	movs	r2, #128	@ 0x80
 8010146:	2107      	movs	r1, #7
 8010148:	4618      	mov	r0, r3
 801014a:	f7ff fea2 	bl	800fe92 <unpack_right_shift_u8>
 801014e:	4603      	mov	r3, r0
 8010150:	461a      	mov	r2, r3
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_w_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	3301      	adds	r3, #1
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	2240      	movs	r2, #64	@ 0x40
 801015e:	2106      	movs	r1, #6
 8010160:	4618      	mov	r0, r3
 8010162:	f7ff fe96 	bl	800fe92 <unpack_right_shift_u8>
 8010166:	4603      	mov	r3, r0
 8010168:	461a      	mov	r2, r3
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_w_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	3301      	adds	r3, #1
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	2220      	movs	r2, #32
 8010176:	2105      	movs	r1, #5
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fe8a 	bl	800fe92 <unpack_right_shift_u8>
 801017e:	4603      	mov	r3, r0
 8010180:	461a      	mov	r2, r3
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_w_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	3301      	adds	r3, #1
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	2210      	movs	r2, #16
 801018e:	2104      	movs	r1, #4
 8010190:	4618      	mov	r0, r3
 8010192:	f7ff fe7e 	bl	800fe92 <unpack_right_shift_u8>
 8010196:	4603      	mov	r3, r0
 8010198:	461a      	mov	r2, r3
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_w = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	3301      	adds	r3, #1
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	220f      	movs	r2, #15
 80101a6:	2100      	movs	r1, #0
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7ff fe72 	bl	800fe92 <unpack_right_shift_u8>
 80101ae:	4603      	mov	r3, r0
 80101b0:	461a      	mov	r2, r3
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	715a      	strb	r2, [r3, #5]
    ivt_result_w = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	3302      	adds	r3, #2
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	22ff      	movs	r2, #255	@ 0xff
 80101be:	2118      	movs	r1, #24
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7ff fe4f 	bl	800fe64 <unpack_left_shift_u32>
 80101c6:	6178      	str	r0, [r7, #20]
    ivt_result_w |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	3303      	adds	r3, #3
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	22ff      	movs	r2, #255	@ 0xff
 80101d0:	2110      	movs	r1, #16
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7ff fe46 	bl	800fe64 <unpack_left_shift_u32>
 80101d8:	4602      	mov	r2, r0
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	4313      	orrs	r3, r2
 80101de:	617b      	str	r3, [r7, #20]
    ivt_result_w |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	3304      	adds	r3, #4
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	22ff      	movs	r2, #255	@ 0xff
 80101e8:	2108      	movs	r1, #8
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7ff fe3a 	bl	800fe64 <unpack_left_shift_u32>
 80101f0:	4602      	mov	r2, r0
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	4313      	orrs	r3, r2
 80101f6:	617b      	str	r3, [r7, #20]
    ivt_result_w |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	3305      	adds	r3, #5
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	22ff      	movs	r2, #255	@ 0xff
 8010200:	2100      	movs	r1, #0
 8010202:	4618      	mov	r0, r3
 8010204:	f7ff fe5d 	bl	800fec2 <unpack_right_shift_u32>
 8010208:	4602      	mov	r2, r0
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	4313      	orrs	r3, r2
 801020e:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_w = (int32_t)ivt_result_w;
 8010210:	697a      	ldr	r2, [r7, #20]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	609a      	str	r2, [r3, #8]

    return (0);
 8010216:	2300      	movs	r3, #0
}
 8010218:	4618      	mov	r0, r3
 801021a:	3718      	adds	r7, #24
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <can2_ivt_msg_result_t_unpack>:

int can2_ivt_msg_result_t_unpack(
    struct can2_ivt_msg_result_t_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_t;

    if (size < 6u) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2b05      	cmp	r3, #5
 8010230:	d802      	bhi.n	8010238 <can2_ivt_msg_result_t_unpack+0x18>
        return (-EINVAL);
 8010232:	f06f 0315 	mvn.w	r3, #21
 8010236:	e077      	b.n	8010328 <can2_ivt_msg_result_t_unpack+0x108>
    }

    dst_p->ivt_id_result_t = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	22ff      	movs	r2, #255	@ 0xff
 801023e:	2100      	movs	r1, #0
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff fe26 	bl	800fe92 <unpack_right_shift_u8>
 8010246:	4603      	mov	r3, r0
 8010248:	461a      	mov	r2, r3
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_t_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	3301      	adds	r3, #1
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	2280      	movs	r2, #128	@ 0x80
 8010256:	2107      	movs	r1, #7
 8010258:	4618      	mov	r0, r3
 801025a:	f7ff fe1a 	bl	800fe92 <unpack_right_shift_u8>
 801025e:	4603      	mov	r3, r0
 8010260:	461a      	mov	r2, r3
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_t_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	3301      	adds	r3, #1
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	2240      	movs	r2, #64	@ 0x40
 801026e:	2106      	movs	r1, #6
 8010270:	4618      	mov	r0, r3
 8010272:	f7ff fe0e 	bl	800fe92 <unpack_right_shift_u8>
 8010276:	4603      	mov	r3, r0
 8010278:	461a      	mov	r2, r3
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_t_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	3301      	adds	r3, #1
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	2220      	movs	r2, #32
 8010286:	2105      	movs	r1, #5
 8010288:	4618      	mov	r0, r3
 801028a:	f7ff fe02 	bl	800fe92 <unpack_right_shift_u8>
 801028e:	4603      	mov	r3, r0
 8010290:	461a      	mov	r2, r3
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_t_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	3301      	adds	r3, #1
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	2210      	movs	r2, #16
 801029e:	2104      	movs	r1, #4
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff fdf6 	bl	800fe92 <unpack_right_shift_u8>
 80102a6:	4603      	mov	r3, r0
 80102a8:	461a      	mov	r2, r3
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_t = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	3301      	adds	r3, #1
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	220f      	movs	r2, #15
 80102b6:	2100      	movs	r1, #0
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff fdea 	bl	800fe92 <unpack_right_shift_u8>
 80102be:	4603      	mov	r3, r0
 80102c0:	461a      	mov	r2, r3
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	715a      	strb	r2, [r3, #5]
    ivt_result_t = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	3302      	adds	r3, #2
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	22ff      	movs	r2, #255	@ 0xff
 80102ce:	2118      	movs	r1, #24
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7ff fdc7 	bl	800fe64 <unpack_left_shift_u32>
 80102d6:	6178      	str	r0, [r7, #20]
    ivt_result_t |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	3303      	adds	r3, #3
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	22ff      	movs	r2, #255	@ 0xff
 80102e0:	2110      	movs	r1, #16
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff fdbe 	bl	800fe64 <unpack_left_shift_u32>
 80102e8:	4602      	mov	r2, r0
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	4313      	orrs	r3, r2
 80102ee:	617b      	str	r3, [r7, #20]
    ivt_result_t |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	3304      	adds	r3, #4
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	22ff      	movs	r2, #255	@ 0xff
 80102f8:	2108      	movs	r1, #8
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7ff fdb2 	bl	800fe64 <unpack_left_shift_u32>
 8010300:	4602      	mov	r2, r0
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	4313      	orrs	r3, r2
 8010306:	617b      	str	r3, [r7, #20]
    ivt_result_t |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	3305      	adds	r3, #5
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	22ff      	movs	r2, #255	@ 0xff
 8010310:	2100      	movs	r1, #0
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff fdd5 	bl	800fec2 <unpack_right_shift_u32>
 8010318:	4602      	mov	r2, r0
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	4313      	orrs	r3, r2
 801031e:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_t = (int32_t)ivt_result_t;
 8010320:	697a      	ldr	r2, [r7, #20]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	609a      	str	r2, [r3, #8]

    return (0);
 8010326:	2300      	movs	r3, #0
}
 8010328:	4618      	mov	r0, r3
 801032a:	3718      	adds	r7, #24
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b086      	sub	sp, #24
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u3;

    if (size < 6u) {
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2b05      	cmp	r3, #5
 8010340:	d802      	bhi.n	8010348 <can2_ivt_msg_result_u3_unpack+0x18>
        return (-EINVAL);
 8010342:	f06f 0315 	mvn.w	r3, #21
 8010346:	e077      	b.n	8010438 <can2_ivt_msg_result_u3_unpack+0x108>
    }

    dst_p->ivt_id_result_u3 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	22ff      	movs	r2, #255	@ 0xff
 801034e:	2100      	movs	r1, #0
 8010350:	4618      	mov	r0, r3
 8010352:	f7ff fd9e 	bl	800fe92 <unpack_right_shift_u8>
 8010356:	4603      	mov	r3, r0
 8010358:	461a      	mov	r2, r3
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u3_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	3301      	adds	r3, #1
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	2280      	movs	r2, #128	@ 0x80
 8010366:	2107      	movs	r1, #7
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff fd92 	bl	800fe92 <unpack_right_shift_u8>
 801036e:	4603      	mov	r3, r0
 8010370:	461a      	mov	r2, r3
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u3_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	3301      	adds	r3, #1
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	2240      	movs	r2, #64	@ 0x40
 801037e:	2106      	movs	r1, #6
 8010380:	4618      	mov	r0, r3
 8010382:	f7ff fd86 	bl	800fe92 <unpack_right_shift_u8>
 8010386:	4603      	mov	r3, r0
 8010388:	461a      	mov	r2, r3
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u3_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	3301      	adds	r3, #1
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	2220      	movs	r2, #32
 8010396:	2105      	movs	r1, #5
 8010398:	4618      	mov	r0, r3
 801039a:	f7ff fd7a 	bl	800fe92 <unpack_right_shift_u8>
 801039e:	4603      	mov	r3, r0
 80103a0:	461a      	mov	r2, r3
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u3_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	3301      	adds	r3, #1
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	2210      	movs	r2, #16
 80103ae:	2104      	movs	r1, #4
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7ff fd6e 	bl	800fe92 <unpack_right_shift_u8>
 80103b6:	4603      	mov	r3, r0
 80103b8:	461a      	mov	r2, r3
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u3 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	3301      	adds	r3, #1
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	220f      	movs	r2, #15
 80103c6:	2100      	movs	r1, #0
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7ff fd62 	bl	800fe92 <unpack_right_shift_u8>
 80103ce:	4603      	mov	r3, r0
 80103d0:	461a      	mov	r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	715a      	strb	r2, [r3, #5]
    ivt_result_u3 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	3302      	adds	r3, #2
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	22ff      	movs	r2, #255	@ 0xff
 80103de:	2118      	movs	r1, #24
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fd3f 	bl	800fe64 <unpack_left_shift_u32>
 80103e6:	6178      	str	r0, [r7, #20]
    ivt_result_u3 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	3303      	adds	r3, #3
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	22ff      	movs	r2, #255	@ 0xff
 80103f0:	2110      	movs	r1, #16
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7ff fd36 	bl	800fe64 <unpack_left_shift_u32>
 80103f8:	4602      	mov	r2, r0
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	4313      	orrs	r3, r2
 80103fe:	617b      	str	r3, [r7, #20]
    ivt_result_u3 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	3304      	adds	r3, #4
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	22ff      	movs	r2, #255	@ 0xff
 8010408:	2108      	movs	r1, #8
 801040a:	4618      	mov	r0, r3
 801040c:	f7ff fd2a 	bl	800fe64 <unpack_left_shift_u32>
 8010410:	4602      	mov	r2, r0
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	4313      	orrs	r3, r2
 8010416:	617b      	str	r3, [r7, #20]
    ivt_result_u3 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	3305      	adds	r3, #5
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	22ff      	movs	r2, #255	@ 0xff
 8010420:	2100      	movs	r1, #0
 8010422:	4618      	mov	r0, r3
 8010424:	f7ff fd4d 	bl	800fec2 <unpack_right_shift_u32>
 8010428:	4602      	mov	r2, r0
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	4313      	orrs	r3, r2
 801042e:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u3 = (int32_t)ivt_result_u3;
 8010430:	697a      	ldr	r2, [r7, #20]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	609a      	str	r2, [r3, #8]

    return (0);
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	3718      	adds	r7, #24
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <can2_ivt_msg_result_u2_unpack>:

int can2_ivt_msg_result_u2_unpack(
    struct can2_ivt_msg_result_u2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af00      	add	r7, sp, #0
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u2;

    if (size < 6u) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b05      	cmp	r3, #5
 8010450:	d802      	bhi.n	8010458 <can2_ivt_msg_result_u2_unpack+0x18>
        return (-EINVAL);
 8010452:	f06f 0315 	mvn.w	r3, #21
 8010456:	e077      	b.n	8010548 <can2_ivt_msg_result_u2_unpack+0x108>
    }

    dst_p->ivt_id_result_u2 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	22ff      	movs	r2, #255	@ 0xff
 801045e:	2100      	movs	r1, #0
 8010460:	4618      	mov	r0, r3
 8010462:	f7ff fd16 	bl	800fe92 <unpack_right_shift_u8>
 8010466:	4603      	mov	r3, r0
 8010468:	461a      	mov	r2, r3
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u2_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	3301      	adds	r3, #1
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	2280      	movs	r2, #128	@ 0x80
 8010476:	2107      	movs	r1, #7
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff fd0a 	bl	800fe92 <unpack_right_shift_u8>
 801047e:	4603      	mov	r3, r0
 8010480:	461a      	mov	r2, r3
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u2_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	3301      	adds	r3, #1
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	2240      	movs	r2, #64	@ 0x40
 801048e:	2106      	movs	r1, #6
 8010490:	4618      	mov	r0, r3
 8010492:	f7ff fcfe 	bl	800fe92 <unpack_right_shift_u8>
 8010496:	4603      	mov	r3, r0
 8010498:	461a      	mov	r2, r3
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u2_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	3301      	adds	r3, #1
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	2220      	movs	r2, #32
 80104a6:	2105      	movs	r1, #5
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7ff fcf2 	bl	800fe92 <unpack_right_shift_u8>
 80104ae:	4603      	mov	r3, r0
 80104b0:	461a      	mov	r2, r3
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u2_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	3301      	adds	r3, #1
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	2210      	movs	r2, #16
 80104be:	2104      	movs	r1, #4
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7ff fce6 	bl	800fe92 <unpack_right_shift_u8>
 80104c6:	4603      	mov	r3, r0
 80104c8:	461a      	mov	r2, r3
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u2 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	3301      	adds	r3, #1
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	220f      	movs	r2, #15
 80104d6:	2100      	movs	r1, #0
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff fcda 	bl	800fe92 <unpack_right_shift_u8>
 80104de:	4603      	mov	r3, r0
 80104e0:	461a      	mov	r2, r3
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	715a      	strb	r2, [r3, #5]
    ivt_result_u2 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	3302      	adds	r3, #2
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	22ff      	movs	r2, #255	@ 0xff
 80104ee:	2118      	movs	r1, #24
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7ff fcb7 	bl	800fe64 <unpack_left_shift_u32>
 80104f6:	6178      	str	r0, [r7, #20]
    ivt_result_u2 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	3303      	adds	r3, #3
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	22ff      	movs	r2, #255	@ 0xff
 8010500:	2110      	movs	r1, #16
 8010502:	4618      	mov	r0, r3
 8010504:	f7ff fcae 	bl	800fe64 <unpack_left_shift_u32>
 8010508:	4602      	mov	r2, r0
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	4313      	orrs	r3, r2
 801050e:	617b      	str	r3, [r7, #20]
    ivt_result_u2 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	3304      	adds	r3, #4
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	22ff      	movs	r2, #255	@ 0xff
 8010518:	2108      	movs	r1, #8
 801051a:	4618      	mov	r0, r3
 801051c:	f7ff fca2 	bl	800fe64 <unpack_left_shift_u32>
 8010520:	4602      	mov	r2, r0
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	4313      	orrs	r3, r2
 8010526:	617b      	str	r3, [r7, #20]
    ivt_result_u2 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	3305      	adds	r3, #5
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	22ff      	movs	r2, #255	@ 0xff
 8010530:	2100      	movs	r1, #0
 8010532:	4618      	mov	r0, r3
 8010534:	f7ff fcc5 	bl	800fec2 <unpack_right_shift_u32>
 8010538:	4602      	mov	r2, r0
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	4313      	orrs	r3, r2
 801053e:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u2 = (int32_t)ivt_result_u2;
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	609a      	str	r2, [r3, #8]

    return (0);
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <can2_ivt_msg_result_u2_ivt_result_u2_decode>:
{
    return (int32_t)(value);
}

double can2_ivt_msg_result_u2_ivt_result_u2_decode(int32_t value)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
    return ((double)value);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7ef ff87 	bl	800046c <__aeabi_i2d>
 801055e:	4602      	mov	r2, r0
 8010560:	460b      	mov	r3, r1
 8010562:	ec43 2b17 	vmov	d7, r2, r3
}
 8010566:	eeb0 0a47 	vmov.f32	s0, s14
 801056a:	eef0 0a67 	vmov.f32	s1, s15
 801056e:	3708      	adds	r7, #8
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b086      	sub	sp, #24
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u1;

    if (size < 6u) {
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b05      	cmp	r3, #5
 8010584:	d802      	bhi.n	801058c <can2_ivt_msg_result_u1_unpack+0x18>
        return (-EINVAL);
 8010586:	f06f 0315 	mvn.w	r3, #21
 801058a:	e077      	b.n	801067c <can2_ivt_msg_result_u1_unpack+0x108>
    }

    dst_p->ivt_id_result_u1 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	22ff      	movs	r2, #255	@ 0xff
 8010592:	2100      	movs	r1, #0
 8010594:	4618      	mov	r0, r3
 8010596:	f7ff fc7c 	bl	800fe92 <unpack_right_shift_u8>
 801059a:	4603      	mov	r3, r0
 801059c:	461a      	mov	r2, r3
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u1_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	3301      	adds	r3, #1
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	2280      	movs	r2, #128	@ 0x80
 80105aa:	2107      	movs	r1, #7
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7ff fc70 	bl	800fe92 <unpack_right_shift_u8>
 80105b2:	4603      	mov	r3, r0
 80105b4:	461a      	mov	r2, r3
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u1_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	3301      	adds	r3, #1
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2240      	movs	r2, #64	@ 0x40
 80105c2:	2106      	movs	r1, #6
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7ff fc64 	bl	800fe92 <unpack_right_shift_u8>
 80105ca:	4603      	mov	r3, r0
 80105cc:	461a      	mov	r2, r3
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u1_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	3301      	adds	r3, #1
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	2220      	movs	r2, #32
 80105da:	2105      	movs	r1, #5
 80105dc:	4618      	mov	r0, r3
 80105de:	f7ff fc58 	bl	800fe92 <unpack_right_shift_u8>
 80105e2:	4603      	mov	r3, r0
 80105e4:	461a      	mov	r2, r3
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u1_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	3301      	adds	r3, #1
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2210      	movs	r2, #16
 80105f2:	2104      	movs	r1, #4
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7ff fc4c 	bl	800fe92 <unpack_right_shift_u8>
 80105fa:	4603      	mov	r3, r0
 80105fc:	461a      	mov	r2, r3
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u1 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	3301      	adds	r3, #1
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	220f      	movs	r2, #15
 801060a:	2100      	movs	r1, #0
 801060c:	4618      	mov	r0, r3
 801060e:	f7ff fc40 	bl	800fe92 <unpack_right_shift_u8>
 8010612:	4603      	mov	r3, r0
 8010614:	461a      	mov	r2, r3
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	715a      	strb	r2, [r3, #5]
    ivt_result_u1 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	3302      	adds	r3, #2
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	22ff      	movs	r2, #255	@ 0xff
 8010622:	2118      	movs	r1, #24
 8010624:	4618      	mov	r0, r3
 8010626:	f7ff fc1d 	bl	800fe64 <unpack_left_shift_u32>
 801062a:	6178      	str	r0, [r7, #20]
    ivt_result_u1 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	3303      	adds	r3, #3
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	22ff      	movs	r2, #255	@ 0xff
 8010634:	2110      	movs	r1, #16
 8010636:	4618      	mov	r0, r3
 8010638:	f7ff fc14 	bl	800fe64 <unpack_left_shift_u32>
 801063c:	4602      	mov	r2, r0
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	4313      	orrs	r3, r2
 8010642:	617b      	str	r3, [r7, #20]
    ivt_result_u1 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	3304      	adds	r3, #4
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	22ff      	movs	r2, #255	@ 0xff
 801064c:	2108      	movs	r1, #8
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff fc08 	bl	800fe64 <unpack_left_shift_u32>
 8010654:	4602      	mov	r2, r0
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	4313      	orrs	r3, r2
 801065a:	617b      	str	r3, [r7, #20]
    ivt_result_u1 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	3305      	adds	r3, #5
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	22ff      	movs	r2, #255	@ 0xff
 8010664:	2100      	movs	r1, #0
 8010666:	4618      	mov	r0, r3
 8010668:	f7ff fc2b 	bl	800fec2 <unpack_right_shift_u32>
 801066c:	4602      	mov	r2, r0
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	4313      	orrs	r3, r2
 8010672:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u1 = (int32_t)ivt_result_u1;
 8010674:	697a      	ldr	r2, [r7, #20]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	609a      	str	r2, [r3, #8]

    return (0);
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	3718      	adds	r7, #24
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <can2_ivt_msg_result_u1_ivt_result_u1_decode>:
{
    return (int32_t)(value);
}

double can2_ivt_msg_result_u1_ivt_result_u1_decode(int32_t value)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
    return ((double)value);
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7ef feed 	bl	800046c <__aeabi_i2d>
 8010692:	4602      	mov	r2, r0
 8010694:	460b      	mov	r3, r1
 8010696:	ec43 2b17 	vmov	d7, r2, r3
}
 801069a:	eeb0 0a47 	vmov.f32	s0, s14
 801069e:	eef0 0a67 	vmov.f32	s1, s15
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b086      	sub	sp, #24
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_i;

    if (size < 6u) {
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2b05      	cmp	r3, #5
 80106b8:	d802      	bhi.n	80106c0 <can2_ivt_msg_result_i_unpack+0x18>
        return (-EINVAL);
 80106ba:	f06f 0315 	mvn.w	r3, #21
 80106be:	e077      	b.n	80107b0 <can2_ivt_msg_result_i_unpack+0x108>
    }

    dst_p->ivt_id_result_i = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	22ff      	movs	r2, #255	@ 0xff
 80106c6:	2100      	movs	r1, #0
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7ff fbe2 	bl	800fe92 <unpack_right_shift_u8>
 80106ce:	4603      	mov	r3, r0
 80106d0:	461a      	mov	r2, r3
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_i_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	3301      	adds	r3, #1
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	2280      	movs	r2, #128	@ 0x80
 80106de:	2107      	movs	r1, #7
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7ff fbd6 	bl	800fe92 <unpack_right_shift_u8>
 80106e6:	4603      	mov	r3, r0
 80106e8:	461a      	mov	r2, r3
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_i_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	3301      	adds	r3, #1
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	2240      	movs	r2, #64	@ 0x40
 80106f6:	2106      	movs	r1, #6
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7ff fbca 	bl	800fe92 <unpack_right_shift_u8>
 80106fe:	4603      	mov	r3, r0
 8010700:	461a      	mov	r2, r3
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_i_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	3301      	adds	r3, #1
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	2220      	movs	r2, #32
 801070e:	2105      	movs	r1, #5
 8010710:	4618      	mov	r0, r3
 8010712:	f7ff fbbe 	bl	800fe92 <unpack_right_shift_u8>
 8010716:	4603      	mov	r3, r0
 8010718:	461a      	mov	r2, r3
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_i_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	3301      	adds	r3, #1
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	2210      	movs	r2, #16
 8010726:	2104      	movs	r1, #4
 8010728:	4618      	mov	r0, r3
 801072a:	f7ff fbb2 	bl	800fe92 <unpack_right_shift_u8>
 801072e:	4603      	mov	r3, r0
 8010730:	461a      	mov	r2, r3
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_i = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	3301      	adds	r3, #1
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	220f      	movs	r2, #15
 801073e:	2100      	movs	r1, #0
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff fba6 	bl	800fe92 <unpack_right_shift_u8>
 8010746:	4603      	mov	r3, r0
 8010748:	461a      	mov	r2, r3
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	715a      	strb	r2, [r3, #5]
    ivt_result_i = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	3302      	adds	r3, #2
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	22ff      	movs	r2, #255	@ 0xff
 8010756:	2118      	movs	r1, #24
 8010758:	4618      	mov	r0, r3
 801075a:	f7ff fb83 	bl	800fe64 <unpack_left_shift_u32>
 801075e:	6178      	str	r0, [r7, #20]
    ivt_result_i |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	3303      	adds	r3, #3
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	22ff      	movs	r2, #255	@ 0xff
 8010768:	2110      	movs	r1, #16
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff fb7a 	bl	800fe64 <unpack_left_shift_u32>
 8010770:	4602      	mov	r2, r0
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	4313      	orrs	r3, r2
 8010776:	617b      	str	r3, [r7, #20]
    ivt_result_i |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	3304      	adds	r3, #4
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	22ff      	movs	r2, #255	@ 0xff
 8010780:	2108      	movs	r1, #8
 8010782:	4618      	mov	r0, r3
 8010784:	f7ff fb6e 	bl	800fe64 <unpack_left_shift_u32>
 8010788:	4602      	mov	r2, r0
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	4313      	orrs	r3, r2
 801078e:	617b      	str	r3, [r7, #20]
    ivt_result_i |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	3305      	adds	r3, #5
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	22ff      	movs	r2, #255	@ 0xff
 8010798:	2100      	movs	r1, #0
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff fb91 	bl	800fec2 <unpack_right_shift_u32>
 80107a0:	4602      	mov	r2, r0
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	4313      	orrs	r3, r2
 80107a6:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_i = (int32_t)ivt_result_i;
 80107a8:	697a      	ldr	r2, [r7, #20]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	609a      	str	r2, [r3, #8]

    return (0);
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3718      	adds	r7, #24
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <memset>:
 80107b8:	4402      	add	r2, r0
 80107ba:	4603      	mov	r3, r0
 80107bc:	4293      	cmp	r3, r2
 80107be:	d100      	bne.n	80107c2 <memset+0xa>
 80107c0:	4770      	bx	lr
 80107c2:	f803 1b01 	strb.w	r1, [r3], #1
 80107c6:	e7f9      	b.n	80107bc <memset+0x4>

080107c8 <__libc_init_array>:
 80107c8:	b570      	push	{r4, r5, r6, lr}
 80107ca:	4d0d      	ldr	r5, [pc, #52]	@ (8010800 <__libc_init_array+0x38>)
 80107cc:	4c0d      	ldr	r4, [pc, #52]	@ (8010804 <__libc_init_array+0x3c>)
 80107ce:	1b64      	subs	r4, r4, r5
 80107d0:	10a4      	asrs	r4, r4, #2
 80107d2:	2600      	movs	r6, #0
 80107d4:	42a6      	cmp	r6, r4
 80107d6:	d109      	bne.n	80107ec <__libc_init_array+0x24>
 80107d8:	4d0b      	ldr	r5, [pc, #44]	@ (8010808 <__libc_init_array+0x40>)
 80107da:	4c0c      	ldr	r4, [pc, #48]	@ (801080c <__libc_init_array+0x44>)
 80107dc:	f000 f818 	bl	8010810 <_init>
 80107e0:	1b64      	subs	r4, r4, r5
 80107e2:	10a4      	asrs	r4, r4, #2
 80107e4:	2600      	movs	r6, #0
 80107e6:	42a6      	cmp	r6, r4
 80107e8:	d105      	bne.n	80107f6 <__libc_init_array+0x2e>
 80107ea:	bd70      	pop	{r4, r5, r6, pc}
 80107ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80107f0:	4798      	blx	r3
 80107f2:	3601      	adds	r6, #1
 80107f4:	e7ee      	b.n	80107d4 <__libc_init_array+0xc>
 80107f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80107fa:	4798      	blx	r3
 80107fc:	3601      	adds	r6, #1
 80107fe:	e7f2      	b.n	80107e6 <__libc_init_array+0x1e>
 8010800:	08010b0c 	.word	0x08010b0c
 8010804:	08010b0c 	.word	0x08010b0c
 8010808:	08010b0c 	.word	0x08010b0c
 801080c:	08010b10 	.word	0x08010b10

08010810 <_init>:
 8010810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010812:	bf00      	nop
 8010814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010816:	bc08      	pop	{r3}
 8010818:	469e      	mov	lr, r3
 801081a:	4770      	bx	lr

0801081c <_fini>:
 801081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081e:	bf00      	nop
 8010820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010822:	bc08      	pop	{r3}
 8010824:	469e      	mov	lr, r3
 8010826:	4770      	bx	lr
