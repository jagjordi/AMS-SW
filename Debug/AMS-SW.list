
AMS-SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010570  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080106f8  080106f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109d4  080109d4  00012024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080109d4  080109d4  000119d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109dc  080109dc  00012024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109dc  080109dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080109e0  080109e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080109e4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012024  2**0
                  CONTENTS
 10 .bss          0000082c  20000028  20000028  00012028  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000854  20000854  00012028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012024  2**0
                  CONTENTS, READONLY
 13 .debug_info   000404d0  00000000  00000000  00012054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c5  00000000  00000000  00052524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00008230  00000000  00000000  000546f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000633b  00000000  00000000  0005c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026719  00000000  00000000  00062c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039df5  00000000  00000000  00089374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001207de  00000000  00000000  000c3169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e3947  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000258c4  00000000  00000000  001e398c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00209250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080106e0 	.word	0x080106e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080106e0 	.word	0x080106e0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b988 	b.w	8000e2c <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	468e      	mov	lr, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	4688      	mov	r8, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d962      	bls.n	8000c10 <__udivmoddi4+0xdc>
 8000b4a:	fab2 f682 	clz	r6, r2
 8000b4e:	b14e      	cbz	r6, 8000b64 <__udivmoddi4+0x30>
 8000b50:	f1c6 0320 	rsb	r3, r6, #32
 8000b54:	fa01 f806 	lsl.w	r8, r1, r6
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	40b7      	lsls	r7, r6
 8000b5e:	ea43 0808 	orr.w	r8, r3, r8
 8000b62:	40b4      	lsls	r4, r6
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	fa1f fc87 	uxth.w	ip, r7
 8000b6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b70:	0c23      	lsrs	r3, r4, #16
 8000b72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b88:	f080 80ea 	bcs.w	8000d60 <__udivmoddi4+0x22c>
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f240 80e7 	bls.w	8000d60 <__udivmoddi4+0x22c>
 8000b92:	3902      	subs	r1, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	1a9a      	subs	r2, r3, r2
 8000b98:	b2a3      	uxth	r3, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000baa:	459c      	cmp	ip, r3
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x8e>
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb4:	f080 80d6 	bcs.w	8000d64 <__udivmoddi4+0x230>
 8000bb8:	459c      	cmp	ip, r3
 8000bba:	f240 80d3 	bls.w	8000d64 <__udivmoddi4+0x230>
 8000bbe:	443b      	add	r3, r7
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc6:	eba3 030c 	sub.w	r3, r3, ip
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40f3      	lsrs	r3, r6
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xb6>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb0>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x14c>
 8000bf2:	4573      	cmp	r3, lr
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xc8>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 8105 	bhi.w	8000e06 <__udivmoddi4+0x2d2>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4690      	mov	r8, r2
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0e5      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c0e:	e7e2      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f000 8090 	beq.w	8000d36 <__udivmoddi4+0x202>
 8000c16:	fab2 f682 	clz	r6, r2
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f040 80a4 	bne.w	8000d68 <__udivmoddi4+0x234>
 8000c20:	1a8a      	subs	r2, r1, r2
 8000c22:	0c03      	lsrs	r3, r0, #16
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	b2bc      	uxth	r4, r7
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x11e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x11c>
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	f200 80e0 	bhi.w	8000e10 <__udivmoddi4+0x2dc>
 8000c50:	46c4      	mov	ip, r8
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c60:	fb02 f404 	mul.w	r4, r2, r4
 8000c64:	429c      	cmp	r4, r3
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x144>
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x142>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f200 80ca 	bhi.w	8000e0a <__udivmoddi4+0x2d6>
 8000c76:	4602      	mov	r2, r0
 8000c78:	1b1b      	subs	r3, r3, r4
 8000c7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c90:	fa20 f306 	lsr.w	r3, r0, r6
 8000c94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	fa1f fc87 	uxth.w	ip, r7
 8000ca6:	fbbe f0f9 	udiv	r0, lr, r9
 8000caa:	0c1c      	lsrs	r4, r3, #16
 8000cac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x1a0>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cc6:	f080 809c 	bcs.w	8000e02 <__udivmoddi4+0x2ce>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8099 	bls.w	8000e02 <__udivmoddi4+0x2ce>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	eba4 040e 	sub.w	r4, r4, lr
 8000cd8:	fa1f fe83 	uxth.w	lr, r3
 8000cdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1ce>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cf6:	f080 8082 	bcs.w	8000dfe <__udivmoddi4+0x2ca>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d97f      	bls.n	8000dfe <__udivmoddi4+0x2ca>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d0e:	4564      	cmp	r4, ip
 8000d10:	4673      	mov	r3, lr
 8000d12:	46e1      	mov	r9, ip
 8000d14:	d362      	bcc.n	8000ddc <__udivmoddi4+0x2a8>
 8000d16:	d05f      	beq.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x1fe>
 8000d1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	fa22 f301 	lsr.w	r3, r2, r1
 8000d2a:	431e      	orrs	r6, r3
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d32:	2100      	movs	r1, #0
 8000d34:	e74f      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000d36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d3a:	0c01      	lsrs	r1, r0, #16
 8000d3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d40:	b280      	uxth	r0, r0
 8000d42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d46:	463b      	mov	r3, r7
 8000d48:	4638      	mov	r0, r7
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	46b8      	mov	r8, r7
 8000d4e:	46be      	mov	lr, r7
 8000d50:	2620      	movs	r6, #32
 8000d52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d56:	eba2 0208 	sub.w	r2, r2, r8
 8000d5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d5e:	e766      	b.n	8000c2e <__udivmoddi4+0xfa>
 8000d60:	4601      	mov	r1, r0
 8000d62:	e718      	b.n	8000b96 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e72c      	b.n	8000bc2 <__udivmoddi4+0x8e>
 8000d68:	f1c6 0220 	rsb	r2, r6, #32
 8000d6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d70:	40b7      	lsls	r7, r6
 8000d72:	40b1      	lsls	r1, r6
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d88:	0c11      	lsrs	r1, r2, #16
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb08 f904 	mul.w	r9, r8, r4
 8000d92:	40b0      	lsls	r0, r6
 8000d94:	4589      	cmp	r9, r1
 8000d96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d9a:	b280      	uxth	r0, r0
 8000d9c:	d93e      	bls.n	8000e1c <__udivmoddi4+0x2e8>
 8000d9e:	1879      	adds	r1, r7, r1
 8000da0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000da4:	d201      	bcs.n	8000daa <__udivmoddi4+0x276>
 8000da6:	4589      	cmp	r9, r1
 8000da8:	d81f      	bhi.n	8000dea <__udivmoddi4+0x2b6>
 8000daa:	eba1 0109 	sub.w	r1, r1, r9
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fb09 f804 	mul.w	r8, r9, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc0:	4542      	cmp	r2, r8
 8000dc2:	d229      	bcs.n	8000e18 <__udivmoddi4+0x2e4>
 8000dc4:	18ba      	adds	r2, r7, r2
 8000dc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dca:	d2c4      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dcc:	4542      	cmp	r2, r8
 8000dce:	d2c2      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000dd4:	443a      	add	r2, r7
 8000dd6:	e7be      	b.n	8000d56 <__udivmoddi4+0x222>
 8000dd8:	45f0      	cmp	r8, lr
 8000dda:	d29d      	bcs.n	8000d18 <__udivmoddi4+0x1e4>
 8000ddc:	ebbe 0302 	subs.w	r3, lr, r2
 8000de0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000de4:	3801      	subs	r0, #1
 8000de6:	46e1      	mov	r9, ip
 8000de8:	e796      	b.n	8000d18 <__udivmoddi4+0x1e4>
 8000dea:	eba7 0909 	sub.w	r9, r7, r9
 8000dee:	4449      	add	r1, r9
 8000df0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000df4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df8:	fb09 f804 	mul.w	r8, r9, r4
 8000dfc:	e7db      	b.n	8000db6 <__udivmoddi4+0x282>
 8000dfe:	4673      	mov	r3, lr
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1ce>
 8000e02:	4650      	mov	r0, sl
 8000e04:	e766      	b.n	8000cd4 <__udivmoddi4+0x1a0>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e6fd      	b.n	8000c06 <__udivmoddi4+0xd2>
 8000e0a:	443b      	add	r3, r7
 8000e0c:	3a02      	subs	r2, #2
 8000e0e:	e733      	b.n	8000c78 <__udivmoddi4+0x144>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	443b      	add	r3, r7
 8000e16:	e71c      	b.n	8000c52 <__udivmoddi4+0x11e>
 8000e18:	4649      	mov	r1, r9
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x222>
 8000e1c:	eba1 0109 	sub.w	r1, r1, r9
 8000e20:	46c4      	mov	ip, r8
 8000e22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e26:	fb09 f804 	mul.w	r8, r9, r4
 8000e2a:	e7c4      	b.n	8000db6 <__udivmoddi4+0x282>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <pec15_calc>:
 * @param len Length of the data buffer.
 * @param data Pointer to the data buffer.
 * @return Calculated PEC15 checksum.
 */
uint16_t pec15_calc(uint8_t len, uint8_t *data)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;
  remainder = 16;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	737b      	strb	r3, [r7, #13]
 8000e44:	e019      	b.n	8000e7a <pec15_calc+0x4a>
    {
      addr = ((remainder >> 7) ^ data[i]) & 0xff;
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	09db      	lsrs	r3, r3, #7
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	7b7a      	ldrb	r2, [r7, #13]
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	440a      	add	r2, r1
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	4053      	eors	r3, r2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	817b      	strh	r3, [r7, #10]
      remainder = (remainder << 8) ^ crc15Table[addr];
 8000e5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	897b      	ldrh	r3, [r7, #10]
 8000e66:	490b      	ldr	r1, [pc, #44]	@ (8000e94 <pec15_calc+0x64>)
 8000e68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4053      	eors	r3, r2
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++)
 8000e74:	7b7b      	ldrb	r3, [r7, #13]
 8000e76:	3301      	adds	r3, #1
 8000e78:	737b      	strb	r3, [r7, #13]
 8000e7a:	7b7a      	ldrb	r2, [r7, #13]
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3e1      	bcc.n	8000e46 <pec15_calc+0x16>
    }
  return (remainder * 2);
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	b29b      	uxth	r3, r3
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	080106f8 	.word	0x080106f8

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f005 f9f0 	bl	8006280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f8be 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fb94 	bl	80015d0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ea8:	f000 fa1a 	bl	80012e0 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000eac:	f000 fa84 	bl	80013b8 <MX_SPI1_Init>
  MX_CAN2_Init();
 8000eb0:	f000 fa4c 	bl	800134c <MX_CAN2_Init>
  MX_ADC1_Init();
 8000eb4:	f000 f91e 	bl	80010f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000eb8:	f000 f96e 	bl	8001198 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ebc:	f000 f9be 	bl	800123c <MX_ADC3_Init>
  MX_TIM1_Init();
 8000ec0:	f000 fab0 	bl	8001424 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ec4:	f000 fb32 	bl	800152c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  configCan1Filters();
 8000ec8:	f000 fc72 	bl	80017b0 <configCan1Filters>
  configCan2Filters();
 8000ecc:	f000 fc96 	bl	80017fc <configCan2Filters>
  HAL_CAN_Start(&hcan1);
 8000ed0:	4849      	ldr	r0, [pc, #292]	@ (8000ff8 <main+0x160>)
 8000ed2:	f005 fea7 	bl	8006c24 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000ed6:	4849      	ldr	r0, [pc, #292]	@ (8000ffc <main+0x164>)
 8000ed8:	f005 fea4 	bl	8006c24 <HAL_CAN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // set all output pins to the "safe" state
  HAL_GPIO_WritePin(MCU_STATUS_LED1_GPIO_Port, MCU_STATUS_LED1_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4847      	ldr	r0, [pc, #284]	@ (8001000 <main+0x168>)
 8000ee2:	f006 fb97 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_STATUS_LED2_GPIO_Port, MCU_STATUS_LED2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4845      	ldr	r0, [pc, #276]	@ (8001000 <main+0x168>)
 8000eec:	f006 fb92 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_STATUS_LED3_GPIO_Port, MCU_STATUS_LED3_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4843      	ldr	r0, [pc, #268]	@ (8001004 <main+0x16c>)
 8000ef6:	f006 fb8d 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_STATUS_LED4_GPIO_Port, MCU_STATUS_LED4_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2101      	movs	r1, #1
 8000efe:	4842      	ldr	r0, [pc, #264]	@ (8001008 <main+0x170>)
 8000f00:	f006 fb88 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WATCHDOG_INPUT_GPIO_Port, WATCHDOG_INPUT_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	483d      	ldr	r0, [pc, #244]	@ (8001000 <main+0x168>)
 8000f0a:	f006 fb83 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	483b      	ldr	r0, [pc, #236]	@ (8001000 <main+0x168>)
 8000f14:	f006 fb7e 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f1e:	4838      	ldr	r0, [pc, #224]	@ (8001000 <main+0x168>)
 8000f20:	f006 fb78 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f2a:	4835      	ldr	r0, [pc, #212]	@ (8001000 <main+0x168>)
 8000f2c:	f006 fb72 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f36:	4835      	ldr	r0, [pc, #212]	@ (800100c <main+0x174>)
 8000f38:	f006 fb6c 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SC_RESET_GPIO_Port, SC_RESET_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f42:	482f      	ldr	r0, [pc, #188]	@ (8001000 <main+0x168>)
 8000f44:	f006 fb66 	bl	8007614 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    tick = HAL_GetTick();
 8000f48:	f005 fa00 	bl	800634c <HAL_GetTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a30      	ldr	r2, [pc, #192]	@ (8001010 <main+0x178>)
 8000f50:	6013      	str	r3, [r2, #0]

    voltageConversions();
 8000f52:	f000 fc99 	bl	8001888 <voltageConversions>
    HAL_Delay(3); // Wait for conversion to complete (2.3ms)
 8000f56:	2003      	movs	r0, #3
 8000f58:	f005 fa04 	bl	8006364 <HAL_Delay>
    temperatureConversions();
 8000f5c:	f000 fcd6 	bl	800190c <temperatureConversions>
    HAL_Delay(3);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f005 f9ff 	bl	8006364 <HAL_Delay>
    voltageReadings();
 8000f66:	f000 fd13 	bl	8001990 <voltageReadings>
    temperatureReadings();
 8000f6a:	f000 fec9 	bl	8001d00 <temperatureReadings>

    // send voltages and temperatures, on alternate passes
    if (cellOrTemp)
 8000f6e:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <main+0x17c>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00f      	beq.n	8000f96 <main+0xfe>
    {
      voltageSendCan();
 8000f76:	f001 f84b 	bl	8002010 <voltageSendCan>
      if (++amsTxMessageCounter >= 24)
 8000f7a:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <main+0x180>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <main+0x180>)
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <main+0x180>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b17      	cmp	r3, #23
 8000f8c:	d905      	bls.n	8000f9a <main+0x102>
        amsTxMessageCounter = 0; // Reset counter after sending all messages
 8000f8e:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <main+0x180>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e001      	b.n	8000f9a <main+0x102>
    }
    else // Temperatures
    {
      temperatureSendCan();
 8000f96:	f003 fb21 	bl	80045dc <temperatureSendCan>
    }
    cellOrTemp = !cellOrTemp; // Toggle between cells and temperatures on each pass
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <main+0x17c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <main+0x17c>)
 8000fac:	701a      	strb	r2, [r3, #0]


    // TODO: Consider moving this to an interrupt if IVT messages are more frequent and FIFO overflows
    // In general IVT overflows should not matter much since we will read the latest message
    readCanMessages();
 8000fae:	f004 f9e3 	bl	8005378 <readCanMessages>

    stepStateMachine();
 8000fb2:	f004 fc81 	bl	80058b8 <stepStateMachine>

    deltaTick = HAL_GetTick() - tick;
 8000fb6:	f005 f9c9 	bl	800634c <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <main+0x178>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	4a16      	ldr	r2, [pc, #88]	@ (800101c <main+0x184>)
 8000fc4:	6013      	str	r3, [r2, #0]
    sendStatus();
 8000fc6:	f004 fa8b 	bl	80054e0 <sendStatus>

    while (HAL_GetTick() - tick < CYCLE_TIME);
 8000fca:	bf00      	nop
 8000fcc:	f005 f9be 	bl	800634c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <main+0x178>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b31      	cmp	r3, #49	@ 0x31
 8000fda:	d9f7      	bls.n	8000fcc <main+0x134>

    HAL_GPIO_TogglePin(WATCHDOG_INPUT_GPIO_Port, WATCHDOG_INPUT_Pin); // Toggle watchdog pin
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4808      	ldr	r0, [pc, #32]	@ (8001000 <main+0x168>)
 8000fe0:	f006 fb31 	bl	8007646 <HAL_GPIO_TogglePin>
    if (!amsTxMessageCounter) HAL_GPIO_TogglePin(MCU_STATUS_LED3_GPIO_Port, MCU_STATUS_LED3_Pin);
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <main+0x180>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1ad      	bne.n	8000f48 <main+0xb0>
 8000fec:	2120      	movs	r1, #32
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <main+0x16c>)
 8000ff0:	f006 fb29 	bl	8007646 <HAL_GPIO_TogglePin>
    tick = HAL_GetTick();
 8000ff4:	e7a8      	b.n	8000f48 <main+0xb0>
 8000ff6:	bf00      	nop
 8000ff8:	2000011c 	.word	0x2000011c
 8000ffc:	20000144 	.word	0x20000144
 8001000:	40021000 	.word	0x40021000
 8001004:	40020800 	.word	0x40020800
 8001008:	40020400 	.word	0x40020400
 800100c:	40020c00 	.word	0x40020c00
 8001010:	20000830 	.word	0x20000830
 8001014:	20000812 	.word	0x20000812
 8001018:	20000811 	.word	0x20000811
 800101c:	20000834 	.word	0x20000834

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	@ 0x50
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2230      	movs	r2, #48	@ 0x30
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00f fb2a 	bl	8010688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <SystemClock_Config+0xcc>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a27      	ldr	r2, [pc, #156]	@ (80010ec <SystemClock_Config+0xcc>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	@ 0x40
 8001054:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <SystemClock_Config+0xcc>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <SystemClock_Config+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <SystemClock_Config+0xd0>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <SystemClock_Config+0xd0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2301      	movs	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001084:	2310      	movs	r3, #16
 8001086:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001088:	2302      	movs	r3, #2
 800108a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108c:	2300      	movs	r3, #0
 800108e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001090:	2308      	movs	r3, #8
 8001092:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4618      	mov	r0, r3
 80010a6:	f006 fae9 	bl	800767c <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b0:	f004 fd94 	bl	8005bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2104      	movs	r1, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f006 fd4a 	bl	8007b6c <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010de:	f004 fd7d 	bl	8005bdc <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3750      	adds	r7, #80	@ 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_ADC1_Init+0x98>)
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <MX_ADC1_Init+0x9c>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001118:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_ADC1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800111e:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_ADC1_Init+0x98>)
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_ADC1_Init+0x98>)
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <MX_ADC1_Init+0xa0>)
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_ADC1_Init+0x98>)
 8001140:	2201      	movs	r2, #1
 8001142:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_ADC1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_ADC1_Init+0x98>)
 800114e:	2201      	movs	r2, #1
 8001150:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001152:	480e      	ldr	r0, [pc, #56]	@ (800118c <MX_ADC1_Init+0x98>)
 8001154:	f005 f92a 	bl	80063ac <HAL_ADC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800115e:	f004 fd3d 	bl	8005bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001162:	230a      	movs	r3, #10
 8001164:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	@ (800118c <MX_ADC1_Init+0x98>)
 8001174:	f005 f95e 	bl	8006434 <HAL_ADC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800117e:	f004 fd2d 	bl	8005bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000044 	.word	0x20000044
 8001190:	40012000 	.word	0x40012000
 8001194:	0f000001 	.word	0x0f000001

08001198 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011ac:	4a21      	ldr	r2, [pc, #132]	@ (8001234 <MX_ADC2_Init+0x9c>)
 80011ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011d8:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <MX_ADC2_Init+0xa0>)
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011e2:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011f6:	480e      	ldr	r0, [pc, #56]	@ (8001230 <MX_ADC2_Init+0x98>)
 80011f8:	f005 f8d8 	bl	80063ac <HAL_ADC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001202:	f004 fceb 	bl	8005bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001206:	230b      	movs	r3, #11
 8001208:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <MX_ADC2_Init+0x98>)
 8001218:	f005 f90c 	bl	8006434 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001222:	f004 fcdb 	bl	8005bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000008c 	.word	0x2000008c
 8001234:	40012100 	.word	0x40012100
 8001238:	0f000001 	.word	0x0f000001

0800123c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_ADC3_Init+0x98>)
 8001250:	4a21      	ldr	r2, [pc, #132]	@ (80012d8 <MX_ADC3_Init+0x9c>)
 8001252:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <MX_ADC3_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_ADC3_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_ADC3_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_ADC3_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_ADC3_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <MX_ADC3_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_ADC3_Init+0x98>)
 800127c:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <MX_ADC3_Init+0xa0>)
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <MX_ADC3_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <MX_ADC3_Init+0x98>)
 8001288:	2201      	movs	r2, #1
 800128a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_ADC3_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_ADC3_Init+0x98>)
 8001296:	2201      	movs	r2, #1
 8001298:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800129a:	480e      	ldr	r0, [pc, #56]	@ (80012d4 <MX_ADC3_Init+0x98>)
 800129c:	f005 f886 	bl	80063ac <HAL_ADC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f004 fc99 	bl	8005bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80012aa:	230d      	movs	r3, #13
 80012ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <MX_ADC3_Init+0x98>)
 80012bc:	f005 f8ba 	bl	8006434 <HAL_ADC_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80012c6:	f004 fc89 	bl	8005bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200000d4 	.word	0x200000d4
 80012d8:	40012200 	.word	0x40012200
 80012dc:	0f000001 	.word	0x0f000001

080012e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_CAN1_Init+0x64>)
 80012e6:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <MX_CAN1_Init+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_CAN1_Init+0x64>)
 80012ec:	2202      	movs	r2, #2
 80012ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_CAN1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_CAN1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_CAN1_Init+0x64>)
 80012fe:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001302:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_CAN1_Init+0x64>)
 8001306:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800130a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800130c:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <MX_CAN1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_CAN1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <MX_CAN1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_CAN1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <MX_CAN1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_CAN1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_CAN1_Init+0x64>)
 8001332:	f005 fa9d 	bl	8006870 <HAL_CAN_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800133c:	f004 fc4e 	bl	8005bdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000011c 	.word	0x2000011c
 8001348:	40006400 	.word	0x40006400

0800134c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_CAN2_Init+0x64>)
 8001352:	4a18      	ldr	r2, [pc, #96]	@ (80013b4 <MX_CAN2_Init+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_CAN2_Init+0x64>)
 8001358:	2202      	movs	r2, #2
 800135a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_CAN2_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_CAN2_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_CAN2_Init+0x64>)
 800136a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800136e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_CAN2_Init+0x64>)
 8001372:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001376:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <MX_CAN2_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800137e:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_CAN2_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <MX_CAN2_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_CAN2_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <MX_CAN2_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_CAN2_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_CAN2_Init+0x64>)
 800139e:	f005 fa67 	bl	8006870 <HAL_CAN_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80013a8:	f004 fc18 	bl	8005bdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000144 	.word	0x20000144
 80013b4:	40006800 	.word	0x40006800

080013b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_SPI1_Init+0x64>)
 80013be:	4a18      	ldr	r2, [pc, #96]	@ (8001420 <MX_SPI1_Init+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_SPI1_Init+0x64>)
 80013c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_SPI1_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <MX_SPI1_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <MX_SPI1_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_SPI1_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <MX_SPI1_Init+0x64>)
 80013e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <MX_SPI1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <MX_SPI1_Init+0x64>)
 8001404:	220a      	movs	r2, #10
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	@ (800141c <MX_SPI1_Init+0x64>)
 800140a:	f006 fd5b 	bl	8007ec4 <HAL_SPI_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001414:	f004 fbe2 	bl	8005bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000016c 	.word	0x2000016c
 8001420:	40013000 	.word	0x40013000

08001424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b092      	sub	sp, #72	@ 0x48
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2220      	movs	r2, #32
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00f f91a 	bl	8010688 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001454:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <MX_TIM1_Init+0x100>)
 8001456:	4a34      	ldr	r2, [pc, #208]	@ (8001528 <MX_TIM1_Init+0x104>)
 8001458:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800145a:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <MX_TIM1_Init+0x100>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <MX_TIM1_Init+0x100>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001466:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <MX_TIM1_Init+0x100>)
 8001468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <MX_TIM1_Init+0x100>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001474:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <MX_TIM1_Init+0x100>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <MX_TIM1_Init+0x100>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001480:	4828      	ldr	r0, [pc, #160]	@ (8001524 <MX_TIM1_Init+0x100>)
 8001482:	f007 f971 	bl	8008768 <HAL_TIM_PWM_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800148c:	f004 fba6 	bl	8005bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001498:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800149c:	4619      	mov	r1, r3
 800149e:	4821      	ldr	r0, [pc, #132]	@ (8001524 <MX_TIM1_Init+0x100>)
 80014a0:	f007 fede 	bl	8009260 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80014aa:	f004 fb97 	bl	8005bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ce:	2208      	movs	r2, #8
 80014d0:	4619      	mov	r1, r3
 80014d2:	4814      	ldr	r0, [pc, #80]	@ (8001524 <MX_TIM1_Init+0x100>)
 80014d4:	f007 fa82 	bl	80089dc <HAL_TIM_PWM_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80014de:	f004 fb7d 	bl	8005bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	4807      	ldr	r0, [pc, #28]	@ (8001524 <MX_TIM1_Init+0x100>)
 8001506:	f007 ff27 	bl	8009358 <HAL_TIMEx_ConfigBreakDeadTime>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001510:	f004 fb64 	bl	8005bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001514:	4803      	ldr	r0, [pc, #12]	@ (8001524 <MX_TIM1_Init+0x100>)
 8001516:	f004 fd85 	bl	8006024 <HAL_TIM_MspPostInit>

}
 800151a:	bf00      	nop
 800151c:	3748      	adds	r7, #72	@ 0x48
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001c4 	.word	0x200001c4
 8001528:	40010000 	.word	0x40010000

0800152c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <MX_TIM2_Init+0xa0>)
 800154a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800154e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001550:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <MX_TIM2_Init+0xa0>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <MX_TIM2_Init+0xa0>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800155c:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_TIM2_Init+0xa0>)
 800155e:	f04f 32ff 	mov.w	r2, #4294967295
 8001562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_TIM2_Init+0xa0>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_TIM2_Init+0xa0>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001570:	4816      	ldr	r0, [pc, #88]	@ (80015cc <MX_TIM2_Init+0xa0>)
 8001572:	f007 f948 	bl	8008806 <HAL_TIM_IC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800157c:	f004 fb2e 	bl	8005bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	480f      	ldr	r0, [pc, #60]	@ (80015cc <MX_TIM2_Init+0xa0>)
 8001590:	f007 fe66 	bl	8009260 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800159a:	f004 fb1f 	bl	8005bdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015a2:	2301      	movs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_TIM2_Init+0xa0>)
 80015b6:	f007 f975 	bl	80088a4 <HAL_TIM_IC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80015c0:	f004 fb0c 	bl	8005bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000020c 	.word	0x2000020c

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	4b6c      	ldr	r3, [pc, #432]	@ (800179c <MX_GPIO_Init+0x1cc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a6b      	ldr	r2, [pc, #428]	@ (800179c <MX_GPIO_Init+0x1cc>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b69      	ldr	r3, [pc, #420]	@ (800179c <MX_GPIO_Init+0x1cc>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	4b65      	ldr	r3, [pc, #404]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a64      	ldr	r2, [pc, #400]	@ (800179c <MX_GPIO_Init+0x1cc>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b62      	ldr	r3, [pc, #392]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b5e      	ldr	r3, [pc, #376]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a5d      	ldr	r2, [pc, #372]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b5b      	ldr	r3, [pc, #364]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b57      	ldr	r3, [pc, #348]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a56      	ldr	r2, [pc, #344]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b54      	ldr	r3, [pc, #336]	@ (800179c <MX_GPIO_Init+0x1cc>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b50      	ldr	r3, [pc, #320]	@ (800179c <MX_GPIO_Init+0x1cc>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a4f      	ldr	r2, [pc, #316]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b4d      	ldr	r3, [pc, #308]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b49      	ldr	r3, [pc, #292]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a48      	ldr	r2, [pc, #288]	@ (800179c <MX_GPIO_Init+0x1cc>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b46      	ldr	r3, [pc, #280]	@ (800179c <MX_GPIO_Init+0x1cc>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MCU_STATUS_LED1_Pin|MCU_STATUS_LED2_Pin|WATCHDOG_INPUT_Pin|AIR_P_ENABLE_Pin
 800168e:	2200      	movs	r2, #0
 8001690:	f641 419c 	movw	r1, #7324	@ 0x1c9c
 8001694:	4842      	ldr	r0, [pc, #264]	@ (80017a0 <MX_GPIO_Init+0x1d0>)
 8001696:	f005 ffbd 	bl	8007614 <HAL_GPIO_WritePin>
                          |PRECHARGE_ENABLE_Pin|AIR_N_ENABLE_Pin|SC_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_SSN_Pin|MCU_STATUS_LED3_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2130      	movs	r1, #48	@ 0x30
 800169e:	4841      	ldr	r0, [pc, #260]	@ (80017a4 <MX_GPIO_Init+0x1d4>)
 80016a0:	f005 ffb8 	bl	8007614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_STATUS_LED4_GPIO_Port, MCU_STATUS_LED4_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2101      	movs	r1, #1
 80016a8:	483f      	ldr	r0, [pc, #252]	@ (80017a8 <MX_GPIO_Init+0x1d8>)
 80016aa:	f005 ffb3 	bl	8007614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MCU_AMS_ERROR_N_Pin|RST_OUT_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80016b4:	483d      	ldr	r0, [pc, #244]	@ (80017ac <MX_GPIO_Init+0x1dc>)
 80016b6:	f005 ffad 	bl	8007614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_STATUS_LED1_Pin MCU_STATUS_LED2_Pin WATCHDOG_INPUT_Pin AIR_P_ENABLE_Pin
                           PRECHARGE_ENABLE_Pin AIR_N_ENABLE_Pin SC_RESET_Pin */
  GPIO_InitStruct.Pin = MCU_STATUS_LED1_Pin|MCU_STATUS_LED2_Pin|WATCHDOG_INPUT_Pin|AIR_P_ENABLE_Pin
 80016ba:	f641 439c 	movw	r3, #7324	@ 0x1c9c
 80016be:	61fb      	str	r3, [r7, #28]
                          |PRECHARGE_ENABLE_Pin|AIR_N_ENABLE_Pin|SC_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	4833      	ldr	r0, [pc, #204]	@ (80017a0 <MX_GPIO_Init+0x1d0>)
 80016d4:	f005 fdea 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SSN_Pin MCU_STATUS_LED3_Pin */
  GPIO_InitStruct.Pin = SPI1_SSN_Pin|MCU_STATUS_LED3_Pin;
 80016d8:	2330      	movs	r3, #48	@ 0x30
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	482d      	ldr	r0, [pc, #180]	@ (80017a4 <MX_GPIO_Init+0x1d4>)
 80016f0:	f005 fddc 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_STATUS_LED4_Pin */
  GPIO_InitStruct.Pin = MCU_STATUS_LED4_Pin;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MCU_STATUS_LED4_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4827      	ldr	r0, [pc, #156]	@ (80017a8 <MX_GPIO_Init+0x1d8>)
 800170c:	f005 fdce 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_ERROR_LATCHED_Pin */
  GPIO_InitStruct.Pin = AMS_ERROR_LATCHED_Pin;
 8001710:	2304      	movs	r3, #4
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AMS_ERROR_LATCHED_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	4821      	ldr	r0, [pc, #132]	@ (80017a8 <MX_GPIO_Init+0x1d8>)
 8001724:	f005 fdc2 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_N_CLOSED_Pin AIR_P_CLOSED_Pin IMD_ERROR_LATCHED_Pin */
  GPIO_InitStruct.Pin = AIR_N_CLOSED_Pin|AIR_P_CLOSED_Pin|IMD_ERROR_LATCHED_Pin;
 8001728:	f44f 4386 	mov.w	r3, #17152	@ 0x4300
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4818      	ldr	r0, [pc, #96]	@ (80017a0 <MX_GPIO_Init+0x1d0>)
 800173e:	f005 fdb5 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_AMS_ERROR_N_Pin RST_OUT_Pin */
  GPIO_InitStruct.Pin = MCU_AMS_ERROR_N_Pin|RST_OUT_Pin;
 8001742:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4814      	ldr	r0, [pc, #80]	@ (80017ac <MX_GPIO_Init+0x1dc>)
 800175c:	f005 fda6 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_CLOSED_SIGNAL_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_CLOSED_SIGNAL_Pin;
 8001760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PRECHARGE_CLOSED_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	480d      	ldr	r0, [pc, #52]	@ (80017ac <MX_GPIO_Init+0x1dc>)
 8001776:	f005 fd99 	bl	80072ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SC_PROBE_Pin */
  GPIO_InitStruct.Pin = SC_PROBE_Pin;
 800177a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SC_PROBE_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_GPIO_Init+0x1d4>)
 8001790:	f005 fd8c 	bl	80072ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001794:	bf00      	nop
 8001796:	3730      	adds	r7, #48	@ 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020c00 	.word	0x40020c00

080017b0 <configCan1Filters>:

/* USER CODE BEGIN 4 */
static void configCan1Filters(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef canFilter;

  canFilter.FilterBank = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  canFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
  canFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  canFilter.FilterActivation = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	623b      	str	r3, [r7, #32]
  canFilter.SlaveStartFilterBank = 14;
 80017ca:	230e      	movs	r3, #14
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24

  canFilter.FilterIdHigh = CAN1_DBU_STATUS_1_FRAME_ID << 5; // Shift ID to match filter format;
 80017ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017d2:	603b      	str	r3, [r7, #0]
  canFilter.FilterIdLow = CAN1_ECU_STATUS_FRAME_ID << 5;
 80017d4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80017d8:	607b      	str	r3, [r7, #4]
  canFilter.FilterMaskIdHigh = CAN1_AMS_PARAMETERS_SET_FRAME_ID << 5;
 80017da:	f44f 5349 	mov.w	r3, #12864	@ 0x3240
 80017de:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdLow = 0xFFFF; // Unused
 80017e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017e4:	60fb      	str	r3, [r7, #12]

  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 80017e6:	463b      	mov	r3, r7
 80017e8:	4619      	mov	r1, r3
 80017ea:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <configCan1Filters+0x48>)
 80017ec:	f005 f93c 	bl	8006a68 <HAL_CAN_ConfigFilter>
}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	@ 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000011c 	.word	0x2000011c

080017fc <configCan2Filters>:

static void configCan2Filters(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef canFilter;

  canFilter.FilterBank = 14;
 8001802:	230e      	movs	r3, #14
 8001804:	617b      	str	r3, [r7, #20]
  canFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8001806:	2301      	movs	r3, #1
 8001808:	61bb      	str	r3, [r7, #24]
  canFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  canFilter.FilterActivation = ENABLE;
 8001812:	2301      	movs	r3, #1
 8001814:	623b      	str	r3, [r7, #32]
  canFilter.SlaveStartFilterBank = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24

  canFilter.FilterBank = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  canFilter.FilterIdHigh = CAN2_IVT_MSG_RESULT_U2_FRAME_ID << 5; // Shift ID to match filter format
 800181e:	f24a 4360 	movw	r3, #42080	@ 0xa460
 8001822:	603b      	str	r3, [r7, #0]
  canFilter.FilterIdLow = CAN2_IVT_MSG_RESULT_U1_FRAME_ID << 5;
 8001824:	f24a 4340 	movw	r3, #42048	@ 0xa440
 8001828:	607b      	str	r3, [r7, #4]
  canFilter.FilterMaskIdHigh = CAN2_IVT_MSG_RESULT_T_FRAME_ID << 5;
 800182a:	f24a 43a0 	movw	r3, #42144	@ 0xa4a0
 800182e:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdLow = CAN2_IVT_MSG_RESULT_W_FRAME_ID << 5;
 8001830:	f24a 43c0 	movw	r3, #42176	@ 0xa4c0
 8001834:	60fb      	str	r3, [r7, #12]
  if (HAL_CAN_ConfigFilter(&hcan2, &canFilter) != HAL_OK)
 8001836:	463b      	mov	r3, r7
 8001838:	4619      	mov	r1, r3
 800183a:	4812      	ldr	r0, [pc, #72]	@ (8001884 <configCan2Filters+0x88>)
 800183c:	f005 f914 	bl	8006a68 <HAL_CAN_ConfigFilter>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <configCan2Filters+0x4e>
  {
    Error_Handler();
 8001846:	f004 f9c9 	bl	8005bdc <Error_Handler>
  }

  canFilter.FilterBank = 1;
 800184a:	2301      	movs	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
  canFilter.FilterIdHigh = CAN2_IVT_MSG_RESULT_WH_FRAME_ID << 5; // Shift ID to match filter format
 800184e:	f44f 4325 	mov.w	r3, #42240	@ 0xa500
 8001852:	603b      	str	r3, [r7, #0]
  canFilter.FilterIdLow = CAN2_IVT_MSG_RESULT_I_FRAME_ID << 5;
 8001854:	f24a 4320 	movw	r3, #42016	@ 0xa420
 8001858:	607b      	str	r3, [r7, #4]
  canFilter.FilterMaskIdHigh = CAN2_IVT_MSG_RESULT_U3_FRAME_ID << 5;
 800185a:	f24a 4380 	movw	r3, #42112	@ 0xa480
 800185e:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdLow = CAN2_IVT_MSG_RESULT_AS_FRAME_ID << 5;
 8001860:	f24a 43e0 	movw	r3, #42208	@ 0xa4e0
 8001864:	60fb      	str	r3, [r7, #12]
  if (HAL_CAN_ConfigFilter(&hcan2, &canFilter) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <configCan2Filters+0x88>)
 800186c:	f005 f8fc 	bl	8006a68 <HAL_CAN_ConfigFilter>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <configCan2Filters+0x7e>
  {
    Error_Handler();
 8001876:	f004 f9b1 	bl	8005bdc <Error_Handler>
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000144 	.word	0x20000144

08001888 <voltageConversions>:

static void voltageConversions(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  command = MAKEBROADCASTCMD(ADCV(MD_NORMAL, DCP_NOT_PERMITTED, CH_ALL_CELLS));
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <voltageConversions+0x70>)
 800188e:	2263      	movs	r2, #99	@ 0x63
 8001890:	801a      	strh	r2, [r3, #0]
  spiTxData[0] = command >> 8;
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <voltageConversions+0x70>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	b29b      	uxth	r3, r3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <voltageConversions+0x74>)
 800189e:	701a      	strb	r2, [r3, #0]
  spiTxData[1] = command & 0xFF;
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <voltageConversions+0x70>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <voltageConversions+0x74>)
 80018a8:	705a      	strb	r2, [r3, #1]
  pec = pec15_calc(2, spiTxData);
 80018aa:	4914      	ldr	r1, [pc, #80]	@ (80018fc <voltageConversions+0x74>)
 80018ac:	2002      	movs	r0, #2
 80018ae:	f7ff fabf 	bl	8000e30 <pec15_calc>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <voltageConversions+0x78>)
 80018b8:	801a      	strh	r2, [r3, #0]
  spiTxData[2] = pec >> 8;
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <voltageConversions+0x78>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <voltageConversions+0x74>)
 80018c6:	709a      	strb	r2, [r3, #2]
  spiTxData[3] = pec & 0xFF;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <voltageConversions+0x78>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <voltageConversions+0x74>)
 80018d0:	70da      	strb	r2, [r3, #3]
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2110      	movs	r1, #16
 80018d6:	480b      	ldr	r0, [pc, #44]	@ (8001904 <voltageConversions+0x7c>)
 80018d8:	f005 fe9c 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, spiTxData, 4, HAL_MAX_DELAY);
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	2204      	movs	r2, #4
 80018e2:	4906      	ldr	r1, [pc, #24]	@ (80018fc <voltageConversions+0x74>)
 80018e4:	4808      	ldr	r0, [pc, #32]	@ (8001908 <voltageConversions+0x80>)
 80018e6:	f006 fb76 	bl	8007fd6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2110      	movs	r1, #16
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <voltageConversions+0x7c>)
 80018f0:	f005 fe90 	bl	8007614 <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000826 	.word	0x20000826
 80018fc:	20000814 	.word	0x20000814
 8001900:	20000828 	.word	0x20000828
 8001904:	40020800 	.word	0x40020800
 8001908:	2000016c 	.word	0x2000016c

0800190c <temperatureConversions>:

static void temperatureConversions(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  command = MAKEBROADCASTCMD(ADAX(MD_NORMAL, CH_ALL_CELLS));
 8001910:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <temperatureConversions+0x70>)
 8001912:	2265      	movs	r2, #101	@ 0x65
 8001914:	801a      	strh	r2, [r3, #0]
  spiTxData[0] = command >> 8;
 8001916:	4b19      	ldr	r3, [pc, #100]	@ (800197c <temperatureConversions+0x70>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	b29b      	uxth	r3, r3
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <temperatureConversions+0x74>)
 8001922:	701a      	strb	r2, [r3, #0]
  spiTxData[1] = command & 0xFF;
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <temperatureConversions+0x70>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <temperatureConversions+0x74>)
 800192c:	705a      	strb	r2, [r3, #1]
  pec = pec15_calc(2, spiTxData);
 800192e:	4914      	ldr	r1, [pc, #80]	@ (8001980 <temperatureConversions+0x74>)
 8001930:	2002      	movs	r0, #2
 8001932:	f7ff fa7d 	bl	8000e30 <pec15_calc>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <temperatureConversions+0x78>)
 800193c:	801a      	strh	r2, [r3, #0]
  spiTxData[2] = pec >> 8;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <temperatureConversions+0x78>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <temperatureConversions+0x74>)
 800194a:	709a      	strb	r2, [r3, #2]
  spiTxData[3] = pec & 0xFF;
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <temperatureConversions+0x78>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <temperatureConversions+0x74>)
 8001954:	70da      	strb	r2, [r3, #3]
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2110      	movs	r1, #16
 800195a:	480b      	ldr	r0, [pc, #44]	@ (8001988 <temperatureConversions+0x7c>)
 800195c:	f005 fe5a 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, spiTxData, 4, HAL_MAX_DELAY);
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	2204      	movs	r2, #4
 8001966:	4906      	ldr	r1, [pc, #24]	@ (8001980 <temperatureConversions+0x74>)
 8001968:	4808      	ldr	r0, [pc, #32]	@ (800198c <temperatureConversions+0x80>)
 800196a:	f006 fb34 	bl	8007fd6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 800196e:	2201      	movs	r2, #1
 8001970:	2110      	movs	r1, #16
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <temperatureConversions+0x7c>)
 8001974:	f005 fe4e 	bl	8007614 <HAL_GPIO_WritePin>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000826 	.word	0x20000826
 8001980:	20000814 	.word	0x20000814
 8001984:	20000828 	.word	0x20000828
 8001988:	40020800 	.word	0x40020800
 800198c:	2000016c 	.word	0x2000016c

08001990 <voltageReadings>:

static void voltageReadings(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
  for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e19c      	b.n	8001cd6 <voltageReadings+0x346>
  {
    for (uint8_t j = 0; j < 4; j++) // foreach register (4 registers per slave)
 800199c:	2300      	movs	r3, #0
 800199e:	71bb      	strb	r3, [r7, #6]
 80019a0:	e192      	b.n	8001cc8 <voltageReadings+0x338>
    {
      switch (j)
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d84b      	bhi.n	8001a40 <voltageReadings+0xb0>
 80019a8:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <voltageReadings+0x20>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019c1 	.word	0x080019c1
 80019b4:	080019e1 	.word	0x080019e1
 80019b8:	08001a01 	.word	0x08001a01
 80019bc:	08001a21 	.word	0x08001a21
      {
      case 0: // Cell voltages
        command = MAKEADDRCMD(i, RDCVA);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b85      	ldr	r3, [pc, #532]	@ (8001bf0 <voltageReadings+0x260>)
 80019dc:	801a      	strh	r2, [r3, #0]
        break;
 80019de:	e02f      	b.n	8001a40 <voltageReadings+0xb0>
      case 1: // Cell voltages
        command = MAKEADDRCMD(i, RDCVB);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f2:	f043 0306 	orr.w	r3, r3, #6
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf0 <voltageReadings+0x260>)
 80019fc:	801a      	strh	r2, [r3, #0]
        break;
 80019fe:	e01f      	b.n	8001a40 <voltageReadings+0xb0>
      case 2: // Cell voltages
        command = MAKEADDRCMD(i, RDCVC);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b75      	ldr	r3, [pc, #468]	@ (8001bf0 <voltageReadings+0x260>)
 8001a1c:	801a      	strh	r2, [r3, #0]
        break;
 8001a1e:	e00f      	b.n	8001a40 <voltageReadings+0xb0>
      case 3: // Cell voltages
        command = MAKEADDRCMD(i, RDCVD);
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a32:	f043 030a 	orr.w	r3, r3, #10
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf0 <voltageReadings+0x260>)
 8001a3c:	801a      	strh	r2, [r3, #0]
        break;
 8001a3e:	bf00      	nop
      }
      spiTxData[0] = command >> 8;
 8001a40:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf0 <voltageReadings+0x260>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf4 <voltageReadings+0x264>)
 8001a4c:	701a      	strb	r2, [r3, #0]
      spiTxData[1] = command & 0xFF;
 8001a4e:	4b68      	ldr	r3, [pc, #416]	@ (8001bf0 <voltageReadings+0x260>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b67      	ldr	r3, [pc, #412]	@ (8001bf4 <voltageReadings+0x264>)
 8001a56:	705a      	strb	r2, [r3, #1]
      pec = pec15_calc(2, spiTxData);
 8001a58:	4966      	ldr	r1, [pc, #408]	@ (8001bf4 <voltageReadings+0x264>)
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f7ff f9e8 	bl	8000e30 <pec15_calc>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b64      	ldr	r3, [pc, #400]	@ (8001bf8 <voltageReadings+0x268>)
 8001a66:	801a      	strh	r2, [r3, #0]
      spiTxData[2] = pec >> 8;
 8001a68:	4b63      	ldr	r3, [pc, #396]	@ (8001bf8 <voltageReadings+0x268>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b60      	ldr	r3, [pc, #384]	@ (8001bf4 <voltageReadings+0x264>)
 8001a74:	709a      	strb	r2, [r3, #2]
      spiTxData[3] = pec & 0xFF;
 8001a76:	4b60      	ldr	r3, [pc, #384]	@ (8001bf8 <voltageReadings+0x268>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf4 <voltageReadings+0x264>)
 8001a7e:	70da      	strb	r2, [r3, #3]
      HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2110      	movs	r1, #16
 8001a84:	485d      	ldr	r0, [pc, #372]	@ (8001bfc <voltageReadings+0x26c>)
 8001a86:	f005 fdc5 	bl	8007614 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, spiTxData, spiRxData, 4+8, HAL_MAX_DELAY);
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	230c      	movs	r3, #12
 8001a92:	4a5b      	ldr	r2, [pc, #364]	@ (8001c00 <voltageReadings+0x270>)
 8001a94:	4957      	ldr	r1, [pc, #348]	@ (8001bf4 <voltageReadings+0x264>)
 8001a96:	485b      	ldr	r0, [pc, #364]	@ (8001c04 <voltageReadings+0x274>)
 8001a98:	f006 fbe1 	bl	800825e <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	4856      	ldr	r0, [pc, #344]	@ (8001bfc <voltageReadings+0x26c>)
 8001aa2:	f005 fdb7 	bl	8007614 <HAL_GPIO_WritePin>
      isospiRxCount++;
 8001aa6:	4b58      	ldr	r3, [pc, #352]	@ (8001c08 <voltageReadings+0x278>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	4a56      	ldr	r2, [pc, #344]	@ (8001c08 <voltageReadings+0x278>)
 8001aae:	6013      	str	r3, [r2, #0]
      // check PEC
      pec = (0xFF00 & (spiRxData[6] << 8)) | (0xFF & spiRxData[7]);
 8001ab0:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <voltageReadings+0x270>)
 8001ab2:	799b      	ldrb	r3, [r3, #6]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	4b51      	ldr	r3, [pc, #324]	@ (8001c00 <voltageReadings+0x270>)
 8001abc:	79db      	ldrb	r3, [r3, #7]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf8 <voltageReadings+0x268>)
 8001ac8:	801a      	strh	r2, [r3, #0]
      if (pec != pec15_calc(6, spiRxData))
 8001aca:	494d      	ldr	r1, [pc, #308]	@ (8001c00 <voltageReadings+0x270>)
 8001acc:	2006      	movs	r0, #6
 8001ace:	f7ff f9af 	bl	8000e30 <pec15_calc>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b48      	ldr	r3, [pc, #288]	@ (8001bf8 <voltageReadings+0x268>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d028      	beq.n	8001b30 <voltageReadings+0x1a0>
      {
        spiVoltageErrorCounter[i]++;
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8001c0c <voltageReadings+0x27c>)
 8001ae2:	5cd2      	ldrb	r2, [r2, r3]
 8001ae4:	3201      	adds	r2, #1
 8001ae6:	b2d1      	uxtb	r1, r2
 8001ae8:	4a48      	ldr	r2, [pc, #288]	@ (8001c0c <voltageReadings+0x27c>)
 8001aea:	54d1      	strb	r1, [r2, r3]
        isospiRxErrorCount++;
 8001aec:	4b48      	ldr	r3, [pc, #288]	@ (8001c10 <voltageReadings+0x280>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a47      	ldr	r2, [pc, #284]	@ (8001c10 <voltageReadings+0x280>)
 8001af4:	6013      	str	r3, [r2, #0]
        if (spiVoltageErrorCounter[i] >= SPI_ERROR_COUNT_THRESHOLD)
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	4a44      	ldr	r2, [pc, #272]	@ (8001c0c <voltageReadings+0x27c>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d902      	bls.n	8001b06 <voltageReadings+0x176>
        {
          spiError = 1; // Set SPI error
 8001b00:	4b44      	ldr	r3, [pc, #272]	@ (8001c14 <voltageReadings+0x284>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
        }
        for (uint8_t k = 0; k < 4; k++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	717b      	strb	r3, [r7, #5]
 8001b0a:	e00d      	b.n	8001b28 <voltageReadings+0x198>
        {
          rawVoltages[cellBaseNum[i] + k] = 0xFFFF; // Set to invalid value]
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <voltageReadings+0x288>)
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	461a      	mov	r2, r3
 8001b14:	797b      	ldrb	r3, [r7, #5]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a40      	ldr	r2, [pc, #256]	@ (8001c1c <voltageReadings+0x28c>)
 8001b1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t k = 0; k < 4; k++)
 8001b22:	797b      	ldrb	r3, [r7, #5]
 8001b24:	3301      	adds	r3, #1
 8001b26:	717b      	strb	r3, [r7, #5]
 8001b28:	797b      	ldrb	r3, [r7, #5]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d9ee      	bls.n	8001b0c <voltageReadings+0x17c>
 8001b2e:	e0c8      	b.n	8001cc2 <voltageReadings+0x332>
        }
      }
      else
      {
        spiVoltageErrorCounter[i] = 0; // Reset error counter
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4a36      	ldr	r2, [pc, #216]	@ (8001c0c <voltageReadings+0x27c>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	54d1      	strb	r1, [r2, r3]

        // check how many cells we should read from this register
        if (j == 4) // Last register
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d10c      	bne.n	8001b58 <voltageReadings+0x1c8>
        {
          if (nrOfCells[i] == 10) // Last register and 10 cells
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4a37      	ldr	r2, [pc, #220]	@ (8001c20 <voltageReadings+0x290>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	2b0a      	cmp	r3, #10
 8001b46:	d103      	bne.n	8001b50 <voltageReadings+0x1c0>
          {
            voltagesPerRegister = 1;
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <voltageReadings+0x294>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e006      	b.n	8001b5e <voltageReadings+0x1ce>
          }
          else // Last register and 11 cells
          {
            voltagesPerRegister = 2;
 8001b50:	4b34      	ldr	r3, [pc, #208]	@ (8001c24 <voltageReadings+0x294>)
 8001b52:	2202      	movs	r2, #2
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e002      	b.n	8001b5e <voltageReadings+0x1ce>
          }
        }
        else // Not last register
        {
          voltagesPerRegister = 3;
 8001b58:	4b32      	ldr	r3, [pc, #200]	@ (8001c24 <voltageReadings+0x294>)
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	701a      	strb	r2, [r3, #0]
        }

        for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach cell (in a register)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	713b      	strb	r3, [r7, #4]
 8001b62:	e0a8      	b.n	8001cb6 <voltageReadings+0x326>
        {
          rawVoltage = (spiRxData[2 * k + 1] << 8) | spiRxData[2*k];
 8001b64:	793b      	ldrb	r3, [r7, #4]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a25      	ldr	r2, [pc, #148]	@ (8001c00 <voltageReadings+0x270>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	b21a      	sxth	r2, r3
 8001b74:	793b      	ldrb	r3, [r7, #4]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4921      	ldr	r1, [pc, #132]	@ (8001c00 <voltageReadings+0x270>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <voltageReadings+0x298>)
 8001b86:	801a      	strh	r2, [r3, #0]
          rawVoltages[cellBaseNum[i] + j * 4 + k] = rawVoltage;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	4a23      	ldr	r2, [pc, #140]	@ (8001c18 <voltageReadings+0x288>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	441a      	add	r2, r3
 8001b96:	793b      	ldrb	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a23      	ldr	r2, [pc, #140]	@ (8001c28 <voltageReadings+0x298>)
 8001b9c:	8811      	ldrh	r1, [r2, #0]
 8001b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c1c <voltageReadings+0x28c>)
 8001ba0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

          // Check for OVP and UVP
          if (rawVoltage > OVP)
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <voltageReadings+0x298>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d941      	bls.n	8001c34 <voltageReadings+0x2a4>
          {
            ovpCounter[cellBaseNum[i] + j * 4 + k]++;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4a19      	ldr	r2, [pc, #100]	@ (8001c18 <voltageReadings+0x288>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	79bb      	ldrb	r3, [r7, #6]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	441a      	add	r2, r3
 8001bbe:	793b      	ldrb	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c2c <voltageReadings+0x29c>)
 8001bc4:	5cd2      	ldrb	r2, [r2, r3]
 8001bc6:	3201      	adds	r2, #1
 8001bc8:	b2d1      	uxtb	r1, r2
 8001bca:	4a18      	ldr	r2, [pc, #96]	@ (8001c2c <voltageReadings+0x29c>)
 8001bcc:	54d1      	strb	r1, [r2, r3]
            if (ovpCounter[cellBaseNum[i] + j * 4 + k] >= OVP_COUNT_THRESHOLD)
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <voltageReadings+0x288>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	441a      	add	r2, r3
 8001bdc:	793b      	ldrb	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <voltageReadings+0x29c>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	d931      	bls.n	8001c4c <voltageReadings+0x2bc>
            {
              ovpError = 1; // Set OVP error
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <voltageReadings+0x2a0>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e02d      	b.n	8001c4c <voltageReadings+0x2bc>
 8001bf0:	20000826 	.word	0x20000826
 8001bf4:	20000814 	.word	0x20000814
 8001bf8:	20000828 	.word	0x20000828
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	2000081c 	.word	0x2000081c
 8001c04:	2000016c 	.word	0x2000016c
 8001c08:	20000838 	.word	0x20000838
 8001c0c:	200007f8 	.word	0x200007f8
 8001c10:	2000083c 	.word	0x2000083c
 8001c14:	20000810 	.word	0x20000810
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	2000046c 	.word	0x2000046c
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000824 	.word	0x20000824
 8001c28:	2000082a 	.word	0x2000082a
 8001c2c:	200005e0 	.word	0x200005e0
 8001c30:	2000065e 	.word	0x2000065e
            }
          }
          else
          {
            ovpCounter[cellBaseNum[i] + j * 4 + k] = 0; // Reset counter
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce8 <voltageReadings+0x358>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	441a      	add	r2, r3
 8001c42:	793b      	ldrb	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a29      	ldr	r2, [pc, #164]	@ (8001cec <voltageReadings+0x35c>)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	54d1      	strb	r1, [r2, r3]
          }

          if (rawVoltage < UVP)
 8001c4c:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <voltageReadings+0x360>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d81f      	bhi.n	8001c98 <voltageReadings+0x308>
          {
            uvpCounter[cellBaseNum[i] + j * 4 + k]++;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <voltageReadings+0x358>)
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	441a      	add	r2, r3
 8001c66:	793b      	ldrb	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a22      	ldr	r2, [pc, #136]	@ (8001cf4 <voltageReadings+0x364>)
 8001c6c:	5cd2      	ldrb	r2, [r2, r3]
 8001c6e:	3201      	adds	r2, #1
 8001c70:	b2d1      	uxtb	r1, r2
 8001c72:	4a20      	ldr	r2, [pc, #128]	@ (8001cf4 <voltageReadings+0x364>)
 8001c74:	54d1      	strb	r1, [r2, r3]
            if (uvpCounter[cellBaseNum[i] + j * 4 + k] >= UVP_COUNT_THRESHOLD)
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce8 <voltageReadings+0x358>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	441a      	add	r2, r3
 8001c84:	793b      	ldrb	r3, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf4 <voltageReadings+0x364>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d90f      	bls.n	8001cb0 <voltageReadings+0x320>
            {
              uvpError = 1; // Set UVP error
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <voltageReadings+0x368>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e00b      	b.n	8001cb0 <voltageReadings+0x320>
            }
          }
          else
          {
            uvpCounter[cellBaseNum[i] + j * 4 + k] = 0; // Reset counter
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ce8 <voltageReadings+0x358>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	441a      	add	r2, r3
 8001ca6:	793b      	ldrb	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <voltageReadings+0x364>)
 8001cac:	2100      	movs	r1, #0
 8001cae:	54d1      	strb	r1, [r2, r3]
        for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach cell (in a register)
 8001cb0:	793b      	ldrb	r3, [r7, #4]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	713b      	strb	r3, [r7, #4]
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <voltageReadings+0x36c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	793a      	ldrb	r2, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f4ff af51 	bcc.w	8001b64 <voltageReadings+0x1d4>
    for (uint8_t j = 0; j < 4; j++) // foreach register (4 registers per slave)
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	71bb      	strb	r3, [r7, #6]
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	f67f ae69 	bls.w	80019a2 <voltageReadings+0x12>
  for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b0b      	cmp	r3, #11
 8001cda:	f67f ae5f 	bls.w	800199c <voltageReadings+0xc>
          }
        } // End foreach cell in register
      } // End check PEC
    } // End foreach register
  } // End foreach slave
}
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	200005e0 	.word	0x200005e0
 8001cf0:	2000082a 	.word	0x2000082a
 8001cf4:	20000660 	.word	0x20000660
 8001cf8:	200006de 	.word	0x200006de
 8001cfc:	20000824 	.word	0x20000824

08001d00 <temperatureReadings>:

static void temperatureReadings(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af02      	add	r7, sp, #8
  for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	e154      	b.n	8001fb6 <temperatureReadings+0x2b6>
  {
    for (uint8_t j = 0; j < 2; j++) // foreach register (2 registers per slave)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	71bb      	strb	r3, [r7, #6]
 8001d10:	e14a      	b.n	8001fa8 <temperatureReadings+0x2a8>
    {
      switch (j)
 8001d12:	79bb      	ldrb	r3, [r7, #6]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <temperatureReadings+0x1e>
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d010      	beq.n	8001d3e <temperatureReadings+0x3e>
 8001d1c:	e01f      	b.n	8001d5e <temperatureReadings+0x5e>
      {
      case 0:
        command = MAKEADDRCMD(i, RDAUXA);
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d30:	f043 030c 	orr.w	r3, r3, #12
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4ba3      	ldr	r3, [pc, #652]	@ (8001fc8 <temperatureReadings+0x2c8>)
 8001d3a:	801a      	strh	r2, [r3, #0]
        break;
 8001d3c:	e00f      	b.n	8001d5e <temperatureReadings+0x5e>
      case 1:
        command = MAKEADDRCMD(i, RDAUXB);
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d50:	f043 030e 	orr.w	r3, r3, #14
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4b9b      	ldr	r3, [pc, #620]	@ (8001fc8 <temperatureReadings+0x2c8>)
 8001d5a:	801a      	strh	r2, [r3, #0]
        break;
 8001d5c:	bf00      	nop
      }
      spiTxData[0] = command >> 8;
 8001d5e:	4b9a      	ldr	r3, [pc, #616]	@ (8001fc8 <temperatureReadings+0x2c8>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	4b98      	ldr	r3, [pc, #608]	@ (8001fcc <temperatureReadings+0x2cc>)
 8001d6a:	701a      	strb	r2, [r3, #0]
      spiTxData[1] = command & 0xFF;
 8001d6c:	4b96      	ldr	r3, [pc, #600]	@ (8001fc8 <temperatureReadings+0x2c8>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b96      	ldr	r3, [pc, #600]	@ (8001fcc <temperatureReadings+0x2cc>)
 8001d74:	705a      	strb	r2, [r3, #1]
      pec = pec15_calc(2, spiTxData);
 8001d76:	4995      	ldr	r1, [pc, #596]	@ (8001fcc <temperatureReadings+0x2cc>)
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff f859 	bl	8000e30 <pec15_calc>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b93      	ldr	r3, [pc, #588]	@ (8001fd0 <temperatureReadings+0x2d0>)
 8001d84:	801a      	strh	r2, [r3, #0]
      spiTxData[2] = pec >> 8;
 8001d86:	4b92      	ldr	r3, [pc, #584]	@ (8001fd0 <temperatureReadings+0x2d0>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b8e      	ldr	r3, [pc, #568]	@ (8001fcc <temperatureReadings+0x2cc>)
 8001d92:	709a      	strb	r2, [r3, #2]
      spiTxData[3] = pec & 0xFF;
 8001d94:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd0 <temperatureReadings+0x2d0>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b8c      	ldr	r3, [pc, #560]	@ (8001fcc <temperatureReadings+0x2cc>)
 8001d9c:	70da      	strb	r2, [r3, #3]
      HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2110      	movs	r1, #16
 8001da2:	488c      	ldr	r0, [pc, #560]	@ (8001fd4 <temperatureReadings+0x2d4>)
 8001da4:	f005 fc36 	bl	8007614 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, spiTxData, spiRxData, 4+8, HAL_MAX_DELAY);
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	230c      	movs	r3, #12
 8001db0:	4a89      	ldr	r2, [pc, #548]	@ (8001fd8 <temperatureReadings+0x2d8>)
 8001db2:	4986      	ldr	r1, [pc, #536]	@ (8001fcc <temperatureReadings+0x2cc>)
 8001db4:	4889      	ldr	r0, [pc, #548]	@ (8001fdc <temperatureReadings+0x2dc>)
 8001db6:	f006 fa52 	bl	800825e <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	4885      	ldr	r0, [pc, #532]	@ (8001fd4 <temperatureReadings+0x2d4>)
 8001dc0:	f005 fc28 	bl	8007614 <HAL_GPIO_WritePin>
      isospiRxCount++;
 8001dc4:	4b86      	ldr	r3, [pc, #536]	@ (8001fe0 <temperatureReadings+0x2e0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a85      	ldr	r2, [pc, #532]	@ (8001fe0 <temperatureReadings+0x2e0>)
 8001dcc:	6013      	str	r3, [r2, #0]
      // check PEC
      pec = (0xFF00 & (spiRxData[6] << 8)) | (0xFF & spiRxData[7]);
 8001dce:	4b82      	ldr	r3, [pc, #520]	@ (8001fd8 <temperatureReadings+0x2d8>)
 8001dd0:	799b      	ldrb	r3, [r3, #6]
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fd8 <temperatureReadings+0x2d8>)
 8001dda:	79db      	ldrb	r3, [r3, #7]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd0 <temperatureReadings+0x2d0>)
 8001de6:	801a      	strh	r2, [r3, #0]
      if (pec != pec15_calc(6, spiRxData))
 8001de8:	497b      	ldr	r1, [pc, #492]	@ (8001fd8 <temperatureReadings+0x2d8>)
 8001dea:	2006      	movs	r0, #6
 8001dec:	f7ff f820 	bl	8000e30 <pec15_calc>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b76      	ldr	r3, [pc, #472]	@ (8001fd0 <temperatureReadings+0x2d0>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d028      	beq.n	8001e4e <temperatureReadings+0x14e>
      {
        spiTemperatureErrorCounter[i]++;
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4a79      	ldr	r2, [pc, #484]	@ (8001fe4 <temperatureReadings+0x2e4>)
 8001e00:	5cd2      	ldrb	r2, [r2, r3]
 8001e02:	3201      	adds	r2, #1
 8001e04:	b2d1      	uxtb	r1, r2
 8001e06:	4a77      	ldr	r2, [pc, #476]	@ (8001fe4 <temperatureReadings+0x2e4>)
 8001e08:	54d1      	strb	r1, [r2, r3]
        isospiRxErrorCount++;
 8001e0a:	4b77      	ldr	r3, [pc, #476]	@ (8001fe8 <temperatureReadings+0x2e8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <temperatureReadings+0x2e8>)
 8001e12:	6013      	str	r3, [r2, #0]
        // check if we have too many errors
        if (spiTemperatureErrorCounter[i] >= SPI_ERROR_COUNT_THRESHOLD)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4a73      	ldr	r2, [pc, #460]	@ (8001fe4 <temperatureReadings+0x2e4>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d902      	bls.n	8001e24 <temperatureReadings+0x124>
        {
          spiError = 1; // Set SPI error
 8001e1e:	4b73      	ldr	r3, [pc, #460]	@ (8001fec <temperatureReadings+0x2ec>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
        }
        for (uint8_t k = 0; k < 4; k++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	717b      	strb	r3, [r7, #5]
 8001e28:	e00d      	b.n	8001e46 <temperatureReadings+0x146>
        {
          rawTemps[cellBaseNum[i] + k] = 0xFFFF; // Set to invalid value
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4a70      	ldr	r2, [pc, #448]	@ (8001ff0 <temperatureReadings+0x2f0>)
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	461a      	mov	r2, r3
 8001e32:	797b      	ldrb	r3, [r7, #5]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a6f      	ldr	r2, [pc, #444]	@ (8001ff4 <temperatureReadings+0x2f4>)
 8001e38:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t k = 0; k < 4; k++)
 8001e40:	797b      	ldrb	r3, [r7, #5]
 8001e42:	3301      	adds	r3, #1
 8001e44:	717b      	strb	r3, [r7, #5]
 8001e46:	797b      	ldrb	r3, [r7, #5]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d9ee      	bls.n	8001e2a <temperatureReadings+0x12a>
 8001e4c:	e0a9      	b.n	8001fa2 <temperatureReadings+0x2a2>
        }
      } else
      {
        spiTemperatureErrorCounter[i] = 0; // Reset error counter
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4a64      	ldr	r2, [pc, #400]	@ (8001fe4 <temperatureReadings+0x2e4>)
 8001e52:	2100      	movs	r1, #0
 8001e54:	54d1      	strb	r1, [r2, r3]
        // check how many temperatures we should read from this register
        voltagesPerRegister = (j==0) ? 3 : 2;
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <temperatureReadings+0x160>
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	e000      	b.n	8001e62 <temperatureReadings+0x162>
 8001e60:	2202      	movs	r2, #2
 8001e62:	4b65      	ldr	r3, [pc, #404]	@ (8001ff8 <temperatureReadings+0x2f8>)
 8001e64:	701a      	strb	r2, [r3, #0]
        for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach temperature in register
 8001e66:	2300      	movs	r3, #0
 8001e68:	713b      	strb	r3, [r7, #4]
 8001e6a:	e094      	b.n	8001f96 <temperatureReadings+0x296>
        {
          rawTemp = (spiRxData[2 * k + 1] << 8) | spiRxData[2 * k];
 8001e6c:	793b      	ldrb	r3, [r7, #4]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	3301      	adds	r3, #1
 8001e72:	4a59      	ldr	r2, [pc, #356]	@ (8001fd8 <temperatureReadings+0x2d8>)
 8001e74:	5cd3      	ldrb	r3, [r2, r3]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	793b      	ldrb	r3, [r7, #4]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4955      	ldr	r1, [pc, #340]	@ (8001fd8 <temperatureReadings+0x2d8>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001ffc <temperatureReadings+0x2fc>)
 8001e8e:	801a      	strh	r2, [r3, #0]
          rawTemps[i * 12 + j * 2 + k] = rawTemp;
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005a      	lsls	r2, r3, #1
 8001ea2:	793b      	ldrb	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a55      	ldr	r2, [pc, #340]	@ (8001ffc <temperatureReadings+0x2fc>)
 8001ea8:	8811      	ldrh	r1, [r2, #0]
 8001eaa:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <temperatureReadings+0x2f4>)
 8001eac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

          // Check for OTP and UTP
          if (rawTemp > OTP)
 8001eb0:	4b52      	ldr	r3, [pc, #328]	@ (8001ffc <temperatureReadings+0x2fc>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	f641 2270 	movw	r2, #6768	@ 0x1a70
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d923      	bls.n	8001f04 <temperatureReadings+0x204>
          {
            otpCounter[i * 12 + j * 2 + k]++;
 8001ebc:	79fa      	ldrb	r2, [r7, #7]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	79bb      	ldrb	r3, [r7, #6]
 8001eca:	4413      	add	r3, r2
 8001ecc:	005a      	lsls	r2, r3, #1
 8001ece:	793b      	ldrb	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a4b      	ldr	r2, [pc, #300]	@ (8002000 <temperatureReadings+0x300>)
 8001ed4:	5cd2      	ldrb	r2, [r2, r3]
 8001ed6:	3201      	adds	r2, #1
 8001ed8:	b2d1      	uxtb	r1, r2
 8001eda:	4a49      	ldr	r2, [pc, #292]	@ (8002000 <temperatureReadings+0x300>)
 8001edc:	54d1      	strb	r1, [r2, r3]
            if (otpCounter[i * 12 + j * 2 + k] >= OTP_COUNT_THRESHOLD)
 8001ede:	79fa      	ldrb	r2, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	461a      	mov	r2, r3
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	4413      	add	r3, r2
 8001eee:	005a      	lsls	r2, r3, #1
 8001ef0:	793b      	ldrb	r3, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a42      	ldr	r2, [pc, #264]	@ (8002000 <temperatureReadings+0x300>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	2b13      	cmp	r3, #19
 8001efa:	d911      	bls.n	8001f20 <temperatureReadings+0x220>
            {
              otpError = 1; // Set OTP error
 8001efc:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <temperatureReadings+0x304>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e00d      	b.n	8001f20 <temperatureReadings+0x220>
            }
          } else
          {
            otpCounter[i * 12 + j * 2 + k] = 0; // Reset counter
 8001f04:	79fa      	ldrb	r2, [r7, #7]
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	461a      	mov	r2, r3
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	4413      	add	r3, r2
 8001f14:	005a      	lsls	r2, r3, #1
 8001f16:	793b      	ldrb	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	4a39      	ldr	r2, [pc, #228]	@ (8002000 <temperatureReadings+0x300>)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	54d1      	strb	r1, [r2, r3]
          }

          if (rawTemp < UTP)
 8001f20:	4b36      	ldr	r3, [pc, #216]	@ (8001ffc <temperatureReadings+0x2fc>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f246 02db 	movw	r2, #24795	@ 0x60db
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d823      	bhi.n	8001f74 <temperatureReadings+0x274>
          {
            utpCounter[i * 12 + j * 2 + k]++;
 8001f2c:	79fa      	ldrb	r2, [r7, #7]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	461a      	mov	r2, r3
 8001f38:	79bb      	ldrb	r3, [r7, #6]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	005a      	lsls	r2, r3, #1
 8001f3e:	793b      	ldrb	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <temperatureReadings+0x308>)
 8001f44:	5cd2      	ldrb	r2, [r2, r3]
 8001f46:	3201      	adds	r2, #1
 8001f48:	b2d1      	uxtb	r1, r2
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002008 <temperatureReadings+0x308>)
 8001f4c:	54d1      	strb	r1, [r2, r3]
            if (utpCounter[i * 12 + j * 2 + k] >= UTP_COUNT_THRESHOLD)
 8001f4e:	79fa      	ldrb	r2, [r7, #7]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	461a      	mov	r2, r3
 8001f5a:	79bb      	ldrb	r3, [r7, #6]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	005a      	lsls	r2, r3, #1
 8001f60:	793b      	ldrb	r3, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a28      	ldr	r2, [pc, #160]	@ (8002008 <temperatureReadings+0x308>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	2b13      	cmp	r3, #19
 8001f6a:	d911      	bls.n	8001f90 <temperatureReadings+0x290>
            {
              utpError = 1; // Set UTP error
 8001f6c:	4b27      	ldr	r3, [pc, #156]	@ (800200c <temperatureReadings+0x30c>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e00d      	b.n	8001f90 <temperatureReadings+0x290>
            }
          } else
          {
            utpCounter[i * 12 + j * 2 + k] = 0; // Reset counter
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	461a      	mov	r2, r3
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	4413      	add	r3, r2
 8001f84:	005a      	lsls	r2, r3, #1
 8001f86:	793b      	ldrb	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002008 <temperatureReadings+0x308>)
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	54d1      	strb	r1, [r2, r3]
        for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach temperature in register
 8001f90:	793b      	ldrb	r3, [r7, #4]
 8001f92:	3301      	adds	r3, #1
 8001f94:	713b      	strb	r3, [r7, #4]
 8001f96:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <temperatureReadings+0x2f8>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	793a      	ldrb	r2, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f4ff af65 	bcc.w	8001e6c <temperatureReadings+0x16c>
    for (uint8_t j = 0; j < 2; j++) // foreach register (2 registers per slave)
 8001fa2:	79bb      	ldrb	r3, [r7, #6]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	71bb      	strb	r3, [r7, #6]
 8001fa8:	79bb      	ldrb	r3, [r7, #6]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	f67f aeb1 	bls.w	8001d12 <temperatureReadings+0x12>
  for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	71fb      	strb	r3, [r7, #7]
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b0b      	cmp	r3, #11
 8001fba:	f67f aea7 	bls.w	8001d0c <temperatureReadings+0xc>
        } // End foreach temperature in register
      } // End check PEC
    } // End foreach register
  } // End foreach slave

}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000826 	.word	0x20000826
 8001fcc:	20000814 	.word	0x20000814
 8001fd0:	20000828 	.word	0x20000828
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	2000081c 	.word	0x2000081c
 8001fdc:	2000016c 	.word	0x2000016c
 8001fe0:	20000838 	.word	0x20000838
 8001fe4:	200007e0 	.word	0x200007e0
 8001fe8:	2000083c 	.word	0x2000083c
 8001fec:	20000810 	.word	0x20000810
 8001ff0:	2000000c 	.word	0x2000000c
 8001ff4:	20000568 	.word	0x20000568
 8001ff8:	20000824 	.word	0x20000824
 8001ffc:	2000082c 	.word	0x2000082c
 8002000:	200006e0 	.word	0x200006e0
 8002004:	2000075e 	.word	0x2000075e
 8002008:	20000760 	.word	0x20000760
 800200c:	200007de 	.word	0x200007de

08002010 <voltageSendCan>:

static void voltageSendCan(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  switch (amsTxMessageCounter)
 8002014:	4b84      	ldr	r3, [pc, #528]	@ (8002228 <voltageSendCan+0x218>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b17      	cmp	r3, #23
 800201a:	f202 82ce 	bhi.w	80045ba <voltageSendCan+0x25aa>
 800201e:	a201      	add	r2, pc, #4	@ (adr r2, 8002024 <voltageSendCan+0x14>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002085 	.word	0x08002085
 8002028:	08002241 	.word	0x08002241
 800202c:	080023a3 	.word	0x080023a3
 8002030:	08002561 	.word	0x08002561
 8002034:	08002689 	.word	0x08002689
 8002038:	08002849 	.word	0x08002849
 800203c:	080029ab 	.word	0x080029ab
 8002040:	08002b79 	.word	0x08002b79
 8002044:	08002ca9 	.word	0x08002ca9
 8002048:	08002e71 	.word	0x08002e71
 800204c:	08002fdd 	.word	0x08002fdd
 8002050:	080031a9 	.word	0x080031a9
 8002054:	080032d9 	.word	0x080032d9
 8002058:	080034a1 	.word	0x080034a1
 800205c:	0800360d 	.word	0x0800360d
 8002060:	080037d9 	.word	0x080037d9
 8002064:	08003909 	.word	0x08003909
 8002068:	08003ad1 	.word	0x08003ad1
 800206c:	08003c3d 	.word	0x08003c3d
 8002070:	08003e09 	.word	0x08003e09
 8002074:	08003f37 	.word	0x08003f37
 8002078:	08004101 	.word	0x08004101
 800207c:	0800426b 	.word	0x0800426b
 8002080:	08004431 	.word	0x08004431
  {
  case 0:
    can1_ams_s01_voltages_1.s01v01 = can1_ams_s01_voltages_1_s01v01_encode((float)rawVoltages[0] / 10000.0);
 8002084:	4b69      	ldr	r3, [pc, #420]	@ (800222c <voltageSendCan+0x21c>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002090:	ee17 0a90 	vmov	r0, s15
 8002094:	f7fe f9fc 	bl	8000490 <__aeabi_f2d>
 8002098:	a361      	add	r3, pc, #388	@ (adr r3, 8002220 <voltageSendCan+0x210>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe fb79 	bl	8000794 <__aeabi_ddiv>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	ec43 2b17 	vmov	d7, r2, r3
 80020aa:	eeb0 0a47 	vmov.f32	s0, s14
 80020ae:	eef0 0a67 	vmov.f32	s1, s15
 80020b2:	f007 fd1d 	bl	8009af0 <can1_ams_s01_voltages_1_s01v01_encode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002230 <voltageSendCan+0x220>)
 80020bc:	701a      	strb	r2, [r3, #0]
    can1_ams_s01_voltages_1.s01v02 = can1_ams_s01_voltages_1_s01v02_encode((float)rawVoltages[1] / 10000.0);
 80020be:	4b5b      	ldr	r3, [pc, #364]	@ (800222c <voltageSendCan+0x21c>)
 80020c0:	885b      	ldrh	r3, [r3, #2]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	ee17 0a90 	vmov	r0, s15
 80020ce:	f7fe f9df 	bl	8000490 <__aeabi_f2d>
 80020d2:	a353      	add	r3, pc, #332	@ (adr r3, 8002220 <voltageSendCan+0x210>)
 80020d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d8:	f7fe fb5c 	bl	8000794 <__aeabi_ddiv>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	ec43 2b17 	vmov	d7, r2, r3
 80020e4:	eeb0 0a47 	vmov.f32	s0, s14
 80020e8:	eef0 0a67 	vmov.f32	s1, s15
 80020ec:	f007 fd2c 	bl	8009b48 <can1_ams_s01_voltages_1_s01v02_encode>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002230 <voltageSendCan+0x220>)
 80020f6:	705a      	strb	r2, [r3, #1]
    can1_ams_s01_voltages_1.s01v03 = can1_ams_s01_voltages_1_s01v03_encode((float)rawVoltages[2] / 10000.0);
 80020f8:	4b4c      	ldr	r3, [pc, #304]	@ (800222c <voltageSendCan+0x21c>)
 80020fa:	889b      	ldrh	r3, [r3, #4]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002104:	ee17 0a90 	vmov	r0, s15
 8002108:	f7fe f9c2 	bl	8000490 <__aeabi_f2d>
 800210c:	a344      	add	r3, pc, #272	@ (adr r3, 8002220 <voltageSendCan+0x210>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe fb3f 	bl	8000794 <__aeabi_ddiv>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	ec43 2b17 	vmov	d7, r2, r3
 800211e:	eeb0 0a47 	vmov.f32	s0, s14
 8002122:	eef0 0a67 	vmov.f32	s1, s15
 8002126:	f007 fd3b 	bl	8009ba0 <can1_ams_s01_voltages_1_s01v03_encode>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	4b40      	ldr	r3, [pc, #256]	@ (8002230 <voltageSendCan+0x220>)
 8002130:	709a      	strb	r2, [r3, #2]
    can1_ams_s01_voltages_1.s01v04 = can1_ams_s01_voltages_1_s01v04_encode((float)rawVoltages[3] / 10000.0);
 8002132:	4b3e      	ldr	r3, [pc, #248]	@ (800222c <voltageSendCan+0x21c>)
 8002134:	88db      	ldrh	r3, [r3, #6]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213e:	ee17 0a90 	vmov	r0, s15
 8002142:	f7fe f9a5 	bl	8000490 <__aeabi_f2d>
 8002146:	a336      	add	r3, pc, #216	@ (adr r3, 8002220 <voltageSendCan+0x210>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f7fe fb22 	bl	8000794 <__aeabi_ddiv>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	ec43 2b17 	vmov	d7, r2, r3
 8002158:	eeb0 0a47 	vmov.f32	s0, s14
 800215c:	eef0 0a67 	vmov.f32	s1, s15
 8002160:	f007 fd4a 	bl	8009bf8 <can1_ams_s01_voltages_1_s01v04_encode>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	4b31      	ldr	r3, [pc, #196]	@ (8002230 <voltageSendCan+0x220>)
 800216a:	70da      	strb	r2, [r3, #3]
    can1_ams_s01_voltages_1.s01v05 = can1_ams_s01_voltages_1_s01v05_encode((float)rawVoltages[4] / 10000.0);
 800216c:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <voltageSendCan+0x21c>)
 800216e:	891b      	ldrh	r3, [r3, #8]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002178:	ee17 0a90 	vmov	r0, s15
 800217c:	f7fe f988 	bl	8000490 <__aeabi_f2d>
 8002180:	a327      	add	r3, pc, #156	@ (adr r3, 8002220 <voltageSendCan+0x210>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe fb05 	bl	8000794 <__aeabi_ddiv>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ec43 2b17 	vmov	d7, r2, r3
 8002192:	eeb0 0a47 	vmov.f32	s0, s14
 8002196:	eef0 0a67 	vmov.f32	s1, s15
 800219a:	f007 fd59 	bl	8009c50 <can1_ams_s01_voltages_1_s01v05_encode>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <voltageSendCan+0x220>)
 80021a4:	711a      	strb	r2, [r3, #4]
    can1_ams_s01_voltages_1.s01v06 = can1_ams_s01_voltages_1_s01v06_encode((float)rawVoltages[5] / 10000.0);
 80021a6:	4b21      	ldr	r3, [pc, #132]	@ (800222c <voltageSendCan+0x21c>)
 80021a8:	895b      	ldrh	r3, [r3, #10]
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b2:	ee17 0a90 	vmov	r0, s15
 80021b6:	f7fe f96b 	bl	8000490 <__aeabi_f2d>
 80021ba:	a319      	add	r3, pc, #100	@ (adr r3, 8002220 <voltageSendCan+0x210>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe fae8 	bl	8000794 <__aeabi_ddiv>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	ec43 2b17 	vmov	d7, r2, r3
 80021cc:	eeb0 0a47 	vmov.f32	s0, s14
 80021d0:	eef0 0a67 	vmov.f32	s1, s15
 80021d4:	f007 fd68 	bl	8009ca8 <can1_ams_s01_voltages_1_s01v06_encode>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <voltageSendCan+0x220>)
 80021de:	715a      	strb	r2, [r3, #5]

    can1_ams_s01_voltages_1_pack(txData, &can1_ams_s01_voltages_1, CAN1_AMS_S01_VOLTAGES_1_LENGTH);
 80021e0:	2206      	movs	r2, #6
 80021e2:	4913      	ldr	r1, [pc, #76]	@ (8002230 <voltageSendCan+0x220>)
 80021e4:	4813      	ldr	r0, [pc, #76]	@ (8002234 <voltageSendCan+0x224>)
 80021e6:	f007 fc08 	bl	80099fa <can1_ams_s01_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S01_VOLTAGES_1_FRAME_ID;
 80021ea:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <voltageSendCan+0x228>)
 80021ec:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80021f0:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S01_VOLTAGES_1_LENGTH;
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <voltageSendCan+0x228>)
 80021f4:	2206      	movs	r2, #6
 80021f6:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80021f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <voltageSendCan+0x228>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <voltageSendCan+0x228>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002204:	2300      	movs	r3, #0
 8002206:	4a0b      	ldr	r2, [pc, #44]	@ (8002234 <voltageSendCan+0x224>)
 8002208:	490b      	ldr	r1, [pc, #44]	@ (8002238 <voltageSendCan+0x228>)
 800220a:	480c      	ldr	r0, [pc, #48]	@ (800223c <voltageSendCan+0x22c>)
 800220c:	f004 fd4e 	bl	8006cac <HAL_CAN_AddTxMessage>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	f002 81a2 	beq.w	800455c <voltageSendCan+0x254c>
      Error_Handler();
 8002218:	f003 fce0 	bl	8005bdc <Error_Handler>
    break;
 800221c:	f002 b99e 	b.w	800455c <voltageSendCan+0x254c>
 8002220:	00000000 	.word	0x00000000
 8002224:	40c38800 	.word	0x40c38800
 8002228:	20000811 	.word	0x20000811
 800222c:	2000046c 	.word	0x2000046c
 8002230:	200002d8 	.word	0x200002d8
 8002234:	20000288 	.word	0x20000288
 8002238:	20000254 	.word	0x20000254
 800223c:	2000011c 	.word	0x2000011c

  case 1:
    can1_ams_s01_voltages_2.s01v07 = can1_ams_s01_voltages_2_s01v07_encode((float) rawVoltages[6] / 10000.0);
 8002240:	4bc1      	ldr	r3, [pc, #772]	@ (8002548 <voltageSendCan+0x538>)
 8002242:	899b      	ldrh	r3, [r3, #12]
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224c:	ee17 0a90 	vmov	r0, s15
 8002250:	f7fe f91e 	bl	8000490 <__aeabi_f2d>
 8002254:	a3ba      	add	r3, pc, #744	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f7fe fa9b 	bl	8000794 <__aeabi_ddiv>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	ec43 2b17 	vmov	d7, r2, r3
 8002266:	eeb0 0a47 	vmov.f32	s0, s14
 800226a:	eef0 0a67 	vmov.f32	s1, s15
 800226e:	f007 fdaf 	bl	8009dd0 <can1_ams_s01_voltages_2_s01v07_encode>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	4bb5      	ldr	r3, [pc, #724]	@ (800254c <voltageSendCan+0x53c>)
 8002278:	701a      	strb	r2, [r3, #0]
    can1_ams_s01_voltages_2.s01v08 = can1_ams_s01_voltages_2_s01v08_encode((float) rawVoltages[7] / 10000.0);
 800227a:	4bb3      	ldr	r3, [pc, #716]	@ (8002548 <voltageSendCan+0x538>)
 800227c:	89db      	ldrh	r3, [r3, #14]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	ee17 0a90 	vmov	r0, s15
 800228a:	f7fe f901 	bl	8000490 <__aeabi_f2d>
 800228e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe fa7e 	bl	8000794 <__aeabi_ddiv>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	ec43 2b17 	vmov	d7, r2, r3
 80022a0:	eeb0 0a47 	vmov.f32	s0, s14
 80022a4:	eef0 0a67 	vmov.f32	s1, s15
 80022a8:	f007 fdbe 	bl	8009e28 <can1_ams_s01_voltages_2_s01v08_encode>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	4ba6      	ldr	r3, [pc, #664]	@ (800254c <voltageSendCan+0x53c>)
 80022b2:	705a      	strb	r2, [r3, #1]
    can1_ams_s01_voltages_2.s01v09 = can1_ams_s01_voltages_2_s01v09_encode((float) rawVoltages[8] / 10000.0);
 80022b4:	4ba4      	ldr	r3, [pc, #656]	@ (8002548 <voltageSendCan+0x538>)
 80022b6:	8a1b      	ldrh	r3, [r3, #16]
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c0:	ee17 0a90 	vmov	r0, s15
 80022c4:	f7fe f8e4 	bl	8000490 <__aeabi_f2d>
 80022c8:	a39d      	add	r3, pc, #628	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fe fa61 	bl	8000794 <__aeabi_ddiv>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	ec43 2b17 	vmov	d7, r2, r3
 80022da:	eeb0 0a47 	vmov.f32	s0, s14
 80022de:	eef0 0a67 	vmov.f32	s1, s15
 80022e2:	f007 fdcd 	bl	8009e80 <can1_ams_s01_voltages_2_s01v09_encode>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b98      	ldr	r3, [pc, #608]	@ (800254c <voltageSendCan+0x53c>)
 80022ec:	709a      	strb	r2, [r3, #2]
    can1_ams_s01_voltages_2.s01v10 = can1_ams_s01_voltages_2_s01v10_encode((float) rawVoltages[9] / 10000.0);
 80022ee:	4b96      	ldr	r3, [pc, #600]	@ (8002548 <voltageSendCan+0x538>)
 80022f0:	8a5b      	ldrh	r3, [r3, #18]
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	ee17 0a90 	vmov	r0, s15
 80022fe:	f7fe f8c7 	bl	8000490 <__aeabi_f2d>
 8002302:	a38f      	add	r3, pc, #572	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe fa44 	bl	8000794 <__aeabi_ddiv>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	ec43 2b17 	vmov	d7, r2, r3
 8002314:	eeb0 0a47 	vmov.f32	s0, s14
 8002318:	eef0 0a67 	vmov.f32	s1, s15
 800231c:	f007 fddc 	bl	8009ed8 <can1_ams_s01_voltages_2_s01v10_encode>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	4b89      	ldr	r3, [pc, #548]	@ (800254c <voltageSendCan+0x53c>)
 8002326:	70da      	strb	r2, [r3, #3]
    can1_ams_s01_voltages_2.s01v11 = can1_ams_s01_voltages_2_s01v11_encode((float) rawVoltages[10] / 10000.0);
 8002328:	4b87      	ldr	r3, [pc, #540]	@ (8002548 <voltageSendCan+0x538>)
 800232a:	8a9b      	ldrh	r3, [r3, #20]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002334:	ee17 0a90 	vmov	r0, s15
 8002338:	f7fe f8aa 	bl	8000490 <__aeabi_f2d>
 800233c:	a380      	add	r3, pc, #512	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe fa27 	bl	8000794 <__aeabi_ddiv>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	ec43 2b17 	vmov	d7, r2, r3
 800234e:	eeb0 0a47 	vmov.f32	s0, s14
 8002352:	eef0 0a67 	vmov.f32	s1, s15
 8002356:	f007 fdeb 	bl	8009f30 <can1_ams_s01_voltages_2_s01v11_encode>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	4b7b      	ldr	r3, [pc, #492]	@ (800254c <voltageSendCan+0x53c>)
 8002360:	711a      	strb	r2, [r3, #4]

    can1_ams_s01_voltages_2_pack(txData, &can1_ams_s01_voltages_2, CAN1_AMS_S01_VOLTAGES_2_LENGTH);
 8002362:	2205      	movs	r2, #5
 8002364:	4979      	ldr	r1, [pc, #484]	@ (800254c <voltageSendCan+0x53c>)
 8002366:	487a      	ldr	r0, [pc, #488]	@ (8002550 <voltageSendCan+0x540>)
 8002368:	f007 fcc8 	bl	8009cfc <can1_ams_s01_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S01_VOLTAGES_2_FRAME_ID;
 800236c:	4b79      	ldr	r3, [pc, #484]	@ (8002554 <voltageSendCan+0x544>)
 800236e:	f240 2259 	movw	r2, #601	@ 0x259
 8002372:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S01_VOLTAGES_2_LENGTH;
 8002374:	4b77      	ldr	r3, [pc, #476]	@ (8002554 <voltageSendCan+0x544>)
 8002376:	2205      	movs	r2, #5
 8002378:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800237a:	4b76      	ldr	r3, [pc, #472]	@ (8002554 <voltageSendCan+0x544>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002380:	4b74      	ldr	r3, [pc, #464]	@ (8002554 <voltageSendCan+0x544>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002386:	2300      	movs	r3, #0
 8002388:	4a71      	ldr	r2, [pc, #452]	@ (8002550 <voltageSendCan+0x540>)
 800238a:	4972      	ldr	r1, [pc, #456]	@ (8002554 <voltageSendCan+0x544>)
 800238c:	4872      	ldr	r0, [pc, #456]	@ (8002558 <voltageSendCan+0x548>)
 800238e:	f004 fc8d 	bl	8006cac <HAL_CAN_AddTxMessage>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	f002 80e3 	beq.w	8004560 <voltageSendCan+0x2550>
      Error_Handler();
 800239a:	f003 fc1f 	bl	8005bdc <Error_Handler>
    break;
 800239e:	f002 b8df 	b.w	8004560 <voltageSendCan+0x2550>

  case 2:
    can1_ams_s02_voltages_1.s02v01 = can1_ams_s02_voltages_1_s02v01_encode((float) rawVoltages[11] / 10000.0);
 80023a2:	4b69      	ldr	r3, [pc, #420]	@ (8002548 <voltageSendCan+0x538>)
 80023a4:	8adb      	ldrh	r3, [r3, #22]
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ae:	ee17 0a90 	vmov	r0, s15
 80023b2:	f7fe f86d 	bl	8000490 <__aeabi_f2d>
 80023b6:	a362      	add	r3, pc, #392	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fe f9ea 	bl	8000794 <__aeabi_ddiv>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	ec43 2b17 	vmov	d7, r2, r3
 80023c8:	eeb0 0a47 	vmov.f32	s0, s14
 80023cc:	eef0 0a67 	vmov.f32	s1, s15
 80023d0:	f007 fe52 	bl	800a078 <can1_ams_s02_voltages_1_s02v01_encode>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b60      	ldr	r3, [pc, #384]	@ (800255c <voltageSendCan+0x54c>)
 80023da:	701a      	strb	r2, [r3, #0]
    can1_ams_s02_voltages_1.s02v02 = can1_ams_s02_voltages_1_s02v02_encode((float) rawVoltages[12] / 10000.0);
 80023dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002548 <voltageSendCan+0x538>)
 80023de:	8b1b      	ldrh	r3, [r3, #24]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e8:	ee17 0a90 	vmov	r0, s15
 80023ec:	f7fe f850 	bl	8000490 <__aeabi_f2d>
 80023f0:	a353      	add	r3, pc, #332	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f9cd 	bl	8000794 <__aeabi_ddiv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	ec43 2b17 	vmov	d7, r2, r3
 8002402:	eeb0 0a47 	vmov.f32	s0, s14
 8002406:	eef0 0a67 	vmov.f32	s1, s15
 800240a:	f007 fe61 	bl	800a0d0 <can1_ams_s02_voltages_1_s02v02_encode>
 800240e:	4603      	mov	r3, r0
 8002410:	461a      	mov	r2, r3
 8002412:	4b52      	ldr	r3, [pc, #328]	@ (800255c <voltageSendCan+0x54c>)
 8002414:	705a      	strb	r2, [r3, #1]
    can1_ams_s02_voltages_1.s02v03 = can1_ams_s02_voltages_1_s02v03_encode((float) rawVoltages[13] / 10000.0);
 8002416:	4b4c      	ldr	r3, [pc, #304]	@ (8002548 <voltageSendCan+0x538>)
 8002418:	8b5b      	ldrh	r3, [r3, #26]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	ee17 0a90 	vmov	r0, s15
 8002426:	f7fe f833 	bl	8000490 <__aeabi_f2d>
 800242a:	a345      	add	r3, pc, #276	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe f9b0 	bl	8000794 <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	ec43 2b17 	vmov	d7, r2, r3
 800243c:	eeb0 0a47 	vmov.f32	s0, s14
 8002440:	eef0 0a67 	vmov.f32	s1, s15
 8002444:	f007 fe70 	bl	800a128 <can1_ams_s02_voltages_1_s02v03_encode>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	4b43      	ldr	r3, [pc, #268]	@ (800255c <voltageSendCan+0x54c>)
 800244e:	709a      	strb	r2, [r3, #2]
    can1_ams_s02_voltages_1.s02v04 = can1_ams_s02_voltages_1_s02v04_encode((float) rawVoltages[14] / 10000.0);
 8002450:	4b3d      	ldr	r3, [pc, #244]	@ (8002548 <voltageSendCan+0x538>)
 8002452:	8b9b      	ldrh	r3, [r3, #28]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245c:	ee17 0a90 	vmov	r0, s15
 8002460:	f7fe f816 	bl	8000490 <__aeabi_f2d>
 8002464:	a336      	add	r3, pc, #216	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f993 	bl	8000794 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	ec43 2b17 	vmov	d7, r2, r3
 8002476:	eeb0 0a47 	vmov.f32	s0, s14
 800247a:	eef0 0a67 	vmov.f32	s1, s15
 800247e:	f007 fe7f 	bl	800a180 <can1_ams_s02_voltages_1_s02v04_encode>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	4b35      	ldr	r3, [pc, #212]	@ (800255c <voltageSendCan+0x54c>)
 8002488:	70da      	strb	r2, [r3, #3]
    can1_ams_s02_voltages_1.s02v05 = can1_ams_s02_voltages_1_s02v05_encode((float) rawVoltages[15] / 10000.0);
 800248a:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <voltageSendCan+0x538>)
 800248c:	8bdb      	ldrh	r3, [r3, #30]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002496:	ee17 0a90 	vmov	r0, s15
 800249a:	f7fd fff9 	bl	8000490 <__aeabi_f2d>
 800249e:	a328      	add	r3, pc, #160	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f976 	bl	8000794 <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	ec43 2b17 	vmov	d7, r2, r3
 80024b0:	eeb0 0a47 	vmov.f32	s0, s14
 80024b4:	eef0 0a67 	vmov.f32	s1, s15
 80024b8:	f007 fe8e 	bl	800a1d8 <can1_ams_s02_voltages_1_s02v05_encode>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b26      	ldr	r3, [pc, #152]	@ (800255c <voltageSendCan+0x54c>)
 80024c2:	711a      	strb	r2, [r3, #4]
    can1_ams_s02_voltages_1.s02v06 = can1_ams_s02_voltages_1_s02v06_encode((float) rawVoltages[16] / 10000.0);
 80024c4:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <voltageSendCan+0x538>)
 80024c6:	8c1b      	ldrh	r3, [r3, #32]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d0:	ee17 0a90 	vmov	r0, s15
 80024d4:	f7fd ffdc 	bl	8000490 <__aeabi_f2d>
 80024d8:	a319      	add	r3, pc, #100	@ (adr r3, 8002540 <voltageSendCan+0x530>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fe f959 	bl	8000794 <__aeabi_ddiv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	ec43 2b17 	vmov	d7, r2, r3
 80024ea:	eeb0 0a47 	vmov.f32	s0, s14
 80024ee:	eef0 0a67 	vmov.f32	s1, s15
 80024f2:	f007 fe9d 	bl	800a230 <can1_ams_s02_voltages_1_s02v06_encode>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b18      	ldr	r3, [pc, #96]	@ (800255c <voltageSendCan+0x54c>)
 80024fc:	715a      	strb	r2, [r3, #5]

    can1_ams_s02_voltages_1_pack(txData, &can1_ams_s02_voltages_1, CAN1_AMS_S02_VOLTAGES_1_LENGTH);
 80024fe:	2206      	movs	r2, #6
 8002500:	4916      	ldr	r1, [pc, #88]	@ (800255c <voltageSendCan+0x54c>)
 8002502:	4813      	ldr	r0, [pc, #76]	@ (8002550 <voltageSendCan+0x540>)
 8002504:	f007 fd3e 	bl	8009f84 <can1_ams_s02_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S02_VOLTAGES_1_FRAME_ID;
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <voltageSendCan+0x544>)
 800250a:	f240 225a 	movw	r2, #602	@ 0x25a
 800250e:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S02_VOLTAGES_1_LENGTH;
 8002510:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <voltageSendCan+0x544>)
 8002512:	2206      	movs	r2, #6
 8002514:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <voltageSendCan+0x544>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800251c:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <voltageSendCan+0x544>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002522:	2300      	movs	r3, #0
 8002524:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <voltageSendCan+0x540>)
 8002526:	490b      	ldr	r1, [pc, #44]	@ (8002554 <voltageSendCan+0x544>)
 8002528:	480b      	ldr	r0, [pc, #44]	@ (8002558 <voltageSendCan+0x548>)
 800252a:	f004 fbbf 	bl	8006cac <HAL_CAN_AddTxMessage>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	f002 8017 	beq.w	8004564 <voltageSendCan+0x2554>
      Error_Handler();
 8002536:	f003 fb51 	bl	8005bdc <Error_Handler>
    break;
 800253a:	f002 b813 	b.w	8004564 <voltageSendCan+0x2554>
 800253e:	bf00      	nop
 8002540:	00000000 	.word	0x00000000
 8002544:	40c38800 	.word	0x40c38800
 8002548:	2000046c 	.word	0x2000046c
 800254c:	200002e0 	.word	0x200002e0
 8002550:	20000288 	.word	0x20000288
 8002554:	20000254 	.word	0x20000254
 8002558:	2000011c 	.word	0x2000011c
 800255c:	200002e8 	.word	0x200002e8

  case 3:
    can1_ams_s02_voltages_2.s02v07 = can1_ams_s02_voltages_2_s02v07_encode((float) rawVoltages[17] / 10000.0);
 8002560:	4bb3      	ldr	r3, [pc, #716]	@ (8002830 <voltageSendCan+0x820>)
 8002562:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256c:	ee17 0a90 	vmov	r0, s15
 8002570:	f7fd ff8e 	bl	8000490 <__aeabi_f2d>
 8002574:	a3ac      	add	r3, pc, #688	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fe f90b 	bl	8000794 <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	ec43 2b17 	vmov	d7, r2, r3
 8002586:	eeb0 0a47 	vmov.f32	s0, s14
 800258a:	eef0 0a67 	vmov.f32	s1, s15
 800258e:	f007 fee3 	bl	800a358 <can1_ams_s02_voltages_2_s02v07_encode>
 8002592:	4603      	mov	r3, r0
 8002594:	461a      	mov	r2, r3
 8002596:	4ba7      	ldr	r3, [pc, #668]	@ (8002834 <voltageSendCan+0x824>)
 8002598:	701a      	strb	r2, [r3, #0]
    can1_ams_s02_voltages_2.s02v08 = can1_ams_s02_voltages_2_s02v08_encode((float) rawVoltages[18] / 10000.0);
 800259a:	4ba5      	ldr	r3, [pc, #660]	@ (8002830 <voltageSendCan+0x820>)
 800259c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a6:	ee17 0a90 	vmov	r0, s15
 80025aa:	f7fd ff71 	bl	8000490 <__aeabi_f2d>
 80025ae:	a39e      	add	r3, pc, #632	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f7fe f8ee 	bl	8000794 <__aeabi_ddiv>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	ec43 2b17 	vmov	d7, r2, r3
 80025c0:	eeb0 0a47 	vmov.f32	s0, s14
 80025c4:	eef0 0a67 	vmov.f32	s1, s15
 80025c8:	f007 fef2 	bl	800a3b0 <can1_ams_s02_voltages_2_s02v08_encode>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b98      	ldr	r3, [pc, #608]	@ (8002834 <voltageSendCan+0x824>)
 80025d2:	705a      	strb	r2, [r3, #1]
    can1_ams_s02_voltages_2.s02v09 = can1_ams_s02_voltages_2_s02v09_encode((float) rawVoltages[19] / 10000.0);
 80025d4:	4b96      	ldr	r3, [pc, #600]	@ (8002830 <voltageSendCan+0x820>)
 80025d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e0:	ee17 0a90 	vmov	r0, s15
 80025e4:	f7fd ff54 	bl	8000490 <__aeabi_f2d>
 80025e8:	a38f      	add	r3, pc, #572	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f7fe f8d1 	bl	8000794 <__aeabi_ddiv>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	ec43 2b17 	vmov	d7, r2, r3
 80025fa:	eeb0 0a47 	vmov.f32	s0, s14
 80025fe:	eef0 0a67 	vmov.f32	s1, s15
 8002602:	f007 ff01 	bl	800a408 <can1_ams_s02_voltages_2_s02v09_encode>
 8002606:	4603      	mov	r3, r0
 8002608:	461a      	mov	r2, r3
 800260a:	4b8a      	ldr	r3, [pc, #552]	@ (8002834 <voltageSendCan+0x824>)
 800260c:	709a      	strb	r2, [r3, #2]
    can1_ams_s02_voltages_2.s02v10 = can1_ams_s02_voltages_2_s02v10_encode((float) rawVoltages[20] / 10000.0);
 800260e:	4b88      	ldr	r3, [pc, #544]	@ (8002830 <voltageSendCan+0x820>)
 8002610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261a:	ee17 0a90 	vmov	r0, s15
 800261e:	f7fd ff37 	bl	8000490 <__aeabi_f2d>
 8002622:	a381      	add	r3, pc, #516	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f7fe f8b4 	bl	8000794 <__aeabi_ddiv>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	ec43 2b17 	vmov	d7, r2, r3
 8002634:	eeb0 0a47 	vmov.f32	s0, s14
 8002638:	eef0 0a67 	vmov.f32	s1, s15
 800263c:	f007 ff10 	bl	800a460 <can1_ams_s02_voltages_2_s02v10_encode>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	4b7b      	ldr	r3, [pc, #492]	@ (8002834 <voltageSendCan+0x824>)
 8002646:	70da      	strb	r2, [r3, #3]

    can1_ams_s02_voltages_2_pack(txData, &can1_ams_s02_voltages_2, CAN1_AMS_S02_VOLTAGES_2_LENGTH);
 8002648:	2205      	movs	r2, #5
 800264a:	497a      	ldr	r1, [pc, #488]	@ (8002834 <voltageSendCan+0x824>)
 800264c:	487a      	ldr	r0, [pc, #488]	@ (8002838 <voltageSendCan+0x828>)
 800264e:	f007 fe19 	bl	800a284 <can1_ams_s02_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S02_VOLTAGES_2_FRAME_ID;
 8002652:	4b7a      	ldr	r3, [pc, #488]	@ (800283c <voltageSendCan+0x82c>)
 8002654:	f240 225b 	movw	r2, #603	@ 0x25b
 8002658:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S02_VOLTAGES_2_LENGTH;
 800265a:	4b78      	ldr	r3, [pc, #480]	@ (800283c <voltageSendCan+0x82c>)
 800265c:	2205      	movs	r2, #5
 800265e:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002660:	4b76      	ldr	r3, [pc, #472]	@ (800283c <voltageSendCan+0x82c>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002666:	4b75      	ldr	r3, [pc, #468]	@ (800283c <voltageSendCan+0x82c>)
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800266c:	2300      	movs	r3, #0
 800266e:	4a72      	ldr	r2, [pc, #456]	@ (8002838 <voltageSendCan+0x828>)
 8002670:	4972      	ldr	r1, [pc, #456]	@ (800283c <voltageSendCan+0x82c>)
 8002672:	4873      	ldr	r0, [pc, #460]	@ (8002840 <voltageSendCan+0x830>)
 8002674:	f004 fb1a 	bl	8006cac <HAL_CAN_AddTxMessage>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	f001 8774 	beq.w	8004568 <voltageSendCan+0x2558>
      Error_Handler();
 8002680:	f003 faac 	bl	8005bdc <Error_Handler>
    break;
 8002684:	f001 bf70 	b.w	8004568 <voltageSendCan+0x2558>

  case 4:
    can1_ams_s03_voltages_1.s03v01 = can1_ams_s03_voltages_1_s03v01_encode((float) rawVoltages[21] / 10000.0);
 8002688:	4b69      	ldr	r3, [pc, #420]	@ (8002830 <voltageSendCan+0x820>)
 800268a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268c:	ee07 3a90 	vmov	s15, r3
 8002690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002694:	ee17 0a90 	vmov	r0, s15
 8002698:	f7fd fefa 	bl	8000490 <__aeabi_f2d>
 800269c:	a362      	add	r3, pc, #392	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	f7fe f877 	bl	8000794 <__aeabi_ddiv>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	ec43 2b17 	vmov	d7, r2, r3
 80026ae:	eeb0 0a47 	vmov.f32	s0, s14
 80026b2:	eef0 0a67 	vmov.f32	s1, s15
 80026b6:	f007 ff77 	bl	800a5a8 <can1_ams_s03_voltages_1_s03v01_encode>
 80026ba:	4603      	mov	r3, r0
 80026bc:	461a      	mov	r2, r3
 80026be:	4b61      	ldr	r3, [pc, #388]	@ (8002844 <voltageSendCan+0x834>)
 80026c0:	701a      	strb	r2, [r3, #0]
    can1_ams_s03_voltages_1.s03v02 = can1_ams_s03_voltages_1_s03v02_encode((float) rawVoltages[22] / 10000.0);
 80026c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002830 <voltageSendCan+0x820>)
 80026c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	ee17 0a90 	vmov	r0, s15
 80026d2:	f7fd fedd 	bl	8000490 <__aeabi_f2d>
 80026d6:	a354      	add	r3, pc, #336	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fe f85a 	bl	8000794 <__aeabi_ddiv>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	ec43 2b17 	vmov	d7, r2, r3
 80026e8:	eeb0 0a47 	vmov.f32	s0, s14
 80026ec:	eef0 0a67 	vmov.f32	s1, s15
 80026f0:	f007 ff86 	bl	800a600 <can1_ams_s03_voltages_1_s03v02_encode>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b52      	ldr	r3, [pc, #328]	@ (8002844 <voltageSendCan+0x834>)
 80026fa:	705a      	strb	r2, [r3, #1]
    can1_ams_s03_voltages_1.s03v03 = can1_ams_s03_voltages_1_s03v03_encode((float) rawVoltages[23] / 10000.0);
 80026fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002830 <voltageSendCan+0x820>)
 80026fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002700:	ee07 3a90 	vmov	s15, r3
 8002704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002708:	ee17 0a90 	vmov	r0, s15
 800270c:	f7fd fec0 	bl	8000490 <__aeabi_f2d>
 8002710:	a345      	add	r3, pc, #276	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fe f83d 	bl	8000794 <__aeabi_ddiv>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	ec43 2b17 	vmov	d7, r2, r3
 8002722:	eeb0 0a47 	vmov.f32	s0, s14
 8002726:	eef0 0a67 	vmov.f32	s1, s15
 800272a:	f007 ff95 	bl	800a658 <can1_ams_s03_voltages_1_s03v03_encode>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	4b44      	ldr	r3, [pc, #272]	@ (8002844 <voltageSendCan+0x834>)
 8002734:	709a      	strb	r2, [r3, #2]
    can1_ams_s03_voltages_1.s03v04 = can1_ams_s03_voltages_1_s03v04_encode((float) rawVoltages[24] / 10000.0);
 8002736:	4b3e      	ldr	r3, [pc, #248]	@ (8002830 <voltageSendCan+0x820>)
 8002738:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002742:	ee17 0a90 	vmov	r0, s15
 8002746:	f7fd fea3 	bl	8000490 <__aeabi_f2d>
 800274a:	a337      	add	r3, pc, #220	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fe f820 	bl	8000794 <__aeabi_ddiv>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	ec43 2b17 	vmov	d7, r2, r3
 800275c:	eeb0 0a47 	vmov.f32	s0, s14
 8002760:	eef0 0a67 	vmov.f32	s1, s15
 8002764:	f007 ffa4 	bl	800a6b0 <can1_ams_s03_voltages_1_s03v04_encode>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	4b35      	ldr	r3, [pc, #212]	@ (8002844 <voltageSendCan+0x834>)
 800276e:	70da      	strb	r2, [r3, #3]
    can1_ams_s03_voltages_1.s03v05 = can1_ams_s03_voltages_1_s03v05_encode((float) rawVoltages[25] / 10000.0);
 8002770:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <voltageSendCan+0x820>)
 8002772:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277c:	ee17 0a90 	vmov	r0, s15
 8002780:	f7fd fe86 	bl	8000490 <__aeabi_f2d>
 8002784:	a328      	add	r3, pc, #160	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f7fe f803 	bl	8000794 <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	ec43 2b17 	vmov	d7, r2, r3
 8002796:	eeb0 0a47 	vmov.f32	s0, s14
 800279a:	eef0 0a67 	vmov.f32	s1, s15
 800279e:	f007 ffb3 	bl	800a708 <can1_ams_s03_voltages_1_s03v05_encode>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b27      	ldr	r3, [pc, #156]	@ (8002844 <voltageSendCan+0x834>)
 80027a8:	711a      	strb	r2, [r3, #4]
    can1_ams_s03_voltages_1.s03v06 = can1_ams_s03_voltages_1_s03v06_encode((float) rawVoltages[26] / 10000.0);
 80027aa:	4b21      	ldr	r3, [pc, #132]	@ (8002830 <voltageSendCan+0x820>)
 80027ac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b6:	ee17 0a90 	vmov	r0, s15
 80027ba:	f7fd fe69 	bl	8000490 <__aeabi_f2d>
 80027be:	a31a      	add	r3, pc, #104	@ (adr r3, 8002828 <voltageSendCan+0x818>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd ffe6 	bl	8000794 <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	ec43 2b17 	vmov	d7, r2, r3
 80027d0:	eeb0 0a47 	vmov.f32	s0, s14
 80027d4:	eef0 0a67 	vmov.f32	s1, s15
 80027d8:	f007 ffc2 	bl	800a760 <can1_ams_s03_voltages_1_s03v06_encode>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <voltageSendCan+0x834>)
 80027e2:	715a      	strb	r2, [r3, #5]

    can1_ams_s03_voltages_1_pack(txData, &can1_ams_s03_voltages_1, CAN1_AMS_S03_VOLTAGES_1_LENGTH);
 80027e4:	2206      	movs	r2, #6
 80027e6:	4917      	ldr	r1, [pc, #92]	@ (8002844 <voltageSendCan+0x834>)
 80027e8:	4813      	ldr	r0, [pc, #76]	@ (8002838 <voltageSendCan+0x828>)
 80027ea:	f007 fe63 	bl	800a4b4 <can1_ams_s03_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S03_VOLTAGES_1_FRAME_ID;
 80027ee:	4b13      	ldr	r3, [pc, #76]	@ (800283c <voltageSendCan+0x82c>)
 80027f0:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 80027f4:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S03_VOLTAGES_1_LENGTH;
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <voltageSendCan+0x82c>)
 80027f8:	2206      	movs	r2, #6
 80027fa:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <voltageSendCan+0x82c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <voltageSendCan+0x82c>)
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002808:	2300      	movs	r3, #0
 800280a:	4a0b      	ldr	r2, [pc, #44]	@ (8002838 <voltageSendCan+0x828>)
 800280c:	490b      	ldr	r1, [pc, #44]	@ (800283c <voltageSendCan+0x82c>)
 800280e:	480c      	ldr	r0, [pc, #48]	@ (8002840 <voltageSendCan+0x830>)
 8002810:	f004 fa4c 	bl	8006cac <HAL_CAN_AddTxMessage>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	f001 86a8 	beq.w	800456c <voltageSendCan+0x255c>
      Error_Handler();
 800281c:	f003 f9de 	bl	8005bdc <Error_Handler>
    break;
 8002820:	f001 bea4 	b.w	800456c <voltageSendCan+0x255c>
 8002824:	f3af 8000 	nop.w
 8002828:	00000000 	.word	0x00000000
 800282c:	40c38800 	.word	0x40c38800
 8002830:	2000046c 	.word	0x2000046c
 8002834:	200002f0 	.word	0x200002f0
 8002838:	20000288 	.word	0x20000288
 800283c:	20000254 	.word	0x20000254
 8002840:	2000011c 	.word	0x2000011c
 8002844:	200002f8 	.word	0x200002f8

  case 5:
    can1_ams_s03_voltages_2.s03v07 = can1_ams_s03_voltages_2_s03v07_encode((float) rawVoltages[27] / 10000.0);
 8002848:	4bc5      	ldr	r3, [pc, #788]	@ (8002b60 <voltageSendCan+0xb50>)
 800284a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002854:	ee17 0a90 	vmov	r0, s15
 8002858:	f7fd fe1a 	bl	8000490 <__aeabi_f2d>
 800285c:	a3be      	add	r3, pc, #760	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f7fd ff97 	bl	8000794 <__aeabi_ddiv>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	ec43 2b17 	vmov	d7, r2, r3
 800286e:	eeb0 0a47 	vmov.f32	s0, s14
 8002872:	eef0 0a67 	vmov.f32	s1, s15
 8002876:	f008 f807 	bl	800a888 <can1_ams_s03_voltages_2_s03v07_encode>
 800287a:	4603      	mov	r3, r0
 800287c:	461a      	mov	r2, r3
 800287e:	4bb9      	ldr	r3, [pc, #740]	@ (8002b64 <voltageSendCan+0xb54>)
 8002880:	701a      	strb	r2, [r3, #0]
    can1_ams_s03_voltages_2.s03v08 = can1_ams_s03_voltages_2_s03v08_encode((float) rawVoltages[28] / 10000.0);
 8002882:	4bb7      	ldr	r3, [pc, #732]	@ (8002b60 <voltageSendCan+0xb50>)
 8002884:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288e:	ee17 0a90 	vmov	r0, s15
 8002892:	f7fd fdfd 	bl	8000490 <__aeabi_f2d>
 8002896:	a3b0      	add	r3, pc, #704	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd ff7a 	bl	8000794 <__aeabi_ddiv>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	ec43 2b17 	vmov	d7, r2, r3
 80028a8:	eeb0 0a47 	vmov.f32	s0, s14
 80028ac:	eef0 0a67 	vmov.f32	s1, s15
 80028b0:	f008 f816 	bl	800a8e0 <can1_ams_s03_voltages_2_s03v08_encode>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	4baa      	ldr	r3, [pc, #680]	@ (8002b64 <voltageSendCan+0xb54>)
 80028ba:	705a      	strb	r2, [r3, #1]
    can1_ams_s03_voltages_2.s03v09 = can1_ams_s03_voltages_2_s03v09_encode((float) rawVoltages[29] / 10000.0);
 80028bc:	4ba8      	ldr	r3, [pc, #672]	@ (8002b60 <voltageSendCan+0xb50>)
 80028be:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ee17 0a90 	vmov	r0, s15
 80028cc:	f7fd fde0 	bl	8000490 <__aeabi_f2d>
 80028d0:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd ff5d 	bl	8000794 <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	ec43 2b17 	vmov	d7, r2, r3
 80028e2:	eeb0 0a47 	vmov.f32	s0, s14
 80028e6:	eef0 0a67 	vmov.f32	s1, s15
 80028ea:	f008 f825 	bl	800a938 <can1_ams_s03_voltages_2_s03v09_encode>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b9c      	ldr	r3, [pc, #624]	@ (8002b64 <voltageSendCan+0xb54>)
 80028f4:	709a      	strb	r2, [r3, #2]
    can1_ams_s03_voltages_2.s03v10 = can1_ams_s03_voltages_2_s03v10_encode((float) rawVoltages[30] / 10000.0);
 80028f6:	4b9a      	ldr	r3, [pc, #616]	@ (8002b60 <voltageSendCan+0xb50>)
 80028f8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80028fa:	ee07 3a90 	vmov	s15, r3
 80028fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002902:	ee17 0a90 	vmov	r0, s15
 8002906:	f7fd fdc3 	bl	8000490 <__aeabi_f2d>
 800290a:	a393      	add	r3, pc, #588	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd ff40 	bl	8000794 <__aeabi_ddiv>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	ec43 2b17 	vmov	d7, r2, r3
 800291c:	eeb0 0a47 	vmov.f32	s0, s14
 8002920:	eef0 0a67 	vmov.f32	s1, s15
 8002924:	f008 f834 	bl	800a990 <can1_ams_s03_voltages_2_s03v10_encode>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b64 <voltageSendCan+0xb54>)
 800292e:	70da      	strb	r2, [r3, #3]
    can1_ams_s03_voltages_2.s03v11 = can1_ams_s03_voltages_2_s03v11_encode((float) rawVoltages[31] / 10000.0);
 8002930:	4b8b      	ldr	r3, [pc, #556]	@ (8002b60 <voltageSendCan+0xb50>)
 8002932:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293c:	ee17 0a90 	vmov	r0, s15
 8002940:	f7fd fda6 	bl	8000490 <__aeabi_f2d>
 8002944:	a384      	add	r3, pc, #528	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fd ff23 	bl	8000794 <__aeabi_ddiv>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	ec43 2b17 	vmov	d7, r2, r3
 8002956:	eeb0 0a47 	vmov.f32	s0, s14
 800295a:	eef0 0a67 	vmov.f32	s1, s15
 800295e:	f008 f843 	bl	800a9e8 <can1_ams_s03_voltages_2_s03v11_encode>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4b7f      	ldr	r3, [pc, #508]	@ (8002b64 <voltageSendCan+0xb54>)
 8002968:	711a      	strb	r2, [r3, #4]

    can1_ams_s03_voltages_2_pack(txData, &can1_ams_s03_voltages_2, CAN1_AMS_S03_VOLTAGES_2_LENGTH);
 800296a:	2205      	movs	r2, #5
 800296c:	497d      	ldr	r1, [pc, #500]	@ (8002b64 <voltageSendCan+0xb54>)
 800296e:	487e      	ldr	r0, [pc, #504]	@ (8002b68 <voltageSendCan+0xb58>)
 8002970:	f007 ff20 	bl	800a7b4 <can1_ams_s03_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S03_VOLTAGES_2_FRAME_ID;
 8002974:	4b7d      	ldr	r3, [pc, #500]	@ (8002b6c <voltageSendCan+0xb5c>)
 8002976:	f240 225d 	movw	r2, #605	@ 0x25d
 800297a:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S03_VOLTAGES_2_LENGTH;
 800297c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b6c <voltageSendCan+0xb5c>)
 800297e:	2205      	movs	r2, #5
 8002980:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002982:	4b7a      	ldr	r3, [pc, #488]	@ (8002b6c <voltageSendCan+0xb5c>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002988:	4b78      	ldr	r3, [pc, #480]	@ (8002b6c <voltageSendCan+0xb5c>)
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800298e:	2300      	movs	r3, #0
 8002990:	4a75      	ldr	r2, [pc, #468]	@ (8002b68 <voltageSendCan+0xb58>)
 8002992:	4976      	ldr	r1, [pc, #472]	@ (8002b6c <voltageSendCan+0xb5c>)
 8002994:	4876      	ldr	r0, [pc, #472]	@ (8002b70 <voltageSendCan+0xb60>)
 8002996:	f004 f989 	bl	8006cac <HAL_CAN_AddTxMessage>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f001 85e7 	beq.w	8004570 <voltageSendCan+0x2560>
      Error_Handler();
 80029a2:	f003 f91b 	bl	8005bdc <Error_Handler>
    break;
 80029a6:	f001 bde3 	b.w	8004570 <voltageSendCan+0x2560>

  case 6:
    can1_ams_s04_voltages_1.s04v01 = can1_ams_s04_voltages_1_s04v01_encode((float) rawVoltages[32] / 10000.0);
 80029aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002b60 <voltageSendCan+0xb50>)
 80029ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029b0:	ee07 3a90 	vmov	s15, r3
 80029b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b8:	ee17 0a90 	vmov	r0, s15
 80029bc:	f7fd fd68 	bl	8000490 <__aeabi_f2d>
 80029c0:	a365      	add	r3, pc, #404	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f7fd fee5 	bl	8000794 <__aeabi_ddiv>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	ec43 2b17 	vmov	d7, r2, r3
 80029d2:	eeb0 0a47 	vmov.f32	s0, s14
 80029d6:	eef0 0a67 	vmov.f32	s1, s15
 80029da:	f008 f8a9 	bl	800ab30 <can1_ams_s04_voltages_1_s04v01_encode>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b64      	ldr	r3, [pc, #400]	@ (8002b74 <voltageSendCan+0xb64>)
 80029e4:	701a      	strb	r2, [r3, #0]
    can1_ams_s04_voltages_1.s04v02 = can1_ams_s04_voltages_1_s04v02_encode((float) rawVoltages[33] / 10000.0);
 80029e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b60 <voltageSendCan+0xb50>)
 80029e8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80029ec:	ee07 3a90 	vmov	s15, r3
 80029f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f4:	ee17 0a90 	vmov	r0, s15
 80029f8:	f7fd fd4a 	bl	8000490 <__aeabi_f2d>
 80029fc:	a356      	add	r3, pc, #344	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fec7 	bl	8000794 <__aeabi_ddiv>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	ec43 2b17 	vmov	d7, r2, r3
 8002a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a12:	eef0 0a67 	vmov.f32	s1, s15
 8002a16:	f008 f8b7 	bl	800ab88 <can1_ams_s04_voltages_1_s04v02_encode>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b55      	ldr	r3, [pc, #340]	@ (8002b74 <voltageSendCan+0xb64>)
 8002a20:	705a      	strb	r2, [r3, #1]
    can1_ams_s04_voltages_1.s04v03 = can1_ams_s04_voltages_1_s04v03_encode((float) rawVoltages[34] / 10000.0);
 8002a22:	4b4f      	ldr	r3, [pc, #316]	@ (8002b60 <voltageSendCan+0xb50>)
 8002a24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a30:	ee17 0a90 	vmov	r0, s15
 8002a34:	f7fd fd2c 	bl	8000490 <__aeabi_f2d>
 8002a38:	a347      	add	r3, pc, #284	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fd fea9 	bl	8000794 <__aeabi_ddiv>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	ec43 2b17 	vmov	d7, r2, r3
 8002a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a4e:	eef0 0a67 	vmov.f32	s1, s15
 8002a52:	f008 f8c5 	bl	800abe0 <can1_ams_s04_voltages_1_s04v03_encode>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b46      	ldr	r3, [pc, #280]	@ (8002b74 <voltageSendCan+0xb64>)
 8002a5c:	709a      	strb	r2, [r3, #2]
    can1_ams_s04_voltages_1.s04v04 = can1_ams_s04_voltages_1_s04v04_encode((float) rawVoltages[35] / 10000.0);
 8002a5e:	4b40      	ldr	r3, [pc, #256]	@ (8002b60 <voltageSendCan+0xb50>)
 8002a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6c:	ee17 0a90 	vmov	r0, s15
 8002a70:	f7fd fd0e 	bl	8000490 <__aeabi_f2d>
 8002a74:	a338      	add	r3, pc, #224	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fe8b 	bl	8000794 <__aeabi_ddiv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	ec43 2b17 	vmov	d7, r2, r3
 8002a86:	eeb0 0a47 	vmov.f32	s0, s14
 8002a8a:	eef0 0a67 	vmov.f32	s1, s15
 8002a8e:	f008 f8d3 	bl	800ac38 <can1_ams_s04_voltages_1_s04v04_encode>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <voltageSendCan+0xb64>)
 8002a98:	70da      	strb	r2, [r3, #3]
    can1_ams_s04_voltages_1.s04v05 = can1_ams_s04_voltages_1_s04v05_encode((float) rawVoltages[36] / 10000.0);
 8002a9a:	4b31      	ldr	r3, [pc, #196]	@ (8002b60 <voltageSendCan+0xb50>)
 8002a9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa8:	ee17 0a90 	vmov	r0, s15
 8002aac:	f7fd fcf0 	bl	8000490 <__aeabi_f2d>
 8002ab0:	a329      	add	r3, pc, #164	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fe6d 	bl	8000794 <__aeabi_ddiv>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	ec43 2b17 	vmov	d7, r2, r3
 8002ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac6:	eef0 0a67 	vmov.f32	s1, s15
 8002aca:	f008 f8e1 	bl	800ac90 <can1_ams_s04_voltages_1_s04v05_encode>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b28      	ldr	r3, [pc, #160]	@ (8002b74 <voltageSendCan+0xb64>)
 8002ad4:	711a      	strb	r2, [r3, #4]
    can1_ams_s04_voltages_1.s04v06 = can1_ams_s04_voltages_1_s04v06_encode((float) rawVoltages[37] / 10000.0);
 8002ad6:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <voltageSendCan+0xb50>)
 8002ad8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae4:	ee17 0a90 	vmov	r0, s15
 8002ae8:	f7fd fcd2 	bl	8000490 <__aeabi_f2d>
 8002aec:	a31a      	add	r3, pc, #104	@ (adr r3, 8002b58 <voltageSendCan+0xb48>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	f7fd fe4f 	bl	8000794 <__aeabi_ddiv>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	ec43 2b17 	vmov	d7, r2, r3
 8002afe:	eeb0 0a47 	vmov.f32	s0, s14
 8002b02:	eef0 0a67 	vmov.f32	s1, s15
 8002b06:	f008 f8ef 	bl	800ace8 <can1_ams_s04_voltages_1_s04v06_encode>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <voltageSendCan+0xb64>)
 8002b10:	715a      	strb	r2, [r3, #5]

    can1_ams_s04_voltages_1_pack(txData, &can1_ams_s04_voltages_1, CAN1_AMS_S04_VOLTAGES_1_LENGTH);
 8002b12:	2206      	movs	r2, #6
 8002b14:	4917      	ldr	r1, [pc, #92]	@ (8002b74 <voltageSendCan+0xb64>)
 8002b16:	4814      	ldr	r0, [pc, #80]	@ (8002b68 <voltageSendCan+0xb58>)
 8002b18:	f007 ff90 	bl	800aa3c <can1_ams_s04_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S04_VOLTAGES_1_FRAME_ID;
 8002b1c:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <voltageSendCan+0xb5c>)
 8002b1e:	f240 225e 	movw	r2, #606	@ 0x25e
 8002b22:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S04_VOLTAGES_1_LENGTH;
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <voltageSendCan+0xb5c>)
 8002b26:	2206      	movs	r2, #6
 8002b28:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <voltageSendCan+0xb5c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <voltageSendCan+0xb5c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002b36:	2300      	movs	r3, #0
 8002b38:	4a0b      	ldr	r2, [pc, #44]	@ (8002b68 <voltageSendCan+0xb58>)
 8002b3a:	490c      	ldr	r1, [pc, #48]	@ (8002b6c <voltageSendCan+0xb5c>)
 8002b3c:	480c      	ldr	r0, [pc, #48]	@ (8002b70 <voltageSendCan+0xb60>)
 8002b3e:	f004 f8b5 	bl	8006cac <HAL_CAN_AddTxMessage>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f001 8515 	beq.w	8004574 <voltageSendCan+0x2564>
      Error_Handler();
 8002b4a:	f003 f847 	bl	8005bdc <Error_Handler>
    break;
 8002b4e:	f001 bd11 	b.w	8004574 <voltageSendCan+0x2564>
 8002b52:	bf00      	nop
 8002b54:	f3af 8000 	nop.w
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	40c38800 	.word	0x40c38800
 8002b60:	2000046c 	.word	0x2000046c
 8002b64:	20000300 	.word	0x20000300
 8002b68:	20000288 	.word	0x20000288
 8002b6c:	20000254 	.word	0x20000254
 8002b70:	2000011c 	.word	0x2000011c
 8002b74:	20000308 	.word	0x20000308

  case 7:
    can1_ams_s04_voltages_2.s04v07 = can1_ams_s04_voltages_2_s04v07_encode((float) rawVoltages[38] / 10000.0);
 8002b78:	4bb7      	ldr	r3, [pc, #732]	@ (8002e58 <voltageSendCan+0xe48>)
 8002b7a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b86:	ee17 0a90 	vmov	r0, s15
 8002b8a:	f7fd fc81 	bl	8000490 <__aeabi_f2d>
 8002b8e:	a3b0      	add	r3, pc, #704	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fd fdfe 	bl	8000794 <__aeabi_ddiv>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	ec43 2b17 	vmov	d7, r2, r3
 8002ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba4:	eef0 0a67 	vmov.f32	s1, s15
 8002ba8:	f008 f932 	bl	800ae10 <can1_ams_s04_voltages_2_s04v07_encode>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4baa      	ldr	r3, [pc, #680]	@ (8002e5c <voltageSendCan+0xe4c>)
 8002bb2:	701a      	strb	r2, [r3, #0]
    can1_ams_s04_voltages_2.s04v08 = can1_ams_s04_voltages_2_s04v08_encode((float) rawVoltages[39] / 10000.0);
 8002bb4:	4ba8      	ldr	r3, [pc, #672]	@ (8002e58 <voltageSendCan+0xe48>)
 8002bb6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fc63 	bl	8000490 <__aeabi_f2d>
 8002bca:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fde0 	bl	8000794 <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	ec43 2b17 	vmov	d7, r2, r3
 8002bdc:	eeb0 0a47 	vmov.f32	s0, s14
 8002be0:	eef0 0a67 	vmov.f32	s1, s15
 8002be4:	f008 f940 	bl	800ae68 <can1_ams_s04_voltages_2_s04v08_encode>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b9b      	ldr	r3, [pc, #620]	@ (8002e5c <voltageSendCan+0xe4c>)
 8002bee:	705a      	strb	r2, [r3, #1]
    can1_ams_s04_voltages_2.s04v09 = can1_ams_s04_voltages_2_s04v09_encode((float) rawVoltages[40] / 10000.0);
 8002bf0:	4b99      	ldr	r3, [pc, #612]	@ (8002e58 <voltageSendCan+0xe48>)
 8002bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfe:	ee17 0a90 	vmov	r0, s15
 8002c02:	f7fd fc45 	bl	8000490 <__aeabi_f2d>
 8002c06:	a392      	add	r3, pc, #584	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f7fd fdc2 	bl	8000794 <__aeabi_ddiv>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	ec43 2b17 	vmov	d7, r2, r3
 8002c18:	eeb0 0a47 	vmov.f32	s0, s14
 8002c1c:	eef0 0a67 	vmov.f32	s1, s15
 8002c20:	f008 f94e 	bl	800aec0 <can1_ams_s04_voltages_2_s04v09_encode>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b8c      	ldr	r3, [pc, #560]	@ (8002e5c <voltageSendCan+0xe4c>)
 8002c2a:	709a      	strb	r2, [r3, #2]
    can1_ams_s04_voltages_2.s04v10 = can1_ams_s04_voltages_2_s04v10_encode((float) rawVoltages[41] / 10000.0);
 8002c2c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e58 <voltageSendCan+0xe48>)
 8002c2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3a:	ee17 0a90 	vmov	r0, s15
 8002c3e:	f7fd fc27 	bl	8000490 <__aeabi_f2d>
 8002c42:	a383      	add	r3, pc, #524	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f7fd fda4 	bl	8000794 <__aeabi_ddiv>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	ec43 2b17 	vmov	d7, r2, r3
 8002c54:	eeb0 0a47 	vmov.f32	s0, s14
 8002c58:	eef0 0a67 	vmov.f32	s1, s15
 8002c5c:	f008 f95c 	bl	800af18 <can1_ams_s04_voltages_2_s04v10_encode>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b7d      	ldr	r3, [pc, #500]	@ (8002e5c <voltageSendCan+0xe4c>)
 8002c66:	70da      	strb	r2, [r3, #3]

    can1_ams_s04_voltages_2_pack(txData, &can1_ams_s04_voltages_2, CAN1_AMS_S04_VOLTAGES_2_LENGTH);
 8002c68:	2205      	movs	r2, #5
 8002c6a:	497c      	ldr	r1, [pc, #496]	@ (8002e5c <voltageSendCan+0xe4c>)
 8002c6c:	487c      	ldr	r0, [pc, #496]	@ (8002e60 <voltageSendCan+0xe50>)
 8002c6e:	f008 f865 	bl	800ad3c <can1_ams_s04_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S04_VOLTAGES_2_FRAME_ID;
 8002c72:	4b7c      	ldr	r3, [pc, #496]	@ (8002e64 <voltageSendCan+0xe54>)
 8002c74:	f240 225f 	movw	r2, #607	@ 0x25f
 8002c78:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S04_VOLTAGES_2_LENGTH;
 8002c7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e64 <voltageSendCan+0xe54>)
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002c80:	4b78      	ldr	r3, [pc, #480]	@ (8002e64 <voltageSendCan+0xe54>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002c86:	4b77      	ldr	r3, [pc, #476]	@ (8002e64 <voltageSendCan+0xe54>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	4a74      	ldr	r2, [pc, #464]	@ (8002e60 <voltageSendCan+0xe50>)
 8002c90:	4974      	ldr	r1, [pc, #464]	@ (8002e64 <voltageSendCan+0xe54>)
 8002c92:	4875      	ldr	r0, [pc, #468]	@ (8002e68 <voltageSendCan+0xe58>)
 8002c94:	f004 f80a 	bl	8006cac <HAL_CAN_AddTxMessage>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f001 846c 	beq.w	8004578 <voltageSendCan+0x2568>
      Error_Handler();
 8002ca0:	f002 ff9c 	bl	8005bdc <Error_Handler>
    break;
 8002ca4:	f001 bc68 	b.w	8004578 <voltageSendCan+0x2568>

  case 8:
    can1_ams_s05_voltages_1.s05v01 = can1_ams_s05_voltages_1_s05v01_encode((float) rawVoltages[42] / 10000.0);
 8002ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8002e58 <voltageSendCan+0xe48>)
 8002caa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb6:	ee17 0a90 	vmov	r0, s15
 8002cba:	f7fd fbe9 	bl	8000490 <__aeabi_f2d>
 8002cbe:	a364      	add	r3, pc, #400	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fd66 	bl	8000794 <__aeabi_ddiv>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	ec43 2b17 	vmov	d7, r2, r3
 8002cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8002cd4:	eef0 0a67 	vmov.f32	s1, s15
 8002cd8:	f008 f9c2 	bl	800b060 <can1_ams_s05_voltages_1_s05v01_encode>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b62      	ldr	r3, [pc, #392]	@ (8002e6c <voltageSendCan+0xe5c>)
 8002ce2:	701a      	strb	r2, [r3, #0]
    can1_ams_s05_voltages_1.s05v02 = can1_ams_s05_voltages_1_s05v02_encode((float) rawVoltages[43] / 10000.0);
 8002ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e58 <voltageSendCan+0xe48>)
 8002ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf2:	ee17 0a90 	vmov	r0, s15
 8002cf6:	f7fd fbcb 	bl	8000490 <__aeabi_f2d>
 8002cfa:	a355      	add	r3, pc, #340	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd fd48 	bl	8000794 <__aeabi_ddiv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	ec43 2b17 	vmov	d7, r2, r3
 8002d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d10:	eef0 0a67 	vmov.f32	s1, s15
 8002d14:	f008 f9d0 	bl	800b0b8 <can1_ams_s05_voltages_1_s05v02_encode>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b53      	ldr	r3, [pc, #332]	@ (8002e6c <voltageSendCan+0xe5c>)
 8002d1e:	705a      	strb	r2, [r3, #1]
    can1_ams_s05_voltages_1.s05v03 = can1_ams_s05_voltages_1_s05v03_encode((float) rawVoltages[44] / 10000.0);
 8002d20:	4b4d      	ldr	r3, [pc, #308]	@ (8002e58 <voltageSendCan+0xe48>)
 8002d22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2e:	ee17 0a90 	vmov	r0, s15
 8002d32:	f7fd fbad 	bl	8000490 <__aeabi_f2d>
 8002d36:	a346      	add	r3, pc, #280	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd fd2a 	bl	8000794 <__aeabi_ddiv>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	ec43 2b17 	vmov	d7, r2, r3
 8002d48:	eeb0 0a47 	vmov.f32	s0, s14
 8002d4c:	eef0 0a67 	vmov.f32	s1, s15
 8002d50:	f008 f9de 	bl	800b110 <can1_ams_s05_voltages_1_s05v03_encode>
 8002d54:	4603      	mov	r3, r0
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b44      	ldr	r3, [pc, #272]	@ (8002e6c <voltageSendCan+0xe5c>)
 8002d5a:	709a      	strb	r2, [r3, #2]
    can1_ams_s05_voltages_1.s05v04 = can1_ams_s05_voltages_1_s05v04_encode((float) rawVoltages[45] / 10000.0);
 8002d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e58 <voltageSendCan+0xe48>)
 8002d5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	ee17 0a90 	vmov	r0, s15
 8002d6e:	f7fd fb8f 	bl	8000490 <__aeabi_f2d>
 8002d72:	a337      	add	r3, pc, #220	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f7fd fd0c 	bl	8000794 <__aeabi_ddiv>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	ec43 2b17 	vmov	d7, r2, r3
 8002d84:	eeb0 0a47 	vmov.f32	s0, s14
 8002d88:	eef0 0a67 	vmov.f32	s1, s15
 8002d8c:	f008 f9ec 	bl	800b168 <can1_ams_s05_voltages_1_s05v04_encode>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b35      	ldr	r3, [pc, #212]	@ (8002e6c <voltageSendCan+0xe5c>)
 8002d96:	70da      	strb	r2, [r3, #3]
    can1_ams_s05_voltages_1.s05v05 = can1_ams_s05_voltages_1_s05v05_encode((float) rawVoltages[46] / 10000.0);
 8002d98:	4b2f      	ldr	r3, [pc, #188]	@ (8002e58 <voltageSendCan+0xe48>)
 8002d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	ee17 0a90 	vmov	r0, s15
 8002daa:	f7fd fb71 	bl	8000490 <__aeabi_f2d>
 8002dae:	a328      	add	r3, pc, #160	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f7fd fcee 	bl	8000794 <__aeabi_ddiv>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	ec43 2b17 	vmov	d7, r2, r3
 8002dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc4:	eef0 0a67 	vmov.f32	s1, s15
 8002dc8:	f008 f9fa 	bl	800b1c0 <can1_ams_s05_voltages_1_s05v05_encode>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <voltageSendCan+0xe5c>)
 8002dd2:	711a      	strb	r2, [r3, #4]
    can1_ams_s05_voltages_1.s05v06 = can1_ams_s05_voltages_1_s05v06_encode((float) rawVoltages[47] / 10000.0);
 8002dd4:	4b20      	ldr	r3, [pc, #128]	@ (8002e58 <voltageSendCan+0xe48>)
 8002dd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de2:	ee17 0a90 	vmov	r0, s15
 8002de6:	f7fd fb53 	bl	8000490 <__aeabi_f2d>
 8002dea:	a319      	add	r3, pc, #100	@ (adr r3, 8002e50 <voltageSendCan+0xe40>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f7fd fcd0 	bl	8000794 <__aeabi_ddiv>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	ec43 2b17 	vmov	d7, r2, r3
 8002dfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002e00:	eef0 0a67 	vmov.f32	s1, s15
 8002e04:	f008 fa08 	bl	800b218 <can1_ams_s05_voltages_1_s05v06_encode>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <voltageSendCan+0xe5c>)
 8002e0e:	715a      	strb	r2, [r3, #5]

    can1_ams_s05_voltages_1_pack(txData, &can1_ams_s05_voltages_1, CAN1_AMS_S05_VOLTAGES_1_LENGTH);
 8002e10:	2206      	movs	r2, #6
 8002e12:	4916      	ldr	r1, [pc, #88]	@ (8002e6c <voltageSendCan+0xe5c>)
 8002e14:	4812      	ldr	r0, [pc, #72]	@ (8002e60 <voltageSendCan+0xe50>)
 8002e16:	f008 f8a9 	bl	800af6c <can1_ams_s05_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S05_VOLTAGES_1_FRAME_ID;
 8002e1a:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <voltageSendCan+0xe54>)
 8002e1c:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8002e20:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S05_VOLTAGES_1_LENGTH;
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <voltageSendCan+0xe54>)
 8002e24:	2206      	movs	r2, #6
 8002e26:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002e28:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <voltageSendCan+0xe54>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <voltageSendCan+0xe54>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002e34:	2300      	movs	r3, #0
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <voltageSendCan+0xe50>)
 8002e38:	490a      	ldr	r1, [pc, #40]	@ (8002e64 <voltageSendCan+0xe54>)
 8002e3a:	480b      	ldr	r0, [pc, #44]	@ (8002e68 <voltageSendCan+0xe58>)
 8002e3c:	f003 ff36 	bl	8006cac <HAL_CAN_AddTxMessage>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f001 839a 	beq.w	800457c <voltageSendCan+0x256c>
      Error_Handler();
 8002e48:	f002 fec8 	bl	8005bdc <Error_Handler>
    break;
 8002e4c:	f001 bb96 	b.w	800457c <voltageSendCan+0x256c>
 8002e50:	00000000 	.word	0x00000000
 8002e54:	40c38800 	.word	0x40c38800
 8002e58:	2000046c 	.word	0x2000046c
 8002e5c:	20000310 	.word	0x20000310
 8002e60:	20000288 	.word	0x20000288
 8002e64:	20000254 	.word	0x20000254
 8002e68:	2000011c 	.word	0x2000011c
 8002e6c:	20000318 	.word	0x20000318

  case 9:
    can1_ams_s05_voltages_2.s05v07 = can1_ams_s05_voltages_2_s05v07_encode((float) rawVoltages[48] / 10000.0);
 8002e70:	4bc7      	ldr	r3, [pc, #796]	@ (8003190 <voltageSendCan+0x1180>)
 8002e72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	ee17 0a90 	vmov	r0, s15
 8002e82:	f7fd fb05 	bl	8000490 <__aeabi_f2d>
 8002e86:	a3c0      	add	r3, pc, #768	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fc82 	bl	8000794 <__aeabi_ddiv>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	ec43 2b17 	vmov	d7, r2, r3
 8002e98:	eeb0 0a47 	vmov.f32	s0, s14
 8002e9c:	eef0 0a67 	vmov.f32	s1, s15
 8002ea0:	f008 fa4e 	bl	800b340 <can1_ams_s05_voltages_2_s05v07_encode>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4bba      	ldr	r3, [pc, #744]	@ (8003194 <voltageSendCan+0x1184>)
 8002eaa:	701a      	strb	r2, [r3, #0]
    can1_ams_s05_voltages_2.s05v08 = can1_ams_s05_voltages_2_s05v08_encode((float) rawVoltages[49] / 10000.0);
 8002eac:	4bb8      	ldr	r3, [pc, #736]	@ (8003190 <voltageSendCan+0x1180>)
 8002eae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eba:	ee17 0a90 	vmov	r0, s15
 8002ebe:	f7fd fae7 	bl	8000490 <__aeabi_f2d>
 8002ec2:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fc64 	bl	8000794 <__aeabi_ddiv>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	ec43 2b17 	vmov	d7, r2, r3
 8002ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ed8:	eef0 0a67 	vmov.f32	s1, s15
 8002edc:	f008 fa5c 	bl	800b398 <can1_ams_s05_voltages_2_s05v08_encode>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4bab      	ldr	r3, [pc, #684]	@ (8003194 <voltageSendCan+0x1184>)
 8002ee6:	705a      	strb	r2, [r3, #1]
    can1_ams_s05_voltages_2.s05v09 = can1_ams_s05_voltages_2_s05v09_encode((float) rawVoltages[50] / 10000.0);
 8002ee8:	4ba9      	ldr	r3, [pc, #676]	@ (8003190 <voltageSendCan+0x1180>)
 8002eea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	ee17 0a90 	vmov	r0, s15
 8002efa:	f7fd fac9 	bl	8000490 <__aeabi_f2d>
 8002efe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fc46 	bl	8000794 <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	ec43 2b17 	vmov	d7, r2, r3
 8002f10:	eeb0 0a47 	vmov.f32	s0, s14
 8002f14:	eef0 0a67 	vmov.f32	s1, s15
 8002f18:	f008 fa6a 	bl	800b3f0 <can1_ams_s05_voltages_2_s05v09_encode>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b9c      	ldr	r3, [pc, #624]	@ (8003194 <voltageSendCan+0x1184>)
 8002f22:	709a      	strb	r2, [r3, #2]
    can1_ams_s05_voltages_2.s05v10 = can1_ams_s05_voltages_2_s05v10_encode((float) rawVoltages[51] / 10000.0);
 8002f24:	4b9a      	ldr	r3, [pc, #616]	@ (8003190 <voltageSendCan+0x1180>)
 8002f26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f32:	ee17 0a90 	vmov	r0, s15
 8002f36:	f7fd faab 	bl	8000490 <__aeabi_f2d>
 8002f3a:	a393      	add	r3, pc, #588	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd fc28 	bl	8000794 <__aeabi_ddiv>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	ec43 2b17 	vmov	d7, r2, r3
 8002f4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f50:	eef0 0a67 	vmov.f32	s1, s15
 8002f54:	f008 fa78 	bl	800b448 <can1_ams_s05_voltages_2_s05v10_encode>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8003194 <voltageSendCan+0x1184>)
 8002f5e:	70da      	strb	r2, [r3, #3]
    can1_ams_s05_voltages_2.s05v11 = can1_ams_s05_voltages_2_s05v11_encode((float) rawVoltages[52] / 10000.0);
 8002f60:	4b8b      	ldr	r3, [pc, #556]	@ (8003190 <voltageSendCan+0x1180>)
 8002f62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	ee17 0a90 	vmov	r0, s15
 8002f72:	f7fd fa8d 	bl	8000490 <__aeabi_f2d>
 8002f76:	a384      	add	r3, pc, #528	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f7fd fc0a 	bl	8000794 <__aeabi_ddiv>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	ec43 2b17 	vmov	d7, r2, r3
 8002f88:	eeb0 0a47 	vmov.f32	s0, s14
 8002f8c:	eef0 0a67 	vmov.f32	s1, s15
 8002f90:	f008 fa86 	bl	800b4a0 <can1_ams_s05_voltages_2_s05v11_encode>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b7e      	ldr	r3, [pc, #504]	@ (8003194 <voltageSendCan+0x1184>)
 8002f9a:	711a      	strb	r2, [r3, #4]

    can1_ams_s05_voltages_2_pack(txData, &can1_ams_s05_voltages_2, CAN1_AMS_S05_VOLTAGES_2_LENGTH);
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	497d      	ldr	r1, [pc, #500]	@ (8003194 <voltageSendCan+0x1184>)
 8002fa0:	487d      	ldr	r0, [pc, #500]	@ (8003198 <voltageSendCan+0x1188>)
 8002fa2:	f008 f963 	bl	800b26c <can1_ams_s05_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S05_VOLTAGES_2_FRAME_ID;
 8002fa6:	4b7d      	ldr	r3, [pc, #500]	@ (800319c <voltageSendCan+0x118c>)
 8002fa8:	f240 2261 	movw	r2, #609	@ 0x261
 8002fac:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S05_VOLTAGES_2_LENGTH;
 8002fae:	4b7b      	ldr	r3, [pc, #492]	@ (800319c <voltageSendCan+0x118c>)
 8002fb0:	2205      	movs	r2, #5
 8002fb2:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8002fb4:	4b79      	ldr	r3, [pc, #484]	@ (800319c <voltageSendCan+0x118c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8002fba:	4b78      	ldr	r3, [pc, #480]	@ (800319c <voltageSendCan+0x118c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	4a75      	ldr	r2, [pc, #468]	@ (8003198 <voltageSendCan+0x1188>)
 8002fc4:	4975      	ldr	r1, [pc, #468]	@ (800319c <voltageSendCan+0x118c>)
 8002fc6:	4876      	ldr	r0, [pc, #472]	@ (80031a0 <voltageSendCan+0x1190>)
 8002fc8:	f003 fe70 	bl	8006cac <HAL_CAN_AddTxMessage>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f001 82d6 	beq.w	8004580 <voltageSendCan+0x2570>
      Error_Handler();
 8002fd4:	f002 fe02 	bl	8005bdc <Error_Handler>
    break;
 8002fd8:	f001 bad2 	b.w	8004580 <voltageSendCan+0x2570>

  case 10:
    can1_ams_s06_voltages_1.s06v01 = can1_ams_s06_voltages_1_s06v01_encode((float) rawVoltages[53] / 10000.0);
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003190 <voltageSendCan+0x1180>)
 8002fde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	ee17 0a90 	vmov	r0, s15
 8002fee:	f7fd fa4f 	bl	8000490 <__aeabi_f2d>
 8002ff2:	a365      	add	r3, pc, #404	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fbcc 	bl	8000794 <__aeabi_ddiv>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	ec43 2b17 	vmov	d7, r2, r3
 8003004:	eeb0 0a47 	vmov.f32	s0, s14
 8003008:	eef0 0a67 	vmov.f32	s1, s15
 800300c:	f008 faec 	bl	800b5e8 <can1_ams_s06_voltages_1_s06v01_encode>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b63      	ldr	r3, [pc, #396]	@ (80031a4 <voltageSendCan+0x1194>)
 8003016:	701a      	strb	r2, [r3, #0]
    can1_ams_s06_voltages_1.s06v02 = can1_ams_s06_voltages_1_s06v02_encode((float) rawVoltages[54] / 10000.0);
 8003018:	4b5d      	ldr	r3, [pc, #372]	@ (8003190 <voltageSendCan+0x1180>)
 800301a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	ee17 0a90 	vmov	r0, s15
 800302a:	f7fd fa31 	bl	8000490 <__aeabi_f2d>
 800302e:	a356      	add	r3, pc, #344	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	f7fd fbae 	bl	8000794 <__aeabi_ddiv>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	ec43 2b17 	vmov	d7, r2, r3
 8003040:	eeb0 0a47 	vmov.f32	s0, s14
 8003044:	eef0 0a67 	vmov.f32	s1, s15
 8003048:	f008 fafa 	bl	800b640 <can1_ams_s06_voltages_1_s06v02_encode>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	4b54      	ldr	r3, [pc, #336]	@ (80031a4 <voltageSendCan+0x1194>)
 8003052:	705a      	strb	r2, [r3, #1]
    can1_ams_s06_voltages_1.s06v03 = can1_ams_s06_voltages_1_s06v03_encode((float) rawVoltages[55] / 10000.0);
 8003054:	4b4e      	ldr	r3, [pc, #312]	@ (8003190 <voltageSendCan+0x1180>)
 8003056:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	ee17 0a90 	vmov	r0, s15
 8003066:	f7fd fa13 	bl	8000490 <__aeabi_f2d>
 800306a:	a347      	add	r3, pc, #284	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f7fd fb90 	bl	8000794 <__aeabi_ddiv>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	ec43 2b17 	vmov	d7, r2, r3
 800307c:	eeb0 0a47 	vmov.f32	s0, s14
 8003080:	eef0 0a67 	vmov.f32	s1, s15
 8003084:	f008 fb08 	bl	800b698 <can1_ams_s06_voltages_1_s06v03_encode>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	4b45      	ldr	r3, [pc, #276]	@ (80031a4 <voltageSendCan+0x1194>)
 800308e:	709a      	strb	r2, [r3, #2]
    can1_ams_s06_voltages_1.s06v04 = can1_ams_s06_voltages_1_s06v04_encode((float) rawVoltages[56] / 10000.0);
 8003090:	4b3f      	ldr	r3, [pc, #252]	@ (8003190 <voltageSendCan+0x1180>)
 8003092:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309e:	ee17 0a90 	vmov	r0, s15
 80030a2:	f7fd f9f5 	bl	8000490 <__aeabi_f2d>
 80030a6:	a338      	add	r3, pc, #224	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd fb72 	bl	8000794 <__aeabi_ddiv>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	ec43 2b17 	vmov	d7, r2, r3
 80030b8:	eeb0 0a47 	vmov.f32	s0, s14
 80030bc:	eef0 0a67 	vmov.f32	s1, s15
 80030c0:	f008 fb16 	bl	800b6f0 <can1_ams_s06_voltages_1_s06v04_encode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b36      	ldr	r3, [pc, #216]	@ (80031a4 <voltageSendCan+0x1194>)
 80030ca:	70da      	strb	r2, [r3, #3]
    can1_ams_s06_voltages_1.s06v05 = can1_ams_s06_voltages_1_s06v05_encode((float) rawVoltages[57] / 10000.0);
 80030cc:	4b30      	ldr	r3, [pc, #192]	@ (8003190 <voltageSendCan+0x1180>)
 80030ce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	ee17 0a90 	vmov	r0, s15
 80030de:	f7fd f9d7 	bl	8000490 <__aeabi_f2d>
 80030e2:	a329      	add	r3, pc, #164	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	f7fd fb54 	bl	8000794 <__aeabi_ddiv>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	ec43 2b17 	vmov	d7, r2, r3
 80030f4:	eeb0 0a47 	vmov.f32	s0, s14
 80030f8:	eef0 0a67 	vmov.f32	s1, s15
 80030fc:	f008 fb24 	bl	800b748 <can1_ams_s06_voltages_1_s06v05_encode>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <voltageSendCan+0x1194>)
 8003106:	711a      	strb	r2, [r3, #4]
    can1_ams_s06_voltages_1.s06v06 = can1_ams_s06_voltages_1_s06v06_encode((float) rawVoltages[58] / 10000.0);
 8003108:	4b21      	ldr	r3, [pc, #132]	@ (8003190 <voltageSendCan+0x1180>)
 800310a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	ee17 0a90 	vmov	r0, s15
 800311a:	f7fd f9b9 	bl	8000490 <__aeabi_f2d>
 800311e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003188 <voltageSendCan+0x1178>)
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f7fd fb36 	bl	8000794 <__aeabi_ddiv>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	ec43 2b17 	vmov	d7, r2, r3
 8003130:	eeb0 0a47 	vmov.f32	s0, s14
 8003134:	eef0 0a67 	vmov.f32	s1, s15
 8003138:	f008 fb32 	bl	800b7a0 <can1_ams_s06_voltages_1_s06v06_encode>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <voltageSendCan+0x1194>)
 8003142:	715a      	strb	r2, [r3, #5]

    can1_ams_s06_voltages_1_pack(txData, &can1_ams_s06_voltages_1, CAN1_AMS_S06_VOLTAGES_1_LENGTH);
 8003144:	2206      	movs	r2, #6
 8003146:	4917      	ldr	r1, [pc, #92]	@ (80031a4 <voltageSendCan+0x1194>)
 8003148:	4813      	ldr	r0, [pc, #76]	@ (8003198 <voltageSendCan+0x1188>)
 800314a:	f008 f9d3 	bl	800b4f4 <can1_ams_s06_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S06_VOLTAGES_1_FRAME_ID;
 800314e:	4b13      	ldr	r3, [pc, #76]	@ (800319c <voltageSendCan+0x118c>)
 8003150:	f240 2262 	movw	r2, #610	@ 0x262
 8003154:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S06_VOLTAGES_1_LENGTH;
 8003156:	4b11      	ldr	r3, [pc, #68]	@ (800319c <voltageSendCan+0x118c>)
 8003158:	2206      	movs	r2, #6
 800315a:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800315c:	4b0f      	ldr	r3, [pc, #60]	@ (800319c <voltageSendCan+0x118c>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003162:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <voltageSendCan+0x118c>)
 8003164:	2200      	movs	r2, #0
 8003166:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003168:	2300      	movs	r3, #0
 800316a:	4a0b      	ldr	r2, [pc, #44]	@ (8003198 <voltageSendCan+0x1188>)
 800316c:	490b      	ldr	r1, [pc, #44]	@ (800319c <voltageSendCan+0x118c>)
 800316e:	480c      	ldr	r0, [pc, #48]	@ (80031a0 <voltageSendCan+0x1190>)
 8003170:	f003 fd9c 	bl	8006cac <HAL_CAN_AddTxMessage>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	f001 8204 	beq.w	8004584 <voltageSendCan+0x2574>
      Error_Handler();
 800317c:	f002 fd2e 	bl	8005bdc <Error_Handler>
    break;
 8003180:	f001 ba00 	b.w	8004584 <voltageSendCan+0x2574>
 8003184:	f3af 8000 	nop.w
 8003188:	00000000 	.word	0x00000000
 800318c:	40c38800 	.word	0x40c38800
 8003190:	2000046c 	.word	0x2000046c
 8003194:	20000320 	.word	0x20000320
 8003198:	20000288 	.word	0x20000288
 800319c:	20000254 	.word	0x20000254
 80031a0:	2000011c 	.word	0x2000011c
 80031a4:	20000328 	.word	0x20000328

  case 11:
    can1_ams_s06_voltages_2.s06v07 = can1_ams_s06_voltages_2_s06v07_encode((float) rawVoltages[59] / 10000.0);
 80031a8:	4bb7      	ldr	r3, [pc, #732]	@ (8003488 <voltageSendCan+0x1478>)
 80031aa:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	ee17 0a90 	vmov	r0, s15
 80031ba:	f7fd f969 	bl	8000490 <__aeabi_f2d>
 80031be:	a3b0      	add	r3, pc, #704	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f7fd fae6 	bl	8000794 <__aeabi_ddiv>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	ec43 2b17 	vmov	d7, r2, r3
 80031d0:	eeb0 0a47 	vmov.f32	s0, s14
 80031d4:	eef0 0a67 	vmov.f32	s1, s15
 80031d8:	f008 fb76 	bl	800b8c8 <can1_ams_s06_voltages_2_s06v07_encode>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	4baa      	ldr	r3, [pc, #680]	@ (800348c <voltageSendCan+0x147c>)
 80031e2:	701a      	strb	r2, [r3, #0]
    can1_ams_s06_voltages_2.s06v08 = can1_ams_s06_voltages_2_s06v08_encode((float) rawVoltages[60] / 10000.0);
 80031e4:	4ba8      	ldr	r3, [pc, #672]	@ (8003488 <voltageSendCan+0x1478>)
 80031e6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	ee17 0a90 	vmov	r0, s15
 80031f6:	f7fd f94b 	bl	8000490 <__aeabi_f2d>
 80031fa:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fd fac8 	bl	8000794 <__aeabi_ddiv>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	ec43 2b17 	vmov	d7, r2, r3
 800320c:	eeb0 0a47 	vmov.f32	s0, s14
 8003210:	eef0 0a67 	vmov.f32	s1, s15
 8003214:	f008 fb84 	bl	800b920 <can1_ams_s06_voltages_2_s06v08_encode>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b9b      	ldr	r3, [pc, #620]	@ (800348c <voltageSendCan+0x147c>)
 800321e:	705a      	strb	r2, [r3, #1]
    can1_ams_s06_voltages_2.s06v09 = can1_ams_s06_voltages_2_s06v09_encode((float) rawVoltages[61] / 10000.0);
 8003220:	4b99      	ldr	r3, [pc, #612]	@ (8003488 <voltageSendCan+0x1478>)
 8003222:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	ee17 0a90 	vmov	r0, s15
 8003232:	f7fd f92d 	bl	8000490 <__aeabi_f2d>
 8003236:	a392      	add	r3, pc, #584	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	f7fd faaa 	bl	8000794 <__aeabi_ddiv>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	ec43 2b17 	vmov	d7, r2, r3
 8003248:	eeb0 0a47 	vmov.f32	s0, s14
 800324c:	eef0 0a67 	vmov.f32	s1, s15
 8003250:	f008 fb92 	bl	800b978 <can1_ams_s06_voltages_2_s06v09_encode>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	4b8c      	ldr	r3, [pc, #560]	@ (800348c <voltageSendCan+0x147c>)
 800325a:	709a      	strb	r2, [r3, #2]
    can1_ams_s06_voltages_2.s06v10 = can1_ams_s06_voltages_2_s06v10_encode((float) rawVoltages[62] / 10000.0);
 800325c:	4b8a      	ldr	r3, [pc, #552]	@ (8003488 <voltageSendCan+0x1478>)
 800325e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326a:	ee17 0a90 	vmov	r0, s15
 800326e:	f7fd f90f 	bl	8000490 <__aeabi_f2d>
 8003272:	a383      	add	r3, pc, #524	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f7fd fa8c 	bl	8000794 <__aeabi_ddiv>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	ec43 2b17 	vmov	d7, r2, r3
 8003284:	eeb0 0a47 	vmov.f32	s0, s14
 8003288:	eef0 0a67 	vmov.f32	s1, s15
 800328c:	f008 fba0 	bl	800b9d0 <can1_ams_s06_voltages_2_s06v10_encode>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	4b7d      	ldr	r3, [pc, #500]	@ (800348c <voltageSendCan+0x147c>)
 8003296:	70da      	strb	r2, [r3, #3]

    can1_ams_s06_voltages_2_pack(txData, &can1_ams_s06_voltages_2, CAN1_AMS_S06_VOLTAGES_2_LENGTH);
 8003298:	2205      	movs	r2, #5
 800329a:	497c      	ldr	r1, [pc, #496]	@ (800348c <voltageSendCan+0x147c>)
 800329c:	487c      	ldr	r0, [pc, #496]	@ (8003490 <voltageSendCan+0x1480>)
 800329e:	f008 faa9 	bl	800b7f4 <can1_ams_s06_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S06_VOLTAGES_2_FRAME_ID;
 80032a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003494 <voltageSendCan+0x1484>)
 80032a4:	f240 2263 	movw	r2, #611	@ 0x263
 80032a8:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S06_VOLTAGES_2_LENGTH;
 80032aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003494 <voltageSendCan+0x1484>)
 80032ac:	2205      	movs	r2, #5
 80032ae:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80032b0:	4b78      	ldr	r3, [pc, #480]	@ (8003494 <voltageSendCan+0x1484>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80032b6:	4b77      	ldr	r3, [pc, #476]	@ (8003494 <voltageSendCan+0x1484>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80032bc:	2300      	movs	r3, #0
 80032be:	4a74      	ldr	r2, [pc, #464]	@ (8003490 <voltageSendCan+0x1480>)
 80032c0:	4974      	ldr	r1, [pc, #464]	@ (8003494 <voltageSendCan+0x1484>)
 80032c2:	4875      	ldr	r0, [pc, #468]	@ (8003498 <voltageSendCan+0x1488>)
 80032c4:	f003 fcf2 	bl	8006cac <HAL_CAN_AddTxMessage>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f001 815c 	beq.w	8004588 <voltageSendCan+0x2578>
      Error_Handler();
 80032d0:	f002 fc84 	bl	8005bdc <Error_Handler>
    break;
 80032d4:	f001 b958 	b.w	8004588 <voltageSendCan+0x2578>

  case 12:
    can1_ams_s07_voltages_1.s07v01 = can1_ams_s07_voltages_1_s07v01_encode((float) rawVoltages[63] / 10000.0);
 80032d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003488 <voltageSendCan+0x1478>)
 80032da:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e6:	ee17 0a90 	vmov	r0, s15
 80032ea:	f7fd f8d1 	bl	8000490 <__aeabi_f2d>
 80032ee:	a364      	add	r3, pc, #400	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fd fa4e 	bl	8000794 <__aeabi_ddiv>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	ec43 2b17 	vmov	d7, r2, r3
 8003300:	eeb0 0a47 	vmov.f32	s0, s14
 8003304:	eef0 0a67 	vmov.f32	s1, s15
 8003308:	f008 fc06 	bl	800bb18 <can1_ams_s07_voltages_1_s07v01_encode>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	4b62      	ldr	r3, [pc, #392]	@ (800349c <voltageSendCan+0x148c>)
 8003312:	701a      	strb	r2, [r3, #0]
    can1_ams_s07_voltages_1.s07v02 = can1_ams_s07_voltages_1_s07v02_encode((float) rawVoltages[64] / 10000.0);
 8003314:	4b5c      	ldr	r3, [pc, #368]	@ (8003488 <voltageSendCan+0x1478>)
 8003316:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	ee17 0a90 	vmov	r0, s15
 8003326:	f7fd f8b3 	bl	8000490 <__aeabi_f2d>
 800332a:	a355      	add	r3, pc, #340	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f7fd fa30 	bl	8000794 <__aeabi_ddiv>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	ec43 2b17 	vmov	d7, r2, r3
 800333c:	eeb0 0a47 	vmov.f32	s0, s14
 8003340:	eef0 0a67 	vmov.f32	s1, s15
 8003344:	f008 fc14 	bl	800bb70 <can1_ams_s07_voltages_1_s07v02_encode>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	4b53      	ldr	r3, [pc, #332]	@ (800349c <voltageSendCan+0x148c>)
 800334e:	705a      	strb	r2, [r3, #1]
    can1_ams_s07_voltages_1.s07v03 = can1_ams_s07_voltages_1_s07v03_encode((float) rawVoltages[65] / 10000.0);
 8003350:	4b4d      	ldr	r3, [pc, #308]	@ (8003488 <voltageSendCan+0x1478>)
 8003352:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335e:	ee17 0a90 	vmov	r0, s15
 8003362:	f7fd f895 	bl	8000490 <__aeabi_f2d>
 8003366:	a346      	add	r3, pc, #280	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f7fd fa12 	bl	8000794 <__aeabi_ddiv>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	ec43 2b17 	vmov	d7, r2, r3
 8003378:	eeb0 0a47 	vmov.f32	s0, s14
 800337c:	eef0 0a67 	vmov.f32	s1, s15
 8003380:	f008 fc22 	bl	800bbc8 <can1_ams_s07_voltages_1_s07v03_encode>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	4b44      	ldr	r3, [pc, #272]	@ (800349c <voltageSendCan+0x148c>)
 800338a:	709a      	strb	r2, [r3, #2]
    can1_ams_s07_voltages_1.s07v04 = can1_ams_s07_voltages_1_s07v04_encode((float) rawVoltages[66] / 10000.0);
 800338c:	4b3e      	ldr	r3, [pc, #248]	@ (8003488 <voltageSendCan+0x1478>)
 800338e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339a:	ee17 0a90 	vmov	r0, s15
 800339e:	f7fd f877 	bl	8000490 <__aeabi_f2d>
 80033a2:	a337      	add	r3, pc, #220	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fd f9f4 	bl	8000794 <__aeabi_ddiv>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	ec43 2b17 	vmov	d7, r2, r3
 80033b4:	eeb0 0a47 	vmov.f32	s0, s14
 80033b8:	eef0 0a67 	vmov.f32	s1, s15
 80033bc:	f008 fc30 	bl	800bc20 <can1_ams_s07_voltages_1_s07v04_encode>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b35      	ldr	r3, [pc, #212]	@ (800349c <voltageSendCan+0x148c>)
 80033c6:	70da      	strb	r2, [r3, #3]
    can1_ams_s07_voltages_1.s07v05 = can1_ams_s07_voltages_1_s07v05_encode((float) rawVoltages[67] / 10000.0);
 80033c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003488 <voltageSendCan+0x1478>)
 80033ca:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	ee17 0a90 	vmov	r0, s15
 80033da:	f7fd f859 	bl	8000490 <__aeabi_f2d>
 80033de:	a328      	add	r3, pc, #160	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f7fd f9d6 	bl	8000794 <__aeabi_ddiv>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	ec43 2b17 	vmov	d7, r2, r3
 80033f0:	eeb0 0a47 	vmov.f32	s0, s14
 80033f4:	eef0 0a67 	vmov.f32	s1, s15
 80033f8:	f008 fc3e 	bl	800bc78 <can1_ams_s07_voltages_1_s07v05_encode>
 80033fc:	4603      	mov	r3, r0
 80033fe:	461a      	mov	r2, r3
 8003400:	4b26      	ldr	r3, [pc, #152]	@ (800349c <voltageSendCan+0x148c>)
 8003402:	711a      	strb	r2, [r3, #4]
    can1_ams_s07_voltages_1.s07v06 = can1_ams_s07_voltages_1_s07v06_encode((float) rawVoltages[68] / 10000.0);
 8003404:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <voltageSendCan+0x1478>)
 8003406:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	ee17 0a90 	vmov	r0, s15
 8003416:	f7fd f83b 	bl	8000490 <__aeabi_f2d>
 800341a:	a319      	add	r3, pc, #100	@ (adr r3, 8003480 <voltageSendCan+0x1470>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f7fd f9b8 	bl	8000794 <__aeabi_ddiv>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	ec43 2b17 	vmov	d7, r2, r3
 800342c:	eeb0 0a47 	vmov.f32	s0, s14
 8003430:	eef0 0a67 	vmov.f32	s1, s15
 8003434:	f008 fc4c 	bl	800bcd0 <can1_ams_s07_voltages_1_s07v06_encode>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	4b17      	ldr	r3, [pc, #92]	@ (800349c <voltageSendCan+0x148c>)
 800343e:	715a      	strb	r2, [r3, #5]

    can1_ams_s07_voltages_1_pack(txData, &can1_ams_s07_voltages_1, CAN1_AMS_S07_VOLTAGES_1_LENGTH);
 8003440:	2206      	movs	r2, #6
 8003442:	4916      	ldr	r1, [pc, #88]	@ (800349c <voltageSendCan+0x148c>)
 8003444:	4812      	ldr	r0, [pc, #72]	@ (8003490 <voltageSendCan+0x1480>)
 8003446:	f008 faed 	bl	800ba24 <can1_ams_s07_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S07_VOLTAGES_1_FRAME_ID;
 800344a:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <voltageSendCan+0x1484>)
 800344c:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8003450:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S07_VOLTAGES_1_LENGTH;
 8003452:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <voltageSendCan+0x1484>)
 8003454:	2206      	movs	r2, #6
 8003456:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003458:	4b0e      	ldr	r3, [pc, #56]	@ (8003494 <voltageSendCan+0x1484>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <voltageSendCan+0x1484>)
 8003460:	2200      	movs	r2, #0
 8003462:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003464:	2300      	movs	r3, #0
 8003466:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <voltageSendCan+0x1480>)
 8003468:	490a      	ldr	r1, [pc, #40]	@ (8003494 <voltageSendCan+0x1484>)
 800346a:	480b      	ldr	r0, [pc, #44]	@ (8003498 <voltageSendCan+0x1488>)
 800346c:	f003 fc1e 	bl	8006cac <HAL_CAN_AddTxMessage>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	f001 808a 	beq.w	800458c <voltageSendCan+0x257c>
      Error_Handler();
 8003478:	f002 fbb0 	bl	8005bdc <Error_Handler>
    break;
 800347c:	f001 b886 	b.w	800458c <voltageSendCan+0x257c>
 8003480:	00000000 	.word	0x00000000
 8003484:	40c38800 	.word	0x40c38800
 8003488:	2000046c 	.word	0x2000046c
 800348c:	20000330 	.word	0x20000330
 8003490:	20000288 	.word	0x20000288
 8003494:	20000254 	.word	0x20000254
 8003498:	2000011c 	.word	0x2000011c
 800349c:	20000338 	.word	0x20000338

  case 13:
    can1_ams_s07_voltages_2.s07v07 = can1_ams_s07_voltages_2_s07v07_encode((float) rawVoltages[69] / 10000.0);
 80034a0:	4bc7      	ldr	r3, [pc, #796]	@ (80037c0 <voltageSendCan+0x17b0>)
 80034a2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ae:	ee17 0a90 	vmov	r0, s15
 80034b2:	f7fc ffed 	bl	8000490 <__aeabi_f2d>
 80034b6:	a3c0      	add	r3, pc, #768	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fd f96a 	bl	8000794 <__aeabi_ddiv>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	ec43 2b17 	vmov	d7, r2, r3
 80034c8:	eeb0 0a47 	vmov.f32	s0, s14
 80034cc:	eef0 0a67 	vmov.f32	s1, s15
 80034d0:	f008 fc92 	bl	800bdf8 <can1_ams_s07_voltages_2_s07v07_encode>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4bba      	ldr	r3, [pc, #744]	@ (80037c4 <voltageSendCan+0x17b4>)
 80034da:	701a      	strb	r2, [r3, #0]
    can1_ams_s07_voltages_2.s07v08 = can1_ams_s07_voltages_2_s07v08_encode((float) rawVoltages[70] / 10000.0);
 80034dc:	4bb8      	ldr	r3, [pc, #736]	@ (80037c0 <voltageSendCan+0x17b0>)
 80034de:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	ee17 0a90 	vmov	r0, s15
 80034ee:	f7fc ffcf 	bl	8000490 <__aeabi_f2d>
 80034f2:	a3b1      	add	r3, pc, #708	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fd f94c 	bl	8000794 <__aeabi_ddiv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	ec43 2b17 	vmov	d7, r2, r3
 8003504:	eeb0 0a47 	vmov.f32	s0, s14
 8003508:	eef0 0a67 	vmov.f32	s1, s15
 800350c:	f008 fca0 	bl	800be50 <can1_ams_s07_voltages_2_s07v08_encode>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	4bab      	ldr	r3, [pc, #684]	@ (80037c4 <voltageSendCan+0x17b4>)
 8003516:	705a      	strb	r2, [r3, #1]
    can1_ams_s07_voltages_2.s07v09 = can1_ams_s07_voltages_2_s07v09_encode((float) rawVoltages[71] / 10000.0);
 8003518:	4ba9      	ldr	r3, [pc, #676]	@ (80037c0 <voltageSendCan+0x17b0>)
 800351a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	ee17 0a90 	vmov	r0, s15
 800352a:	f7fc ffb1 	bl	8000490 <__aeabi_f2d>
 800352e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fd f92e 	bl	8000794 <__aeabi_ddiv>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	ec43 2b17 	vmov	d7, r2, r3
 8003540:	eeb0 0a47 	vmov.f32	s0, s14
 8003544:	eef0 0a67 	vmov.f32	s1, s15
 8003548:	f008 fcae 	bl	800bea8 <can1_ams_s07_voltages_2_s07v09_encode>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	4b9c      	ldr	r3, [pc, #624]	@ (80037c4 <voltageSendCan+0x17b4>)
 8003552:	709a      	strb	r2, [r3, #2]
    can1_ams_s07_voltages_2.s07v10 = can1_ams_s07_voltages_2_s07v10_encode((float) rawVoltages[72] / 10000.0);
 8003554:	4b9a      	ldr	r3, [pc, #616]	@ (80037c0 <voltageSendCan+0x17b0>)
 8003556:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003562:	ee17 0a90 	vmov	r0, s15
 8003566:	f7fc ff93 	bl	8000490 <__aeabi_f2d>
 800356a:	a393      	add	r3, pc, #588	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fd f910 	bl	8000794 <__aeabi_ddiv>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	ec43 2b17 	vmov	d7, r2, r3
 800357c:	eeb0 0a47 	vmov.f32	s0, s14
 8003580:	eef0 0a67 	vmov.f32	s1, s15
 8003584:	f008 fcbc 	bl	800bf00 <can1_ams_s07_voltages_2_s07v10_encode>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4b8d      	ldr	r3, [pc, #564]	@ (80037c4 <voltageSendCan+0x17b4>)
 800358e:	70da      	strb	r2, [r3, #3]
    can1_ams_s07_voltages_2.s07v11 = can1_ams_s07_voltages_2_s07v11_encode((float) rawVoltages[73] / 10000.0);
 8003590:	4b8b      	ldr	r3, [pc, #556]	@ (80037c0 <voltageSendCan+0x17b0>)
 8003592:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	ee17 0a90 	vmov	r0, s15
 80035a2:	f7fc ff75 	bl	8000490 <__aeabi_f2d>
 80035a6:	a384      	add	r3, pc, #528	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fd f8f2 	bl	8000794 <__aeabi_ddiv>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	ec43 2b17 	vmov	d7, r2, r3
 80035b8:	eeb0 0a47 	vmov.f32	s0, s14
 80035bc:	eef0 0a67 	vmov.f32	s1, s15
 80035c0:	f008 fcca 	bl	800bf58 <can1_ams_s07_voltages_2_s07v11_encode>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b7e      	ldr	r3, [pc, #504]	@ (80037c4 <voltageSendCan+0x17b4>)
 80035ca:	711a      	strb	r2, [r3, #4]

    can1_ams_s07_voltages_2_pack(txData, &can1_ams_s07_voltages_2, CAN1_AMS_S07_VOLTAGES_2_LENGTH);
 80035cc:	2205      	movs	r2, #5
 80035ce:	497d      	ldr	r1, [pc, #500]	@ (80037c4 <voltageSendCan+0x17b4>)
 80035d0:	487d      	ldr	r0, [pc, #500]	@ (80037c8 <voltageSendCan+0x17b8>)
 80035d2:	f008 fba7 	bl	800bd24 <can1_ams_s07_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S07_VOLTAGES_2_FRAME_ID;
 80035d6:	4b7d      	ldr	r3, [pc, #500]	@ (80037cc <voltageSendCan+0x17bc>)
 80035d8:	f240 2265 	movw	r2, #613	@ 0x265
 80035dc:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S07_VOLTAGES_2_LENGTH;
 80035de:	4b7b      	ldr	r3, [pc, #492]	@ (80037cc <voltageSendCan+0x17bc>)
 80035e0:	2205      	movs	r2, #5
 80035e2:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80035e4:	4b79      	ldr	r3, [pc, #484]	@ (80037cc <voltageSendCan+0x17bc>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80035ea:	4b78      	ldr	r3, [pc, #480]	@ (80037cc <voltageSendCan+0x17bc>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80035f0:	2300      	movs	r3, #0
 80035f2:	4a75      	ldr	r2, [pc, #468]	@ (80037c8 <voltageSendCan+0x17b8>)
 80035f4:	4975      	ldr	r1, [pc, #468]	@ (80037cc <voltageSendCan+0x17bc>)
 80035f6:	4876      	ldr	r0, [pc, #472]	@ (80037d0 <voltageSendCan+0x17c0>)
 80035f8:	f003 fb58 	bl	8006cac <HAL_CAN_AddTxMessage>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 87c6 	beq.w	8004590 <voltageSendCan+0x2580>
      Error_Handler();
 8003604:	f002 faea 	bl	8005bdc <Error_Handler>
    break;
 8003608:	f000 bfc2 	b.w	8004590 <voltageSendCan+0x2580>

  case 14:
    can1_ams_s08_voltages_1.s08v01 = can1_ams_s08_voltages_1_s08v01_encode((float) rawVoltages[74] / 10000.0);
 800360c:	4b6c      	ldr	r3, [pc, #432]	@ (80037c0 <voltageSendCan+0x17b0>)
 800360e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	@ 0x94
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361a:	ee17 0a90 	vmov	r0, s15
 800361e:	f7fc ff37 	bl	8000490 <__aeabi_f2d>
 8003622:	a365      	add	r3, pc, #404	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f7fd f8b4 	bl	8000794 <__aeabi_ddiv>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	ec43 2b17 	vmov	d7, r2, r3
 8003634:	eeb0 0a47 	vmov.f32	s0, s14
 8003638:	eef0 0a67 	vmov.f32	s1, s15
 800363c:	f008 fd30 	bl	800c0a0 <can1_ams_s08_voltages_1_s08v01_encode>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	4b63      	ldr	r3, [pc, #396]	@ (80037d4 <voltageSendCan+0x17c4>)
 8003646:	701a      	strb	r2, [r3, #0]
    can1_ams_s08_voltages_1.s08v02 = can1_ams_s08_voltages_1_s08v02_encode((float) rawVoltages[75] / 10000.0);
 8003648:	4b5d      	ldr	r3, [pc, #372]	@ (80037c0 <voltageSendCan+0x17b0>)
 800364a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003656:	ee17 0a90 	vmov	r0, s15
 800365a:	f7fc ff19 	bl	8000490 <__aeabi_f2d>
 800365e:	a356      	add	r3, pc, #344	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fd f896 	bl	8000794 <__aeabi_ddiv>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	ec43 2b17 	vmov	d7, r2, r3
 8003670:	eeb0 0a47 	vmov.f32	s0, s14
 8003674:	eef0 0a67 	vmov.f32	s1, s15
 8003678:	f008 fd3e 	bl	800c0f8 <can1_ams_s08_voltages_1_s08v02_encode>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	4b54      	ldr	r3, [pc, #336]	@ (80037d4 <voltageSendCan+0x17c4>)
 8003682:	705a      	strb	r2, [r3, #1]
    can1_ams_s08_voltages_1.s08v03 = can1_ams_s08_voltages_1_s08v03_encode((float) rawVoltages[76] / 10000.0);
 8003684:	4b4e      	ldr	r3, [pc, #312]	@ (80037c0 <voltageSendCan+0x17b0>)
 8003686:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	ee17 0a90 	vmov	r0, s15
 8003696:	f7fc fefb 	bl	8000490 <__aeabi_f2d>
 800369a:	a347      	add	r3, pc, #284	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fd f878 	bl	8000794 <__aeabi_ddiv>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	ec43 2b17 	vmov	d7, r2, r3
 80036ac:	eeb0 0a47 	vmov.f32	s0, s14
 80036b0:	eef0 0a67 	vmov.f32	s1, s15
 80036b4:	f008 fd4c 	bl	800c150 <can1_ams_s08_voltages_1_s08v03_encode>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b45      	ldr	r3, [pc, #276]	@ (80037d4 <voltageSendCan+0x17c4>)
 80036be:	709a      	strb	r2, [r3, #2]
    can1_ams_s08_voltages_1.s08v04 = can1_ams_s08_voltages_1_s08v04_encode((float) rawVoltages[77] / 10000.0);
 80036c0:	4b3f      	ldr	r3, [pc, #252]	@ (80037c0 <voltageSendCan+0x17b0>)
 80036c2:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	ee17 0a90 	vmov	r0, s15
 80036d2:	f7fc fedd 	bl	8000490 <__aeabi_f2d>
 80036d6:	a338      	add	r3, pc, #224	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f7fd f85a 	bl	8000794 <__aeabi_ddiv>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	ec43 2b17 	vmov	d7, r2, r3
 80036e8:	eeb0 0a47 	vmov.f32	s0, s14
 80036ec:	eef0 0a67 	vmov.f32	s1, s15
 80036f0:	f008 fd5a 	bl	800c1a8 <can1_ams_s08_voltages_1_s08v04_encode>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <voltageSendCan+0x17c4>)
 80036fa:	70da      	strb	r2, [r3, #3]
    can1_ams_s08_voltages_1.s08v05 = can1_ams_s08_voltages_1_s08v05_encode((float) rawVoltages[78] / 10000.0);
 80036fc:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <voltageSendCan+0x17b0>)
 80036fe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370a:	ee17 0a90 	vmov	r0, s15
 800370e:	f7fc febf 	bl	8000490 <__aeabi_f2d>
 8003712:	a329      	add	r3, pc, #164	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f7fd f83c 	bl	8000794 <__aeabi_ddiv>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	ec43 2b17 	vmov	d7, r2, r3
 8003724:	eeb0 0a47 	vmov.f32	s0, s14
 8003728:	eef0 0a67 	vmov.f32	s1, s15
 800372c:	f008 fd68 	bl	800c200 <can1_ams_s08_voltages_1_s08v05_encode>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <voltageSendCan+0x17c4>)
 8003736:	711a      	strb	r2, [r3, #4]
    can1_ams_s08_voltages_1.s08v06 = can1_ams_s08_voltages_1_s08v06_encode((float) rawVoltages[79] / 10000.0);
 8003738:	4b21      	ldr	r3, [pc, #132]	@ (80037c0 <voltageSendCan+0x17b0>)
 800373a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	ee17 0a90 	vmov	r0, s15
 800374a:	f7fc fea1 	bl	8000490 <__aeabi_f2d>
 800374e:	a31a      	add	r3, pc, #104	@ (adr r3, 80037b8 <voltageSendCan+0x17a8>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f7fd f81e 	bl	8000794 <__aeabi_ddiv>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	ec43 2b17 	vmov	d7, r2, r3
 8003760:	eeb0 0a47 	vmov.f32	s0, s14
 8003764:	eef0 0a67 	vmov.f32	s1, s15
 8003768:	f008 fd76 	bl	800c258 <can1_ams_s08_voltages_1_s08v06_encode>
 800376c:	4603      	mov	r3, r0
 800376e:	461a      	mov	r2, r3
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <voltageSendCan+0x17c4>)
 8003772:	715a      	strb	r2, [r3, #5]

    can1_ams_s08_voltages_1_pack(txData, &can1_ams_s08_voltages_1, CAN1_AMS_S08_VOLTAGES_1_LENGTH);
 8003774:	2206      	movs	r2, #6
 8003776:	4917      	ldr	r1, [pc, #92]	@ (80037d4 <voltageSendCan+0x17c4>)
 8003778:	4813      	ldr	r0, [pc, #76]	@ (80037c8 <voltageSendCan+0x17b8>)
 800377a:	f008 fc17 	bl	800bfac <can1_ams_s08_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S08_VOLTAGES_1_FRAME_ID;
 800377e:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <voltageSendCan+0x17bc>)
 8003780:	f240 2266 	movw	r2, #614	@ 0x266
 8003784:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S08_VOLTAGES_1_LENGTH;
 8003786:	4b11      	ldr	r3, [pc, #68]	@ (80037cc <voltageSendCan+0x17bc>)
 8003788:	2206      	movs	r2, #6
 800378a:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800378c:	4b0f      	ldr	r3, [pc, #60]	@ (80037cc <voltageSendCan+0x17bc>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003792:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <voltageSendCan+0x17bc>)
 8003794:	2200      	movs	r2, #0
 8003796:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003798:	2300      	movs	r3, #0
 800379a:	4a0b      	ldr	r2, [pc, #44]	@ (80037c8 <voltageSendCan+0x17b8>)
 800379c:	490b      	ldr	r1, [pc, #44]	@ (80037cc <voltageSendCan+0x17bc>)
 800379e:	480c      	ldr	r0, [pc, #48]	@ (80037d0 <voltageSendCan+0x17c0>)
 80037a0:	f003 fa84 	bl	8006cac <HAL_CAN_AddTxMessage>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 86f4 	beq.w	8004594 <voltageSendCan+0x2584>
      Error_Handler();
 80037ac:	f002 fa16 	bl	8005bdc <Error_Handler>
    break;
 80037b0:	f000 bef0 	b.w	8004594 <voltageSendCan+0x2584>
 80037b4:	f3af 8000 	nop.w
 80037b8:	00000000 	.word	0x00000000
 80037bc:	40c38800 	.word	0x40c38800
 80037c0:	2000046c 	.word	0x2000046c
 80037c4:	20000340 	.word	0x20000340
 80037c8:	20000288 	.word	0x20000288
 80037cc:	20000254 	.word	0x20000254
 80037d0:	2000011c 	.word	0x2000011c
 80037d4:	20000348 	.word	0x20000348

  case 15:
    can1_ams_s08_voltages_2.s08v07 = can1_ams_s08_voltages_2_s08v07_encode((float) rawVoltages[80] / 10000.0);
 80037d8:	4bb7      	ldr	r3, [pc, #732]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 80037da:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e6:	ee17 0a90 	vmov	r0, s15
 80037ea:	f7fc fe51 	bl	8000490 <__aeabi_f2d>
 80037ee:	a3b0      	add	r3, pc, #704	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc ffce 	bl	8000794 <__aeabi_ddiv>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	ec43 2b17 	vmov	d7, r2, r3
 8003800:	eeb0 0a47 	vmov.f32	s0, s14
 8003804:	eef0 0a67 	vmov.f32	s1, s15
 8003808:	f008 fdba 	bl	800c380 <can1_ams_s08_voltages_2_s08v07_encode>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	4baa      	ldr	r3, [pc, #680]	@ (8003abc <voltageSendCan+0x1aac>)
 8003812:	701a      	strb	r2, [r3, #0]
    can1_ams_s08_voltages_2.s08v08 = can1_ams_s08_voltages_2_s08v08_encode((float) rawVoltages[81] / 10000.0);
 8003814:	4ba8      	ldr	r3, [pc, #672]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 8003816:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	ee17 0a90 	vmov	r0, s15
 8003826:	f7fc fe33 	bl	8000490 <__aeabi_f2d>
 800382a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f7fc ffb0 	bl	8000794 <__aeabi_ddiv>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	ec43 2b17 	vmov	d7, r2, r3
 800383c:	eeb0 0a47 	vmov.f32	s0, s14
 8003840:	eef0 0a67 	vmov.f32	s1, s15
 8003844:	f008 fdc8 	bl	800c3d8 <can1_ams_s08_voltages_2_s08v08_encode>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	4b9b      	ldr	r3, [pc, #620]	@ (8003abc <voltageSendCan+0x1aac>)
 800384e:	705a      	strb	r2, [r3, #1]
    can1_ams_s08_voltages_2.s08v09 = can1_ams_s08_voltages_2_s08v09_encode((float) rawVoltages[82] / 10000.0);
 8003850:	4b99      	ldr	r3, [pc, #612]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 8003852:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	ee17 0a90 	vmov	r0, s15
 8003862:	f7fc fe15 	bl	8000490 <__aeabi_f2d>
 8003866:	a392      	add	r3, pc, #584	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f7fc ff92 	bl	8000794 <__aeabi_ddiv>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	ec43 2b17 	vmov	d7, r2, r3
 8003878:	eeb0 0a47 	vmov.f32	s0, s14
 800387c:	eef0 0a67 	vmov.f32	s1, s15
 8003880:	f008 fdd6 	bl	800c430 <can1_ams_s08_voltages_2_s08v09_encode>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4b8c      	ldr	r3, [pc, #560]	@ (8003abc <voltageSendCan+0x1aac>)
 800388a:	709a      	strb	r2, [r3, #2]
    can1_ams_s08_voltages_2.s08v10 = can1_ams_s08_voltages_2_s08v10_encode((float) rawVoltages[83] / 10000.0);
 800388c:	4b8a      	ldr	r3, [pc, #552]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 800388e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	ee17 0a90 	vmov	r0, s15
 800389e:	f7fc fdf7 	bl	8000490 <__aeabi_f2d>
 80038a2:	a383      	add	r3, pc, #524	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f7fc ff74 	bl	8000794 <__aeabi_ddiv>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	ec43 2b17 	vmov	d7, r2, r3
 80038b4:	eeb0 0a47 	vmov.f32	s0, s14
 80038b8:	eef0 0a67 	vmov.f32	s1, s15
 80038bc:	f008 fde4 	bl	800c488 <can1_ams_s08_voltages_2_s08v10_encode>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b7d      	ldr	r3, [pc, #500]	@ (8003abc <voltageSendCan+0x1aac>)
 80038c6:	70da      	strb	r2, [r3, #3]

    can1_ams_s08_voltages_2_pack(txData, &can1_ams_s08_voltages_2, CAN1_AMS_S08_VOLTAGES_2_LENGTH);
 80038c8:	2205      	movs	r2, #5
 80038ca:	497c      	ldr	r1, [pc, #496]	@ (8003abc <voltageSendCan+0x1aac>)
 80038cc:	487c      	ldr	r0, [pc, #496]	@ (8003ac0 <voltageSendCan+0x1ab0>)
 80038ce:	f008 fced 	bl	800c2ac <can1_ams_s08_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S08_VOLTAGES_2_FRAME_ID;
 80038d2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 80038d4:	f240 2267 	movw	r2, #615	@ 0x267
 80038d8:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S08_VOLTAGES_2_LENGTH;
 80038da:	4b7a      	ldr	r3, [pc, #488]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 80038dc:	2205      	movs	r2, #5
 80038de:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80038e0:	4b78      	ldr	r3, [pc, #480]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80038e6:	4b77      	ldr	r3, [pc, #476]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80038ec:	2300      	movs	r3, #0
 80038ee:	4a74      	ldr	r2, [pc, #464]	@ (8003ac0 <voltageSendCan+0x1ab0>)
 80038f0:	4974      	ldr	r1, [pc, #464]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 80038f2:	4875      	ldr	r0, [pc, #468]	@ (8003ac8 <voltageSendCan+0x1ab8>)
 80038f4:	f003 f9da 	bl	8006cac <HAL_CAN_AddTxMessage>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 864c 	beq.w	8004598 <voltageSendCan+0x2588>
      Error_Handler();
 8003900:	f002 f96c 	bl	8005bdc <Error_Handler>
    break;
 8003904:	f000 be48 	b.w	8004598 <voltageSendCan+0x2588>

  case 16:
    can1_ams_s09_voltages_1.s09v01 = can1_ams_s09_voltages_1_s09v01_encode((float) rawVoltages[84] / 10000.0);
 8003908:	4b6b      	ldr	r3, [pc, #428]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 800390a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	ee17 0a90 	vmov	r0, s15
 800391a:	f7fc fdb9 	bl	8000490 <__aeabi_f2d>
 800391e:	a364      	add	r3, pc, #400	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc ff36 	bl	8000794 <__aeabi_ddiv>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	ec43 2b17 	vmov	d7, r2, r3
 8003930:	eeb0 0a47 	vmov.f32	s0, s14
 8003934:	eef0 0a67 	vmov.f32	s1, s15
 8003938:	f008 fe4a 	bl	800c5d0 <can1_ams_s09_voltages_1_s09v01_encode>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	4b62      	ldr	r3, [pc, #392]	@ (8003acc <voltageSendCan+0x1abc>)
 8003942:	701a      	strb	r2, [r3, #0]
    can1_ams_s09_voltages_1.s09v02 = can1_ams_s09_voltages_1_s09v02_encode((float) rawVoltages[85] / 10000.0);
 8003944:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 8003946:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	ee17 0a90 	vmov	r0, s15
 8003956:	f7fc fd9b 	bl	8000490 <__aeabi_f2d>
 800395a:	a355      	add	r3, pc, #340	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f7fc ff18 	bl	8000794 <__aeabi_ddiv>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	ec43 2b17 	vmov	d7, r2, r3
 800396c:	eeb0 0a47 	vmov.f32	s0, s14
 8003970:	eef0 0a67 	vmov.f32	s1, s15
 8003974:	f008 fe58 	bl	800c628 <can1_ams_s09_voltages_1_s09v02_encode>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <voltageSendCan+0x1abc>)
 800397e:	705a      	strb	r2, [r3, #1]
    can1_ams_s09_voltages_1.s09v03 = can1_ams_s09_voltages_1_s09v03_encode((float) rawVoltages[86] / 10000.0);
 8003980:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 8003982:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398e:	ee17 0a90 	vmov	r0, s15
 8003992:	f7fc fd7d 	bl	8000490 <__aeabi_f2d>
 8003996:	a346      	add	r3, pc, #280	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f7fc fefa 	bl	8000794 <__aeabi_ddiv>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	ec43 2b17 	vmov	d7, r2, r3
 80039a8:	eeb0 0a47 	vmov.f32	s0, s14
 80039ac:	eef0 0a67 	vmov.f32	s1, s15
 80039b0:	f008 fe66 	bl	800c680 <can1_ams_s09_voltages_1_s09v03_encode>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b44      	ldr	r3, [pc, #272]	@ (8003acc <voltageSendCan+0x1abc>)
 80039ba:	709a      	strb	r2, [r3, #2]
    can1_ams_s09_voltages_1.s09v04 = can1_ams_s09_voltages_1_s09v04_encode((float) rawVoltages[87] / 10000.0);
 80039bc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 80039be:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	ee17 0a90 	vmov	r0, s15
 80039ce:	f7fc fd5f 	bl	8000490 <__aeabi_f2d>
 80039d2:	a337      	add	r3, pc, #220	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f7fc fedc 	bl	8000794 <__aeabi_ddiv>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	ec43 2b17 	vmov	d7, r2, r3
 80039e4:	eeb0 0a47 	vmov.f32	s0, s14
 80039e8:	eef0 0a67 	vmov.f32	s1, s15
 80039ec:	f008 fe74 	bl	800c6d8 <can1_ams_s09_voltages_1_s09v04_encode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b35      	ldr	r3, [pc, #212]	@ (8003acc <voltageSendCan+0x1abc>)
 80039f6:	70da      	strb	r2, [r3, #3]
    can1_ams_s09_voltages_1.s09v05 = can1_ams_s09_voltages_1_s09v05_encode((float) rawVoltages[88] / 10000.0);
 80039f8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 80039fa:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	ee17 0a90 	vmov	r0, s15
 8003a0a:	f7fc fd41 	bl	8000490 <__aeabi_f2d>
 8003a0e:	a328      	add	r3, pc, #160	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f7fc febe 	bl	8000794 <__aeabi_ddiv>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	ec43 2b17 	vmov	d7, r2, r3
 8003a20:	eeb0 0a47 	vmov.f32	s0, s14
 8003a24:	eef0 0a67 	vmov.f32	s1, s15
 8003a28:	f008 fe82 	bl	800c730 <can1_ams_s09_voltages_1_s09v05_encode>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4b26      	ldr	r3, [pc, #152]	@ (8003acc <voltageSendCan+0x1abc>)
 8003a32:	711a      	strb	r2, [r3, #4]
    can1_ams_s09_voltages_1.s09v06 = can1_ams_s09_voltages_1_s09v06_encode((float) rawVoltages[89] / 10000.0);
 8003a34:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <voltageSendCan+0x1aa8>)
 8003a36:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	ee17 0a90 	vmov	r0, s15
 8003a46:	f7fc fd23 	bl	8000490 <__aeabi_f2d>
 8003a4a:	a319      	add	r3, pc, #100	@ (adr r3, 8003ab0 <voltageSendCan+0x1aa0>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f7fc fea0 	bl	8000794 <__aeabi_ddiv>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	ec43 2b17 	vmov	d7, r2, r3
 8003a5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a60:	eef0 0a67 	vmov.f32	s1, s15
 8003a64:	f008 fe90 	bl	800c788 <can1_ams_s09_voltages_1_s09v06_encode>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <voltageSendCan+0x1abc>)
 8003a6e:	715a      	strb	r2, [r3, #5]

    can1_ams_s09_voltages_1_pack(txData, &can1_ams_s09_voltages_1, CAN1_AMS_S09_VOLTAGES_1_LENGTH);
 8003a70:	2206      	movs	r2, #6
 8003a72:	4916      	ldr	r1, [pc, #88]	@ (8003acc <voltageSendCan+0x1abc>)
 8003a74:	4812      	ldr	r0, [pc, #72]	@ (8003ac0 <voltageSendCan+0x1ab0>)
 8003a76:	f008 fd31 	bl	800c4dc <can1_ams_s09_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S09_VOLTAGES_1_FRAME_ID;
 8003a7a:	4b12      	ldr	r3, [pc, #72]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 8003a7c:	f44f 721a 	mov.w	r2, #616	@ 0x268
 8003a80:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S09_VOLTAGES_1_LENGTH;
 8003a82:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 8003a84:	2206      	movs	r2, #6
 8003a86:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003a88:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003a94:	2300      	movs	r3, #0
 8003a96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac0 <voltageSendCan+0x1ab0>)
 8003a98:	490a      	ldr	r1, [pc, #40]	@ (8003ac4 <voltageSendCan+0x1ab4>)
 8003a9a:	480b      	ldr	r0, [pc, #44]	@ (8003ac8 <voltageSendCan+0x1ab8>)
 8003a9c:	f003 f906 	bl	8006cac <HAL_CAN_AddTxMessage>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 857a 	beq.w	800459c <voltageSendCan+0x258c>
      Error_Handler();
 8003aa8:	f002 f898 	bl	8005bdc <Error_Handler>
    break;
 8003aac:	f000 bd76 	b.w	800459c <voltageSendCan+0x258c>
 8003ab0:	00000000 	.word	0x00000000
 8003ab4:	40c38800 	.word	0x40c38800
 8003ab8:	2000046c 	.word	0x2000046c
 8003abc:	20000350 	.word	0x20000350
 8003ac0:	20000288 	.word	0x20000288
 8003ac4:	20000254 	.word	0x20000254
 8003ac8:	2000011c 	.word	0x2000011c
 8003acc:	20000358 	.word	0x20000358

  case 17:
    can1_ams_s09_voltages_2.s09v07 = can1_ams_s09_voltages_2_s09v07_encode((float) rawVoltages[90] / 10000.0);
 8003ad0:	4bc7      	ldr	r3, [pc, #796]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003ad2:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	ee17 0a90 	vmov	r0, s15
 8003ae2:	f7fc fcd5 	bl	8000490 <__aeabi_f2d>
 8003ae6:	a3c0      	add	r3, pc, #768	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fe52 	bl	8000794 <__aeabi_ddiv>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	ec43 2b17 	vmov	d7, r2, r3
 8003af8:	eeb0 0a47 	vmov.f32	s0, s14
 8003afc:	eef0 0a67 	vmov.f32	s1, s15
 8003b00:	f008 fed6 	bl	800c8b0 <can1_ams_s09_voltages_2_s09v07_encode>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4bba      	ldr	r3, [pc, #744]	@ (8003df4 <voltageSendCan+0x1de4>)
 8003b0a:	701a      	strb	r2, [r3, #0]
    can1_ams_s09_voltages_2.s09v08 = can1_ams_s09_voltages_2_s09v08_encode((float) rawVoltages[91] / 10000.0);
 8003b0c:	4bb8      	ldr	r3, [pc, #736]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003b0e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	ee17 0a90 	vmov	r0, s15
 8003b1e:	f7fc fcb7 	bl	8000490 <__aeabi_f2d>
 8003b22:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f7fc fe34 	bl	8000794 <__aeabi_ddiv>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	ec43 2b17 	vmov	d7, r2, r3
 8003b34:	eeb0 0a47 	vmov.f32	s0, s14
 8003b38:	eef0 0a67 	vmov.f32	s1, s15
 8003b3c:	f008 fee4 	bl	800c908 <can1_ams_s09_voltages_2_s09v08_encode>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4bab      	ldr	r3, [pc, #684]	@ (8003df4 <voltageSendCan+0x1de4>)
 8003b46:	705a      	strb	r2, [r3, #1]
    can1_ams_s09_voltages_2.s09v09 = can1_ams_s09_voltages_2_s09v09_encode((float) rawVoltages[92] / 10000.0);
 8003b48:	4ba9      	ldr	r3, [pc, #676]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003b4a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b56:	ee17 0a90 	vmov	r0, s15
 8003b5a:	f7fc fc99 	bl	8000490 <__aeabi_f2d>
 8003b5e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc fe16 	bl	8000794 <__aeabi_ddiv>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	ec43 2b17 	vmov	d7, r2, r3
 8003b70:	eeb0 0a47 	vmov.f32	s0, s14
 8003b74:	eef0 0a67 	vmov.f32	s1, s15
 8003b78:	f008 fef2 	bl	800c960 <can1_ams_s09_voltages_2_s09v09_encode>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b9c      	ldr	r3, [pc, #624]	@ (8003df4 <voltageSendCan+0x1de4>)
 8003b82:	709a      	strb	r2, [r3, #2]
    can1_ams_s09_voltages_2.s09v10 = can1_ams_s09_voltages_2_s09v10_encode((float) rawVoltages[93] / 10000.0);
 8003b84:	4b9a      	ldr	r3, [pc, #616]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003b86:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	ee17 0a90 	vmov	r0, s15
 8003b96:	f7fc fc7b 	bl	8000490 <__aeabi_f2d>
 8003b9a:	a393      	add	r3, pc, #588	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f7fc fdf8 	bl	8000794 <__aeabi_ddiv>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	ec43 2b17 	vmov	d7, r2, r3
 8003bac:	eeb0 0a47 	vmov.f32	s0, s14
 8003bb0:	eef0 0a67 	vmov.f32	s1, s15
 8003bb4:	f008 ff00 	bl	800c9b8 <can1_ams_s09_voltages_2_s09v10_encode>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8003df4 <voltageSendCan+0x1de4>)
 8003bbe:	70da      	strb	r2, [r3, #3]
    can1_ams_s09_voltages_2.s09v11 = can1_ams_s09_voltages_2_s09v11_encode((float) rawVoltages[94] / 10000.0);
 8003bc0:	4b8b      	ldr	r3, [pc, #556]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003bc2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	ee17 0a90 	vmov	r0, s15
 8003bd2:	f7fc fc5d 	bl	8000490 <__aeabi_f2d>
 8003bd6:	a384      	add	r3, pc, #528	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f7fc fdda 	bl	8000794 <__aeabi_ddiv>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	ec43 2b17 	vmov	d7, r2, r3
 8003be8:	eeb0 0a47 	vmov.f32	s0, s14
 8003bec:	eef0 0a67 	vmov.f32	s1, s15
 8003bf0:	f008 ff0e 	bl	800ca10 <can1_ams_s09_voltages_2_s09v11_encode>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8003df4 <voltageSendCan+0x1de4>)
 8003bfa:	711a      	strb	r2, [r3, #4]

    can1_ams_s09_voltages_2_pack(txData, &can1_ams_s09_voltages_2, CAN1_AMS_S09_VOLTAGES_2_LENGTH);
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	497d      	ldr	r1, [pc, #500]	@ (8003df4 <voltageSendCan+0x1de4>)
 8003c00:	487d      	ldr	r0, [pc, #500]	@ (8003df8 <voltageSendCan+0x1de8>)
 8003c02:	f008 fdeb 	bl	800c7dc <can1_ams_s09_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S09_VOLTAGES_2_FRAME_ID;
 8003c06:	4b7d      	ldr	r3, [pc, #500]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003c08:	f240 2269 	movw	r2, #617	@ 0x269
 8003c0c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S09_VOLTAGES_2_LENGTH;
 8003c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003c10:	2205      	movs	r2, #5
 8003c12:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003c14:	4b79      	ldr	r3, [pc, #484]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003c1a:	4b78      	ldr	r3, [pc, #480]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003c20:	2300      	movs	r3, #0
 8003c22:	4a75      	ldr	r2, [pc, #468]	@ (8003df8 <voltageSendCan+0x1de8>)
 8003c24:	4975      	ldr	r1, [pc, #468]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003c26:	4876      	ldr	r0, [pc, #472]	@ (8003e00 <voltageSendCan+0x1df0>)
 8003c28:	f003 f840 	bl	8006cac <HAL_CAN_AddTxMessage>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 84b6 	beq.w	80045a0 <voltageSendCan+0x2590>
      Error_Handler();
 8003c34:	f001 ffd2 	bl	8005bdc <Error_Handler>
    break;
 8003c38:	f000 bcb2 	b.w	80045a0 <voltageSendCan+0x2590>

  case 18:
    can1_ams_s10_voltages_1.s10v01 = can1_ams_s10_voltages_1_s10v01_encode((float) rawVoltages[95] / 10000.0);
 8003c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003c3e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	ee17 0a90 	vmov	r0, s15
 8003c4e:	f7fc fc1f 	bl	8000490 <__aeabi_f2d>
 8003c52:	a365      	add	r3, pc, #404	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f7fc fd9c 	bl	8000794 <__aeabi_ddiv>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	ec43 2b17 	vmov	d7, r2, r3
 8003c64:	eeb0 0a47 	vmov.f32	s0, s14
 8003c68:	eef0 0a67 	vmov.f32	s1, s15
 8003c6c:	f008 ff74 	bl	800cb58 <can1_ams_s10_voltages_1_s10v01_encode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b63      	ldr	r3, [pc, #396]	@ (8003e04 <voltageSendCan+0x1df4>)
 8003c76:	701a      	strb	r2, [r3, #0]
    can1_ams_s10_voltages_1.s10v02 = can1_ams_s10_voltages_1_s10v02_encode((float) rawVoltages[96] / 10000.0);
 8003c78:	4b5d      	ldr	r3, [pc, #372]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003c7a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	ee17 0a90 	vmov	r0, s15
 8003c8a:	f7fc fc01 	bl	8000490 <__aeabi_f2d>
 8003c8e:	a356      	add	r3, pc, #344	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f7fc fd7e 	bl	8000794 <__aeabi_ddiv>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	ec43 2b17 	vmov	d7, r2, r3
 8003ca0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ca4:	eef0 0a67 	vmov.f32	s1, s15
 8003ca8:	f008 ff82 	bl	800cbb0 <can1_ams_s10_voltages_1_s10v02_encode>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b54      	ldr	r3, [pc, #336]	@ (8003e04 <voltageSendCan+0x1df4>)
 8003cb2:	705a      	strb	r2, [r3, #1]
    can1_ams_s10_voltages_1.s10v03 = can1_ams_s10_voltages_1_s10v03_encode((float) rawVoltages[97] / 10000.0);
 8003cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003cb6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	@ 0xc2
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc2:	ee17 0a90 	vmov	r0, s15
 8003cc6:	f7fc fbe3 	bl	8000490 <__aeabi_f2d>
 8003cca:	a347      	add	r3, pc, #284	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f7fc fd60 	bl	8000794 <__aeabi_ddiv>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	ec43 2b17 	vmov	d7, r2, r3
 8003cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ce0:	eef0 0a67 	vmov.f32	s1, s15
 8003ce4:	f008 ff90 	bl	800cc08 <can1_ams_s10_voltages_1_s10v03_encode>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b45      	ldr	r3, [pc, #276]	@ (8003e04 <voltageSendCan+0x1df4>)
 8003cee:	709a      	strb	r2, [r3, #2]
    can1_ams_s10_voltages_1.s10v04 = can1_ams_s10_voltages_1_s10v04_encode((float) rawVoltages[98] / 10000.0);
 8003cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003cf2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	@ 0xc4
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	ee17 0a90 	vmov	r0, s15
 8003d02:	f7fc fbc5 	bl	8000490 <__aeabi_f2d>
 8003d06:	a338      	add	r3, pc, #224	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f7fc fd42 	bl	8000794 <__aeabi_ddiv>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	ec43 2b17 	vmov	d7, r2, r3
 8003d18:	eeb0 0a47 	vmov.f32	s0, s14
 8003d1c:	eef0 0a67 	vmov.f32	s1, s15
 8003d20:	f008 ff9e 	bl	800cc60 <can1_ams_s10_voltages_1_s10v04_encode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <voltageSendCan+0x1df4>)
 8003d2a:	70da      	strb	r2, [r3, #3]
    can1_ams_s10_voltages_1.s10v05 = can1_ams_s10_voltages_1_s10v05_encode((float) rawVoltages[99] / 10000.0);
 8003d2c:	4b30      	ldr	r3, [pc, #192]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003d2e:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	@ 0xc6
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	ee17 0a90 	vmov	r0, s15
 8003d3e:	f7fc fba7 	bl	8000490 <__aeabi_f2d>
 8003d42:	a329      	add	r3, pc, #164	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f7fc fd24 	bl	8000794 <__aeabi_ddiv>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	ec43 2b17 	vmov	d7, r2, r3
 8003d54:	eeb0 0a47 	vmov.f32	s0, s14
 8003d58:	eef0 0a67 	vmov.f32	s1, s15
 8003d5c:	f008 ffac 	bl	800ccb8 <can1_ams_s10_voltages_1_s10v05_encode>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b27      	ldr	r3, [pc, #156]	@ (8003e04 <voltageSendCan+0x1df4>)
 8003d66:	711a      	strb	r2, [r3, #4]
    can1_ams_s10_voltages_1.s10v06 = can1_ams_s10_voltages_1_s10v06_encode((float) rawVoltages[100] / 10000.0);
 8003d68:	4b21      	ldr	r3, [pc, #132]	@ (8003df0 <voltageSendCan+0x1de0>)
 8003d6a:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	@ 0xc8
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	ee17 0a90 	vmov	r0, s15
 8003d7a:	f7fc fb89 	bl	8000490 <__aeabi_f2d>
 8003d7e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003de8 <voltageSendCan+0x1dd8>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f7fc fd06 	bl	8000794 <__aeabi_ddiv>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	ec43 2b17 	vmov	d7, r2, r3
 8003d90:	eeb0 0a47 	vmov.f32	s0, s14
 8003d94:	eef0 0a67 	vmov.f32	s1, s15
 8003d98:	f008 ffba 	bl	800cd10 <can1_ams_s10_voltages_1_s10v06_encode>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <voltageSendCan+0x1df4>)
 8003da2:	715a      	strb	r2, [r3, #5]

    can1_ams_s10_voltages_1_pack(txData, &can1_ams_s10_voltages_1, CAN1_AMS_S10_VOLTAGES_1_LENGTH);
 8003da4:	2206      	movs	r2, #6
 8003da6:	4917      	ldr	r1, [pc, #92]	@ (8003e04 <voltageSendCan+0x1df4>)
 8003da8:	4813      	ldr	r0, [pc, #76]	@ (8003df8 <voltageSendCan+0x1de8>)
 8003daa:	f008 fe5b 	bl	800ca64 <can1_ams_s10_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S10_VOLTAGES_1_FRAME_ID;
 8003dae:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003db0:	f240 226a 	movw	r2, #618	@ 0x26a
 8003db4:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S10_VOLTAGES_1_LENGTH;
 8003db6:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003db8:	2206      	movs	r2, #6
 8003dba:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4a0b      	ldr	r2, [pc, #44]	@ (8003df8 <voltageSendCan+0x1de8>)
 8003dcc:	490b      	ldr	r1, [pc, #44]	@ (8003dfc <voltageSendCan+0x1dec>)
 8003dce:	480c      	ldr	r0, [pc, #48]	@ (8003e00 <voltageSendCan+0x1df0>)
 8003dd0:	f002 ff6c 	bl	8006cac <HAL_CAN_AddTxMessage>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 83e4 	beq.w	80045a4 <voltageSendCan+0x2594>
      Error_Handler();
 8003ddc:	f001 fefe 	bl	8005bdc <Error_Handler>
    break;
 8003de0:	e3e0      	b.n	80045a4 <voltageSendCan+0x2594>
 8003de2:	bf00      	nop
 8003de4:	f3af 8000 	nop.w
 8003de8:	00000000 	.word	0x00000000
 8003dec:	40c38800 	.word	0x40c38800
 8003df0:	2000046c 	.word	0x2000046c
 8003df4:	20000360 	.word	0x20000360
 8003df8:	20000288 	.word	0x20000288
 8003dfc:	20000254 	.word	0x20000254
 8003e00:	2000011c 	.word	0x2000011c
 8003e04:	20000368 	.word	0x20000368

  case 19:
    can1_ams_s10_voltages_2.s10v07 = can1_ams_s10_voltages_2_s10v07_encode((float) rawVoltages[101] / 10000.0);
 8003e08:	4bb7      	ldr	r3, [pc, #732]	@ (80040e8 <voltageSendCan+0x20d8>)
 8003e0a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	ee17 0a90 	vmov	r0, s15
 8003e1a:	f7fc fb39 	bl	8000490 <__aeabi_f2d>
 8003e1e:	a3b0      	add	r3, pc, #704	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc fcb6 	bl	8000794 <__aeabi_ddiv>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	ec43 2b17 	vmov	d7, r2, r3
 8003e30:	eeb0 0a47 	vmov.f32	s0, s14
 8003e34:	eef0 0a67 	vmov.f32	s1, s15
 8003e38:	f008 fffe 	bl	800ce38 <can1_ams_s10_voltages_2_s10v07_encode>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4baa      	ldr	r3, [pc, #680]	@ (80040ec <voltageSendCan+0x20dc>)
 8003e42:	701a      	strb	r2, [r3, #0]
    can1_ams_s10_voltages_2.s10v08 = can1_ams_s10_voltages_2_s10v08_encode((float) rawVoltages[102] / 10000.0);
 8003e44:	4ba8      	ldr	r3, [pc, #672]	@ (80040e8 <voltageSendCan+0x20d8>)
 8003e46:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	ee17 0a90 	vmov	r0, s15
 8003e56:	f7fc fb1b 	bl	8000490 <__aeabi_f2d>
 8003e5a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fc98 	bl	8000794 <__aeabi_ddiv>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	ec43 2b17 	vmov	d7, r2, r3
 8003e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e70:	eef0 0a67 	vmov.f32	s1, s15
 8003e74:	f009 f80c 	bl	800ce90 <can1_ams_s10_voltages_2_s10v08_encode>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b9b      	ldr	r3, [pc, #620]	@ (80040ec <voltageSendCan+0x20dc>)
 8003e7e:	705a      	strb	r2, [r3, #1]
    can1_ams_s10_voltages_2.s10v09 = can1_ams_s10_voltages_2_s10v09_encode((float) rawVoltages[103] / 10000.0);
 8003e80:	4b99      	ldr	r3, [pc, #612]	@ (80040e8 <voltageSendCan+0x20d8>)
 8003e82:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	ee17 0a90 	vmov	r0, s15
 8003e92:	f7fc fafd 	bl	8000490 <__aeabi_f2d>
 8003e96:	a392      	add	r3, pc, #584	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f7fc fc7a 	bl	8000794 <__aeabi_ddiv>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	ec43 2b17 	vmov	d7, r2, r3
 8003ea8:	eeb0 0a47 	vmov.f32	s0, s14
 8003eac:	eef0 0a67 	vmov.f32	s1, s15
 8003eb0:	f009 f81a 	bl	800cee8 <can1_ams_s10_voltages_2_s10v09_encode>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80040ec <voltageSendCan+0x20dc>)
 8003eba:	709a      	strb	r2, [r3, #2]
    can1_ams_s10_voltages_2.s10v10 = can1_ams_s10_voltages_2_s10v10_encode((float) rawVoltages[104] / 10000.0);
 8003ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80040e8 <voltageSendCan+0x20d8>)
 8003ebe:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	ee17 0a90 	vmov	r0, s15
 8003ece:	f7fc fadf 	bl	8000490 <__aeabi_f2d>
 8003ed2:	a383      	add	r3, pc, #524	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f7fc fc5c 	bl	8000794 <__aeabi_ddiv>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	ec43 2b17 	vmov	d7, r2, r3
 8003ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8003ee8:	eef0 0a67 	vmov.f32	s1, s15
 8003eec:	f009 f828 	bl	800cf40 <can1_ams_s10_voltages_2_s10v10_encode>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80040ec <voltageSendCan+0x20dc>)
 8003ef6:	70da      	strb	r2, [r3, #3]

    can1_ams_s10_voltages_2_pack(txData, &can1_ams_s10_voltages_2, CAN1_AMS_S10_VOLTAGES_2_LENGTH);
 8003ef8:	2205      	movs	r2, #5
 8003efa:	497c      	ldr	r1, [pc, #496]	@ (80040ec <voltageSendCan+0x20dc>)
 8003efc:	487c      	ldr	r0, [pc, #496]	@ (80040f0 <voltageSendCan+0x20e0>)
 8003efe:	f008 ff31 	bl	800cd64 <can1_ams_s10_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S10_VOLTAGES_2_FRAME_ID;
 8003f02:	4b7c      	ldr	r3, [pc, #496]	@ (80040f4 <voltageSendCan+0x20e4>)
 8003f04:	f240 226b 	movw	r2, #619	@ 0x26b
 8003f08:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S10_VOLTAGES_2_LENGTH;
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80040f4 <voltageSendCan+0x20e4>)
 8003f0c:	2205      	movs	r2, #5
 8003f0e:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8003f10:	4b78      	ldr	r3, [pc, #480]	@ (80040f4 <voltageSendCan+0x20e4>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8003f16:	4b77      	ldr	r3, [pc, #476]	@ (80040f4 <voltageSendCan+0x20e4>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4a74      	ldr	r2, [pc, #464]	@ (80040f0 <voltageSendCan+0x20e0>)
 8003f20:	4974      	ldr	r1, [pc, #464]	@ (80040f4 <voltageSendCan+0x20e4>)
 8003f22:	4875      	ldr	r0, [pc, #468]	@ (80040f8 <voltageSendCan+0x20e8>)
 8003f24:	f002 fec2 	bl	8006cac <HAL_CAN_AddTxMessage>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 833c 	beq.w	80045a8 <voltageSendCan+0x2598>
      Error_Handler();
 8003f30:	f001 fe54 	bl	8005bdc <Error_Handler>
    break;
 8003f34:	e338      	b.n	80045a8 <voltageSendCan+0x2598>

  case 20:
    can1_ams_s11_voltages_1.s11v01 = can1_ams_s11_voltages_1_s11v01_encode((float) rawVoltages[105] / 10000.0);
 8003f36:	4b6c      	ldr	r3, [pc, #432]	@ (80040e8 <voltageSendCan+0x20d8>)
 8003f38:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f44:	ee17 0a90 	vmov	r0, s15
 8003f48:	f7fc faa2 	bl	8000490 <__aeabi_f2d>
 8003f4c:	a364      	add	r3, pc, #400	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f7fc fc1f 	bl	8000794 <__aeabi_ddiv>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	ec43 2b17 	vmov	d7, r2, r3
 8003f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f62:	eef0 0a67 	vmov.f32	s1, s15
 8003f66:	f009 f88f 	bl	800d088 <can1_ams_s11_voltages_1_s11v01_encode>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b63      	ldr	r3, [pc, #396]	@ (80040fc <voltageSendCan+0x20ec>)
 8003f70:	701a      	strb	r2, [r3, #0]
    can1_ams_s11_voltages_1.s11v02 = can1_ams_s11_voltages_1_s11v02_encode((float) rawVoltages[106] / 10000.0);
 8003f72:	4b5d      	ldr	r3, [pc, #372]	@ (80040e8 <voltageSendCan+0x20d8>)
 8003f74:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f80:	ee17 0a90 	vmov	r0, s15
 8003f84:	f7fc fa84 	bl	8000490 <__aeabi_f2d>
 8003f88:	a355      	add	r3, pc, #340	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc fc01 	bl	8000794 <__aeabi_ddiv>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	ec43 2b17 	vmov	d7, r2, r3
 8003f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f9e:	eef0 0a67 	vmov.f32	s1, s15
 8003fa2:	f009 f89d 	bl	800d0e0 <can1_ams_s11_voltages_1_s11v02_encode>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b54      	ldr	r3, [pc, #336]	@ (80040fc <voltageSendCan+0x20ec>)
 8003fac:	705a      	strb	r2, [r3, #1]
    can1_ams_s11_voltages_1.s11v03 = can1_ams_s11_voltages_1_s11v03_encode((float) rawVoltages[107] / 10000.0);
 8003fae:	4b4e      	ldr	r3, [pc, #312]	@ (80040e8 <voltageSendCan+0x20d8>)
 8003fb0:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbc:	ee17 0a90 	vmov	r0, s15
 8003fc0:	f7fc fa66 	bl	8000490 <__aeabi_f2d>
 8003fc4:	a346      	add	r3, pc, #280	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f7fc fbe3 	bl	8000794 <__aeabi_ddiv>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	ec43 2b17 	vmov	d7, r2, r3
 8003fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8003fda:	eef0 0a67 	vmov.f32	s1, s15
 8003fde:	f009 f8ab 	bl	800d138 <can1_ams_s11_voltages_1_s11v03_encode>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b45      	ldr	r3, [pc, #276]	@ (80040fc <voltageSendCan+0x20ec>)
 8003fe8:	709a      	strb	r2, [r3, #2]
    can1_ams_s11_voltages_1.s11v04 = can1_ams_s11_voltages_1_s11v04_encode((float) rawVoltages[108] / 10000.0);
 8003fea:	4b3f      	ldr	r3, [pc, #252]	@ (80040e8 <voltageSendCan+0x20d8>)
 8003fec:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	@ 0xd8
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff8:	ee17 0a90 	vmov	r0, s15
 8003ffc:	f7fc fa48 	bl	8000490 <__aeabi_f2d>
 8004000:	a337      	add	r3, pc, #220	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f7fc fbc5 	bl	8000794 <__aeabi_ddiv>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	ec43 2b17 	vmov	d7, r2, r3
 8004012:	eeb0 0a47 	vmov.f32	s0, s14
 8004016:	eef0 0a67 	vmov.f32	s1, s15
 800401a:	f009 f8b9 	bl	800d190 <can1_ams_s11_voltages_1_s11v04_encode>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	4b36      	ldr	r3, [pc, #216]	@ (80040fc <voltageSendCan+0x20ec>)
 8004024:	70da      	strb	r2, [r3, #3]
    can1_ams_s11_voltages_1.s11v05 = can1_ams_s11_voltages_1_s11v05_encode((float) rawVoltages[109] / 10000.0);
 8004026:	4b30      	ldr	r3, [pc, #192]	@ (80040e8 <voltageSendCan+0x20d8>)
 8004028:	f8b3 30da 	ldrh.w	r3, [r3, #218]	@ 0xda
 800402c:	ee07 3a90 	vmov	s15, r3
 8004030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004034:	ee17 0a90 	vmov	r0, s15
 8004038:	f7fc fa2a 	bl	8000490 <__aeabi_f2d>
 800403c:	a328      	add	r3, pc, #160	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f7fc fba7 	bl	8000794 <__aeabi_ddiv>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	ec43 2b17 	vmov	d7, r2, r3
 800404e:	eeb0 0a47 	vmov.f32	s0, s14
 8004052:	eef0 0a67 	vmov.f32	s1, s15
 8004056:	f009 f8c7 	bl	800d1e8 <can1_ams_s11_voltages_1_s11v05_encode>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <voltageSendCan+0x20ec>)
 8004060:	711a      	strb	r2, [r3, #4]
    can1_ams_s11_voltages_1.s11v06 = can1_ams_s11_voltages_1_s11v06_encode((float) rawVoltages[110] / 10000.0);
 8004062:	4b21      	ldr	r3, [pc, #132]	@ (80040e8 <voltageSendCan+0x20d8>)
 8004064:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004070:	ee17 0a90 	vmov	r0, s15
 8004074:	f7fc fa0c 	bl	8000490 <__aeabi_f2d>
 8004078:	a319      	add	r3, pc, #100	@ (adr r3, 80040e0 <voltageSendCan+0x20d0>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc fb89 	bl	8000794 <__aeabi_ddiv>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	ec43 2b17 	vmov	d7, r2, r3
 800408a:	eeb0 0a47 	vmov.f32	s0, s14
 800408e:	eef0 0a67 	vmov.f32	s1, s15
 8004092:	f009 f8d5 	bl	800d240 <can1_ams_s11_voltages_1_s11v06_encode>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <voltageSendCan+0x20ec>)
 800409c:	715a      	strb	r2, [r3, #5]

    can1_ams_s11_voltages_1_pack(txData, &can1_ams_s11_voltages_1, CAN1_AMS_S11_VOLTAGES_1_LENGTH);
 800409e:	2206      	movs	r2, #6
 80040a0:	4916      	ldr	r1, [pc, #88]	@ (80040fc <voltageSendCan+0x20ec>)
 80040a2:	4813      	ldr	r0, [pc, #76]	@ (80040f0 <voltageSendCan+0x20e0>)
 80040a4:	f008 ff76 	bl	800cf94 <can1_ams_s11_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S11_VOLTAGES_1_FRAME_ID;
 80040a8:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <voltageSendCan+0x20e4>)
 80040aa:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 80040ae:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S11_VOLTAGES_1_LENGTH;
 80040b0:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <voltageSendCan+0x20e4>)
 80040b2:	2206      	movs	r2, #6
 80040b4:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80040b6:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <voltageSendCan+0x20e4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80040bc:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <voltageSendCan+0x20e4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80040c2:	2300      	movs	r3, #0
 80040c4:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <voltageSendCan+0x20e0>)
 80040c6:	490b      	ldr	r1, [pc, #44]	@ (80040f4 <voltageSendCan+0x20e4>)
 80040c8:	480b      	ldr	r0, [pc, #44]	@ (80040f8 <voltageSendCan+0x20e8>)
 80040ca:	f002 fdef 	bl	8006cac <HAL_CAN_AddTxMessage>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 826b 	beq.w	80045ac <voltageSendCan+0x259c>
      Error_Handler();
 80040d6:	f001 fd81 	bl	8005bdc <Error_Handler>
    break;
 80040da:	e267      	b.n	80045ac <voltageSendCan+0x259c>
 80040dc:	f3af 8000 	nop.w
 80040e0:	00000000 	.word	0x00000000
 80040e4:	40c38800 	.word	0x40c38800
 80040e8:	2000046c 	.word	0x2000046c
 80040ec:	20000370 	.word	0x20000370
 80040f0:	20000288 	.word	0x20000288
 80040f4:	20000254 	.word	0x20000254
 80040f8:	2000011c 	.word	0x2000011c
 80040fc:	20000378 	.word	0x20000378

  case 21:
    can1_ams_s11_voltages_2.s11v07 = can1_ams_s11_voltages_2_s11v07_encode((float) rawVoltages[111] / 10000.0);
 8004100:	4bc5      	ldr	r3, [pc, #788]	@ (8004418 <voltageSendCan+0x2408>)
 8004102:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	ee17 0a90 	vmov	r0, s15
 8004112:	f7fc f9bd 	bl	8000490 <__aeabi_f2d>
 8004116:	a3be      	add	r3, pc, #760	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f7fc fb3a 	bl	8000794 <__aeabi_ddiv>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	ec43 2b17 	vmov	d7, r2, r3
 8004128:	eeb0 0a47 	vmov.f32	s0, s14
 800412c:	eef0 0a67 	vmov.f32	s1, s15
 8004130:	f009 f91a 	bl	800d368 <can1_ams_s11_voltages_2_s11v07_encode>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	4bb8      	ldr	r3, [pc, #736]	@ (800441c <voltageSendCan+0x240c>)
 800413a:	701a      	strb	r2, [r3, #0]
    can1_ams_s11_voltages_2.s11v08 = can1_ams_s11_voltages_2_s11v08_encode((float) rawVoltages[112] / 10000.0);
 800413c:	4bb6      	ldr	r3, [pc, #728]	@ (8004418 <voltageSendCan+0x2408>)
 800413e:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	ee17 0a90 	vmov	r0, s15
 800414e:	f7fc f99f 	bl	8000490 <__aeabi_f2d>
 8004152:	a3af      	add	r3, pc, #700	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f7fc fb1c 	bl	8000794 <__aeabi_ddiv>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	ec43 2b17 	vmov	d7, r2, r3
 8004164:	eeb0 0a47 	vmov.f32	s0, s14
 8004168:	eef0 0a67 	vmov.f32	s1, s15
 800416c:	f009 f928 	bl	800d3c0 <can1_ams_s11_voltages_2_s11v08_encode>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4ba9      	ldr	r3, [pc, #676]	@ (800441c <voltageSendCan+0x240c>)
 8004176:	705a      	strb	r2, [r3, #1]
    can1_ams_s11_voltages_2.s11v09 = can1_ams_s11_voltages_2_s11v09_encode((float) rawVoltages[113] / 10000.0);
 8004178:	4ba7      	ldr	r3, [pc, #668]	@ (8004418 <voltageSendCan+0x2408>)
 800417a:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	@ 0xe2
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	ee17 0a90 	vmov	r0, s15
 800418a:	f7fc f981 	bl	8000490 <__aeabi_f2d>
 800418e:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f7fc fafe 	bl	8000794 <__aeabi_ddiv>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	ec43 2b17 	vmov	d7, r2, r3
 80041a0:	eeb0 0a47 	vmov.f32	s0, s14
 80041a4:	eef0 0a67 	vmov.f32	s1, s15
 80041a8:	f009 f936 	bl	800d418 <can1_ams_s11_voltages_2_s11v09_encode>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b9a      	ldr	r3, [pc, #616]	@ (800441c <voltageSendCan+0x240c>)
 80041b2:	709a      	strb	r2, [r3, #2]
    can1_ams_s11_voltages_2.s11v10 = can1_ams_s11_voltages_2_s11v10_encode((float) rawVoltages[114] / 10000.0);
 80041b4:	4b98      	ldr	r3, [pc, #608]	@ (8004418 <voltageSendCan+0x2408>)
 80041b6:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	@ 0xe4
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	ee17 0a90 	vmov	r0, s15
 80041c6:	f7fc f963 	bl	8000490 <__aeabi_f2d>
 80041ca:	a391      	add	r3, pc, #580	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fc fae0 	bl	8000794 <__aeabi_ddiv>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	ec43 2b17 	vmov	d7, r2, r3
 80041dc:	eeb0 0a47 	vmov.f32	s0, s14
 80041e0:	eef0 0a67 	vmov.f32	s1, s15
 80041e4:	f009 f944 	bl	800d470 <can1_ams_s11_voltages_2_s11v10_encode>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b8b      	ldr	r3, [pc, #556]	@ (800441c <voltageSendCan+0x240c>)
 80041ee:	70da      	strb	r2, [r3, #3]
    can1_ams_s11_voltages_2.s11v11 = can1_ams_s11_voltages_2_s11v11_encode((float) rawVoltages[115] / 10000.0);
 80041f0:	4b89      	ldr	r3, [pc, #548]	@ (8004418 <voltageSendCan+0x2408>)
 80041f2:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	@ 0xe6
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	ee17 0a90 	vmov	r0, s15
 8004202:	f7fc f945 	bl	8000490 <__aeabi_f2d>
 8004206:	a382      	add	r3, pc, #520	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f7fc fac2 	bl	8000794 <__aeabi_ddiv>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	ec43 2b17 	vmov	d7, r2, r3
 8004218:	eeb0 0a47 	vmov.f32	s0, s14
 800421c:	eef0 0a67 	vmov.f32	s1, s15
 8004220:	f009 f952 	bl	800d4c8 <can1_ams_s11_voltages_2_s11v11_encode>
 8004224:	4603      	mov	r3, r0
 8004226:	461a      	mov	r2, r3
 8004228:	4b7c      	ldr	r3, [pc, #496]	@ (800441c <voltageSendCan+0x240c>)
 800422a:	711a      	strb	r2, [r3, #4]

    can1_ams_s11_voltages_2_pack(txData, &can1_ams_s11_voltages_2, CAN1_AMS_S11_VOLTAGES_2_LENGTH);
 800422c:	2205      	movs	r2, #5
 800422e:	497b      	ldr	r1, [pc, #492]	@ (800441c <voltageSendCan+0x240c>)
 8004230:	487b      	ldr	r0, [pc, #492]	@ (8004420 <voltageSendCan+0x2410>)
 8004232:	f009 f82f 	bl	800d294 <can1_ams_s11_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S11_VOLTAGES_2_FRAME_ID;
 8004236:	4b7b      	ldr	r3, [pc, #492]	@ (8004424 <voltageSendCan+0x2414>)
 8004238:	f240 226d 	movw	r2, #621	@ 0x26d
 800423c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S11_VOLTAGES_2_LENGTH;
 800423e:	4b79      	ldr	r3, [pc, #484]	@ (8004424 <voltageSendCan+0x2414>)
 8004240:	2205      	movs	r2, #5
 8004242:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004244:	4b77      	ldr	r3, [pc, #476]	@ (8004424 <voltageSendCan+0x2414>)
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800424a:	4b76      	ldr	r3, [pc, #472]	@ (8004424 <voltageSendCan+0x2414>)
 800424c:	2200      	movs	r2, #0
 800424e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004250:	2300      	movs	r3, #0
 8004252:	4a73      	ldr	r2, [pc, #460]	@ (8004420 <voltageSendCan+0x2410>)
 8004254:	4973      	ldr	r1, [pc, #460]	@ (8004424 <voltageSendCan+0x2414>)
 8004256:	4874      	ldr	r0, [pc, #464]	@ (8004428 <voltageSendCan+0x2418>)
 8004258:	f002 fd28 	bl	8006cac <HAL_CAN_AddTxMessage>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 81a6 	beq.w	80045b0 <voltageSendCan+0x25a0>
      Error_Handler();
 8004264:	f001 fcba 	bl	8005bdc <Error_Handler>
    break;
 8004268:	e1a2      	b.n	80045b0 <voltageSendCan+0x25a0>

  case 22:
    can1_ams_s12_voltages_1.s12v01 = can1_ams_s12_voltages_1_s12v01_encode((float) rawVoltages[116] / 10000.0);
 800426a:	4b6b      	ldr	r3, [pc, #428]	@ (8004418 <voltageSendCan+0x2408>)
 800426c:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004278:	ee17 0a90 	vmov	r0, s15
 800427c:	f7fc f908 	bl	8000490 <__aeabi_f2d>
 8004280:	a363      	add	r3, pc, #396	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f7fc fa85 	bl	8000794 <__aeabi_ddiv>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	ec43 2b17 	vmov	d7, r2, r3
 8004292:	eeb0 0a47 	vmov.f32	s0, s14
 8004296:	eef0 0a67 	vmov.f32	s1, s15
 800429a:	f009 f9b9 	bl	800d610 <can1_ams_s12_voltages_1_s12v01_encode>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b62      	ldr	r3, [pc, #392]	@ (800442c <voltageSendCan+0x241c>)
 80042a4:	701a      	strb	r2, [r3, #0]
    can1_ams_s12_voltages_1.s12v02 = can1_ams_s12_voltages_1_s12v02_encode((float) rawVoltages[117] / 10000.0);
 80042a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004418 <voltageSendCan+0x2408>)
 80042a8:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b4:	ee17 0a90 	vmov	r0, s15
 80042b8:	f7fc f8ea 	bl	8000490 <__aeabi_f2d>
 80042bc:	a354      	add	r3, pc, #336	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f7fc fa67 	bl	8000794 <__aeabi_ddiv>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	ec43 2b17 	vmov	d7, r2, r3
 80042ce:	eeb0 0a47 	vmov.f32	s0, s14
 80042d2:	eef0 0a67 	vmov.f32	s1, s15
 80042d6:	f009 f9c7 	bl	800d668 <can1_ams_s12_voltages_1_s12v02_encode>
 80042da:	4603      	mov	r3, r0
 80042dc:	461a      	mov	r2, r3
 80042de:	4b53      	ldr	r3, [pc, #332]	@ (800442c <voltageSendCan+0x241c>)
 80042e0:	705a      	strb	r2, [r3, #1]
    can1_ams_s12_voltages_1.s12v03 = can1_ams_s12_voltages_1_s12v03_encode((float) rawVoltages[118] / 10000.0);
 80042e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004418 <voltageSendCan+0x2408>)
 80042e4:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80042e8:	ee07 3a90 	vmov	s15, r3
 80042ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f0:	ee17 0a90 	vmov	r0, s15
 80042f4:	f7fc f8cc 	bl	8000490 <__aeabi_f2d>
 80042f8:	a345      	add	r3, pc, #276	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f7fc fa49 	bl	8000794 <__aeabi_ddiv>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	ec43 2b17 	vmov	d7, r2, r3
 800430a:	eeb0 0a47 	vmov.f32	s0, s14
 800430e:	eef0 0a67 	vmov.f32	s1, s15
 8004312:	f009 f9d5 	bl	800d6c0 <can1_ams_s12_voltages_1_s12v03_encode>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	4b44      	ldr	r3, [pc, #272]	@ (800442c <voltageSendCan+0x241c>)
 800431c:	709a      	strb	r2, [r3, #2]
    can1_ams_s12_voltages_1.s12v04 = can1_ams_s12_voltages_1_s12v04_encode((float) rawVoltages[119] / 10000.0);
 800431e:	4b3e      	ldr	r3, [pc, #248]	@ (8004418 <voltageSendCan+0x2408>)
 8004320:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432c:	ee17 0a90 	vmov	r0, s15
 8004330:	f7fc f8ae 	bl	8000490 <__aeabi_f2d>
 8004334:	a336      	add	r3, pc, #216	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fc fa2b 	bl	8000794 <__aeabi_ddiv>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	ec43 2b17 	vmov	d7, r2, r3
 8004346:	eeb0 0a47 	vmov.f32	s0, s14
 800434a:	eef0 0a67 	vmov.f32	s1, s15
 800434e:	f009 f9e3 	bl	800d718 <can1_ams_s12_voltages_1_s12v04_encode>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	4b35      	ldr	r3, [pc, #212]	@ (800442c <voltageSendCan+0x241c>)
 8004358:	70da      	strb	r2, [r3, #3]
    can1_ams_s12_voltages_1.s12v05 = can1_ams_s12_voltages_1_s12v05_encode((float) rawVoltages[120] / 10000.0);
 800435a:	4b2f      	ldr	r3, [pc, #188]	@ (8004418 <voltageSendCan+0x2408>)
 800435c:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004368:	ee17 0a90 	vmov	r0, s15
 800436c:	f7fc f890 	bl	8000490 <__aeabi_f2d>
 8004370:	a327      	add	r3, pc, #156	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f7fc fa0d 	bl	8000794 <__aeabi_ddiv>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	ec43 2b17 	vmov	d7, r2, r3
 8004382:	eeb0 0a47 	vmov.f32	s0, s14
 8004386:	eef0 0a67 	vmov.f32	s1, s15
 800438a:	f009 f9f1 	bl	800d770 <can1_ams_s12_voltages_1_s12v05_encode>
 800438e:	4603      	mov	r3, r0
 8004390:	461a      	mov	r2, r3
 8004392:	4b26      	ldr	r3, [pc, #152]	@ (800442c <voltageSendCan+0x241c>)
 8004394:	711a      	strb	r2, [r3, #4]
    can1_ams_s12_voltages_1.s12v06 = can1_ams_s12_voltages_1_s12v06_encode((float) rawVoltages[121] / 10000.0);
 8004396:	4b20      	ldr	r3, [pc, #128]	@ (8004418 <voltageSendCan+0x2408>)
 8004398:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a4:	ee17 0a90 	vmov	r0, s15
 80043a8:	f7fc f872 	bl	8000490 <__aeabi_f2d>
 80043ac:	a318      	add	r3, pc, #96	@ (adr r3, 8004410 <voltageSendCan+0x2400>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fc f9ef 	bl	8000794 <__aeabi_ddiv>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	ec43 2b17 	vmov	d7, r2, r3
 80043be:	eeb0 0a47 	vmov.f32	s0, s14
 80043c2:	eef0 0a67 	vmov.f32	s1, s15
 80043c6:	f009 f9ff 	bl	800d7c8 <can1_ams_s12_voltages_1_s12v06_encode>
 80043ca:	4603      	mov	r3, r0
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b17      	ldr	r3, [pc, #92]	@ (800442c <voltageSendCan+0x241c>)
 80043d0:	715a      	strb	r2, [r3, #5]

    can1_ams_s12_voltages_1_pack(txData, &can1_ams_s12_voltages_1, CAN1_AMS_S12_VOLTAGES_1_LENGTH);
 80043d2:	2206      	movs	r2, #6
 80043d4:	4915      	ldr	r1, [pc, #84]	@ (800442c <voltageSendCan+0x241c>)
 80043d6:	4812      	ldr	r0, [pc, #72]	@ (8004420 <voltageSendCan+0x2410>)
 80043d8:	f009 f8a0 	bl	800d51c <can1_ams_s12_voltages_1_pack>
    txHeader.StdId = CAN1_AMS_S12_VOLTAGES_1_FRAME_ID;
 80043dc:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <voltageSendCan+0x2414>)
 80043de:	f240 226e 	movw	r2, #622	@ 0x26e
 80043e2:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S12_VOLTAGES_1_LENGTH;
 80043e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <voltageSendCan+0x2414>)
 80043e6:	2206      	movs	r2, #6
 80043e8:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80043ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004424 <voltageSendCan+0x2414>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80043f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <voltageSendCan+0x2414>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80043f6:	2300      	movs	r3, #0
 80043f8:	4a09      	ldr	r2, [pc, #36]	@ (8004420 <voltageSendCan+0x2410>)
 80043fa:	490a      	ldr	r1, [pc, #40]	@ (8004424 <voltageSendCan+0x2414>)
 80043fc:	480a      	ldr	r0, [pc, #40]	@ (8004428 <voltageSendCan+0x2418>)
 80043fe:	f002 fc55 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80d5 	beq.w	80045b4 <voltageSendCan+0x25a4>
      Error_Handler();
 800440a:	f001 fbe7 	bl	8005bdc <Error_Handler>
    break;
 800440e:	e0d1      	b.n	80045b4 <voltageSendCan+0x25a4>
 8004410:	00000000 	.word	0x00000000
 8004414:	40c38800 	.word	0x40c38800
 8004418:	2000046c 	.word	0x2000046c
 800441c:	20000380 	.word	0x20000380
 8004420:	20000288 	.word	0x20000288
 8004424:	20000254 	.word	0x20000254
 8004428:	2000011c 	.word	0x2000011c
 800442c:	20000388 	.word	0x20000388

  case 23:
    can1_ams_s12_voltages_2.s12v07 = can1_ams_s12_voltages_2_s12v07_encode((float) rawVoltages[122] / 10000.0);
 8004430:	4b65      	ldr	r3, [pc, #404]	@ (80045c8 <voltageSendCan+0x25b8>)
 8004432:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	ee17 0a90 	vmov	r0, s15
 8004442:	f7fc f825 	bl	8000490 <__aeabi_f2d>
 8004446:	a35e      	add	r3, pc, #376	@ (adr r3, 80045c0 <voltageSendCan+0x25b0>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fc f9a2 	bl	8000794 <__aeabi_ddiv>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	ec43 2b17 	vmov	d7, r2, r3
 8004458:	eeb0 0a47 	vmov.f32	s0, s14
 800445c:	eef0 0a67 	vmov.f32	s1, s15
 8004460:	f009 fa46 	bl	800d8f0 <can1_ams_s12_voltages_2_s12v07_encode>
 8004464:	4603      	mov	r3, r0
 8004466:	461a      	mov	r2, r3
 8004468:	4b58      	ldr	r3, [pc, #352]	@ (80045cc <voltageSendCan+0x25bc>)
 800446a:	701a      	strb	r2, [r3, #0]
    can1_ams_s12_voltages_2.s12v08 = can1_ams_s12_voltages_2_s12v08_encode((float) rawVoltages[123] / 10000.0);
 800446c:	4b56      	ldr	r3, [pc, #344]	@ (80045c8 <voltageSendCan+0x25b8>)
 800446e:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	ee17 0a90 	vmov	r0, s15
 800447e:	f7fc f807 	bl	8000490 <__aeabi_f2d>
 8004482:	a34f      	add	r3, pc, #316	@ (adr r3, 80045c0 <voltageSendCan+0x25b0>)
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f7fc f984 	bl	8000794 <__aeabi_ddiv>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	ec43 2b17 	vmov	d7, r2, r3
 8004494:	eeb0 0a47 	vmov.f32	s0, s14
 8004498:	eef0 0a67 	vmov.f32	s1, s15
 800449c:	f009 fa54 	bl	800d948 <can1_ams_s12_voltages_2_s12v08_encode>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b49      	ldr	r3, [pc, #292]	@ (80045cc <voltageSendCan+0x25bc>)
 80044a6:	705a      	strb	r2, [r3, #1]
    can1_ams_s12_voltages_2.s12v09 = can1_ams_s12_voltages_2_s12v09_encode((float) rawVoltages[124] / 10000.0);
 80044a8:	4b47      	ldr	r3, [pc, #284]	@ (80045c8 <voltageSendCan+0x25b8>)
 80044aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	ee17 0a90 	vmov	r0, s15
 80044ba:	f7fb ffe9 	bl	8000490 <__aeabi_f2d>
 80044be:	a340      	add	r3, pc, #256	@ (adr r3, 80045c0 <voltageSendCan+0x25b0>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f966 	bl	8000794 <__aeabi_ddiv>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	ec43 2b17 	vmov	d7, r2, r3
 80044d0:	eeb0 0a47 	vmov.f32	s0, s14
 80044d4:	eef0 0a67 	vmov.f32	s1, s15
 80044d8:	f009 fa62 	bl	800d9a0 <can1_ams_s12_voltages_2_s12v09_encode>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	4b3a      	ldr	r3, [pc, #232]	@ (80045cc <voltageSendCan+0x25bc>)
 80044e2:	709a      	strb	r2, [r3, #2]
    can1_ams_s12_voltages_2.s12v10 = can1_ams_s12_voltages_2_s12v10_encode((float) rawVoltages[125] / 10000.0);
 80044e4:	4b38      	ldr	r3, [pc, #224]	@ (80045c8 <voltageSendCan+0x25b8>)
 80044e6:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	ee17 0a90 	vmov	r0, s15
 80044f6:	f7fb ffcb 	bl	8000490 <__aeabi_f2d>
 80044fa:	a331      	add	r3, pc, #196	@ (adr r3, 80045c0 <voltageSendCan+0x25b0>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fc f948 	bl	8000794 <__aeabi_ddiv>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	ec43 2b17 	vmov	d7, r2, r3
 800450c:	eeb0 0a47 	vmov.f32	s0, s14
 8004510:	eef0 0a67 	vmov.f32	s1, s15
 8004514:	f009 fa70 	bl	800d9f8 <can1_ams_s12_voltages_2_s12v10_encode>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	4b2b      	ldr	r3, [pc, #172]	@ (80045cc <voltageSendCan+0x25bc>)
 800451e:	70da      	strb	r2, [r3, #3]

    can1_ams_s12_voltages_2_pack(txData, &can1_ams_s12_voltages_2, CAN1_AMS_S12_VOLTAGES_2_LENGTH);
 8004520:	2205      	movs	r2, #5
 8004522:	492a      	ldr	r1, [pc, #168]	@ (80045cc <voltageSendCan+0x25bc>)
 8004524:	482a      	ldr	r0, [pc, #168]	@ (80045d0 <voltageSendCan+0x25c0>)
 8004526:	f009 f979 	bl	800d81c <can1_ams_s12_voltages_2_pack>
    txHeader.StdId = CAN1_AMS_S12_VOLTAGES_2_FRAME_ID;
 800452a:	4b2a      	ldr	r3, [pc, #168]	@ (80045d4 <voltageSendCan+0x25c4>)
 800452c:	f240 226f 	movw	r2, #623	@ 0x26f
 8004530:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S12_VOLTAGES_2_LENGTH;
 8004532:	4b28      	ldr	r3, [pc, #160]	@ (80045d4 <voltageSendCan+0x25c4>)
 8004534:	2205      	movs	r2, #5
 8004536:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004538:	4b26      	ldr	r3, [pc, #152]	@ (80045d4 <voltageSendCan+0x25c4>)
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800453e:	4b25      	ldr	r3, [pc, #148]	@ (80045d4 <voltageSendCan+0x25c4>)
 8004540:	2200      	movs	r2, #0
 8004542:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004544:	2300      	movs	r3, #0
 8004546:	4a22      	ldr	r2, [pc, #136]	@ (80045d0 <voltageSendCan+0x25c0>)
 8004548:	4922      	ldr	r1, [pc, #136]	@ (80045d4 <voltageSendCan+0x25c4>)
 800454a:	4823      	ldr	r0, [pc, #140]	@ (80045d8 <voltageSendCan+0x25c8>)
 800454c:	f002 fbae 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d030      	beq.n	80045b8 <voltageSendCan+0x25a8>
      Error_Handler();
 8004556:	f001 fb41 	bl	8005bdc <Error_Handler>
    break;
 800455a:	e02d      	b.n	80045b8 <voltageSendCan+0x25a8>
    break;
 800455c:	bf00      	nop
 800455e:	e02c      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004560:	bf00      	nop
 8004562:	e02a      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004564:	bf00      	nop
 8004566:	e028      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004568:	bf00      	nop
 800456a:	e026      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 800456c:	bf00      	nop
 800456e:	e024      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004570:	bf00      	nop
 8004572:	e022      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004574:	bf00      	nop
 8004576:	e020      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004578:	bf00      	nop
 800457a:	e01e      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 800457c:	bf00      	nop
 800457e:	e01c      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004580:	bf00      	nop
 8004582:	e01a      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004584:	bf00      	nop
 8004586:	e018      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004588:	bf00      	nop
 800458a:	e016      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 800458c:	bf00      	nop
 800458e:	e014      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004590:	bf00      	nop
 8004592:	e012      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004594:	bf00      	nop
 8004596:	e010      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 8004598:	bf00      	nop
 800459a:	e00e      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 800459c:	bf00      	nop
 800459e:	e00c      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 80045a0:	bf00      	nop
 80045a2:	e00a      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 80045a4:	bf00      	nop
 80045a6:	e008      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 80045a8:	bf00      	nop
 80045aa:	e006      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 80045ac:	bf00      	nop
 80045ae:	e004      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 80045b0:	bf00      	nop
 80045b2:	e002      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <voltageSendCan+0x25aa>
    break;
 80045b8:	bf00      	nop
  }
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	00000000 	.word	0x00000000
 80045c4:	40c38800 	.word	0x40c38800
 80045c8:	2000046c 	.word	0x2000046c
 80045cc:	20000390 	.word	0x20000390
 80045d0:	20000288 	.word	0x20000288
 80045d4:	20000254 	.word	0x20000254
 80045d8:	2000011c 	.word	0x2000011c

080045dc <temperatureSendCan>:

static void temperatureSendCan(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  switch (amsTxMessageCounter % 12)
 80045e0:	4b98      	ldr	r3, [pc, #608]	@ (8004844 <temperatureSendCan+0x268>)
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	4b98      	ldr	r3, [pc, #608]	@ (8004848 <temperatureSendCan+0x26c>)
 80045e6:	fba3 1302 	umull	r1, r3, r3, r2
 80045ea:	08d9      	lsrs	r1, r3, #3
 80045ec:	460b      	mov	r3, r1
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	440b      	add	r3, r1
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b0b      	cmp	r3, #11
 80045fa:	f200 86b1 	bhi.w	8005360 <temperatureSendCan+0xd84>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <temperatureSendCan+0x28>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004635 	.word	0x08004635
 8004608:	0800473d 	.word	0x0800473d
 800460c:	08004865 	.word	0x08004865
 8004610:	0800496d 	.word	0x0800496d
 8004614:	08004a75 	.word	0x08004a75
 8004618:	08004b99 	.word	0x08004b99
 800461c:	08004c9f 	.word	0x08004c9f
 8004620:	08004dab 	.word	0x08004dab
 8004624:	08004ed9 	.word	0x08004ed9
 8004628:	08004fe9 	.word	0x08004fe9
 800462c:	080050f9 	.word	0x080050f9
 8004630:	08005225 	.word	0x08005225
  {
  case 0:
    can1_ams_s01_temperatures.s01t01 = can1_ams_s01_temperatures_s01t01_encode(
        thermistor_adc_to_c_float(rawTemps[0]));
 8004634:	4b85      	ldr	r3, [pc, #532]	@ (800484c <temperatureSendCan+0x270>)
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f001 fd9b 	bl	8006174 <thermistor_adc_to_c_float>
 800463e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s01_temperatures.s01t01 = can1_ams_s01_temperatures_s01t01_encode(
 8004642:	4618      	mov	r0, r3
 8004644:	f7fb ff24 	bl	8000490 <__aeabi_f2d>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	ec43 2b10 	vmov	d0, r2, r3
 8004650:	f009 fae6 	bl	800dc20 <can1_ams_s01_temperatures_s01t01_encode>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	4b7d      	ldr	r3, [pc, #500]	@ (8004850 <temperatureSendCan+0x274>)
 800465a:	701a      	strb	r2, [r3, #0]
    can1_ams_s01_temperatures.s01t02 = can1_ams_s01_temperatures_s01t02_encode(
        thermistor_adc_to_c_float(rawTemps[1]));
 800465c:	4b7b      	ldr	r3, [pc, #492]	@ (800484c <temperatureSendCan+0x270>)
 800465e:	885b      	ldrh	r3, [r3, #2]
 8004660:	4618      	mov	r0, r3
 8004662:	f001 fd87 	bl	8006174 <thermistor_adc_to_c_float>
 8004666:	ee10 3a10 	vmov	r3, s0
    can1_ams_s01_temperatures.s01t02 = can1_ams_s01_temperatures_s01t02_encode(
 800466a:	4618      	mov	r0, r3
 800466c:	f7fb ff10 	bl	8000490 <__aeabi_f2d>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	ec43 2b10 	vmov	d0, r2, r3
 8004678:	f009 fafe 	bl	800dc78 <can1_ams_s01_temperatures_s01t02_encode>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	4b73      	ldr	r3, [pc, #460]	@ (8004850 <temperatureSendCan+0x274>)
 8004682:	705a      	strb	r2, [r3, #1]
    can1_ams_s01_temperatures.s01t03 = can1_ams_s01_temperatures_s01t03_encode(
        thermistor_adc_to_c_float(rawTemps[2]));
 8004684:	4b71      	ldr	r3, [pc, #452]	@ (800484c <temperatureSendCan+0x270>)
 8004686:	889b      	ldrh	r3, [r3, #4]
 8004688:	4618      	mov	r0, r3
 800468a:	f001 fd73 	bl	8006174 <thermistor_adc_to_c_float>
 800468e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s01_temperatures.s01t03 = can1_ams_s01_temperatures_s01t03_encode(
 8004692:	4618      	mov	r0, r3
 8004694:	f7fb fefc 	bl	8000490 <__aeabi_f2d>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	ec43 2b10 	vmov	d0, r2, r3
 80046a0:	f009 fb16 	bl	800dcd0 <can1_ams_s01_temperatures_s01t03_encode>
 80046a4:	4603      	mov	r3, r0
 80046a6:	461a      	mov	r2, r3
 80046a8:	4b69      	ldr	r3, [pc, #420]	@ (8004850 <temperatureSendCan+0x274>)
 80046aa:	709a      	strb	r2, [r3, #2]
    can1_ams_s01_temperatures.s01t04 = can1_ams_s01_temperatures_s01t04_encode(
        thermistor_adc_to_c_float(rawTemps[3]));
 80046ac:	4b67      	ldr	r3, [pc, #412]	@ (800484c <temperatureSendCan+0x270>)
 80046ae:	88db      	ldrh	r3, [r3, #6]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fd5f 	bl	8006174 <thermistor_adc_to_c_float>
 80046b6:	ee10 3a10 	vmov	r3, s0
    can1_ams_s01_temperatures.s01t04 = can1_ams_s01_temperatures_s01t04_encode(
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fb fee8 	bl	8000490 <__aeabi_f2d>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	ec43 2b10 	vmov	d0, r2, r3
 80046c8:	f009 fb2e 	bl	800dd28 <can1_ams_s01_temperatures_s01t04_encode>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b5f      	ldr	r3, [pc, #380]	@ (8004850 <temperatureSendCan+0x274>)
 80046d2:	70da      	strb	r2, [r3, #3]
    can1_ams_s01_temperatures.s01t05 = can1_ams_s01_temperatures_s01t05_encode(
        thermistor_adc_to_c_float(rawTemps[4]));
 80046d4:	4b5d      	ldr	r3, [pc, #372]	@ (800484c <temperatureSendCan+0x270>)
 80046d6:	891b      	ldrh	r3, [r3, #8]
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fd4b 	bl	8006174 <thermistor_adc_to_c_float>
 80046de:	ee10 3a10 	vmov	r3, s0
    can1_ams_s01_temperatures.s01t05 = can1_ams_s01_temperatures_s01t05_encode(
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb fed4 	bl	8000490 <__aeabi_f2d>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	ec43 2b10 	vmov	d0, r2, r3
 80046f0:	f009 fb46 	bl	800dd80 <can1_ams_s01_temperatures_s01t05_encode>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b55      	ldr	r3, [pc, #340]	@ (8004850 <temperatureSendCan+0x274>)
 80046fa:	711a      	strb	r2, [r3, #4]

    can1_ams_s01_temperatures_pack(txData, &can1_ams_s01_temperatures, CAN1_AMS_S01_TEMPERATURES_LENGTH);
 80046fc:	2205      	movs	r2, #5
 80046fe:	4954      	ldr	r1, [pc, #336]	@ (8004850 <temperatureSendCan+0x274>)
 8004700:	4854      	ldr	r0, [pc, #336]	@ (8004854 <temperatureSendCan+0x278>)
 8004702:	f009 fa13 	bl	800db2c <can1_ams_s01_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S01_TEMPERATURES_FRAME_ID;
 8004706:	4b54      	ldr	r3, [pc, #336]	@ (8004858 <temperatureSendCan+0x27c>)
 8004708:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800470c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S01_TEMPERATURES_LENGTH;
 800470e:	4b52      	ldr	r3, [pc, #328]	@ (8004858 <temperatureSendCan+0x27c>)
 8004710:	2205      	movs	r2, #5
 8004712:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004714:	4b50      	ldr	r3, [pc, #320]	@ (8004858 <temperatureSendCan+0x27c>)
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800471a:	4b4f      	ldr	r3, [pc, #316]	@ (8004858 <temperatureSendCan+0x27c>)
 800471c:	2200      	movs	r2, #0
 800471e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004720:	2300      	movs	r3, #0
 8004722:	4a4c      	ldr	r2, [pc, #304]	@ (8004854 <temperatureSendCan+0x278>)
 8004724:	494c      	ldr	r1, [pc, #304]	@ (8004858 <temperatureSendCan+0x27c>)
 8004726:	484d      	ldr	r0, [pc, #308]	@ (800485c <temperatureSendCan+0x280>)
 8004728:	f002 fac0 	bl	8006cac <HAL_CAN_AddTxMessage>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 85ff 	beq.w	8005332 <temperatureSendCan+0xd56>
      Error_Handler();
 8004734:	f001 fa52 	bl	8005bdc <Error_Handler>
    break;
 8004738:	f000 bdfb 	b.w	8005332 <temperatureSendCan+0xd56>

  case 1:
    can1_ams_s02_temperatures.s02t01 = can1_ams_s02_temperatures_s02t01_encode(
        thermistor_adc_to_c_float(rawTemps[5]));
 800473c:	4b43      	ldr	r3, [pc, #268]	@ (800484c <temperatureSendCan+0x270>)
 800473e:	895b      	ldrh	r3, [r3, #10]
 8004740:	4618      	mov	r0, r3
 8004742:	f001 fd17 	bl	8006174 <thermistor_adc_to_c_float>
 8004746:	ee10 3a10 	vmov	r3, s0
    can1_ams_s02_temperatures.s02t01 = can1_ams_s02_temperatures_s02t01_encode(
 800474a:	4618      	mov	r0, r3
 800474c:	f7fb fea0 	bl	8000490 <__aeabi_f2d>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	ec43 2b10 	vmov	d0, r2, r3
 8004758:	f009 fbb6 	bl	800dec8 <can1_ams_s02_temperatures_s02t01_encode>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	4b3f      	ldr	r3, [pc, #252]	@ (8004860 <temperatureSendCan+0x284>)
 8004762:	701a      	strb	r2, [r3, #0]
    can1_ams_s02_temperatures.s02t02 = can1_ams_s02_temperatures_s02t02_encode(
        thermistor_adc_to_c_float(rawTemps[6]));
 8004764:	4b39      	ldr	r3, [pc, #228]	@ (800484c <temperatureSendCan+0x270>)
 8004766:	899b      	ldrh	r3, [r3, #12]
 8004768:	4618      	mov	r0, r3
 800476a:	f001 fd03 	bl	8006174 <thermistor_adc_to_c_float>
 800476e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s02_temperatures.s02t02 = can1_ams_s02_temperatures_s02t02_encode(
 8004772:	4618      	mov	r0, r3
 8004774:	f7fb fe8c 	bl	8000490 <__aeabi_f2d>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	ec43 2b10 	vmov	d0, r2, r3
 8004780:	f009 fbce 	bl	800df20 <can1_ams_s02_temperatures_s02t02_encode>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	4b35      	ldr	r3, [pc, #212]	@ (8004860 <temperatureSendCan+0x284>)
 800478a:	705a      	strb	r2, [r3, #1]
    can1_ams_s02_temperatures.s02t03 = can1_ams_s02_temperatures_s02t03_encode(
        thermistor_adc_to_c_float(rawTemps[7]));
 800478c:	4b2f      	ldr	r3, [pc, #188]	@ (800484c <temperatureSendCan+0x270>)
 800478e:	89db      	ldrh	r3, [r3, #14]
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fcef 	bl	8006174 <thermistor_adc_to_c_float>
 8004796:	ee10 3a10 	vmov	r3, s0
    can1_ams_s02_temperatures.s02t03 = can1_ams_s02_temperatures_s02t03_encode(
 800479a:	4618      	mov	r0, r3
 800479c:	f7fb fe78 	bl	8000490 <__aeabi_f2d>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	ec43 2b10 	vmov	d0, r2, r3
 80047a8:	f009 fbe6 	bl	800df78 <can1_ams_s02_temperatures_s02t03_encode>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004860 <temperatureSendCan+0x284>)
 80047b2:	709a      	strb	r2, [r3, #2]
    can1_ams_s02_temperatures.s02t04 = can1_ams_s02_temperatures_s02t04_encode(
        thermistor_adc_to_c_float(rawTemps[8]));
 80047b4:	4b25      	ldr	r3, [pc, #148]	@ (800484c <temperatureSendCan+0x270>)
 80047b6:	8a1b      	ldrh	r3, [r3, #16]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fcdb 	bl	8006174 <thermistor_adc_to_c_float>
 80047be:	ee10 3a10 	vmov	r3, s0
    can1_ams_s02_temperatures.s02t04 = can1_ams_s02_temperatures_s02t04_encode(
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fe64 	bl	8000490 <__aeabi_f2d>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	ec43 2b10 	vmov	d0, r2, r3
 80047d0:	f009 fbfe 	bl	800dfd0 <can1_ams_s02_temperatures_s02t04_encode>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	4b21      	ldr	r3, [pc, #132]	@ (8004860 <temperatureSendCan+0x284>)
 80047da:	70da      	strb	r2, [r3, #3]
    can1_ams_s02_temperatures.s02t05 = can1_ams_s02_temperatures_s02t05_encode(
        thermistor_adc_to_c_float(rawTemps[9]));
 80047dc:	4b1b      	ldr	r3, [pc, #108]	@ (800484c <temperatureSendCan+0x270>)
 80047de:	8a5b      	ldrh	r3, [r3, #18]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 fcc7 	bl	8006174 <thermistor_adc_to_c_float>
 80047e6:	ee10 3a10 	vmov	r3, s0
    can1_ams_s02_temperatures.s02t05 = can1_ams_s02_temperatures_s02t05_encode(
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fb fe50 	bl	8000490 <__aeabi_f2d>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	ec43 2b10 	vmov	d0, r2, r3
 80047f8:	f009 fc16 	bl	800e028 <can1_ams_s02_temperatures_s02t05_encode>
 80047fc:	4603      	mov	r3, r0
 80047fe:	461a      	mov	r2, r3
 8004800:	4b17      	ldr	r3, [pc, #92]	@ (8004860 <temperatureSendCan+0x284>)
 8004802:	711a      	strb	r2, [r3, #4]

    can1_ams_s02_temperatures_pack(txData, &can1_ams_s02_temperatures, CAN1_AMS_S02_TEMPERATURES_LENGTH);
 8004804:	2205      	movs	r2, #5
 8004806:	4916      	ldr	r1, [pc, #88]	@ (8004860 <temperatureSendCan+0x284>)
 8004808:	4812      	ldr	r0, [pc, #72]	@ (8004854 <temperatureSendCan+0x278>)
 800480a:	f009 fae3 	bl	800ddd4 <can1_ams_s02_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S02_TEMPERATURES_FRAME_ID;
 800480e:	4b12      	ldr	r3, [pc, #72]	@ (8004858 <temperatureSendCan+0x27c>)
 8004810:	f240 2271 	movw	r2, #625	@ 0x271
 8004814:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S02_TEMPERATURES_LENGTH;
 8004816:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <temperatureSendCan+0x27c>)
 8004818:	2205      	movs	r2, #5
 800481a:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800481c:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <temperatureSendCan+0x27c>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004822:	4b0d      	ldr	r3, [pc, #52]	@ (8004858 <temperatureSendCan+0x27c>)
 8004824:	2200      	movs	r2, #0
 8004826:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004828:	2300      	movs	r3, #0
 800482a:	4a0a      	ldr	r2, [pc, #40]	@ (8004854 <temperatureSendCan+0x278>)
 800482c:	490a      	ldr	r1, [pc, #40]	@ (8004858 <temperatureSendCan+0x27c>)
 800482e:	480b      	ldr	r0, [pc, #44]	@ (800485c <temperatureSendCan+0x280>)
 8004830:	f002 fa3c 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 857d 	beq.w	8005336 <temperatureSendCan+0xd5a>
      Error_Handler();
 800483c:	f001 f9ce 	bl	8005bdc <Error_Handler>
    break;
 8004840:	f000 bd79 	b.w	8005336 <temperatureSendCan+0xd5a>
 8004844:	20000811 	.word	0x20000811
 8004848:	aaaaaaab 	.word	0xaaaaaaab
 800484c:	20000568 	.word	0x20000568
 8004850:	20000398 	.word	0x20000398
 8004854:	20000288 	.word	0x20000288
 8004858:	20000254 	.word	0x20000254
 800485c:	2000011c 	.word	0x2000011c
 8004860:	200003a0 	.word	0x200003a0

  case 2:
    can1_ams_s03_temperatures.s03t01 = can1_ams_s03_temperatures_s03t01_encode(
        thermistor_adc_to_c_float(rawTemps[10]));
 8004864:	4bc5      	ldr	r3, [pc, #788]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004866:	8a9b      	ldrh	r3, [r3, #20]
 8004868:	4618      	mov	r0, r3
 800486a:	f001 fc83 	bl	8006174 <thermistor_adc_to_c_float>
 800486e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s03_temperatures.s03t01 = can1_ams_s03_temperatures_s03t01_encode(
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fe0c 	bl	8000490 <__aeabi_f2d>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	ec43 2b10 	vmov	d0, r2, r3
 8004880:	f009 fc76 	bl	800e170 <can1_ams_s03_temperatures_s03t01_encode>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	4bbd      	ldr	r3, [pc, #756]	@ (8004b80 <temperatureSendCan+0x5a4>)
 800488a:	701a      	strb	r2, [r3, #0]
    can1_ams_s03_temperatures.s03t02 = can1_ams_s03_temperatures_s03t02_encode(
        thermistor_adc_to_c_float(rawTemps[11]));
 800488c:	4bbb      	ldr	r3, [pc, #748]	@ (8004b7c <temperatureSendCan+0x5a0>)
 800488e:	8adb      	ldrh	r3, [r3, #22]
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fc6f 	bl	8006174 <thermistor_adc_to_c_float>
 8004896:	ee10 3a10 	vmov	r3, s0
    can1_ams_s03_temperatures.s03t02 = can1_ams_s03_temperatures_s03t02_encode(
 800489a:	4618      	mov	r0, r3
 800489c:	f7fb fdf8 	bl	8000490 <__aeabi_f2d>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	ec43 2b10 	vmov	d0, r2, r3
 80048a8:	f009 fc8e 	bl	800e1c8 <can1_ams_s03_temperatures_s03t02_encode>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	4bb3      	ldr	r3, [pc, #716]	@ (8004b80 <temperatureSendCan+0x5a4>)
 80048b2:	705a      	strb	r2, [r3, #1]
    can1_ams_s03_temperatures.s03t03 = can1_ams_s03_temperatures_s03t03_encode(
        thermistor_adc_to_c_float(rawTemps[12]));
 80048b4:	4bb1      	ldr	r3, [pc, #708]	@ (8004b7c <temperatureSendCan+0x5a0>)
 80048b6:	8b1b      	ldrh	r3, [r3, #24]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fc5b 	bl	8006174 <thermistor_adc_to_c_float>
 80048be:	ee10 3a10 	vmov	r3, s0
    can1_ams_s03_temperatures.s03t03 = can1_ams_s03_temperatures_s03t03_encode(
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fb fde4 	bl	8000490 <__aeabi_f2d>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	ec43 2b10 	vmov	d0, r2, r3
 80048d0:	f009 fca6 	bl	800e220 <can1_ams_s03_temperatures_s03t03_encode>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	4ba9      	ldr	r3, [pc, #676]	@ (8004b80 <temperatureSendCan+0x5a4>)
 80048da:	709a      	strb	r2, [r3, #2]
    can1_ams_s03_temperatures.s03t04 = can1_ams_s03_temperatures_s03t04_encode(
        thermistor_adc_to_c_float(rawTemps[13]));
 80048dc:	4ba7      	ldr	r3, [pc, #668]	@ (8004b7c <temperatureSendCan+0x5a0>)
 80048de:	8b5b      	ldrh	r3, [r3, #26]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fc47 	bl	8006174 <thermistor_adc_to_c_float>
 80048e6:	ee10 3a10 	vmov	r3, s0
    can1_ams_s03_temperatures.s03t04 = can1_ams_s03_temperatures_s03t04_encode(
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fb fdd0 	bl	8000490 <__aeabi_f2d>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	ec43 2b10 	vmov	d0, r2, r3
 80048f8:	f009 fcbe 	bl	800e278 <can1_ams_s03_temperatures_s03t04_encode>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	4b9f      	ldr	r3, [pc, #636]	@ (8004b80 <temperatureSendCan+0x5a4>)
 8004902:	70da      	strb	r2, [r3, #3]
    can1_ams_s03_temperatures.s03t05 = can1_ams_s03_temperatures_s03t05_encode(
        thermistor_adc_to_c_float(rawTemps[14]));
 8004904:	4b9d      	ldr	r3, [pc, #628]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004906:	8b9b      	ldrh	r3, [r3, #28]
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fc33 	bl	8006174 <thermistor_adc_to_c_float>
 800490e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s03_temperatures.s03t05 = can1_ams_s03_temperatures_s03t05_encode(
 8004912:	4618      	mov	r0, r3
 8004914:	f7fb fdbc 	bl	8000490 <__aeabi_f2d>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	ec43 2b10 	vmov	d0, r2, r3
 8004920:	f009 fcd6 	bl	800e2d0 <can1_ams_s03_temperatures_s03t05_encode>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	4b95      	ldr	r3, [pc, #596]	@ (8004b80 <temperatureSendCan+0x5a4>)
 800492a:	711a      	strb	r2, [r3, #4]

    can1_ams_s03_temperatures_pack(txData, &can1_ams_s03_temperatures, CAN1_AMS_S03_TEMPERATURES_LENGTH);
 800492c:	2205      	movs	r2, #5
 800492e:	4994      	ldr	r1, [pc, #592]	@ (8004b80 <temperatureSendCan+0x5a4>)
 8004930:	4894      	ldr	r0, [pc, #592]	@ (8004b84 <temperatureSendCan+0x5a8>)
 8004932:	f009 fba3 	bl	800e07c <can1_ams_s03_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S03_TEMPERATURES_FRAME_ID;
 8004936:	4b94      	ldr	r3, [pc, #592]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004938:	f240 2272 	movw	r2, #626	@ 0x272
 800493c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S03_TEMPERATURES_LENGTH;
 800493e:	4b92      	ldr	r3, [pc, #584]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004940:	2205      	movs	r2, #5
 8004942:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004944:	4b90      	ldr	r3, [pc, #576]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 800494a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b88 <temperatureSendCan+0x5ac>)
 800494c:	2200      	movs	r2, #0
 800494e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004950:	2300      	movs	r3, #0
 8004952:	4a8c      	ldr	r2, [pc, #560]	@ (8004b84 <temperatureSendCan+0x5a8>)
 8004954:	498c      	ldr	r1, [pc, #560]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004956:	488d      	ldr	r0, [pc, #564]	@ (8004b8c <temperatureSendCan+0x5b0>)
 8004958:	f002 f9a8 	bl	8006cac <HAL_CAN_AddTxMessage>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 84eb 	beq.w	800533a <temperatureSendCan+0xd5e>
      Error_Handler();
 8004964:	f001 f93a 	bl	8005bdc <Error_Handler>
    break;
 8004968:	f000 bce7 	b.w	800533a <temperatureSendCan+0xd5e>

  case 3:
    can1_ams_s04_temperatures.s04t01 = can1_ams_s04_temperatures_s04t01_encode(
        thermistor_adc_to_c_float(rawTemps[15]));
 800496c:	4b83      	ldr	r3, [pc, #524]	@ (8004b7c <temperatureSendCan+0x5a0>)
 800496e:	8bdb      	ldrh	r3, [r3, #30]
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fbff 	bl	8006174 <thermistor_adc_to_c_float>
 8004976:	ee10 3a10 	vmov	r3, s0
    can1_ams_s04_temperatures.s04t01 = can1_ams_s04_temperatures_s04t01_encode(
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fd88 	bl	8000490 <__aeabi_f2d>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	ec43 2b10 	vmov	d0, r2, r3
 8004988:	f009 fd46 	bl	800e418 <can1_ams_s04_temperatures_s04t01_encode>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	4b7f      	ldr	r3, [pc, #508]	@ (8004b90 <temperatureSendCan+0x5b4>)
 8004992:	701a      	strb	r2, [r3, #0]
    can1_ams_s04_temperatures.s04t02 = can1_ams_s04_temperatures_s04t02_encode(
        thermistor_adc_to_c_float(rawTemps[16]));
 8004994:	4b79      	ldr	r3, [pc, #484]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004996:	8c1b      	ldrh	r3, [r3, #32]
 8004998:	4618      	mov	r0, r3
 800499a:	f001 fbeb 	bl	8006174 <thermistor_adc_to_c_float>
 800499e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s04_temperatures.s04t02 = can1_ams_s04_temperatures_s04t02_encode(
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fb fd74 	bl	8000490 <__aeabi_f2d>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	ec43 2b10 	vmov	d0, r2, r3
 80049b0:	f009 fd5e 	bl	800e470 <can1_ams_s04_temperatures_s04t02_encode>
 80049b4:	4603      	mov	r3, r0
 80049b6:	461a      	mov	r2, r3
 80049b8:	4b75      	ldr	r3, [pc, #468]	@ (8004b90 <temperatureSendCan+0x5b4>)
 80049ba:	705a      	strb	r2, [r3, #1]
    can1_ams_s04_temperatures.s04t03 = can1_ams_s04_temperatures_s04t03_encode(
        thermistor_adc_to_c_float(rawTemps[17]));
 80049bc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b7c <temperatureSendCan+0x5a0>)
 80049be:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 fbd7 	bl	8006174 <thermistor_adc_to_c_float>
 80049c6:	ee10 3a10 	vmov	r3, s0
    can1_ams_s04_temperatures.s04t03 = can1_ams_s04_temperatures_s04t03_encode(
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fd60 	bl	8000490 <__aeabi_f2d>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	ec43 2b10 	vmov	d0, r2, r3
 80049d8:	f009 fd76 	bl	800e4c8 <can1_ams_s04_temperatures_s04t03_encode>
 80049dc:	4603      	mov	r3, r0
 80049de:	461a      	mov	r2, r3
 80049e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004b90 <temperatureSendCan+0x5b4>)
 80049e2:	709a      	strb	r2, [r3, #2]
    can1_ams_s04_temperatures.s04t04 = can1_ams_s04_temperatures_s04t04_encode(
        thermistor_adc_to_c_float(rawTemps[18]));
 80049e4:	4b65      	ldr	r3, [pc, #404]	@ (8004b7c <temperatureSendCan+0x5a0>)
 80049e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 fbc3 	bl	8006174 <thermistor_adc_to_c_float>
 80049ee:	ee10 3a10 	vmov	r3, s0
    can1_ams_s04_temperatures.s04t04 = can1_ams_s04_temperatures_s04t04_encode(
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fb fd4c 	bl	8000490 <__aeabi_f2d>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	ec43 2b10 	vmov	d0, r2, r3
 8004a00:	f009 fd8e 	bl	800e520 <can1_ams_s04_temperatures_s04t04_encode>
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	4b61      	ldr	r3, [pc, #388]	@ (8004b90 <temperatureSendCan+0x5b4>)
 8004a0a:	70da      	strb	r2, [r3, #3]
    can1_ams_s04_temperatures.s04t05 = can1_ams_s04_temperatures_s04t05_encode(
        thermistor_adc_to_c_float(rawTemps[19]));
 8004a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004a0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 fbaf 	bl	8006174 <thermistor_adc_to_c_float>
 8004a16:	ee10 3a10 	vmov	r3, s0
    can1_ams_s04_temperatures.s04t05 = can1_ams_s04_temperatures_s04t05_encode(
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fb fd38 	bl	8000490 <__aeabi_f2d>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	ec43 2b10 	vmov	d0, r2, r3
 8004a28:	f009 fda6 	bl	800e578 <can1_ams_s04_temperatures_s04t05_encode>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b57      	ldr	r3, [pc, #348]	@ (8004b90 <temperatureSendCan+0x5b4>)
 8004a32:	711a      	strb	r2, [r3, #4]

    can1_ams_s04_temperatures_pack(txData, &can1_ams_s04_temperatures, CAN1_AMS_S04_TEMPERATURES_LENGTH);
 8004a34:	2205      	movs	r2, #5
 8004a36:	4956      	ldr	r1, [pc, #344]	@ (8004b90 <temperatureSendCan+0x5b4>)
 8004a38:	4852      	ldr	r0, [pc, #328]	@ (8004b84 <temperatureSendCan+0x5a8>)
 8004a3a:	f009 fc73 	bl	800e324 <can1_ams_s04_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S04_TEMPERATURES_FRAME_ID;
 8004a3e:	4b52      	ldr	r3, [pc, #328]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004a40:	f240 2273 	movw	r2, #627	@ 0x273
 8004a44:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S04_TEMPERATURES_LENGTH;
 8004a46:	4b50      	ldr	r3, [pc, #320]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004a48:	2205      	movs	r2, #5
 8004a4a:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004a52:	4b4d      	ldr	r3, [pc, #308]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b84 <temperatureSendCan+0x5a8>)
 8004a5c:	494a      	ldr	r1, [pc, #296]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004a5e:	484b      	ldr	r0, [pc, #300]	@ (8004b8c <temperatureSendCan+0x5b0>)
 8004a60:	f002 f924 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8469 	beq.w	800533e <temperatureSendCan+0xd62>
      Error_Handler();
 8004a6c:	f001 f8b6 	bl	8005bdc <Error_Handler>
    break;
 8004a70:	f000 bc65 	b.w	800533e <temperatureSendCan+0xd62>

  case 4:
    can1_ams_s05_temperatures.s05t01 = can1_ams_s05_temperatures_s05t01_encode(
        thermistor_adc_to_c_float(rawTemps[20]));
 8004a74:	4b41      	ldr	r3, [pc, #260]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fb7b 	bl	8006174 <thermistor_adc_to_c_float>
 8004a7e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s05_temperatures.s05t01 = can1_ams_s05_temperatures_s05t01_encode(
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fd04 	bl	8000490 <__aeabi_f2d>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	ec43 2b10 	vmov	d0, r2, r3
 8004a90:	f009 fe16 	bl	800e6c0 <can1_ams_s05_temperatures_s05t01_encode>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b3e      	ldr	r3, [pc, #248]	@ (8004b94 <temperatureSendCan+0x5b8>)
 8004a9a:	701a      	strb	r2, [r3, #0]
    can1_ams_s05_temperatures.s05t02 = can1_ams_s05_temperatures_s05t02_encode(
        thermistor_adc_to_c_float(rawTemps[21]));
 8004a9c:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 fb67 	bl	8006174 <thermistor_adc_to_c_float>
 8004aa6:	ee10 3a10 	vmov	r3, s0
    can1_ams_s05_temperatures.s05t02 = can1_ams_s05_temperatures_s05t02_encode(
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fb fcf0 	bl	8000490 <__aeabi_f2d>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	ec43 2b10 	vmov	d0, r2, r3
 8004ab8:	f009 fe2e 	bl	800e718 <can1_ams_s05_temperatures_s05t02_encode>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4b34      	ldr	r3, [pc, #208]	@ (8004b94 <temperatureSendCan+0x5b8>)
 8004ac2:	705a      	strb	r2, [r3, #1]
    can1_ams_s05_temperatures.s05t03 = can1_ams_s05_temperatures_s05t03_encode(
        thermistor_adc_to_c_float(rawTemps[22]));
 8004ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004ac6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fb53 	bl	8006174 <thermistor_adc_to_c_float>
 8004ace:	ee10 3a10 	vmov	r3, s0
    can1_ams_s05_temperatures.s05t03 = can1_ams_s05_temperatures_s05t03_encode(
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fb fcdc 	bl	8000490 <__aeabi_f2d>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	ec43 2b10 	vmov	d0, r2, r3
 8004ae0:	f009 fe46 	bl	800e770 <can1_ams_s05_temperatures_s05t03_encode>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b94 <temperatureSendCan+0x5b8>)
 8004aea:	709a      	strb	r2, [r3, #2]
    can1_ams_s05_temperatures.s05t04 = can1_ams_s05_temperatures_s05t04_encode(
        thermistor_adc_to_c_float(rawTemps[23]));
 8004aec:	4b23      	ldr	r3, [pc, #140]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fb3f 	bl	8006174 <thermistor_adc_to_c_float>
 8004af6:	ee10 3a10 	vmov	r3, s0
    can1_ams_s05_temperatures.s05t04 = can1_ams_s05_temperatures_s05t04_encode(
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fcc8 	bl	8000490 <__aeabi_f2d>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	ec43 2b10 	vmov	d0, r2, r3
 8004b08:	f009 fe5e 	bl	800e7c8 <can1_ams_s05_temperatures_s05t04_encode>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4b20      	ldr	r3, [pc, #128]	@ (8004b94 <temperatureSendCan+0x5b8>)
 8004b12:	70da      	strb	r2, [r3, #3]
    can1_ams_s05_temperatures.s05t05 = can1_ams_s05_temperatures_s05t05_encode(
        thermistor_adc_to_c_float(rawTemps[24]));
 8004b14:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <temperatureSendCan+0x5a0>)
 8004b16:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fb2b 	bl	8006174 <thermistor_adc_to_c_float>
 8004b1e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s05_temperatures.s05t05 = can1_ams_s05_temperatures_s05t05_encode(
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fb fcb4 	bl	8000490 <__aeabi_f2d>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	ec43 2b10 	vmov	d0, r2, r3
 8004b30:	f009 fe76 	bl	800e820 <can1_ams_s05_temperatures_s05t05_encode>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b16      	ldr	r3, [pc, #88]	@ (8004b94 <temperatureSendCan+0x5b8>)
 8004b3a:	711a      	strb	r2, [r3, #4]

    can1_ams_s05_temperatures_pack(txData, &can1_ams_s05_temperatures, CAN1_AMS_S05_TEMPERATURES_LENGTH);
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	4915      	ldr	r1, [pc, #84]	@ (8004b94 <temperatureSendCan+0x5b8>)
 8004b40:	4810      	ldr	r0, [pc, #64]	@ (8004b84 <temperatureSendCan+0x5a8>)
 8004b42:	f009 fd43 	bl	800e5cc <can1_ams_s05_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S05_TEMPERATURES_FRAME_ID;
 8004b46:	4b10      	ldr	r3, [pc, #64]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004b48:	f44f 721d 	mov.w	r2, #628	@ 0x274
 8004b4c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S05_TEMPERATURES_LENGTH;
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004b50:	2205      	movs	r2, #5
 8004b52:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4a08      	ldr	r2, [pc, #32]	@ (8004b84 <temperatureSendCan+0x5a8>)
 8004b64:	4908      	ldr	r1, [pc, #32]	@ (8004b88 <temperatureSendCan+0x5ac>)
 8004b66:	4809      	ldr	r0, [pc, #36]	@ (8004b8c <temperatureSendCan+0x5b0>)
 8004b68:	f002 f8a0 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 83e7 	beq.w	8005342 <temperatureSendCan+0xd66>
      Error_Handler();
 8004b74:	f001 f832 	bl	8005bdc <Error_Handler>
    break;
 8004b78:	e3e3      	b.n	8005342 <temperatureSendCan+0xd66>
 8004b7a:	bf00      	nop
 8004b7c:	20000568 	.word	0x20000568
 8004b80:	200003a8 	.word	0x200003a8
 8004b84:	20000288 	.word	0x20000288
 8004b88:	20000254 	.word	0x20000254
 8004b8c:	2000011c 	.word	0x2000011c
 8004b90:	200003b0 	.word	0x200003b0
 8004b94:	200003b8 	.word	0x200003b8

  case 5:
    can1_ams_s06_temperatures.s06t01 = can1_ams_s06_temperatures_s06t01_encode(
        thermistor_adc_to_c_float(rawTemps[25]));
 8004b98:	4bc8      	ldr	r3, [pc, #800]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004b9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fae9 	bl	8006174 <thermistor_adc_to_c_float>
 8004ba2:	ee10 3a10 	vmov	r3, s0
    can1_ams_s06_temperatures.s06t01 = can1_ams_s06_temperatures_s06t01_encode(
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fb fc72 	bl	8000490 <__aeabi_f2d>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	ec43 2b10 	vmov	d0, r2, r3
 8004bb4:	f009 fed8 	bl	800e968 <can1_ams_s06_temperatures_s06t01_encode>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4bc0      	ldr	r3, [pc, #768]	@ (8004ec0 <temperatureSendCan+0x8e4>)
 8004bbe:	701a      	strb	r2, [r3, #0]
    can1_ams_s06_temperatures.s06t02 = can1_ams_s06_temperatures_s06t02_encode(
        thermistor_adc_to_c_float(rawTemps[26]));
 8004bc0:	4bbe      	ldr	r3, [pc, #760]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004bc2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 fad5 	bl	8006174 <thermistor_adc_to_c_float>
 8004bca:	ee10 3a10 	vmov	r3, s0
    can1_ams_s06_temperatures.s06t02 = can1_ams_s06_temperatures_s06t02_encode(
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fb fc5e 	bl	8000490 <__aeabi_f2d>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	ec43 2b10 	vmov	d0, r2, r3
 8004bdc:	f009 fef0 	bl	800e9c0 <can1_ams_s06_temperatures_s06t02_encode>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	4bb6      	ldr	r3, [pc, #728]	@ (8004ec0 <temperatureSendCan+0x8e4>)
 8004be6:	705a      	strb	r2, [r3, #1]
    can1_ams_s06_temperatures.s06t03 = can1_ams_s06_temperatures_s06t03_encode(
        thermistor_adc_to_c_float(rawTemps[27]));
 8004be8:	4bb4      	ldr	r3, [pc, #720]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004bea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fac1 	bl	8006174 <thermistor_adc_to_c_float>
 8004bf2:	ee10 3a10 	vmov	r3, s0
    can1_ams_s06_temperatures.s06t03 = can1_ams_s06_temperatures_s06t03_encode(
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fb fc4a 	bl	8000490 <__aeabi_f2d>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	ec43 2b10 	vmov	d0, r2, r3
 8004c04:	f009 ff08 	bl	800ea18 <can1_ams_s06_temperatures_s06t03_encode>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4bac      	ldr	r3, [pc, #688]	@ (8004ec0 <temperatureSendCan+0x8e4>)
 8004c0e:	709a      	strb	r2, [r3, #2]
    can1_ams_s06_temperatures.s06t04 = can1_ams_s06_temperatures_s06t04_encode(
        thermistor_adc_to_c_float(rawTemps[28]));
 8004c10:	4baa      	ldr	r3, [pc, #680]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004c12:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 faad 	bl	8006174 <thermistor_adc_to_c_float>
 8004c1a:	ee10 3a10 	vmov	r3, s0
    can1_ams_s06_temperatures.s06t04 = can1_ams_s06_temperatures_s06t04_encode(
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fb fc36 	bl	8000490 <__aeabi_f2d>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	ec43 2b10 	vmov	d0, r2, r3
 8004c2c:	f009 ff20 	bl	800ea70 <can1_ams_s06_temperatures_s06t04_encode>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	4ba2      	ldr	r3, [pc, #648]	@ (8004ec0 <temperatureSendCan+0x8e4>)
 8004c36:	70da      	strb	r2, [r3, #3]
    can1_ams_s06_temperatures.s06t05 = can1_ams_s06_temperatures_s06t05_encode(
        thermistor_adc_to_c_float(rawTemps[29]));
 8004c38:	4ba0      	ldr	r3, [pc, #640]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004c3a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 fa99 	bl	8006174 <thermistor_adc_to_c_float>
 8004c42:	ee10 3a10 	vmov	r3, s0
    can1_ams_s06_temperatures.s06t05 = can1_ams_s06_temperatures_s06t05_encode(
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fb fc22 	bl	8000490 <__aeabi_f2d>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	ec43 2b10 	vmov	d0, r2, r3
 8004c54:	f009 ff38 	bl	800eac8 <can1_ams_s06_temperatures_s06t05_encode>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4b98      	ldr	r3, [pc, #608]	@ (8004ec0 <temperatureSendCan+0x8e4>)
 8004c5e:	711a      	strb	r2, [r3, #4]

    can1_ams_s06_temperatures_pack(txData, &can1_ams_s06_temperatures, CAN1_AMS_S06_TEMPERATURES_LENGTH);
 8004c60:	2205      	movs	r2, #5
 8004c62:	4997      	ldr	r1, [pc, #604]	@ (8004ec0 <temperatureSendCan+0x8e4>)
 8004c64:	4897      	ldr	r0, [pc, #604]	@ (8004ec4 <temperatureSendCan+0x8e8>)
 8004c66:	f009 fe05 	bl	800e874 <can1_ams_s06_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S06_TEMPERATURES_FRAME_ID;
 8004c6a:	4b97      	ldr	r3, [pc, #604]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004c6c:	f240 2275 	movw	r2, #629	@ 0x275
 8004c70:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S06_TEMPERATURES_LENGTH;
 8004c72:	4b95      	ldr	r3, [pc, #596]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004c74:	2205      	movs	r2, #5
 8004c76:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004c78:	4b93      	ldr	r3, [pc, #588]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004c7e:	4b92      	ldr	r3, [pc, #584]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004c84:	2300      	movs	r3, #0
 8004c86:	4a8f      	ldr	r2, [pc, #572]	@ (8004ec4 <temperatureSendCan+0x8e8>)
 8004c88:	498f      	ldr	r1, [pc, #572]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004c8a:	4890      	ldr	r0, [pc, #576]	@ (8004ecc <temperatureSendCan+0x8f0>)
 8004c8c:	f002 f80e 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8357 	beq.w	8005346 <temperatureSendCan+0xd6a>
      Error_Handler();
 8004c98:	f000 ffa0 	bl	8005bdc <Error_Handler>
    break;
 8004c9c:	e353      	b.n	8005346 <temperatureSendCan+0xd6a>

  case 6:
    can1_ams_s07_temperatures.s07t01 = can1_ams_s07_temperatures_s07t01_encode(
        thermistor_adc_to_c_float(rawTemps[30]));
 8004c9e:	4b87      	ldr	r3, [pc, #540]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004ca0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 fa66 	bl	8006174 <thermistor_adc_to_c_float>
 8004ca8:	ee10 3a10 	vmov	r3, s0
    can1_ams_s07_temperatures.s07t01 = can1_ams_s07_temperatures_s07t01_encode(
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fb fbef 	bl	8000490 <__aeabi_f2d>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	ec43 2b10 	vmov	d0, r2, r3
 8004cba:	f009 ffa9 	bl	800ec10 <can1_ams_s07_temperatures_s07t01_encode>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b83      	ldr	r3, [pc, #524]	@ (8004ed0 <temperatureSendCan+0x8f4>)
 8004cc4:	701a      	strb	r2, [r3, #0]
    can1_ams_s07_temperatures.s07t02 = can1_ams_s07_temperatures_s07t02_encode(
        thermistor_adc_to_c_float(rawTemps[31]));
 8004cc6:	4b7d      	ldr	r3, [pc, #500]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 fa52 	bl	8006174 <thermistor_adc_to_c_float>
 8004cd0:	ee10 3a10 	vmov	r3, s0
    can1_ams_s07_temperatures.s07t02 = can1_ams_s07_temperatures_s07t02_encode(
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fb fbdb 	bl	8000490 <__aeabi_f2d>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	ec43 2b10 	vmov	d0, r2, r3
 8004ce2:	f009 ffc1 	bl	800ec68 <can1_ams_s07_temperatures_s07t02_encode>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b79      	ldr	r3, [pc, #484]	@ (8004ed0 <temperatureSendCan+0x8f4>)
 8004cec:	705a      	strb	r2, [r3, #1]
    can1_ams_s07_temperatures.s07t03 = can1_ams_s07_temperatures_s07t03_encode(
        thermistor_adc_to_c_float(rawTemps[32]));
 8004cee:	4b73      	ldr	r3, [pc, #460]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004cf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 fa3d 	bl	8006174 <thermistor_adc_to_c_float>
 8004cfa:	ee10 3a10 	vmov	r3, s0
    can1_ams_s07_temperatures.s07t03 = can1_ams_s07_temperatures_s07t03_encode(
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fb fbc6 	bl	8000490 <__aeabi_f2d>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	ec43 2b10 	vmov	d0, r2, r3
 8004d0c:	f009 ffd8 	bl	800ecc0 <can1_ams_s07_temperatures_s07t03_encode>
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	4b6e      	ldr	r3, [pc, #440]	@ (8004ed0 <temperatureSendCan+0x8f4>)
 8004d16:	709a      	strb	r2, [r3, #2]
    can1_ams_s07_temperatures.s07t04 = can1_ams_s07_temperatures_s07t04_encode(
        thermistor_adc_to_c_float(rawTemps[33]));
 8004d18:	4b68      	ldr	r3, [pc, #416]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004d1a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 fa28 	bl	8006174 <thermistor_adc_to_c_float>
 8004d24:	ee10 3a10 	vmov	r3, s0
    can1_ams_s07_temperatures.s07t04 = can1_ams_s07_temperatures_s07t04_encode(
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fb fbb1 	bl	8000490 <__aeabi_f2d>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	ec43 2b10 	vmov	d0, r2, r3
 8004d36:	f009 ffef 	bl	800ed18 <can1_ams_s07_temperatures_s07t04_encode>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4b64      	ldr	r3, [pc, #400]	@ (8004ed0 <temperatureSendCan+0x8f4>)
 8004d40:	70da      	strb	r2, [r3, #3]
    can1_ams_s07_temperatures.s07t05 = can1_ams_s07_temperatures_s07t05_encode(
        thermistor_adc_to_c_float(rawTemps[34]));
 8004d42:	4b5e      	ldr	r3, [pc, #376]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 fa13 	bl	8006174 <thermistor_adc_to_c_float>
 8004d4e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s07_temperatures.s07t05 = can1_ams_s07_temperatures_s07t05_encode(
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb fb9c 	bl	8000490 <__aeabi_f2d>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	ec43 2b10 	vmov	d0, r2, r3
 8004d60:	f00a f806 	bl	800ed70 <can1_ams_s07_temperatures_s07t05_encode>
 8004d64:	4603      	mov	r3, r0
 8004d66:	461a      	mov	r2, r3
 8004d68:	4b59      	ldr	r3, [pc, #356]	@ (8004ed0 <temperatureSendCan+0x8f4>)
 8004d6a:	711a      	strb	r2, [r3, #4]

    can1_ams_s07_temperatures_pack(txData, &can1_ams_s07_temperatures, CAN1_AMS_S07_TEMPERATURES_LENGTH);
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	4958      	ldr	r1, [pc, #352]	@ (8004ed0 <temperatureSendCan+0x8f4>)
 8004d70:	4854      	ldr	r0, [pc, #336]	@ (8004ec4 <temperatureSendCan+0x8e8>)
 8004d72:	f009 fed3 	bl	800eb1c <can1_ams_s07_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S07_TEMPERATURES_FRAME_ID;
 8004d76:	4b54      	ldr	r3, [pc, #336]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004d78:	f240 2276 	movw	r2, #630	@ 0x276
 8004d7c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S07_TEMPERATURES_LENGTH;
 8004d7e:	4b52      	ldr	r3, [pc, #328]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004d80:	2205      	movs	r2, #5
 8004d82:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004d84:	4b50      	ldr	r3, [pc, #320]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4a4c      	ldr	r2, [pc, #304]	@ (8004ec4 <temperatureSendCan+0x8e8>)
 8004d94:	494c      	ldr	r1, [pc, #304]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004d96:	484d      	ldr	r0, [pc, #308]	@ (8004ecc <temperatureSendCan+0x8f0>)
 8004d98:	f001 ff88 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 82d3 	beq.w	800534a <temperatureSendCan+0xd6e>
      Error_Handler();
 8004da4:	f000 ff1a 	bl	8005bdc <Error_Handler>
    break;
 8004da8:	e2cf      	b.n	800534a <temperatureSendCan+0xd6e>

  case 7:
    can1_ams_s08_temperatures.s08t01 = can1_ams_s08_temperatures_s08t01_encode(
        thermistor_adc_to_c_float(rawTemps[35]));
 8004daa:	4b44      	ldr	r3, [pc, #272]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 f9df 	bl	8006174 <thermistor_adc_to_c_float>
 8004db6:	ee10 3a10 	vmov	r3, s0
    can1_ams_s08_temperatures.s08t01 = can1_ams_s08_temperatures_s08t01_encode(
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fb68 	bl	8000490 <__aeabi_f2d>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	ec43 2b10 	vmov	d0, r2, r3
 8004dc8:	f00a f876 	bl	800eeb8 <can1_ams_s08_temperatures_s08t01_encode>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b40      	ldr	r3, [pc, #256]	@ (8004ed4 <temperatureSendCan+0x8f8>)
 8004dd2:	701a      	strb	r2, [r3, #0]
    can1_ams_s08_temperatures.s08t02 = can1_ams_s08_temperatures_s08t02_encode(
        thermistor_adc_to_c_float(rawTemps[36]));
 8004dd4:	4b39      	ldr	r3, [pc, #228]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004dd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f9ca 	bl	8006174 <thermistor_adc_to_c_float>
 8004de0:	ee10 3a10 	vmov	r3, s0
    can1_ams_s08_temperatures.s08t02 = can1_ams_s08_temperatures_s08t02_encode(
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fb fb53 	bl	8000490 <__aeabi_f2d>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	ec43 2b10 	vmov	d0, r2, r3
 8004df2:	f00a f88d 	bl	800ef10 <can1_ams_s08_temperatures_s08t02_encode>
 8004df6:	4603      	mov	r3, r0
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b36      	ldr	r3, [pc, #216]	@ (8004ed4 <temperatureSendCan+0x8f8>)
 8004dfc:	705a      	strb	r2, [r3, #1]
    can1_ams_s08_temperatures.s08t03 = can1_ams_s08_temperatures_s08t03_encode(
        thermistor_adc_to_c_float(rawTemps[37]));
 8004dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004e00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 f9b5 	bl	8006174 <thermistor_adc_to_c_float>
 8004e0a:	ee10 3a10 	vmov	r3, s0
    can1_ams_s08_temperatures.s08t03 = can1_ams_s08_temperatures_s08t03_encode(
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fb fb3e 	bl	8000490 <__aeabi_f2d>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	ec43 2b10 	vmov	d0, r2, r3
 8004e1c:	f00a f8a4 	bl	800ef68 <can1_ams_s08_temperatures_s08t03_encode>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed4 <temperatureSendCan+0x8f8>)
 8004e26:	709a      	strb	r2, [r3, #2]
    can1_ams_s08_temperatures.s08t04 = can1_ams_s08_temperatures_s08t04_encode(
        thermistor_adc_to_c_float(rawTemps[38]));
 8004e28:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004e2a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 f9a0 	bl	8006174 <thermistor_adc_to_c_float>
 8004e34:	ee10 3a10 	vmov	r3, s0
    can1_ams_s08_temperatures.s08t04 = can1_ams_s08_temperatures_s08t04_encode(
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fb fb29 	bl	8000490 <__aeabi_f2d>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	ec43 2b10 	vmov	d0, r2, r3
 8004e46:	f00a f8bb 	bl	800efc0 <can1_ams_s08_temperatures_s08t04_encode>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b21      	ldr	r3, [pc, #132]	@ (8004ed4 <temperatureSendCan+0x8f8>)
 8004e50:	70da      	strb	r2, [r3, #3]
    can1_ams_s08_temperatures.s08t05 = can1_ams_s08_temperatures_s08t05_encode(
        thermistor_adc_to_c_float(rawTemps[39]));
 8004e52:	4b1a      	ldr	r3, [pc, #104]	@ (8004ebc <temperatureSendCan+0x8e0>)
 8004e54:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 f98b 	bl	8006174 <thermistor_adc_to_c_float>
 8004e5e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s08_temperatures.s08t05 = can1_ams_s08_temperatures_s08t05_encode(
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fb14 	bl	8000490 <__aeabi_f2d>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	ec43 2b10 	vmov	d0, r2, r3
 8004e70:	f00a f8d2 	bl	800f018 <can1_ams_s08_temperatures_s08t05_encode>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
 8004e78:	4b16      	ldr	r3, [pc, #88]	@ (8004ed4 <temperatureSendCan+0x8f8>)
 8004e7a:	711a      	strb	r2, [r3, #4]

    can1_ams_s08_temperatures_pack(txData, &can1_ams_s08_temperatures, CAN1_AMS_S08_TEMPERATURES_LENGTH);
 8004e7c:	2205      	movs	r2, #5
 8004e7e:	4915      	ldr	r1, [pc, #84]	@ (8004ed4 <temperatureSendCan+0x8f8>)
 8004e80:	4810      	ldr	r0, [pc, #64]	@ (8004ec4 <temperatureSendCan+0x8e8>)
 8004e82:	f009 ff9f 	bl	800edc4 <can1_ams_s08_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S08_TEMPERATURES_FRAME_ID;
 8004e86:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004e88:	f240 2277 	movw	r2, #631	@ 0x277
 8004e8c:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S08_TEMPERATURES_LENGTH;
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004e90:	2205      	movs	r2, #5
 8004e92:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4a08      	ldr	r2, [pc, #32]	@ (8004ec4 <temperatureSendCan+0x8e8>)
 8004ea4:	4908      	ldr	r1, [pc, #32]	@ (8004ec8 <temperatureSendCan+0x8ec>)
 8004ea6:	4809      	ldr	r0, [pc, #36]	@ (8004ecc <temperatureSendCan+0x8f0>)
 8004ea8:	f001 ff00 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 824d 	beq.w	800534e <temperatureSendCan+0xd72>
      Error_Handler();
 8004eb4:	f000 fe92 	bl	8005bdc <Error_Handler>
    break;
 8004eb8:	e249      	b.n	800534e <temperatureSendCan+0xd72>
 8004eba:	bf00      	nop
 8004ebc:	20000568 	.word	0x20000568
 8004ec0:	200003c0 	.word	0x200003c0
 8004ec4:	20000288 	.word	0x20000288
 8004ec8:	20000254 	.word	0x20000254
 8004ecc:	2000011c 	.word	0x2000011c
 8004ed0:	200003c8 	.word	0x200003c8
 8004ed4:	200003d0 	.word	0x200003d0

  case 8:
    can1_ams_s09_temperatures.s09t01 = can1_ams_s09_temperatures_s09t01_encode(
        thermistor_adc_to_c_float(rawTemps[40]));
 8004ed8:	4bcb      	ldr	r3, [pc, #812]	@ (8005208 <temperatureSendCan+0xc2c>)
 8004eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 f948 	bl	8006174 <thermistor_adc_to_c_float>
 8004ee4:	ee10 3a10 	vmov	r3, s0
    can1_ams_s09_temperatures.s09t01 = can1_ams_s09_temperatures_s09t01_encode(
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fad1 	bl	8000490 <__aeabi_f2d>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	ec43 2b10 	vmov	d0, r2, r3
 8004ef6:	f00a f933 	bl	800f160 <can1_ams_s09_temperatures_s09t01_encode>
 8004efa:	4603      	mov	r3, r0
 8004efc:	461a      	mov	r2, r3
 8004efe:	4bc3      	ldr	r3, [pc, #780]	@ (800520c <temperatureSendCan+0xc30>)
 8004f00:	701a      	strb	r2, [r3, #0]
    can1_ams_s09_temperatures.s09t02 = can1_ams_s09_temperatures_s09t02_encode(
        thermistor_adc_to_c_float(rawTemps[41]));
 8004f02:	4bc1      	ldr	r3, [pc, #772]	@ (8005208 <temperatureSendCan+0xc2c>)
 8004f04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 f933 	bl	8006174 <thermistor_adc_to_c_float>
 8004f0e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s09_temperatures.s09t02 = can1_ams_s09_temperatures_s09t02_encode(
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fb fabc 	bl	8000490 <__aeabi_f2d>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	ec43 2b10 	vmov	d0, r2, r3
 8004f20:	f00a f94a 	bl	800f1b8 <can1_ams_s09_temperatures_s09t02_encode>
 8004f24:	4603      	mov	r3, r0
 8004f26:	461a      	mov	r2, r3
 8004f28:	4bb8      	ldr	r3, [pc, #736]	@ (800520c <temperatureSendCan+0xc30>)
 8004f2a:	705a      	strb	r2, [r3, #1]
    can1_ams_s09_temperatures.s09t03 = can1_ams_s09_temperatures_s09t03_encode(
        thermistor_adc_to_c_float(rawTemps[42]));
 8004f2c:	4bb6      	ldr	r3, [pc, #728]	@ (8005208 <temperatureSendCan+0xc2c>)
 8004f2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 f91e 	bl	8006174 <thermistor_adc_to_c_float>
 8004f38:	ee10 3a10 	vmov	r3, s0
    can1_ams_s09_temperatures.s09t03 = can1_ams_s09_temperatures_s09t03_encode(
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fb faa7 	bl	8000490 <__aeabi_f2d>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	ec43 2b10 	vmov	d0, r2, r3
 8004f4a:	f00a f961 	bl	800f210 <can1_ams_s09_temperatures_s09t03_encode>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	461a      	mov	r2, r3
 8004f52:	4bae      	ldr	r3, [pc, #696]	@ (800520c <temperatureSendCan+0xc30>)
 8004f54:	709a      	strb	r2, [r3, #2]
    can1_ams_s09_temperatures.s09t04 = can1_ams_s09_temperatures_s09t04_encode(
        thermistor_adc_to_c_float(rawTemps[43]));
 8004f56:	4bac      	ldr	r3, [pc, #688]	@ (8005208 <temperatureSendCan+0xc2c>)
 8004f58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 f909 	bl	8006174 <thermistor_adc_to_c_float>
 8004f62:	ee10 3a10 	vmov	r3, s0
    can1_ams_s09_temperatures.s09t04 = can1_ams_s09_temperatures_s09t04_encode(
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fb fa92 	bl	8000490 <__aeabi_f2d>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	ec43 2b10 	vmov	d0, r2, r3
 8004f74:	f00a f978 	bl	800f268 <can1_ams_s09_temperatures_s09t04_encode>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4ba3      	ldr	r3, [pc, #652]	@ (800520c <temperatureSendCan+0xc30>)
 8004f7e:	70da      	strb	r2, [r3, #3]
    can1_ams_s09_temperatures.s09t05 = can1_ams_s09_temperatures_s09t05_encode(
        thermistor_adc_to_c_float(rawTemps[44]));
 8004f80:	4ba1      	ldr	r3, [pc, #644]	@ (8005208 <temperatureSendCan+0xc2c>)
 8004f82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 f8f4 	bl	8006174 <thermistor_adc_to_c_float>
 8004f8c:	ee10 3a10 	vmov	r3, s0
    can1_ams_s09_temperatures.s09t05 = can1_ams_s09_temperatures_s09t05_encode(
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fb fa7d 	bl	8000490 <__aeabi_f2d>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	ec43 2b10 	vmov	d0, r2, r3
 8004f9e:	f00a f98f 	bl	800f2c0 <can1_ams_s09_temperatures_s09t05_encode>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4b99      	ldr	r3, [pc, #612]	@ (800520c <temperatureSendCan+0xc30>)
 8004fa8:	711a      	strb	r2, [r3, #4]

    can1_ams_s09_temperatures_pack(txData, &can1_ams_s09_temperatures, CAN1_AMS_S09_TEMPERATURES_LENGTH);
 8004faa:	2205      	movs	r2, #5
 8004fac:	4997      	ldr	r1, [pc, #604]	@ (800520c <temperatureSendCan+0xc30>)
 8004fae:	4898      	ldr	r0, [pc, #608]	@ (8005210 <temperatureSendCan+0xc34>)
 8004fb0:	f00a f85c 	bl	800f06c <can1_ams_s09_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S09_TEMPERATURES_FRAME_ID;
 8004fb4:	4b97      	ldr	r3, [pc, #604]	@ (8005214 <temperatureSendCan+0xc38>)
 8004fb6:	f44f 721e 	mov.w	r2, #632	@ 0x278
 8004fba:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S09_TEMPERATURES_LENGTH;
 8004fbc:	4b95      	ldr	r3, [pc, #596]	@ (8005214 <temperatureSendCan+0xc38>)
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 8004fc2:	4b94      	ldr	r3, [pc, #592]	@ (8005214 <temperatureSendCan+0xc38>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8004fc8:	4b92      	ldr	r3, [pc, #584]	@ (8005214 <temperatureSendCan+0xc38>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4a8f      	ldr	r2, [pc, #572]	@ (8005210 <temperatureSendCan+0xc34>)
 8004fd2:	4990      	ldr	r1, [pc, #576]	@ (8005214 <temperatureSendCan+0xc38>)
 8004fd4:	4890      	ldr	r0, [pc, #576]	@ (8005218 <temperatureSendCan+0xc3c>)
 8004fd6:	f001 fe69 	bl	8006cac <HAL_CAN_AddTxMessage>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 81b8 	beq.w	8005352 <temperatureSendCan+0xd76>
      Error_Handler();
 8004fe2:	f000 fdfb 	bl	8005bdc <Error_Handler>
    break;
 8004fe6:	e1b4      	b.n	8005352 <temperatureSendCan+0xd76>

  case 9:
    can1_ams_s10_temperatures.s10t01 = can1_ams_s10_temperatures_s10t01_encode(
        thermistor_adc_to_c_float(rawTemps[45]));
 8004fe8:	4b87      	ldr	r3, [pc, #540]	@ (8005208 <temperatureSendCan+0xc2c>)
 8004fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 f8c0 	bl	8006174 <thermistor_adc_to_c_float>
 8004ff4:	ee10 3a10 	vmov	r3, s0
    can1_ams_s10_temperatures.s10t01 = can1_ams_s10_temperatures_s10t01_encode(
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fb fa49 	bl	8000490 <__aeabi_f2d>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	ec43 2b10 	vmov	d0, r2, r3
 8005006:	f00a f9ff 	bl	800f408 <can1_ams_s10_temperatures_s10t01_encode>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	4b83      	ldr	r3, [pc, #524]	@ (800521c <temperatureSendCan+0xc40>)
 8005010:	701a      	strb	r2, [r3, #0]
    can1_ams_s10_temperatures.s10t02 = can1_ams_s10_temperatures_s10t02_encode(
        thermistor_adc_to_c_float(rawTemps[46]));
 8005012:	4b7d      	ldr	r3, [pc, #500]	@ (8005208 <temperatureSendCan+0xc2c>)
 8005014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005018:	4618      	mov	r0, r3
 800501a:	f001 f8ab 	bl	8006174 <thermistor_adc_to_c_float>
 800501e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s10_temperatures.s10t02 = can1_ams_s10_temperatures_s10t02_encode(
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb fa34 	bl	8000490 <__aeabi_f2d>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	ec43 2b10 	vmov	d0, r2, r3
 8005030:	f00a fa16 	bl	800f460 <can1_ams_s10_temperatures_s10t02_encode>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	4b78      	ldr	r3, [pc, #480]	@ (800521c <temperatureSendCan+0xc40>)
 800503a:	705a      	strb	r2, [r3, #1]
    can1_ams_s10_temperatures.s10t03 = can1_ams_s10_temperatures_s10t03_encode(
        thermistor_adc_to_c_float(rawTemps[47]));
 800503c:	4b72      	ldr	r3, [pc, #456]	@ (8005208 <temperatureSendCan+0xc2c>)
 800503e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005042:	4618      	mov	r0, r3
 8005044:	f001 f896 	bl	8006174 <thermistor_adc_to_c_float>
 8005048:	ee10 3a10 	vmov	r3, s0
    can1_ams_s10_temperatures.s10t03 = can1_ams_s10_temperatures_s10t03_encode(
 800504c:	4618      	mov	r0, r3
 800504e:	f7fb fa1f 	bl	8000490 <__aeabi_f2d>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	ec43 2b10 	vmov	d0, r2, r3
 800505a:	f00a fa2d 	bl	800f4b8 <can1_ams_s10_temperatures_s10t03_encode>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	4b6e      	ldr	r3, [pc, #440]	@ (800521c <temperatureSendCan+0xc40>)
 8005064:	709a      	strb	r2, [r3, #2]
    can1_ams_s10_temperatures.s10t04 = can1_ams_s10_temperatures_s10t04_encode(
        thermistor_adc_to_c_float(rawTemps[48]));
 8005066:	4b68      	ldr	r3, [pc, #416]	@ (8005208 <temperatureSendCan+0xc2c>)
 8005068:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800506c:	4618      	mov	r0, r3
 800506e:	f001 f881 	bl	8006174 <thermistor_adc_to_c_float>
 8005072:	ee10 3a10 	vmov	r3, s0
    can1_ams_s10_temperatures.s10t04 = can1_ams_s10_temperatures_s10t04_encode(
 8005076:	4618      	mov	r0, r3
 8005078:	f7fb fa0a 	bl	8000490 <__aeabi_f2d>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	ec43 2b10 	vmov	d0, r2, r3
 8005084:	f00a fa44 	bl	800f510 <can1_ams_s10_temperatures_s10t04_encode>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	4b63      	ldr	r3, [pc, #396]	@ (800521c <temperatureSendCan+0xc40>)
 800508e:	70da      	strb	r2, [r3, #3]
    can1_ams_s10_temperatures.s10t05 = can1_ams_s10_temperatures_s10t05_encode(
        thermistor_adc_to_c_float(rawTemps[49]));
 8005090:	4b5d      	ldr	r3, [pc, #372]	@ (8005208 <temperatureSendCan+0xc2c>)
 8005092:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005096:	4618      	mov	r0, r3
 8005098:	f001 f86c 	bl	8006174 <thermistor_adc_to_c_float>
 800509c:	ee10 3a10 	vmov	r3, s0
    can1_ams_s10_temperatures.s10t05 = can1_ams_s10_temperatures_s10t05_encode(
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fb f9f5 	bl	8000490 <__aeabi_f2d>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	ec43 2b10 	vmov	d0, r2, r3
 80050ae:	f00a fa5b 	bl	800f568 <can1_ams_s10_temperatures_s10t05_encode>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	4b59      	ldr	r3, [pc, #356]	@ (800521c <temperatureSendCan+0xc40>)
 80050b8:	711a      	strb	r2, [r3, #4]

    can1_ams_s10_temperatures_pack(txData, &can1_ams_s10_temperatures, CAN1_AMS_S10_TEMPERATURES_LENGTH);
 80050ba:	2205      	movs	r2, #5
 80050bc:	4957      	ldr	r1, [pc, #348]	@ (800521c <temperatureSendCan+0xc40>)
 80050be:	4854      	ldr	r0, [pc, #336]	@ (8005210 <temperatureSendCan+0xc34>)
 80050c0:	f00a f928 	bl	800f314 <can1_ams_s10_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S10_TEMPERATURES_FRAME_ID;
 80050c4:	4b53      	ldr	r3, [pc, #332]	@ (8005214 <temperatureSendCan+0xc38>)
 80050c6:	f240 2279 	movw	r2, #633	@ 0x279
 80050ca:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S10_TEMPERATURES_LENGTH;
 80050cc:	4b51      	ldr	r3, [pc, #324]	@ (8005214 <temperatureSendCan+0xc38>)
 80050ce:	2205      	movs	r2, #5
 80050d0:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80050d2:	4b50      	ldr	r3, [pc, #320]	@ (8005214 <temperatureSendCan+0xc38>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80050d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005214 <temperatureSendCan+0xc38>)
 80050da:	2200      	movs	r2, #0
 80050dc:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80050de:	2300      	movs	r3, #0
 80050e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005210 <temperatureSendCan+0xc34>)
 80050e2:	494c      	ldr	r1, [pc, #304]	@ (8005214 <temperatureSendCan+0xc38>)
 80050e4:	484c      	ldr	r0, [pc, #304]	@ (8005218 <temperatureSendCan+0xc3c>)
 80050e6:	f001 fde1 	bl	8006cac <HAL_CAN_AddTxMessage>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8132 	beq.w	8005356 <temperatureSendCan+0xd7a>
      Error_Handler();
 80050f2:	f000 fd73 	bl	8005bdc <Error_Handler>
    break;
 80050f6:	e12e      	b.n	8005356 <temperatureSendCan+0xd7a>

  case 10:
    can1_ams_s11_temperatures.s11t01 = can1_ams_s11_temperatures_s11t01_encode(
        thermistor_adc_to_c_float(rawTemps[50]));
 80050f8:	4b43      	ldr	r3, [pc, #268]	@ (8005208 <temperatureSendCan+0xc2c>)
 80050fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 f838 	bl	8006174 <thermistor_adc_to_c_float>
 8005104:	ee10 3a10 	vmov	r3, s0
    can1_ams_s11_temperatures.s11t01 = can1_ams_s11_temperatures_s11t01_encode(
 8005108:	4618      	mov	r0, r3
 800510a:	f7fb f9c1 	bl	8000490 <__aeabi_f2d>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	ec43 2b10 	vmov	d0, r2, r3
 8005116:	f00a facb 	bl	800f6b0 <can1_ams_s11_temperatures_s11t01_encode>
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
 800511e:	4b40      	ldr	r3, [pc, #256]	@ (8005220 <temperatureSendCan+0xc44>)
 8005120:	701a      	strb	r2, [r3, #0]
    can1_ams_s11_temperatures.s11t02 = can1_ams_s11_temperatures_s11t02_encode(
        thermistor_adc_to_c_float(rawTemps[51]));
 8005122:	4b39      	ldr	r3, [pc, #228]	@ (8005208 <temperatureSendCan+0xc2c>)
 8005124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8005128:	4618      	mov	r0, r3
 800512a:	f001 f823 	bl	8006174 <thermistor_adc_to_c_float>
 800512e:	ee10 3a10 	vmov	r3, s0
    can1_ams_s11_temperatures.s11t02 = can1_ams_s11_temperatures_s11t02_encode(
 8005132:	4618      	mov	r0, r3
 8005134:	f7fb f9ac 	bl	8000490 <__aeabi_f2d>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	ec43 2b10 	vmov	d0, r2, r3
 8005140:	f00a fae2 	bl	800f708 <can1_ams_s11_temperatures_s11t02_encode>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	4b35      	ldr	r3, [pc, #212]	@ (8005220 <temperatureSendCan+0xc44>)
 800514a:	705a      	strb	r2, [r3, #1]
    can1_ams_s11_temperatures.s11t03 = can1_ams_s11_temperatures_s11t03_encode(
        thermistor_adc_to_c_float(rawTemps[52]));
 800514c:	4b2e      	ldr	r3, [pc, #184]	@ (8005208 <temperatureSendCan+0xc2c>)
 800514e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005152:	4618      	mov	r0, r3
 8005154:	f001 f80e 	bl	8006174 <thermistor_adc_to_c_float>
 8005158:	ee10 3a10 	vmov	r3, s0
    can1_ams_s11_temperatures.s11t03 = can1_ams_s11_temperatures_s11t03_encode(
 800515c:	4618      	mov	r0, r3
 800515e:	f7fb f997 	bl	8000490 <__aeabi_f2d>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	ec43 2b10 	vmov	d0, r2, r3
 800516a:	f00a faf9 	bl	800f760 <can1_ams_s11_temperatures_s11t03_encode>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	4b2b      	ldr	r3, [pc, #172]	@ (8005220 <temperatureSendCan+0xc44>)
 8005174:	709a      	strb	r2, [r3, #2]
    can1_ams_s11_temperatures.s11t04 = can1_ams_s11_temperatures_s11t04_encode(
        thermistor_adc_to_c_float(rawTemps[53]));
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <temperatureSendCan+0xc2c>)
 8005178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fff9 	bl	8006174 <thermistor_adc_to_c_float>
 8005182:	ee10 3a10 	vmov	r3, s0
    can1_ams_s11_temperatures.s11t04 = can1_ams_s11_temperatures_s11t04_encode(
 8005186:	4618      	mov	r0, r3
 8005188:	f7fb f982 	bl	8000490 <__aeabi_f2d>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	ec43 2b10 	vmov	d0, r2, r3
 8005194:	f00a fb10 	bl	800f7b8 <can1_ams_s11_temperatures_s11t04_encode>
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	4b20      	ldr	r3, [pc, #128]	@ (8005220 <temperatureSendCan+0xc44>)
 800519e:	70da      	strb	r2, [r3, #3]
    can1_ams_s11_temperatures.s11t05 = can1_ams_s11_temperatures_s11t05_encode(
        thermistor_adc_to_c_float(rawTemps[54]));
 80051a0:	4b19      	ldr	r3, [pc, #100]	@ (8005208 <temperatureSendCan+0xc2c>)
 80051a2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 ffe4 	bl	8006174 <thermistor_adc_to_c_float>
 80051ac:	ee10 3a10 	vmov	r3, s0
    can1_ams_s11_temperatures.s11t05 = can1_ams_s11_temperatures_s11t05_encode(
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fb f96d 	bl	8000490 <__aeabi_f2d>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	ec43 2b10 	vmov	d0, r2, r3
 80051be:	f00a fb27 	bl	800f810 <can1_ams_s11_temperatures_s11t05_encode>
 80051c2:	4603      	mov	r3, r0
 80051c4:	461a      	mov	r2, r3
 80051c6:	4b16      	ldr	r3, [pc, #88]	@ (8005220 <temperatureSendCan+0xc44>)
 80051c8:	711a      	strb	r2, [r3, #4]

    can1_ams_s11_temperatures_pack(txData, &can1_ams_s11_temperatures, CAN1_AMS_S11_TEMPERATURES_LENGTH);
 80051ca:	2205      	movs	r2, #5
 80051cc:	4914      	ldr	r1, [pc, #80]	@ (8005220 <temperatureSendCan+0xc44>)
 80051ce:	4810      	ldr	r0, [pc, #64]	@ (8005210 <temperatureSendCan+0xc34>)
 80051d0:	f00a f9f4 	bl	800f5bc <can1_ams_s11_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S11_TEMPERATURES_FRAME_ID;
 80051d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <temperatureSendCan+0xc38>)
 80051d6:	f240 227a 	movw	r2, #634	@ 0x27a
 80051da:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S11_TEMPERATURES_LENGTH;
 80051dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <temperatureSendCan+0xc38>)
 80051de:	2205      	movs	r2, #5
 80051e0:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80051e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <temperatureSendCan+0xc38>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80051e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <temperatureSendCan+0xc38>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80051ee:	2300      	movs	r3, #0
 80051f0:	4a07      	ldr	r2, [pc, #28]	@ (8005210 <temperatureSendCan+0xc34>)
 80051f2:	4908      	ldr	r1, [pc, #32]	@ (8005214 <temperatureSendCan+0xc38>)
 80051f4:	4808      	ldr	r0, [pc, #32]	@ (8005218 <temperatureSendCan+0xc3c>)
 80051f6:	f001 fd59 	bl	8006cac <HAL_CAN_AddTxMessage>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80ac 	beq.w	800535a <temperatureSendCan+0xd7e>
      Error_Handler();
 8005202:	f000 fceb 	bl	8005bdc <Error_Handler>
    break;
 8005206:	e0a8      	b.n	800535a <temperatureSendCan+0xd7e>
 8005208:	20000568 	.word	0x20000568
 800520c:	200003d8 	.word	0x200003d8
 8005210:	20000288 	.word	0x20000288
 8005214:	20000254 	.word	0x20000254
 8005218:	2000011c 	.word	0x2000011c
 800521c:	200003e0 	.word	0x200003e0
 8005220:	200003e8 	.word	0x200003e8

  case 11:
    can1_ams_s12_temperatures.s12t01 = can1_ams_s12_temperatures_s12t01_encode(
        thermistor_adc_to_c_float(rawTemps[55]));
 8005224:	4b4f      	ldr	r3, [pc, #316]	@ (8005364 <temperatureSendCan+0xd88>)
 8005226:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 800522a:	4618      	mov	r0, r3
 800522c:	f000 ffa2 	bl	8006174 <thermistor_adc_to_c_float>
 8005230:	ee10 3a10 	vmov	r3, s0
    can1_ams_s12_temperatures.s12t01 = can1_ams_s12_temperatures_s12t01_encode(
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb f92b 	bl	8000490 <__aeabi_f2d>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	ec43 2b10 	vmov	d0, r2, r3
 8005242:	f00a fb89 	bl	800f958 <can1_ams_s12_temperatures_s12t01_encode>
 8005246:	4603      	mov	r3, r0
 8005248:	461a      	mov	r2, r3
 800524a:	4b47      	ldr	r3, [pc, #284]	@ (8005368 <temperatureSendCan+0xd8c>)
 800524c:	701a      	strb	r2, [r3, #0]
    can1_ams_s12_temperatures.s12t02 = can1_ams_s12_temperatures_s12t02_encode(
        thermistor_adc_to_c_float(rawTemps[56]));
 800524e:	4b45      	ldr	r3, [pc, #276]	@ (8005364 <temperatureSendCan+0xd88>)
 8005250:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8005254:	4618      	mov	r0, r3
 8005256:	f000 ff8d 	bl	8006174 <thermistor_adc_to_c_float>
 800525a:	ee10 3a10 	vmov	r3, s0
    can1_ams_s12_temperatures.s12t02 = can1_ams_s12_temperatures_s12t02_encode(
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb f916 	bl	8000490 <__aeabi_f2d>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	ec43 2b10 	vmov	d0, r2, r3
 800526c:	f00a fba0 	bl	800f9b0 <can1_ams_s12_temperatures_s12t02_encode>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	4b3c      	ldr	r3, [pc, #240]	@ (8005368 <temperatureSendCan+0xd8c>)
 8005276:	705a      	strb	r2, [r3, #1]
    can1_ams_s12_temperatures.s12t03 = can1_ams_s12_temperatures_s12t03_encode(
        thermistor_adc_to_c_float(rawTemps[57]));
 8005278:	4b3a      	ldr	r3, [pc, #232]	@ (8005364 <temperatureSendCan+0xd88>)
 800527a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800527e:	4618      	mov	r0, r3
 8005280:	f000 ff78 	bl	8006174 <thermistor_adc_to_c_float>
 8005284:	ee10 3a10 	vmov	r3, s0
    can1_ams_s12_temperatures.s12t03 = can1_ams_s12_temperatures_s12t03_encode(
 8005288:	4618      	mov	r0, r3
 800528a:	f7fb f901 	bl	8000490 <__aeabi_f2d>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	ec43 2b10 	vmov	d0, r2, r3
 8005296:	f00a fbb7 	bl	800fa08 <can1_ams_s12_temperatures_s12t03_encode>
 800529a:	4603      	mov	r3, r0
 800529c:	461a      	mov	r2, r3
 800529e:	4b32      	ldr	r3, [pc, #200]	@ (8005368 <temperatureSendCan+0xd8c>)
 80052a0:	709a      	strb	r2, [r3, #2]
    can1_ams_s12_temperatures.s12t04 = can1_ams_s12_temperatures_s12t04_encode(
        thermistor_adc_to_c_float(rawTemps[58]));
 80052a2:	4b30      	ldr	r3, [pc, #192]	@ (8005364 <temperatureSendCan+0xd88>)
 80052a4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 ff63 	bl	8006174 <thermistor_adc_to_c_float>
 80052ae:	ee10 3a10 	vmov	r3, s0
    can1_ams_s12_temperatures.s12t04 = can1_ams_s12_temperatures_s12t04_encode(
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb f8ec 	bl	8000490 <__aeabi_f2d>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	ec43 2b10 	vmov	d0, r2, r3
 80052c0:	f00a fbce 	bl	800fa60 <can1_ams_s12_temperatures_s12t04_encode>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b27      	ldr	r3, [pc, #156]	@ (8005368 <temperatureSendCan+0xd8c>)
 80052ca:	70da      	strb	r2, [r3, #3]
    can1_ams_s12_temperatures.s12t05 = can1_ams_s12_temperatures_s12t05_encode(
        thermistor_adc_to_c_float(rawTemps[59]));
 80052cc:	4b25      	ldr	r3, [pc, #148]	@ (8005364 <temperatureSendCan+0xd88>)
 80052ce:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 ff4e 	bl	8006174 <thermistor_adc_to_c_float>
 80052d8:	ee10 3a10 	vmov	r3, s0
    can1_ams_s12_temperatures.s12t05 = can1_ams_s12_temperatures_s12t05_encode(
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb f8d7 	bl	8000490 <__aeabi_f2d>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	ec43 2b10 	vmov	d0, r2, r3
 80052ea:	f00a fbe5 	bl	800fab8 <can1_ams_s12_temperatures_s12t05_encode>
 80052ee:	4603      	mov	r3, r0
 80052f0:	461a      	mov	r2, r3
 80052f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <temperatureSendCan+0xd8c>)
 80052f4:	711a      	strb	r2, [r3, #4]

    can1_ams_s12_temperatures_pack(txData, &can1_ams_s12_temperatures, CAN1_AMS_S12_TEMPERATURES_LENGTH);
 80052f6:	2205      	movs	r2, #5
 80052f8:	491b      	ldr	r1, [pc, #108]	@ (8005368 <temperatureSendCan+0xd8c>)
 80052fa:	481c      	ldr	r0, [pc, #112]	@ (800536c <temperatureSendCan+0xd90>)
 80052fc:	f00a fab2 	bl	800f864 <can1_ams_s12_temperatures_pack>
    txHeader.StdId = CAN1_AMS_S12_TEMPERATURES_FRAME_ID;
 8005300:	4b1b      	ldr	r3, [pc, #108]	@ (8005370 <temperatureSendCan+0xd94>)
 8005302:	f240 227b 	movw	r2, #635	@ 0x27b
 8005306:	601a      	str	r2, [r3, #0]
    txHeader.DLC = CAN1_AMS_S12_TEMPERATURES_LENGTH;
 8005308:	4b19      	ldr	r3, [pc, #100]	@ (8005370 <temperatureSendCan+0xd94>)
 800530a:	2205      	movs	r2, #5
 800530c:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800530e:	4b18      	ldr	r3, [pc, #96]	@ (8005370 <temperatureSendCan+0xd94>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8005314:	4b16      	ldr	r3, [pc, #88]	@ (8005370 <temperatureSendCan+0xd94>)
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
    if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800531a:	2300      	movs	r3, #0
 800531c:	4a13      	ldr	r2, [pc, #76]	@ (800536c <temperatureSendCan+0xd90>)
 800531e:	4914      	ldr	r1, [pc, #80]	@ (8005370 <temperatureSendCan+0xd94>)
 8005320:	4814      	ldr	r0, [pc, #80]	@ (8005374 <temperatureSendCan+0xd98>)
 8005322:	f001 fcc3 	bl	8006cac <HAL_CAN_AddTxMessage>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d018      	beq.n	800535e <temperatureSendCan+0xd82>
      Error_Handler();
 800532c:	f000 fc56 	bl	8005bdc <Error_Handler>
    break;
 8005330:	e015      	b.n	800535e <temperatureSendCan+0xd82>
    break;
 8005332:	bf00      	nop
 8005334:	e014      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 8005336:	bf00      	nop
 8005338:	e012      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 800533a:	bf00      	nop
 800533c:	e010      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 800533e:	bf00      	nop
 8005340:	e00e      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 8005342:	bf00      	nop
 8005344:	e00c      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 8005346:	bf00      	nop
 8005348:	e00a      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 800534a:	bf00      	nop
 800534c:	e008      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 800534e:	bf00      	nop
 8005350:	e006      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 8005352:	bf00      	nop
 8005354:	e004      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <temperatureSendCan+0xd84>
    break;
 800535e:	bf00      	nop
  }
}
 8005360:	bf00      	nop
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20000568 	.word	0x20000568
 8005368:	200003f0 	.word	0x200003f0
 800536c:	20000288 	.word	0x20000288
 8005370:	20000254 	.word	0x20000254
 8005374:	2000011c 	.word	0x2000011c

08005378 <readCanMessages>:

static void readCanMessages(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 800537c:	e02a      	b.n	80053d4 <readCanMessages+0x5c>
  {
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 800537e:	4b49      	ldr	r3, [pc, #292]	@ (80054a4 <readCanMessages+0x12c>)
 8005380:	4a49      	ldr	r2, [pc, #292]	@ (80054a8 <readCanMessages+0x130>)
 8005382:	2100      	movs	r1, #0
 8005384:	4849      	ldr	r0, [pc, #292]	@ (80054ac <readCanMessages+0x134>)
 8005386:	f001 fd61 	bl	8006e4c <HAL_CAN_GetRxMessage>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <readCanMessages+0x1c>
    {
      Error_Handler();
 8005390:	f000 fc24 	bl	8005bdc <Error_Handler>
    }

    // Process the received message based on its ID
    switch (rxHeader.StdId)
 8005394:	4b44      	ldr	r3, [pc, #272]	@ (80054a8 <readCanMessages+0x130>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 800539c:	d013      	beq.n	80053c6 <readCanMessages+0x4e>
 800539e:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 80053a2:	d816      	bhi.n	80053d2 <readCanMessages+0x5a>
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d002      	beq.n	80053ae <readCanMessages+0x36>
 80053a8:	2b48      	cmp	r3, #72	@ 0x48
 80053aa:	d006      	beq.n	80053ba <readCanMessages+0x42>
    case CAN1_AMS_PARAMETERS_SET_FRAME_ID:
      can1_ams_parameters_set_unpack(&can1_ams_parameters_set, rxData, CAN1_AMS_PARAMETERS_SET_LENGTH);
      break;
    default:
      // Unknown ID, handle if necessary
      break;
 80053ac:	e011      	b.n	80053d2 <readCanMessages+0x5a>
      can1_dbu_status_1_unpack(&can1_dbu_status_1, rxData, CAN1_DBU_STATUS_1_LENGTH);
 80053ae:	2208      	movs	r2, #8
 80053b0:	493c      	ldr	r1, [pc, #240]	@ (80054a4 <readCanMessages+0x12c>)
 80053b2:	483f      	ldr	r0, [pc, #252]	@ (80054b0 <readCanMessages+0x138>)
 80053b4:	f004 fa8c 	bl	80098d0 <can1_dbu_status_1_unpack>
      break;
 80053b8:	e00c      	b.n	80053d4 <readCanMessages+0x5c>
      can1_ecu_status_unpack(&can1_ecu_status, rxData, CAN1_ECU_STATUS_LENGTH);
 80053ba:	2201      	movs	r2, #1
 80053bc:	4939      	ldr	r1, [pc, #228]	@ (80054a4 <readCanMessages+0x12c>)
 80053be:	483d      	ldr	r0, [pc, #244]	@ (80054b4 <readCanMessages+0x13c>)
 80053c0:	f004 fade 	bl	8009980 <can1_ecu_status_unpack>
      break;
 80053c4:	e006      	b.n	80053d4 <readCanMessages+0x5c>
      can1_ams_parameters_set_unpack(&can1_ams_parameters_set, rxData, CAN1_AMS_PARAMETERS_SET_LENGTH);
 80053c6:	2208      	movs	r2, #8
 80053c8:	4936      	ldr	r1, [pc, #216]	@ (80054a4 <readCanMessages+0x12c>)
 80053ca:	483b      	ldr	r0, [pc, #236]	@ (80054b8 <readCanMessages+0x140>)
 80053cc:	f008 fb3e 	bl	800da4c <can1_ams_parameters_set_unpack>
      break;
 80053d0:	e000      	b.n	80053d4 <readCanMessages+0x5c>
      break;
 80053d2:	bf00      	nop
  while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80053d4:	2100      	movs	r1, #0
 80053d6:	4835      	ldr	r0, [pc, #212]	@ (80054ac <readCanMessages+0x134>)
 80053d8:	f001 fe5a 	bl	8007090 <HAL_CAN_GetRxFifoFillLevel>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1cd      	bne.n	800537e <readCanMessages+0x6>
    }
  }

  // Read CAN2
  while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80053e2:	e054      	b.n	800548e <readCanMessages+0x116>
  {
    if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80053e4:	4b2f      	ldr	r3, [pc, #188]	@ (80054a4 <readCanMessages+0x12c>)
 80053e6:	4a30      	ldr	r2, [pc, #192]	@ (80054a8 <readCanMessages+0x130>)
 80053e8:	2100      	movs	r1, #0
 80053ea:	4834      	ldr	r0, [pc, #208]	@ (80054bc <readCanMessages+0x144>)
 80053ec:	f001 fd2e 	bl	8006e4c <HAL_CAN_GetRxMessage>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <readCanMessages+0x82>
    {
      Error_Handler();
 80053f6:	f000 fbf1 	bl	8005bdc <Error_Handler>
    }

    // Process the received message based on its ID
    switch (rxHeader.StdId)
 80053fa:	4b2b      	ldr	r3, [pc, #172]	@ (80054a8 <readCanMessages+0x130>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f2a3 5321 	subw	r3, r3, #1313	@ 0x521
 8005402:	2b07      	cmp	r3, #7
 8005404:	d842      	bhi.n	800548c <readCanMessages+0x114>
 8005406:	a201      	add	r2, pc, #4	@ (adr r2, 800540c <readCanMessages+0x94>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005469 	.word	0x08005469
 8005410:	08005439 	.word	0x08005439
 8005414:	0800542d 	.word	0x0800542d
 8005418:	08005475 	.word	0x08005475
 800541c:	08005445 	.word	0x08005445
 8005420:	08005451 	.word	0x08005451
 8005424:	08005481 	.word	0x08005481
 8005428:	0800545d 	.word	0x0800545d
    {
    case CAN2_IVT_MSG_RESULT_U2_FRAME_ID:
      can2_ivt_msg_result_u2_unpack(&can2_ivt_msg_result_u2, rxData, CAN2_IVT_MSG_RESULT_U2_LENGTH);
 800542c:	2206      	movs	r2, #6
 800542e:	491d      	ldr	r1, [pc, #116]	@ (80054a4 <readCanMessages+0x12c>)
 8005430:	4823      	ldr	r0, [pc, #140]	@ (80054c0 <readCanMessages+0x148>)
 8005432:	f00a ff6d 	bl	8010310 <can2_ivt_msg_result_u2_unpack>
      break;
 8005436:	e02a      	b.n	800548e <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_U1_FRAME_ID:
      can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rxData, CAN2_IVT_MSG_RESULT_U1_LENGTH);
 8005438:	2206      	movs	r2, #6
 800543a:	491a      	ldr	r1, [pc, #104]	@ (80054a4 <readCanMessages+0x12c>)
 800543c:	4821      	ldr	r0, [pc, #132]	@ (80054c4 <readCanMessages+0x14c>)
 800543e:	f00b f801 	bl	8010444 <can2_ivt_msg_result_u1_unpack>
      break;
 8005442:	e024      	b.n	800548e <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_T_FRAME_ID:
      can2_ivt_msg_result_t_unpack(&can2_ivt_msg_result_t, rxData, CAN2_IVT_MSG_RESULT_T_LENGTH);
 8005444:	2206      	movs	r2, #6
 8005446:	4917      	ldr	r1, [pc, #92]	@ (80054a4 <readCanMessages+0x12c>)
 8005448:	481f      	ldr	r0, [pc, #124]	@ (80054c8 <readCanMessages+0x150>)
 800544a:	f00a fe51 	bl	80100f0 <can2_ivt_msg_result_t_unpack>
      break;
 800544e:	e01e      	b.n	800548e <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_W_FRAME_ID:
      can2_ivt_msg_result_w_unpack(&can2_ivt_msg_result_w, rxData, CAN2_IVT_MSG_RESULT_W_LENGTH);
 8005450:	2206      	movs	r2, #6
 8005452:	4914      	ldr	r1, [pc, #80]	@ (80054a4 <readCanMessages+0x12c>)
 8005454:	481d      	ldr	r0, [pc, #116]	@ (80054cc <readCanMessages+0x154>)
 8005456:	f00a fdc3 	bl	800ffe0 <can2_ivt_msg_result_w_unpack>
      break;
 800545a:	e018      	b.n	800548e <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_WH_FRAME_ID:
      can2_ivt_msg_result_wh_unpack(&can2_ivt_msg_result_wh, rxData, CAN2_IVT_MSG_RESULT_WH_LENGTH);
 800545c:	2206      	movs	r2, #6
 800545e:	4911      	ldr	r1, [pc, #68]	@ (80054a4 <readCanMessages+0x12c>)
 8005460:	481b      	ldr	r0, [pc, #108]	@ (80054d0 <readCanMessages+0x158>)
 8005462:	f00a fcad 	bl	800fdc0 <can2_ivt_msg_result_wh_unpack>
      break;
 8005466:	e012      	b.n	800548e <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_I_FRAME_ID:
      can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rxData, CAN2_IVT_MSG_RESULT_I_LENGTH);
 8005468:	2206      	movs	r2, #6
 800546a:	490e      	ldr	r1, [pc, #56]	@ (80054a4 <readCanMessages+0x12c>)
 800546c:	4819      	ldr	r0, [pc, #100]	@ (80054d4 <readCanMessages+0x15c>)
 800546e:	f00b f883 	bl	8010578 <can2_ivt_msg_result_i_unpack>
      break;
 8005472:	e00c      	b.n	800548e <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_U3_FRAME_ID:
      can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rxData, CAN2_IVT_MSG_RESULT_U3_LENGTH);
 8005474:	2206      	movs	r2, #6
 8005476:	490b      	ldr	r1, [pc, #44]	@ (80054a4 <readCanMessages+0x12c>)
 8005478:	4817      	ldr	r0, [pc, #92]	@ (80054d8 <readCanMessages+0x160>)
 800547a:	f00a fec1 	bl	8010200 <can2_ivt_msg_result_u3_unpack>
      break;
 800547e:	e006      	b.n	800548e <readCanMessages+0x116>
    case CAN2_IVT_MSG_RESULT_AS_FRAME_ID:
      can2_ivt_msg_result_as_unpack(&can2_ivt_msg_result_as, rxData, CAN2_IVT_MSG_RESULT_AS_LENGTH);
 8005480:	2206      	movs	r2, #6
 8005482:	4908      	ldr	r1, [pc, #32]	@ (80054a4 <readCanMessages+0x12c>)
 8005484:	4815      	ldr	r0, [pc, #84]	@ (80054dc <readCanMessages+0x164>)
 8005486:	f00a fd23 	bl	800fed0 <can2_ivt_msg_result_as_unpack>
      break;
 800548a:	e000      	b.n	800548e <readCanMessages+0x116>
    default:
      // Unknown ID, handle if necessary
      break;
 800548c:	bf00      	nop
  while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 800548e:	2100      	movs	r1, #0
 8005490:	480a      	ldr	r0, [pc, #40]	@ (80054bc <readCanMessages+0x144>)
 8005492:	f001 fdfd 	bl	8007090 <HAL_CAN_GetRxFifoFillLevel>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1a3      	bne.n	80053e4 <readCanMessages+0x6c>
    }
  }
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000290 	.word	0x20000290
 80054a8:	2000026c 	.word	0x2000026c
 80054ac:	2000011c 	.word	0x2000011c
 80054b0:	200003f8 	.word	0x200003f8
 80054b4:	20000400 	.word	0x20000400
 80054b8:	20000404 	.word	0x20000404
 80054bc:	20000144 	.word	0x20000144
 80054c0:	2000040c 	.word	0x2000040c
 80054c4:	20000418 	.word	0x20000418
 80054c8:	20000424 	.word	0x20000424
 80054cc:	20000430 	.word	0x20000430
 80054d0:	2000043c 	.word	0x2000043c
 80054d4:	20000448 	.word	0x20000448
 80054d8:	20000454 	.word	0x20000454
 80054dc:	20000460 	.word	0x20000460

080054e0 <sendStatus>:

static void sendStatus(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
  uint16_t maxVoltage = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	83fb      	strh	r3, [r7, #30]
  uint16_t minVoltage = 0xFFFF;
 80054ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054ee:	83bb      	strh	r3, [r7, #28]
  uint16_t maxTemperature = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	837b      	strh	r3, [r7, #26]
  uint16_t minTemperature = 0xFFFF;
 80054f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054f8:	833b      	strh	r3, [r7, #24]
  uint8_t maxOvp = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75fb      	strb	r3, [r7, #23]
  uint8_t maxUvp = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	75bb      	strb	r3, [r7, #22]
  uint8_t maxOtp = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	757b      	strb	r3, [r7, #21]
  uint8_t maxUtp = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	753b      	strb	r3, [r7, #20]
  uint8_t maxIsospiErrorCounter = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	74fb      	strb	r3, [r7, #19]
  for (int i = 0; i < 126; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e04a      	b.n	80055aa <sendStatus+0xca>
  {
    if (rawVoltages[i] > maxVoltage)
 8005514:	4a3d      	ldr	r2, [pc, #244]	@ (800560c <sendStatus+0x12c>)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800551c:	8bfa      	ldrh	r2, [r7, #30]
 800551e:	429a      	cmp	r2, r3
 8005520:	d204      	bcs.n	800552c <sendStatus+0x4c>
      maxVoltage = rawVoltages[i];
 8005522:	4a3a      	ldr	r2, [pc, #232]	@ (800560c <sendStatus+0x12c>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800552a:	83fb      	strh	r3, [r7, #30]
    if (rawVoltages[i] < minVoltage)
 800552c:	4a37      	ldr	r2, [pc, #220]	@ (800560c <sendStatus+0x12c>)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005534:	8bba      	ldrh	r2, [r7, #28]
 8005536:	429a      	cmp	r2, r3
 8005538:	d904      	bls.n	8005544 <sendStatus+0x64>
      minVoltage = rawVoltages[i];
 800553a:	4a34      	ldr	r2, [pc, #208]	@ (800560c <sendStatus+0x12c>)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005542:	83bb      	strh	r3, [r7, #28]
    if (ovpCounter[i] > maxOvp)
 8005544:	4a32      	ldr	r2, [pc, #200]	@ (8005610 <sendStatus+0x130>)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	7dfa      	ldrb	r2, [r7, #23]
 800554e:	429a      	cmp	r2, r3
 8005550:	d204      	bcs.n	800555c <sendStatus+0x7c>
      maxOvp = ovpCounter[i];
 8005552:	4a2f      	ldr	r2, [pc, #188]	@ (8005610 <sendStatus+0x130>)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	75fb      	strb	r3, [r7, #23]
    if (uvpCounter[i] > maxUvp)
 800555c:	4a2d      	ldr	r2, [pc, #180]	@ (8005614 <sendStatus+0x134>)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	7dba      	ldrb	r2, [r7, #22]
 8005566:	429a      	cmp	r2, r3
 8005568:	d204      	bcs.n	8005574 <sendStatus+0x94>
      maxUvp = uvpCounter[i];
 800556a:	4a2a      	ldr	r2, [pc, #168]	@ (8005614 <sendStatus+0x134>)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	75bb      	strb	r3, [r7, #22]
    if (otpCounter[i] > maxOtp)
 8005574:	4a28      	ldr	r2, [pc, #160]	@ (8005618 <sendStatus+0x138>)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	7d7a      	ldrb	r2, [r7, #21]
 800557e:	429a      	cmp	r2, r3
 8005580:	d204      	bcs.n	800558c <sendStatus+0xac>
      maxOtp = otpCounter[i];
 8005582:	4a25      	ldr	r2, [pc, #148]	@ (8005618 <sendStatus+0x138>)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	757b      	strb	r3, [r7, #21]
    if (utpCounter[i] > maxUtp)
 800558c:	4a23      	ldr	r2, [pc, #140]	@ (800561c <sendStatus+0x13c>)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	7d3a      	ldrb	r2, [r7, #20]
 8005596:	429a      	cmp	r2, r3
 8005598:	d204      	bcs.n	80055a4 <sendStatus+0xc4>
      maxUtp = utpCounter[i];
 800559a:	4a20      	ldr	r2, [pc, #128]	@ (800561c <sendStatus+0x13c>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	753b      	strb	r3, [r7, #20]
  for (int i = 0; i < 126; i++)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b7d      	cmp	r3, #125	@ 0x7d
 80055ae:	ddb1      	ble.n	8005514 <sendStatus+0x34>
  }
  for (int i = 0; i < 24; i++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
 80055b4:	e00e      	b.n	80055d4 <sendStatus+0xf4>
  {
    if (spiVoltageErrorCounter[i] > maxIsospiErrorCounter)
 80055b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005620 <sendStatus+0x140>)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	7cfa      	ldrb	r2, [r7, #19]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d204      	bcs.n	80055ce <sendStatus+0xee>
      maxIsospiErrorCounter = spiVoltageErrorCounter[i];
 80055c4:	4a16      	ldr	r2, [pc, #88]	@ (8005620 <sendStatus+0x140>)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4413      	add	r3, r2
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	74fb      	strb	r3, [r7, #19]
  for (int i = 0; i < 24; i++)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b17      	cmp	r3, #23
 80055d8:	dded      	ble.n	80055b6 <sendStatus+0xd6>
  }
  for (int i = 0; i < 12; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	e00e      	b.n	80055fe <sendStatus+0x11e>
  {
    if (spiTemperatureErrorCounter[i] > maxIsospiErrorCounter)
 80055e0:	4a10      	ldr	r2, [pc, #64]	@ (8005624 <sendStatus+0x144>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	7cfa      	ldrb	r2, [r7, #19]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d204      	bcs.n	80055f8 <sendStatus+0x118>
      maxIsospiErrorCounter = spiTemperatureErrorCounter[i];
 80055ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005624 <sendStatus+0x144>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4413      	add	r3, r2
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	74fb      	strb	r3, [r7, #19]
  for (int i = 0; i < 12; i++)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3301      	adds	r3, #1
 80055fc:	607b      	str	r3, [r7, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b0b      	cmp	r3, #11
 8005602:	dded      	ble.n	80055e0 <sendStatus+0x100>
  }
  for (int i = 0; i < 12; i++)
 8005604:	2300      	movs	r3, #0
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	e029      	b.n	800565e <sendStatus+0x17e>
 800560a:	bf00      	nop
 800560c:	2000046c 	.word	0x2000046c
 8005610:	200005e0 	.word	0x200005e0
 8005614:	20000660 	.word	0x20000660
 8005618:	200006e0 	.word	0x200006e0
 800561c:	20000760 	.word	0x20000760
 8005620:	200007f8 	.word	0x200007f8
 8005624:	200007e0 	.word	0x200007e0
  {
    if (rawTemps[i] > maxTemperature)
 8005628:	4a99      	ldr	r2, [pc, #612]	@ (8005890 <sendStatus+0x3b0>)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005630:	8b7a      	ldrh	r2, [r7, #26]
 8005632:	429a      	cmp	r2, r3
 8005634:	d204      	bcs.n	8005640 <sendStatus+0x160>
      maxTemperature = rawTemps[i];
 8005636:	4a96      	ldr	r2, [pc, #600]	@ (8005890 <sendStatus+0x3b0>)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800563e:	837b      	strh	r3, [r7, #26]
    if (rawTemps[i] < minTemperature)
 8005640:	4a93      	ldr	r2, [pc, #588]	@ (8005890 <sendStatus+0x3b0>)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005648:	8b3a      	ldrh	r2, [r7, #24]
 800564a:	429a      	cmp	r2, r3
 800564c:	d904      	bls.n	8005658 <sendStatus+0x178>
      minTemperature = rawTemps[i];
 800564e:	4a90      	ldr	r2, [pc, #576]	@ (8005890 <sendStatus+0x3b0>)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005656:	833b      	strh	r3, [r7, #24]
  for (int i = 0; i < 12; i++)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b0b      	cmp	r3, #11
 8005662:	dde1      	ble.n	8005628 <sendStatus+0x148>
  }

  can1_ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_encode((float) maxVoltage / 10000.0);
 8005664:	8bfb      	ldrh	r3, [r7, #30]
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	ee17 0a90 	vmov	r0, s15
 8005672:	f7fa ff0d 	bl	8000490 <__aeabi_f2d>
 8005676:	a384      	add	r3, pc, #528	@ (adr r3, 8005888 <sendStatus+0x3a8>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f7fb f88a 	bl	8000794 <__aeabi_ddiv>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	ec43 2b17 	vmov	d7, r2, r3
 8005688:	eeb0 0a47 	vmov.f32	s0, s14
 800568c:	eef0 0a67 	vmov.f32	s1, s15
 8005690:	f004 f88e 	bl	80097b0 <can1_ams_status_1_max_cell_voltage_encode>
 8005694:	eeb0 7a40 	vmov.f32	s14, s0
 8005698:	eef0 7a60 	vmov.f32	s15, s1
 800569c:	4b7d      	ldr	r3, [pc, #500]	@ (8005894 <sendStatus+0x3b4>)
 800569e:	ed83 7b06 	vstr	d7, [r3, #24]
  can1_ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_encode((float) minVoltage / 10000.0);
 80056a2:	8bbb      	ldrh	r3, [r7, #28]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	ee17 0a90 	vmov	r0, s15
 80056b0:	f7fa feee 	bl	8000490 <__aeabi_f2d>
 80056b4:	a374      	add	r3, pc, #464	@ (adr r3, 8005888 <sendStatus+0x3a8>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fb f86b 	bl	8000794 <__aeabi_ddiv>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	ec43 2b17 	vmov	d7, r2, r3
 80056c6:	eeb0 0a47 	vmov.f32	s0, s14
 80056ca:	eef0 0a67 	vmov.f32	s1, s15
 80056ce:	f004 f847 	bl	8009760 <can1_ams_status_1_min_cell_voltage_encode>
 80056d2:	eeb0 7a40 	vmov.f32	s14, s0
 80056d6:	eef0 7a60 	vmov.f32	s15, s1
 80056da:	4b6e      	ldr	r3, [pc, #440]	@ (8005894 <sendStatus+0x3b4>)
 80056dc:	ed83 7b04 	vstr	d7, [r3, #16]
  can1_ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_encode(
      thermistor_adc_to_c_float(maxTemperature));
 80056e0:	8b7b      	ldrh	r3, [r7, #26]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fd46 	bl	8006174 <thermistor_adc_to_c_float>
 80056e8:	ee10 3a10 	vmov	r3, s0
  can1_ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_encode(
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fa fecf 	bl	8000490 <__aeabi_f2d>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	ec43 2b10 	vmov	d0, r2, r3
 80056fa:	f004 f8a9 	bl	8009850 <can1_ams_status_1_max_cell_temperature_encode>
 80056fe:	eeb0 7a40 	vmov.f32	s14, s0
 8005702:	eef0 7a60 	vmov.f32	s15, s1
 8005706:	4b63      	ldr	r3, [pc, #396]	@ (8005894 <sendStatus+0x3b4>)
 8005708:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  can1_ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_encode(
      thermistor_adc_to_c_float(minTemperature));
 800570c:	8b3b      	ldrh	r3, [r7, #24]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fd30 	bl	8006174 <thermistor_adc_to_c_float>
 8005714:	ee10 3a10 	vmov	r3, s0
  can1_ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_encode(
 8005718:	4618      	mov	r0, r3
 800571a:	f7fa feb9 	bl	8000490 <__aeabi_f2d>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	ec43 2b10 	vmov	d0, r2, r3
 8005726:	f004 f86b 	bl	8009800 <can1_ams_status_1_min_cell_temperature_encode>
 800572a:	eeb0 7a40 	vmov.f32	s14, s0
 800572e:	eef0 7a60 	vmov.f32	s15, s1
 8005732:	4b58      	ldr	r3, [pc, #352]	@ (8005894 <sendStatus+0x3b4>)
 8005734:	ed83 7b08 	vstr	d7, [r3, #32]
  can1_ams_status_1.fsm_state = fsmState;
 8005738:	4b57      	ldr	r3, [pc, #348]	@ (8005898 <sendStatus+0x3b8>)
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	4b55      	ldr	r3, [pc, #340]	@ (8005894 <sendStatus+0x3b4>)
 800573e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  can1_ams_status_1.ticks = can1_ams_status_1_ticks_encode(deltaTick);
 8005742:	4b56      	ldr	r3, [pc, #344]	@ (800589c <sendStatus+0x3bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7fa fe80 	bl	800044c <__aeabi_ui2d>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	ec43 2b10 	vmov	d0, r2, r3
 8005754:	f004 f8a2 	bl	800989c <can1_ams_status_1_ticks_encode>
 8005758:	4603      	mov	r3, r0
 800575a:	461a      	mov	r2, r3
 800575c:	4b4d      	ldr	r3, [pc, #308]	@ (8005894 <sendStatus+0x3b4>)
 800575e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  can1_ams_status_1_pack(txData, &can1_ams_status_1, CAN1_AMS_STATUS_1_LENGTH);
 8005762:	2208      	movs	r2, #8
 8005764:	494b      	ldr	r1, [pc, #300]	@ (8005894 <sendStatus+0x3b4>)
 8005766:	484e      	ldr	r0, [pc, #312]	@ (80058a0 <sendStatus+0x3c0>)
 8005768:	f003 febe 	bl	80094e8 <can1_ams_status_1_pack>
  txHeader.StdId = CAN1_AMS_STATUS_1_FRAME_ID;
 800576c:	4b4d      	ldr	r3, [pc, #308]	@ (80058a4 <sendStatus+0x3c4>)
 800576e:	2220      	movs	r2, #32
 8005770:	601a      	str	r2, [r3, #0]
  txHeader.DLC = CAN1_AMS_STATUS_1_LENGTH;
 8005772:	4b4c      	ldr	r3, [pc, #304]	@ (80058a4 <sendStatus+0x3c4>)
 8005774:	2208      	movs	r2, #8
 8005776:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 8005778:	4b4a      	ldr	r3, [pc, #296]	@ (80058a4 <sendStatus+0x3c4>)
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800577e:	4b49      	ldr	r3, [pc, #292]	@ (80058a4 <sendStatus+0x3c4>)
 8005780:	2200      	movs	r2, #0
 8005782:	60da      	str	r2, [r3, #12]
  if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8005784:	2300      	movs	r3, #0
 8005786:	4a46      	ldr	r2, [pc, #280]	@ (80058a0 <sendStatus+0x3c0>)
 8005788:	4946      	ldr	r1, [pc, #280]	@ (80058a4 <sendStatus+0x3c4>)
 800578a:	4847      	ldr	r0, [pc, #284]	@ (80058a8 <sendStatus+0x3c8>)
 800578c:	f001 fa8e 	bl	8006cac <HAL_CAN_AddTxMessage>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <sendStatus+0x2ba>
    Error_Handler();
 8005796:	f000 fa21 	bl	8005bdc <Error_Handler>

  can1_ams_status_2.isospi_rx_error_rate = can1_ams_status_2_isospi_rx_error_rate_encode(
      (float) isospiRxErrorCount / (float) isospiRxCount);
 800579a:	4b44      	ldr	r3, [pc, #272]	@ (80058ac <sendStatus+0x3cc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057a6:	4b42      	ldr	r3, [pc, #264]	@ (80058b0 <sendStatus+0x3d0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
  can1_ams_status_2.isospi_rx_error_rate = can1_ams_status_2_isospi_rx_error_rate_encode(
 80057b6:	ee16 0a90 	vmov	r0, s13
 80057ba:	f7fa fe69 	bl	8000490 <__aeabi_f2d>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	ec43 2b10 	vmov	d0, r2, r3
 80057c6:	f00a fa5f 	bl	800fc88 <can1_ams_status_2_isospi_rx_error_rate_encode>
 80057ca:	4603      	mov	r3, r0
 80057cc:	461a      	mov	r2, r3
 80057ce:	4b39      	ldr	r3, [pc, #228]	@ (80058b4 <sendStatus+0x3d4>)
 80057d0:	701a      	strb	r2, [r3, #0]
  can1_ams_status_2.max_otp_counter = can1_ams_status_2_max_otp_counter_encode(maxOtp);
 80057d2:	7d7b      	ldrb	r3, [r7, #21]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fa fe39 	bl	800044c <__aeabi_ui2d>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	ec43 2b10 	vmov	d0, r2, r3
 80057e2:	f00a fa89 	bl	800fcf8 <can1_ams_status_2_max_otp_counter_encode>
 80057e6:	4603      	mov	r3, r0
 80057e8:	461a      	mov	r2, r3
 80057ea:	4b32      	ldr	r3, [pc, #200]	@ (80058b4 <sendStatus+0x3d4>)
 80057ec:	70da      	strb	r2, [r3, #3]
  can1_ams_status_2.max_uvp_counter = can1_ams_status_2_max_uvp_counter_encode(maxUvp);
 80057ee:	7dbb      	ldrb	r3, [r7, #22]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fa fe2b 	bl	800044c <__aeabi_ui2d>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	ec43 2b10 	vmov	d0, r2, r3
 80057fe:	f00a fa6c 	bl	800fcda <can1_ams_status_2_max_uvp_counter_encode>
 8005802:	4603      	mov	r3, r0
 8005804:	461a      	mov	r2, r3
 8005806:	4b2b      	ldr	r3, [pc, #172]	@ (80058b4 <sendStatus+0x3d4>)
 8005808:	709a      	strb	r2, [r3, #2]
  can1_ams_status_2.max_ovp_counter = can1_ams_status_2_max_ovp_counter_encode(maxOvp);
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	4618      	mov	r0, r3
 800580e:	f7fa fe1d 	bl	800044c <__aeabi_ui2d>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	ec43 2b10 	vmov	d0, r2, r3
 800581a:	f00a fa4f 	bl	800fcbc <can1_ams_status_2_max_ovp_counter_encode>
 800581e:	4603      	mov	r3, r0
 8005820:	461a      	mov	r2, r3
 8005822:	4b24      	ldr	r3, [pc, #144]	@ (80058b4 <sendStatus+0x3d4>)
 8005824:	705a      	strb	r2, [r3, #1]
  can1_ams_status_2.max_utp_counter = can1_ams_status_2_max_utp_counter_encode(maxUtp);
 8005826:	7d3b      	ldrb	r3, [r7, #20]
 8005828:	4618      	mov	r0, r3
 800582a:	f7fa fe0f 	bl	800044c <__aeabi_ui2d>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	ec43 2b10 	vmov	d0, r2, r3
 8005836:	f00a fa6e 	bl	800fd16 <can1_ams_status_2_max_utp_counter_encode>
 800583a:	4603      	mov	r3, r0
 800583c:	461a      	mov	r2, r3
 800583e:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <sendStatus+0x3d4>)
 8005840:	711a      	strb	r2, [r3, #4]
  can1_ams_status_2_pack(txData, &can1_ams_status_2, CAN1_AMS_STATUS_2_LENGTH);
 8005842:	2208      	movs	r2, #8
 8005844:	491b      	ldr	r1, [pc, #108]	@ (80058b4 <sendStatus+0x3d4>)
 8005846:	4816      	ldr	r0, [pc, #88]	@ (80058a0 <sendStatus+0x3c0>)
 8005848:	f00a f960 	bl	800fb0c <can1_ams_status_2_pack>
  txHeader.StdId = CAN1_AMS_STATUS_2_FRAME_ID;
 800584c:	4b15      	ldr	r3, [pc, #84]	@ (80058a4 <sendStatus+0x3c4>)
 800584e:	2221      	movs	r2, #33	@ 0x21
 8005850:	601a      	str	r2, [r3, #0]
  txHeader.DLC = CAN1_AMS_STATUS_2_LENGTH;
 8005852:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <sendStatus+0x3c4>)
 8005854:	2208      	movs	r2, #8
 8005856:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 8005858:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <sendStatus+0x3c4>)
 800585a:	2200      	movs	r2, #0
 800585c:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800585e:	4b11      	ldr	r3, [pc, #68]	@ (80058a4 <sendStatus+0x3c4>)
 8005860:	2200      	movs	r2, #0
 8005862:	60da      	str	r2, [r3, #12]
  if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8005864:	2300      	movs	r3, #0
 8005866:	4a0e      	ldr	r2, [pc, #56]	@ (80058a0 <sendStatus+0x3c0>)
 8005868:	490e      	ldr	r1, [pc, #56]	@ (80058a4 <sendStatus+0x3c4>)
 800586a:	480f      	ldr	r0, [pc, #60]	@ (80058a8 <sendStatus+0x3c8>)
 800586c:	f001 fa1e 	bl	8006cac <HAL_CAN_AddTxMessage>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <sendStatus+0x39a>
    Error_Handler();
 8005876:	f000 f9b1 	bl	8005bdc <Error_Handler>
}
 800587a:	bf00      	nop
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	f3af 8000 	nop.w
 8005888:	00000000 	.word	0x00000000
 800588c:	40c38800 	.word	0x40c38800
 8005890:	20000568 	.word	0x20000568
 8005894:	20000298 	.word	0x20000298
 8005898:	20000840 	.word	0x20000840
 800589c:	20000834 	.word	0x20000834
 80058a0:	20000288 	.word	0x20000288
 80058a4:	20000254 	.word	0x20000254
 80058a8:	2000011c 	.word	0x2000011c
 80058ac:	2000083c 	.word	0x2000083c
 80058b0:	20000838 	.word	0x20000838
 80058b4:	200002d0 	.word	0x200002d0

080058b8 <stepStateMachine>:

static void stepStateMachine(void)
{
 80058b8:	b5b0      	push	{r4, r5, r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  switch (fsmState)
 80058bc:	4ba6      	ldr	r3, [pc, #664]	@ (8005b58 <stepStateMachine+0x2a0>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	f200 8184 	bhi.w	8005bce <stepStateMachine+0x316>
 80058c6:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <stepStateMachine+0x14>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058e1 	.word	0x080058e1
 80058d0:	08005963 	.word	0x08005963
 80058d4:	080059e5 	.word	0x080059e5
 80058d8:	08005ad5 	.word	0x08005ad5
 80058dc:	08005b91 	.word	0x08005b91
  {
  case STATE_IDLE:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_RESET);
 80058e0:	2200      	movs	r2, #0
 80058e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058e6:	489d      	ldr	r0, [pc, #628]	@ (8005b5c <stepStateMachine+0x2a4>)
 80058e8:	f001 fe94 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2180      	movs	r1, #128	@ 0x80
 80058f0:	489a      	ldr	r0, [pc, #616]	@ (8005b5c <stepStateMachine+0x2a4>)
 80058f2:	f001 fe8f 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_RESET);
 80058f6:	2200      	movs	r2, #0
 80058f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058fc:	4897      	ldr	r0, [pc, #604]	@ (8005b5c <stepStateMachine+0x2a4>)
 80058fe:	f001 fe89 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 8005902:	2201      	movs	r2, #1
 8005904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005908:	4895      	ldr	r0, [pc, #596]	@ (8005b60 <stepStateMachine+0x2a8>)
 800590a:	f001 fe83 	bl	8007614 <HAL_GPIO_WritePin>
    if (ovpError || uvpError || otpError || utpError || spiError)
 800590e:	4b95      	ldr	r3, [pc, #596]	@ (8005b64 <stepStateMachine+0x2ac>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <stepStateMachine+0x7e>
 8005916:	4b94      	ldr	r3, [pc, #592]	@ (8005b68 <stepStateMachine+0x2b0>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10b      	bne.n	8005936 <stepStateMachine+0x7e>
 800591e:	4b93      	ldr	r3, [pc, #588]	@ (8005b6c <stepStateMachine+0x2b4>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <stepStateMachine+0x7e>
 8005926:	4b92      	ldr	r3, [pc, #584]	@ (8005b70 <stepStateMachine+0x2b8>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <stepStateMachine+0x7e>
 800592e:	4b91      	ldr	r3, [pc, #580]	@ (8005b74 <stepStateMachine+0x2bc>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <stepStateMachine+0x86>
    {
      fsmState = STATE_ERROR;
 8005936:	4b88      	ldr	r3, [pc, #544]	@ (8005b58 <stepStateMachine+0x2a0>)
 8005938:	2204      	movs	r2, #4
 800593a:	701a      	strb	r2, [r3, #0]
    else if (   (HAL_GPIO_ReadPin(SC_PROBE_GPIO_Port, SC_PROBE_Pin) == GPIO_PIN_SET)
             && can1_dbu_status_1.activate_ts_button)
    {
      fsmState = STATE_PRECHARGE1;
    }
    break;
 800593c:	e140      	b.n	8005bc0 <stepStateMachine+0x308>
    else if (   (HAL_GPIO_ReadPin(SC_PROBE_GPIO_Port, SC_PROBE_Pin) == GPIO_PIN_SET)
 800593e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005942:	488d      	ldr	r0, [pc, #564]	@ (8005b78 <stepStateMachine+0x2c0>)
 8005944:	f001 fe4e 	bl	80075e4 <HAL_GPIO_ReadPin>
 8005948:	4603      	mov	r3, r0
 800594a:	2b01      	cmp	r3, #1
 800594c:	f040 8138 	bne.w	8005bc0 <stepStateMachine+0x308>
             && can1_dbu_status_1.activate_ts_button)
 8005950:	4b8a      	ldr	r3, [pc, #552]	@ (8005b7c <stepStateMachine+0x2c4>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8133 	beq.w	8005bc0 <stepStateMachine+0x308>
      fsmState = STATE_PRECHARGE1;
 800595a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b58 <stepStateMachine+0x2a0>)
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
    break;
 8005960:	e12e      	b.n	8005bc0 <stepStateMachine+0x308>

  case STATE_PRECHARGE1:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_RESET);
 8005962:	2200      	movs	r2, #0
 8005964:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005968:	487c      	ldr	r0, [pc, #496]	@ (8005b5c <stepStateMachine+0x2a4>)
 800596a:	f001 fe53 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 800596e:	2200      	movs	r2, #0
 8005970:	2180      	movs	r1, #128	@ 0x80
 8005972:	487a      	ldr	r0, [pc, #488]	@ (8005b5c <stepStateMachine+0x2a4>)
 8005974:	f001 fe4e 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_SET);
 8005978:	2201      	movs	r2, #1
 800597a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800597e:	4877      	ldr	r0, [pc, #476]	@ (8005b5c <stepStateMachine+0x2a4>)
 8005980:	f001 fe48 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 8005984:	2201      	movs	r2, #1
 8005986:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800598a:	4875      	ldr	r0, [pc, #468]	@ (8005b60 <stepStateMachine+0x2a8>)
 800598c:	f001 fe42 	bl	8007614 <HAL_GPIO_WritePin>
    if (ovpError || uvpError || otpError || utpError || spiError)
 8005990:	4b74      	ldr	r3, [pc, #464]	@ (8005b64 <stepStateMachine+0x2ac>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10f      	bne.n	80059b8 <stepStateMachine+0x100>
 8005998:	4b73      	ldr	r3, [pc, #460]	@ (8005b68 <stepStateMachine+0x2b0>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <stepStateMachine+0x100>
 80059a0:	4b72      	ldr	r3, [pc, #456]	@ (8005b6c <stepStateMachine+0x2b4>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <stepStateMachine+0x100>
 80059a8:	4b71      	ldr	r3, [pc, #452]	@ (8005b70 <stepStateMachine+0x2b8>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d103      	bne.n	80059b8 <stepStateMachine+0x100>
 80059b0:	4b70      	ldr	r3, [pc, #448]	@ (8005b74 <stepStateMachine+0x2bc>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <stepStateMachine+0x108>
    {
      fsmState = STATE_ERROR;
 80059b8:	4b67      	ldr	r3, [pc, #412]	@ (8005b58 <stepStateMachine+0x2a0>)
 80059ba:	2204      	movs	r2, #4
 80059bc:	701a      	strb	r2, [r3, #0]
    else if (HAL_GPIO_ReadPin(PRECHARGE_CLOSED_SIGNAL_GPIO_Port, PRECHARGE_CLOSED_SIGNAL_Pin) == GPIO_PIN_SET)
    {
      fsmState = STATE_PRECHARGE2;
      prechargeStartTime = HAL_GetTick();
    }
    break;
 80059be:	e101      	b.n	8005bc4 <stepStateMachine+0x30c>
    else if (HAL_GPIO_ReadPin(PRECHARGE_CLOSED_SIGNAL_GPIO_Port, PRECHARGE_CLOSED_SIGNAL_Pin) == GPIO_PIN_SET)
 80059c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059c4:	4866      	ldr	r0, [pc, #408]	@ (8005b60 <stepStateMachine+0x2a8>)
 80059c6:	f001 fe0d 	bl	80075e4 <HAL_GPIO_ReadPin>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f040 80f9 	bne.w	8005bc4 <stepStateMachine+0x30c>
      fsmState = STATE_PRECHARGE2;
 80059d2:	4b61      	ldr	r3, [pc, #388]	@ (8005b58 <stepStateMachine+0x2a0>)
 80059d4:	2202      	movs	r2, #2
 80059d6:	701a      	strb	r2, [r3, #0]
      prechargeStartTime = HAL_GetTick();
 80059d8:	f000 fcb8 	bl	800634c <HAL_GetTick>
 80059dc:	4603      	mov	r3, r0
 80059de:	4a68      	ldr	r2, [pc, #416]	@ (8005b80 <stepStateMachine+0x2c8>)
 80059e0:	6013      	str	r3, [r2, #0]
    break;
 80059e2:	e0ef      	b.n	8005bc4 <stepStateMachine+0x30c>

  case STATE_PRECHARGE2:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_SET);
 80059e4:	2201      	movs	r2, #1
 80059e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059ea:	485c      	ldr	r0, [pc, #368]	@ (8005b5c <stepStateMachine+0x2a4>)
 80059ec:	f001 fe12 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 80059f0:	2200      	movs	r2, #0
 80059f2:	2180      	movs	r1, #128	@ 0x80
 80059f4:	4859      	ldr	r0, [pc, #356]	@ (8005b5c <stepStateMachine+0x2a4>)
 80059f6:	f001 fe0d 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_SET);
 80059fa:	2201      	movs	r2, #1
 80059fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a00:	4856      	ldr	r0, [pc, #344]	@ (8005b5c <stepStateMachine+0x2a4>)
 8005a02:	f001 fe07 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 8005a06:	2201      	movs	r2, #1
 8005a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a0c:	4854      	ldr	r0, [pc, #336]	@ (8005b60 <stepStateMachine+0x2a8>)
 8005a0e:	f001 fe01 	bl	8007614 <HAL_GPIO_WritePin>
    prechargeTimer = HAL_GetTick() - prechargeStartTime;
 8005a12:	f000 fc9b 	bl	800634c <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	4b59      	ldr	r3, [pc, #356]	@ (8005b80 <stepStateMachine+0x2c8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	4a59      	ldr	r2, [pc, #356]	@ (8005b84 <stepStateMachine+0x2cc>)
 8005a20:	6013      	str	r3, [r2, #0]
    if (ovpError || uvpError || otpError || utpError || spiError)
 8005a22:	4b50      	ldr	r3, [pc, #320]	@ (8005b64 <stepStateMachine+0x2ac>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10f      	bne.n	8005a4a <stepStateMachine+0x192>
 8005a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b68 <stepStateMachine+0x2b0>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <stepStateMachine+0x192>
 8005a32:	4b4e      	ldr	r3, [pc, #312]	@ (8005b6c <stepStateMachine+0x2b4>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d107      	bne.n	8005a4a <stepStateMachine+0x192>
 8005a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8005b70 <stepStateMachine+0x2b8>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <stepStateMachine+0x192>
 8005a42:	4b4c      	ldr	r3, [pc, #304]	@ (8005b74 <stepStateMachine+0x2bc>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <stepStateMachine+0x19a>
    {
      fsmState = STATE_ERROR;
 8005a4a:	4b43      	ldr	r3, [pc, #268]	@ (8005b58 <stepStateMachine+0x2a0>)
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e03f      	b.n	8005ad2 <stepStateMachine+0x21a>
    }
    else if (   (HAL_GPIO_ReadPin(PRECHARGE_CLOSED_SIGNAL_GPIO_Port, PRECHARGE_CLOSED_SIGNAL_Pin) == GPIO_PIN_SET)
 8005a52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a56:	4842      	ldr	r0, [pc, #264]	@ (8005b60 <stepStateMachine+0x2a8>)
 8005a58:	f001 fdc4 	bl	80075e4 <HAL_GPIO_ReadPin>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d12d      	bne.n	8005abe <stepStateMachine+0x206>
             && (HAL_GPIO_ReadPin(AIR_N_CLOSED_GPIO_Port, AIR_N_CLOSED_Pin) == GPIO_PIN_SET)
 8005a62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a66:	483d      	ldr	r0, [pc, #244]	@ (8005b5c <stepStateMachine+0x2a4>)
 8005a68:	f001 fdbc 	bl	80075e4 <HAL_GPIO_ReadPin>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d125      	bne.n	8005abe <stepStateMachine+0x206>
             && (can2_ivt_msg_result_u1_ivt_result_u1_decode(can2_ivt_msg_result_u1.ivt_result_u1) >
 8005a72:	4b45      	ldr	r3, [pc, #276]	@ (8005b88 <stepStateMachine+0x2d0>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f00a fd6c 	bl	8010554 <can2_ivt_msg_result_u1_ivt_result_u1_decode>
 8005a7c:	ec55 4b10 	vmov	r4, r5, d0
                 0.95 * can2_ivt_msg_result_u2_ivt_result_u2_decode(can2_ivt_msg_result_u2.ivt_result_u2))
 8005a80:	4b42      	ldr	r3, [pc, #264]	@ (8005b8c <stepStateMachine+0x2d4>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f00a fccb 	bl	8010420 <can2_ivt_msg_result_u2_ivt_result_u2_decode>
 8005a8a:	ec51 0b10 	vmov	r0, r1, d0
 8005a8e:	a330      	add	r3, pc, #192	@ (adr r3, 8005b50 <stepStateMachine+0x298>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f7fa fd54 	bl	8000540 <__aeabi_dmul>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
             && (can2_ivt_msg_result_u1_ivt_result_u1_decode(can2_ivt_msg_result_u1.ivt_result_u1) >
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fa ffde 	bl	8000a60 <__aeabi_dcmpgt>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <stepStateMachine+0x206>
             && (prechargeTimer > MIN_PRECHARGE_TIME))
 8005aaa:	4b36      	ldr	r3, [pc, #216]	@ (8005b84 <stepStateMachine+0x2cc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d903      	bls.n	8005abe <stepStateMachine+0x206>
    {
      fsmState = STATE_TS_ON;
 8005ab6:	4b28      	ldr	r3, [pc, #160]	@ (8005b58 <stepStateMachine+0x2a0>)
 8005ab8:	2203      	movs	r2, #3
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	e009      	b.n	8005ad2 <stepStateMachine+0x21a>
    }
    else if (prechargeTimer > PRECHARGE_TIMEOUT)
 8005abe:	4b31      	ldr	r3, [pc, #196]	@ (8005b84 <stepStateMachine+0x2cc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d97e      	bls.n	8005bc8 <stepStateMachine+0x310>
    {
      fsmState = STATE_IDLE;
 8005aca:	4b23      	ldr	r3, [pc, #140]	@ (8005b58 <stepStateMachine+0x2a0>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005ad0:	e07a      	b.n	8005bc8 <stepStateMachine+0x310>
 8005ad2:	e079      	b.n	8005bc8 <stepStateMachine+0x310>

  case STATE_TS_ON:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_SET);
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ada:	4820      	ldr	r0, [pc, #128]	@ (8005b5c <stepStateMachine+0x2a4>)
 8005adc:	f001 fd9a 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_SET);
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	2180      	movs	r1, #128	@ 0x80
 8005ae4:	481d      	ldr	r0, [pc, #116]	@ (8005b5c <stepStateMachine+0x2a4>)
 8005ae6:	f001 fd95 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_RESET);
 8005aea:	2200      	movs	r2, #0
 8005aec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005af0:	481a      	ldr	r0, [pc, #104]	@ (8005b5c <stepStateMachine+0x2a4>)
 8005af2:	f001 fd8f 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_SET);
 8005af6:	2201      	movs	r2, #1
 8005af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005afc:	4818      	ldr	r0, [pc, #96]	@ (8005b60 <stepStateMachine+0x2a8>)
 8005afe:	f001 fd89 	bl	8007614 <HAL_GPIO_WritePin>
    if (ovpError || uvpError || otpError || utpError || spiError)
 8005b02:	4b18      	ldr	r3, [pc, #96]	@ (8005b64 <stepStateMachine+0x2ac>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10f      	bne.n	8005b2a <stepStateMachine+0x272>
 8005b0a:	4b17      	ldr	r3, [pc, #92]	@ (8005b68 <stepStateMachine+0x2b0>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <stepStateMachine+0x272>
 8005b12:	4b16      	ldr	r3, [pc, #88]	@ (8005b6c <stepStateMachine+0x2b4>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d107      	bne.n	8005b2a <stepStateMachine+0x272>
 8005b1a:	4b15      	ldr	r3, [pc, #84]	@ (8005b70 <stepStateMachine+0x2b8>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d103      	bne.n	8005b2a <stepStateMachine+0x272>
 8005b22:	4b14      	ldr	r3, [pc, #80]	@ (8005b74 <stepStateMachine+0x2bc>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <stepStateMachine+0x27a>
    {
      fsmState = STATE_ERROR;
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <stepStateMachine+0x2a0>)
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	701a      	strb	r2, [r3, #0]
    }
    else if (HAL_GPIO_ReadPin(SC_PROBE_GPIO_Port, SC_PROBE_Pin) == GPIO_PIN_RESET)
    {
      fsmState = STATE_IDLE;
    }
    break;
 8005b30:	e04c      	b.n	8005bcc <stepStateMachine+0x314>
    else if (HAL_GPIO_ReadPin(SC_PROBE_GPIO_Port, SC_PROBE_Pin) == GPIO_PIN_RESET)
 8005b32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b36:	4810      	ldr	r0, [pc, #64]	@ (8005b78 <stepStateMachine+0x2c0>)
 8005b38:	f001 fd54 	bl	80075e4 <HAL_GPIO_ReadPin>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d144      	bne.n	8005bcc <stepStateMachine+0x314>
      fsmState = STATE_IDLE;
 8005b42:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <stepStateMachine+0x2a0>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
    break;
 8005b48:	e040      	b.n	8005bcc <stepStateMachine+0x314>
 8005b4a:	bf00      	nop
 8005b4c:	f3af 8000 	nop.w
 8005b50:	66666666 	.word	0x66666666
 8005b54:	3fee6666 	.word	0x3fee6666
 8005b58:	20000840 	.word	0x20000840
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40020c00 	.word	0x40020c00
 8005b64:	2000065e 	.word	0x2000065e
 8005b68:	200006de 	.word	0x200006de
 8005b6c:	2000075e 	.word	0x2000075e
 8005b70:	200007de 	.word	0x200007de
 8005b74:	20000810 	.word	0x20000810
 8005b78:	40020800 	.word	0x40020800
 8005b7c:	200003f8 	.word	0x200003f8
 8005b80:	20000848 	.word	0x20000848
 8005b84:	20000844 	.word	0x20000844
 8005b88:	20000418 	.word	0x20000418
 8005b8c:	2000040c 	.word	0x2000040c

  case STATE_ERROR:
    HAL_GPIO_WritePin(AIR_N_ENABLE_GPIO_Port, AIR_N_ENABLE_Pin, GPIO_PIN_RESET);
 8005b90:	2200      	movs	r2, #0
 8005b92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b96:	480f      	ldr	r0, [pc, #60]	@ (8005bd4 <stepStateMachine+0x31c>)
 8005b98:	f001 fd3c 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIR_P_ENABLE_GPIO_Port, AIR_P_ENABLE_Pin, GPIO_PIN_RESET);
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2180      	movs	r1, #128	@ 0x80
 8005ba0:	480c      	ldr	r0, [pc, #48]	@ (8005bd4 <stepStateMachine+0x31c>)
 8005ba2:	f001 fd37 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PRECHARGE_ENABLE_GPIO_Port, PRECHARGE_ENABLE_Pin, GPIO_PIN_RESET);
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bac:	4809      	ldr	r0, [pc, #36]	@ (8005bd4 <stepStateMachine+0x31c>)
 8005bae:	f001 fd31 	bl	8007614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_AMS_ERROR_N_GPIO_Port, MCU_AMS_ERROR_N_Pin, GPIO_PIN_RESET);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005bb8:	4807      	ldr	r0, [pc, #28]	@ (8005bd8 <stepStateMachine+0x320>)
 8005bba:	f001 fd2b 	bl	8007614 <HAL_GPIO_WritePin>
    break;
 8005bbe:	e006      	b.n	8005bce <stepStateMachine+0x316>
    break;
 8005bc0:	bf00      	nop
 8005bc2:	e004      	b.n	8005bce <stepStateMachine+0x316>
    break;
 8005bc4:	bf00      	nop
 8005bc6:	e002      	b.n	8005bce <stepStateMachine+0x316>
    break;
 8005bc8:	bf00      	nop
 8005bca:	e000      	b.n	8005bce <stepStateMachine+0x316>
    break;
 8005bcc:	bf00      	nop
  }
}
 8005bce:	bf00      	nop
 8005bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	40020c00 	.word	0x40020c00

08005bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005be0:	b672      	cpsid	i
}
 8005be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005be4:	bf00      	nop
 8005be6:	e7fd      	b.n	8005be4 <Error_Handler+0x8>

08005be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	4b10      	ldr	r3, [pc, #64]	@ (8005c34 <HAL_MspInit+0x4c>)
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8005c34 <HAL_MspInit+0x4c>)
 8005bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <HAL_MspInit+0x4c>)
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <HAL_MspInit+0x4c>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	4a08      	ldr	r2, [pc, #32]	@ (8005c34 <HAL_MspInit+0x4c>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c1a:	4b06      	ldr	r3, [pc, #24]	@ (8005c34 <HAL_MspInit+0x4c>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40023800 	.word	0x40023800

08005c38 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08e      	sub	sp, #56	@ 0x38
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
 8005c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a45      	ldr	r2, [pc, #276]	@ (8005d6c <HAL_ADC_MspInit+0x134>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d128      	bne.n	8005cac <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	623b      	str	r3, [r7, #32]
 8005c5e:	4b44      	ldr	r3, [pc, #272]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	4a43      	ldr	r2, [pc, #268]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c6a:	4b41      	ldr	r3, [pc, #260]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c72:	623b      	str	r3, [r7, #32]
 8005c74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
 8005c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	4a3c      	ldr	r2, [pc, #240]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005c80:	f043 0304 	orr.w	r3, r3, #4
 8005c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c86:	4b3a      	ldr	r3, [pc, #232]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = HV_FUSE_TEMPERATURE_Pin;
 8005c92:	2301      	movs	r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c96:	2303      	movs	r3, #3
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(HV_FUSE_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8005c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4833      	ldr	r0, [pc, #204]	@ (8005d74 <HAL_ADC_MspInit+0x13c>)
 8005ca6:	f001 fb01 	bl	80072ac <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005caa:	e05a      	b.n	8005d62 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a31      	ldr	r2, [pc, #196]	@ (8005d78 <HAL_ADC_MspInit+0x140>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d128      	bne.n	8005d08 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	4b2d      	ldr	r3, [pc, #180]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005cc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	4b26      	ldr	r3, [pc, #152]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	4a25      	ldr	r2, [pc, #148]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005cdc:	f043 0304 	orr.w	r3, r3, #4
 8005ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ce2:	4b23      	ldr	r3, [pc, #140]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PRECHARGE_TEMPEREATURE_Pin;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PRECHARGE_TEMPEREATURE_GPIO_Port, &GPIO_InitStruct);
 8005cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cfe:	4619      	mov	r1, r3
 8005d00:	481c      	ldr	r0, [pc, #112]	@ (8005d74 <HAL_ADC_MspInit+0x13c>)
 8005d02:	f001 fad3 	bl	80072ac <HAL_GPIO_Init>
}
 8005d06:	e02c      	b.n	8005d62 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <HAL_ADC_MspInit+0x144>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d127      	bne.n	8005d62 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	4b16      	ldr	r3, [pc, #88]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	4a15      	ldr	r2, [pc, #84]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005d1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d22:	4b13      	ldr	r3, [pc, #76]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	4b0f      	ldr	r3, [pc, #60]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	4a0e      	ldr	r2, [pc, #56]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005d38:	f043 0304 	orr.w	r3, r3, #4
 8005d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d70 <HAL_ADC_MspInit+0x138>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUX_TEMPERATURE1_Pin;
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(AUX_TEMPERATURE1_GPIO_Port, &GPIO_InitStruct);
 8005d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4805      	ldr	r0, [pc, #20]	@ (8005d74 <HAL_ADC_MspInit+0x13c>)
 8005d5e:	f001 faa5 	bl	80072ac <HAL_GPIO_Init>
}
 8005d62:	bf00      	nop
 8005d64:	3738      	adds	r7, #56	@ 0x38
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40012000 	.word	0x40012000
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40020800 	.word	0x40020800
 8005d78:	40012100 	.word	0x40012100
 8005d7c:	40012200 	.word	0x40012200

08005d80 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	@ 0x30
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d88:	f107 031c 	add.w	r3, r7, #28
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	605a      	str	r2, [r3, #4]
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a43      	ldr	r2, [pc, #268]	@ (8005eac <HAL_CAN_MspInit+0x12c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d136      	bne.n	8005e10 <HAL_CAN_MspInit+0x90>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005da2:	4b43      	ldr	r3, [pc, #268]	@ (8005eb0 <HAL_CAN_MspInit+0x130>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	4a41      	ldr	r2, [pc, #260]	@ (8005eb0 <HAL_CAN_MspInit+0x130>)
 8005daa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005dac:	4b40      	ldr	r3, [pc, #256]	@ (8005eb0 <HAL_CAN_MspInit+0x130>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d10d      	bne.n	8005dd0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	4b37      	ldr	r3, [pc, #220]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd8:	4a36      	ldr	r2, [pc, #216]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8005de0:	4b34      	ldr	r3, [pc, #208]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005dec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df2:	2302      	movs	r3, #2
 8005df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005dfe:	2309      	movs	r3, #9
 8005e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e02:	f107 031c 	add.w	r3, r7, #28
 8005e06:	4619      	mov	r1, r3
 8005e08:	482b      	ldr	r0, [pc, #172]	@ (8005eb8 <HAL_CAN_MspInit+0x138>)
 8005e0a:	f001 fa4f 	bl	80072ac <HAL_GPIO_Init>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8005e0e:	e048      	b.n	8005ea2 <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a29      	ldr	r2, [pc, #164]	@ (8005ebc <HAL_CAN_MspInit+0x13c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d143      	bne.n	8005ea2 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	4b25      	ldr	r3, [pc, #148]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	4a24      	ldr	r2, [pc, #144]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e2a:	4b22      	ldr	r3, [pc, #136]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005e36:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb0 <HAL_CAN_MspInit+0x130>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb0 <HAL_CAN_MspInit+0x130>)
 8005e3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005e40:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb0 <HAL_CAN_MspInit+0x130>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10d      	bne.n	8005e64 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	4b19      	ldr	r3, [pc, #100]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	4a18      	ldr	r2, [pc, #96]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e56:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e58:	4b16      	ldr	r3, [pc, #88]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e64:	2300      	movs	r3, #0
 8005e66:	60bb      	str	r3, [r7, #8]
 8005e68:	4b12      	ldr	r3, [pc, #72]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	4a11      	ldr	r2, [pc, #68]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e6e:	f043 0302 	orr.w	r3, r3, #2
 8005e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e74:	4b0f      	ldr	r3, [pc, #60]	@ (8005eb4 <HAL_CAN_MspInit+0x134>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005e80:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e86:	2302      	movs	r3, #2
 8005e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8005e92:	2309      	movs	r3, #9
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e96:	f107 031c 	add.w	r3, r7, #28
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4808      	ldr	r0, [pc, #32]	@ (8005ec0 <HAL_CAN_MspInit+0x140>)
 8005e9e:	f001 fa05 	bl	80072ac <HAL_GPIO_Init>
}
 8005ea2:	bf00      	nop
 8005ea4:	3730      	adds	r7, #48	@ 0x30
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40006400 	.word	0x40006400
 8005eb0:	2000084c 	.word	0x2000084c
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	40020000 	.word	0x40020000
 8005ebc:	40006800 	.word	0x40006800
 8005ec0:	40020400 	.word	0x40020400

08005ec4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	@ 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ecc:	f107 0314 	add.w	r3, r7, #20
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	60da      	str	r2, [r3, #12]
 8005eda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	@ (8005f48 <HAL_SPI_MspInit+0x84>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d12b      	bne.n	8005f3e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	4b18      	ldr	r3, [pc, #96]	@ (8005f4c <HAL_SPI_MspInit+0x88>)
 8005eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eee:	4a17      	ldr	r2, [pc, #92]	@ (8005f4c <HAL_SPI_MspInit+0x88>)
 8005ef0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ef6:	4b15      	ldr	r3, [pc, #84]	@ (8005f4c <HAL_SPI_MspInit+0x88>)
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	4b11      	ldr	r3, [pc, #68]	@ (8005f4c <HAL_SPI_MspInit+0x88>)
 8005f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0a:	4a10      	ldr	r2, [pc, #64]	@ (8005f4c <HAL_SPI_MspInit+0x88>)
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f12:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <HAL_SPI_MspInit+0x88>)
 8005f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005f1e:	23e0      	movs	r3, #224	@ 0xe0
 8005f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f22:	2302      	movs	r3, #2
 8005f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005f2e:	2305      	movs	r3, #5
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f32:	f107 0314 	add.w	r3, r7, #20
 8005f36:	4619      	mov	r1, r3
 8005f38:	4805      	ldr	r0, [pc, #20]	@ (8005f50 <HAL_SPI_MspInit+0x8c>)
 8005f3a:	f001 f9b7 	bl	80072ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005f3e:	bf00      	nop
 8005f40:	3728      	adds	r7, #40	@ 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40013000 	.word	0x40013000
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	40020000 	.word	0x40020000

08005f54 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a0b      	ldr	r2, [pc, #44]	@ (8005f90 <HAL_TIM_PWM_MspInit+0x3c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d10d      	bne.n	8005f82 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f94 <HAL_TIM_PWM_MspInit+0x40>)
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6e:	4a09      	ldr	r2, [pc, #36]	@ (8005f94 <HAL_TIM_PWM_MspInit+0x40>)
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f76:	4b07      	ldr	r3, [pc, #28]	@ (8005f94 <HAL_TIM_PWM_MspInit+0x40>)
 8005f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40023800 	.word	0x40023800

08005f98 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	@ 0x28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa0:	f107 0314 	add.w	r3, r7, #20
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	60da      	str	r2, [r3, #12]
 8005fae:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb8:	d12c      	bne.n	8006014 <HAL_TIM_IC_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	4b17      	ldr	r3, [pc, #92]	@ (800601c <HAL_TIM_IC_MspInit+0x84>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	4a16      	ldr	r2, [pc, #88]	@ (800601c <HAL_TIM_IC_MspInit+0x84>)
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fca:	4b14      	ldr	r3, [pc, #80]	@ (800601c <HAL_TIM_IC_MspInit+0x84>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	4b10      	ldr	r3, [pc, #64]	@ (800601c <HAL_TIM_IC_MspInit+0x84>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fde:	4a0f      	ldr	r2, [pc, #60]	@ (800601c <HAL_TIM_IC_MspInit+0x84>)
 8005fe0:	f043 0301 	orr.w	r3, r3, #1
 8005fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800601c <HAL_TIM_IC_MspInit+0x84>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = IMD_DATA_Pin;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006000:	2300      	movs	r3, #0
 8006002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006004:	2301      	movs	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMD_DATA_GPIO_Port, &GPIO_InitStruct);
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	4619      	mov	r1, r3
 800600e:	4804      	ldr	r0, [pc, #16]	@ (8006020 <HAL_TIM_IC_MspInit+0x88>)
 8006010:	f001 f94c 	bl	80072ac <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006014:	bf00      	nop
 8006016:	3728      	adds	r7, #40	@ 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40023800 	.word	0x40023800
 8006020:	40020000 	.word	0x40020000

08006024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800602c:	f107 030c 	add.w	r3, r7, #12
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	609a      	str	r2, [r3, #8]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a12      	ldr	r2, [pc, #72]	@ (800608c <HAL_TIM_MspPostInit+0x68>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d11e      	bne.n	8006084 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <HAL_TIM_MspPostInit+0x6c>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	4a10      	ldr	r2, [pc, #64]	@ (8006090 <HAL_TIM_MspPostInit+0x6c>)
 8006050:	f043 0310 	orr.w	r3, r3, #16
 8006054:	6313      	str	r3, [r2, #48]	@ 0x30
 8006056:	4b0e      	ldr	r3, [pc, #56]	@ (8006090 <HAL_TIM_MspPostInit+0x6c>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8006062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006066:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006068:	2302      	movs	r3, #2
 800606a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006074:	2301      	movs	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8006078:	f107 030c 	add.w	r3, r7, #12
 800607c:	4619      	mov	r1, r3
 800607e:	4805      	ldr	r0, [pc, #20]	@ (8006094 <HAL_TIM_MspPostInit+0x70>)
 8006080:	f001 f914 	bl	80072ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006084:	bf00      	nop
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40010000 	.word	0x40010000
 8006090:	40023800 	.word	0x40023800
 8006094:	40021000 	.word	0x40021000

08006098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800609c:	bf00      	nop
 800609e:	e7fd      	b.n	800609c <NMI_Handler+0x4>

080060a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <HardFault_Handler+0x4>

080060a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060ac:	bf00      	nop
 80060ae:	e7fd      	b.n	80060ac <MemManage_Handler+0x4>

080060b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060b4:	bf00      	nop
 80060b6:	e7fd      	b.n	80060b4 <BusFault_Handler+0x4>

080060b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <UsageFault_Handler+0x4>

080060c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060c4:	bf00      	nop
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060ce:	b480      	push	{r7}
 80060d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060d2:	bf00      	nop
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060e0:	bf00      	nop
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060ee:	f000 f919 	bl	8006324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <SystemInit+0x20>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	4a05      	ldr	r2, [pc, #20]	@ (8006118 <SystemInit+0x20>)
 8006104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800610c:	bf00      	nop
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	e000ed00 	.word	0xe000ed00

0800611c <find_segment>:
    /*   86 C */  3596, /*   87 C */  3511, /*   88 C */  3428, /*   89 C */  3348,
    /*   90 C */  3270,
};

static int find_segment(uint16_t adc)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	80fb      	strh	r3, [r7, #6]
    // Returns index i such that adc is between [lut[i], lut[i+1]] (lut decreasing)
    int lo = 0;
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]
    int hi = THERM_LUT_SIZE - 1;
 800612a:	2364      	movs	r3, #100	@ 0x64
 800612c:	613b      	str	r3, [r7, #16]
    while (hi - lo > 1) {
 800612e:	e012      	b.n	8006156 <find_segment+0x3a>
        int mid = (lo + hi) / 2;
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	0fda      	lsrs	r2, r3, #31
 8006138:	4413      	add	r3, r2
 800613a:	105b      	asrs	r3, r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
        if (therm_lut_adc[mid] > adc) {
 800613e:	4a0c      	ldr	r2, [pc, #48]	@ (8006170 <find_segment+0x54>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006146:	88fa      	ldrh	r2, [r7, #6]
 8006148:	429a      	cmp	r2, r3
 800614a:	d202      	bcs.n	8006152 <find_segment+0x36>
            lo = mid;    // move toward higher temperature (lower ADC)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e001      	b.n	8006156 <find_segment+0x3a>
        } else {
            hi = mid;    // move toward lower temperature (higher ADC)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	613b      	str	r3, [r7, #16]
    while (hi - lo > 1) {
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	dce7      	bgt.n	8006130 <find_segment+0x14>
        }
    }
    return lo;
 8006160:	697b      	ldr	r3, [r7, #20]
}
 8006162:	4618      	mov	r0, r3
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	08010908 	.word	0x08010908

08006174 <thermistor_adc_to_c_float>:

float thermistor_adc_to_c_float(uint16_t adc)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	80fb      	strh	r3, [r7, #6]
    // Clamp outside table range
    if (adc >= therm_lut_adc[0])                return (float)THERM_LUT_MIN_C;
 800617e:	f246 02dc 	movw	r2, #24796	@ 0x60dc
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	4293      	cmp	r3, r2
 8006186:	d302      	bcc.n	800618e <thermistor_adc_to_c_float+0x1a>
 8006188:	eefa 7a04 	vmov.f32	s15, #164	@ 0xc1200000 -10.0
 800618c:	e045      	b.n	800621a <thermistor_adc_to_c_float+0xa6>
    if (adc <= therm_lut_adc[THERM_LUT_SIZE-1]) return (float)THERM_LUT_MAX_C;
 800618e:	f640 42c6 	movw	r2, #3270	@ 0xcc6
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	4293      	cmp	r3, r2
 8006196:	d802      	bhi.n	800619e <thermistor_adc_to_c_float+0x2a>
 8006198:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8006224 <thermistor_adc_to_c_float+0xb0>
 800619c:	e03d      	b.n	800621a <thermistor_adc_to_c_float+0xa6>

    int i = find_segment(adc);
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff ffbb 	bl	800611c <find_segment>
 80061a6:	61f8      	str	r0, [r7, #28]
    uint16_t a_hi = therm_lut_adc[i];       // at T = T_lo
 80061a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006228 <thermistor_adc_to_c_float+0xb4>)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b0:	837b      	strh	r3, [r7, #26]
    uint16_t a_lo = therm_lut_adc[i + 1];   // at T = T_lo + 1
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3301      	adds	r3, #1
 80061b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <thermistor_adc_to_c_float+0xb4>)
 80061b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061bc:	833b      	strh	r3, [r7, #24]
    float dA = (float)a_hi - (float)a_lo;   // > 0
 80061be:	8b7b      	ldrh	r3, [r7, #26]
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061c8:	8b3b      	ldrh	r3, [r7, #24]
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061d6:	edc7 7a05 	vstr	s15, [r7, #20]
    float frac = ((float)a_hi - (float)adc) / dA; // 0..1 within the 1 °C span
 80061da:	8b7b      	ldrh	r3, [r7, #26]
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80061f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80061f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fa:	edc7 7a04 	vstr	s15, [r7, #16]
    float t_lo = (float)(THERM_LUT_MIN_C + i);
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	3b0a      	subs	r3, #10
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800620a:	edc7 7a03 	vstr	s15, [r7, #12]
    return t_lo + frac; // linear interpolation
 800620e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006212:	edd7 7a04 	vldr	s15, [r7, #16]
 8006216:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800621a:	eeb0 0a67 	vmov.f32	s0, s15
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	42b40000 	.word	0x42b40000
 8006228:	08010908 	.word	0x08010908

0800622c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800622c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006264 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006230:	f7ff ff62 	bl	80060f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006234:	480c      	ldr	r0, [pc, #48]	@ (8006268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006236:	490d      	ldr	r1, [pc, #52]	@ (800626c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006238:	4a0d      	ldr	r2, [pc, #52]	@ (8006270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800623a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800623c:	e002      	b.n	8006244 <LoopCopyDataInit>

0800623e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800623e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006242:	3304      	adds	r3, #4

08006244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006248:	d3f9      	bcc.n	800623e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800624a:	4a0a      	ldr	r2, [pc, #40]	@ (8006274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800624c:	4c0a      	ldr	r4, [pc, #40]	@ (8006278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800624e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006250:	e001      	b.n	8006256 <LoopFillZerobss>

08006252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006254:	3204      	adds	r2, #4

08006256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006258:	d3fb      	bcc.n	8006252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800625a:	f00a fa1d 	bl	8010698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800625e:	f7fa fe1b 	bl	8000e98 <main>
  bx  lr    
 8006262:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800626c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8006270:	080109e4 	.word	0x080109e4
  ldr r2, =_sbss
 8006274:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8006278:	20000854 	.word	0x20000854

0800627c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800627c:	e7fe      	b.n	800627c <ADC_IRQHandler>
	...

08006280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006284:	4b0e      	ldr	r3, [pc, #56]	@ (80062c0 <HAL_Init+0x40>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a0d      	ldr	r2, [pc, #52]	@ (80062c0 <HAL_Init+0x40>)
 800628a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800628e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006290:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <HAL_Init+0x40>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0a      	ldr	r2, [pc, #40]	@ (80062c0 <HAL_Init+0x40>)
 8006296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800629a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800629c:	4b08      	ldr	r3, [pc, #32]	@ (80062c0 <HAL_Init+0x40>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a07      	ldr	r2, [pc, #28]	@ (80062c0 <HAL_Init+0x40>)
 80062a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062a8:	2003      	movs	r0, #3
 80062aa:	f000 ffcb 	bl	8007244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062ae:	200f      	movs	r0, #15
 80062b0:	f000 f808 	bl	80062c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062b4:	f7ff fc98 	bl	8005be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40023c00 	.word	0x40023c00

080062c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062cc:	4b12      	ldr	r3, [pc, #72]	@ (8006318 <HAL_InitTick+0x54>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4b12      	ldr	r3, [pc, #72]	@ (800631c <HAL_InitTick+0x58>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	4619      	mov	r1, r3
 80062d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062da:	fbb3 f3f1 	udiv	r3, r3, r1
 80062de:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 ffd5 	bl	8007292 <HAL_SYSTICK_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e00e      	b.n	8006310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d80a      	bhi.n	800630e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062f8:	2200      	movs	r2, #0
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	f000 ffab 	bl	800725a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006304:	4a06      	ldr	r2, [pc, #24]	@ (8006320 <HAL_InitTick+0x5c>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e000      	b.n	8006310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000018 	.word	0x20000018
 800631c:	20000020 	.word	0x20000020
 8006320:	2000001c 	.word	0x2000001c

08006324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006328:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <HAL_IncTick+0x20>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	4b06      	ldr	r3, [pc, #24]	@ (8006348 <HAL_IncTick+0x24>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4413      	add	r3, r2
 8006334:	4a04      	ldr	r2, [pc, #16]	@ (8006348 <HAL_IncTick+0x24>)
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000020 	.word	0x20000020
 8006348:	20000850 	.word	0x20000850

0800634c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  return uwTick;
 8006350:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <HAL_GetTick+0x14>)
 8006352:	681b      	ldr	r3, [r3, #0]
}
 8006354:	4618      	mov	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000850 	.word	0x20000850

08006364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800636c:	f7ff ffee 	bl	800634c <HAL_GetTick>
 8006370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d005      	beq.n	800638a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800637e:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <HAL_Delay+0x44>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800638a:	bf00      	nop
 800638c:	f7ff ffde 	bl	800634c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	429a      	cmp	r2, r3
 800639a:	d8f7      	bhi.n	800638c <HAL_Delay+0x28>
  {
  }
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000020 	.word	0x20000020

080063ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e033      	b.n	800642a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff fc34 	bl	8005c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d118      	bne.n	800641c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80063f2:	f023 0302 	bic.w	r3, r3, #2
 80063f6:	f043 0202 	orr.w	r2, r3, #2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f93a 	bl	8006678 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	f043 0201 	orr.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	641a      	str	r2, [r3, #64]	@ 0x40
 800641a:	e001      	b.n	8006420 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_ADC_ConfigChannel+0x1c>
 800644c:	2302      	movs	r3, #2
 800644e:	e105      	b.n	800665c <HAL_ADC_ConfigChannel+0x228>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b09      	cmp	r3, #9
 800645e:	d925      	bls.n	80064ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	4613      	mov	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	4413      	add	r3, r2
 8006474:	3b1e      	subs	r3, #30
 8006476:	2207      	movs	r2, #7
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	43da      	mvns	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	400a      	ands	r2, r1
 8006484:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68d9      	ldr	r1, [r3, #12]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	4618      	mov	r0, r3
 8006498:	4603      	mov	r3, r0
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4403      	add	r3, r0
 800649e:	3b1e      	subs	r3, #30
 80064a0:	409a      	lsls	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	60da      	str	r2, [r3, #12]
 80064aa:	e022      	b.n	80064f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6919      	ldr	r1, [r3, #16]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	4613      	mov	r3, r2
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	4413      	add	r3, r2
 80064c0:	2207      	movs	r2, #7
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43da      	mvns	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	400a      	ands	r2, r1
 80064ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6919      	ldr	r1, [r3, #16]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4618      	mov	r0, r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	4403      	add	r3, r0
 80064e8:	409a      	lsls	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d824      	bhi.n	8006544 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	3b05      	subs	r3, #5
 800650c:	221f      	movs	r2, #31
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43da      	mvns	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	400a      	ands	r2, r1
 800651a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	4618      	mov	r0, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	3b05      	subs	r3, #5
 8006536:	fa00 f203 	lsl.w	r2, r0, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	635a      	str	r2, [r3, #52]	@ 0x34
 8006542:	e04c      	b.n	80065de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b0c      	cmp	r3, #12
 800654a:	d824      	bhi.n	8006596 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	3b23      	subs	r3, #35	@ 0x23
 800655e:	221f      	movs	r2, #31
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	43da      	mvns	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	400a      	ands	r2, r1
 800656c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	4618      	mov	r0, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	3b23      	subs	r3, #35	@ 0x23
 8006588:	fa00 f203 	lsl.w	r2, r0, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	631a      	str	r2, [r3, #48]	@ 0x30
 8006594:	e023      	b.n	80065de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	4613      	mov	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	3b41      	subs	r3, #65	@ 0x41
 80065a8:	221f      	movs	r2, #31
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43da      	mvns	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	400a      	ands	r2, r1
 80065b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4618      	mov	r0, r3
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	3b41      	subs	r3, #65	@ 0x41
 80065d2:	fa00 f203 	lsl.w	r2, r0, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065de:	4b22      	ldr	r3, [pc, #136]	@ (8006668 <HAL_ADC_ConfigChannel+0x234>)
 80065e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a21      	ldr	r2, [pc, #132]	@ (800666c <HAL_ADC_ConfigChannel+0x238>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d109      	bne.n	8006600 <HAL_ADC_ConfigChannel+0x1cc>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b12      	cmp	r3, #18
 80065f2:	d105      	bne.n	8006600 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a19      	ldr	r2, [pc, #100]	@ (800666c <HAL_ADC_ConfigChannel+0x238>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d123      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x21e>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b10      	cmp	r3, #16
 8006610:	d003      	beq.n	800661a <HAL_ADC_ConfigChannel+0x1e6>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b11      	cmp	r3, #17
 8006618:	d11b      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b10      	cmp	r3, #16
 800662c:	d111      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800662e:	4b10      	ldr	r3, [pc, #64]	@ (8006670 <HAL_ADC_ConfigChannel+0x23c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a10      	ldr	r2, [pc, #64]	@ (8006674 <HAL_ADC_ConfigChannel+0x240>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	0c9a      	lsrs	r2, r3, #18
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006644:	e002      	b.n	800664c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	3b01      	subs	r3, #1
 800664a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f9      	bne.n	8006646 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40012300 	.word	0x40012300
 800666c:	40012000 	.word	0x40012000
 8006670:	20000018 	.word	0x20000018
 8006674:	431bde83 	.word	0x431bde83

08006678 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006680:	4b79      	ldr	r3, [pc, #484]	@ (8006868 <ADC_Init+0x1f0>)
 8006682:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	431a      	orrs	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6859      	ldr	r1, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	021a      	lsls	r2, r3, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80066d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6859      	ldr	r1, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6899      	ldr	r1, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	4a58      	ldr	r2, [pc, #352]	@ (800686c <ADC_Init+0x1f4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d022      	beq.n	8006756 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800671e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6899      	ldr	r1, [r3, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	609a      	str	r2, [r3, #8]
 8006754:	e00f      	b.n	8006776 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006774:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0202 	bic.w	r2, r2, #2
 8006784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6899      	ldr	r1, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7e1b      	ldrb	r3, [r3, #24]
 8006790:	005a      	lsls	r2, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01b      	beq.n	80067dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80067c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6859      	ldr	r1, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	3b01      	subs	r3, #1
 80067d0:	035a      	lsls	r2, r3, #13
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	e007      	b.n	80067ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80067fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	3b01      	subs	r3, #1
 8006808:	051a      	lsls	r2, r3, #20
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6899      	ldr	r1, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800682e:	025a      	lsls	r2, r3, #9
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6899      	ldr	r1, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	029a      	lsls	r2, r3, #10
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40012300 	.word	0x40012300
 800686c:	0f000001 	.word	0x0f000001

08006870 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e0ed      	b.n	8006a5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff fa76 	bl	8005d80 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068a4:	f7ff fd52 	bl	800634c <HAL_GetTick>
 80068a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80068aa:	e012      	b.n	80068d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80068ac:	f7ff fd4e 	bl	800634c <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b0a      	cmp	r3, #10
 80068b8:	d90b      	bls.n	80068d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2205      	movs	r2, #5
 80068ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e0c5      	b.n	8006a5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0e5      	beq.n	80068ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0202 	bic.w	r2, r2, #2
 80068ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068f0:	f7ff fd2c 	bl	800634c <HAL_GetTick>
 80068f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80068f6:	e012      	b.n	800691e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80068f8:	f7ff fd28 	bl	800634c <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b0a      	cmp	r3, #10
 8006904:	d90b      	bls.n	800691e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2205      	movs	r2, #5
 8006916:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e09f      	b.n	8006a5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e5      	bne.n	80068f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	7e1b      	ldrb	r3, [r3, #24]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d108      	bne.n	8006946 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e007      	b.n	8006956 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006954:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	7e5b      	ldrb	r3, [r3, #25]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d108      	bne.n	8006970 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	e007      	b.n	8006980 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800697e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	7e9b      	ldrb	r3, [r3, #26]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d108      	bne.n	800699a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0220 	orr.w	r2, r2, #32
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e007      	b.n	80069aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0220 	bic.w	r2, r2, #32
 80069a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	7edb      	ldrb	r3, [r3, #27]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d108      	bne.n	80069c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0210 	bic.w	r2, r2, #16
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e007      	b.n	80069d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0210 	orr.w	r2, r2, #16
 80069d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7f1b      	ldrb	r3, [r3, #28]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d108      	bne.n	80069ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0208 	orr.w	r2, r2, #8
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	e007      	b.n	80069fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0208 	bic.w	r2, r2, #8
 80069fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7f5b      	ldrb	r3, [r3, #29]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d108      	bne.n	8006a18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0204 	orr.w	r2, r2, #4
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e007      	b.n	8006a28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	ea42 0103 	orr.w	r1, r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	1e5a      	subs	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a78:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d003      	beq.n	8006a88 <HAL_CAN_ConfigFilter+0x20>
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	f040 80be 	bne.w	8006c04 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006a88:	4b65      	ldr	r3, [pc, #404]	@ (8006c20 <HAL_CAN_ConfigFilter+0x1b8>)
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006a92:	f043 0201 	orr.w	r2, r3, #1
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006aa2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab6:	021b      	lsls	r3, r3, #8
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2201      	movs	r2, #1
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	401a      	ands	r2, r3
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d123      	bne.n	8006b32 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	43db      	mvns	r3, r3
 8006af4:	401a      	ands	r2, r3
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006b0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3248      	adds	r2, #72	@ 0x48
 8006b12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b28:	6939      	ldr	r1, [r7, #16]
 8006b2a:	3348      	adds	r3, #72	@ 0x48
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	440b      	add	r3, r1
 8006b30:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d122      	bne.n	8006b80 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006b5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	3248      	adds	r2, #72	@ 0x48
 8006b60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b76:	6939      	ldr	r1, [r7, #16]
 8006b78:	3348      	adds	r3, #72	@ 0x48
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	440b      	add	r3, r1
 8006b7e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	43db      	mvns	r3, r3
 8006b92:	401a      	ands	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006b9a:	e007      	b.n	8006bac <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	401a      	ands	r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006bc6:	e007      	b.n	8006bd8 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d107      	bne.n	8006bf0 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006bf6:	f023 0201 	bic.w	r2, r3, #1
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e006      	b.n	8006c12 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c08:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40006400 	.word	0x40006400

08006c24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d12e      	bne.n	8006c96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0201 	bic.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c50:	f7ff fb7c 	bl	800634c <HAL_GetTick>
 8006c54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006c56:	e012      	b.n	8006c7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006c58:	f7ff fb78 	bl	800634c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b0a      	cmp	r3, #10
 8006c64:	d90b      	bls.n	8006c7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2205      	movs	r2, #5
 8006c76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e012      	b.n	8006ca4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e5      	bne.n	8006c58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	e006      	b.n	8006ca4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
  }
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b089      	sub	sp, #36	@ 0x24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cc0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006cca:	7ffb      	ldrb	r3, [r7, #31]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d003      	beq.n	8006cd8 <HAL_CAN_AddTxMessage+0x2c>
 8006cd0:	7ffb      	ldrb	r3, [r7, #31]
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	f040 80ad 	bne.w	8006e32 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d105      	bne.n	8006cf8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8095 	beq.w	8006e22 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	0e1b      	lsrs	r3, r3, #24
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006d02:	2201      	movs	r2, #1
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	409a      	lsls	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10d      	bne.n	8006d30 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	6809      	ldr	r1, [r1, #0]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3318      	adds	r3, #24
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	440b      	add	r3, r1
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e00f      	b.n	8006d50 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d3a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d40:	68f9      	ldr	r1, [r7, #12]
 8006d42:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006d44:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	3318      	adds	r3, #24
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	440b      	add	r3, r1
 8006d4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	3318      	adds	r3, #24
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	440b      	add	r3, r1
 8006d60:	3304      	adds	r3, #4
 8006d62:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	7d1b      	ldrb	r3, [r3, #20]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d111      	bne.n	8006d90 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	3318      	adds	r3, #24
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	4413      	add	r3, r2
 8006d78:	3304      	adds	r3, #4
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	6811      	ldr	r1, [r2, #0]
 8006d80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	3318      	adds	r3, #24
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3307      	adds	r3, #7
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	061a      	lsls	r2, r3, #24
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3306      	adds	r3, #6
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3305      	adds	r3, #5
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	4313      	orrs	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	3204      	adds	r2, #4
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	4610      	mov	r0, r2
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6811      	ldr	r1, [r2, #0]
 8006db8:	ea43 0200 	orr.w	r2, r3, r0
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	440b      	add	r3, r1
 8006dc2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006dc6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3303      	adds	r3, #3
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	061a      	lsls	r2, r3, #24
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3302      	adds	r3, #2
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	041b      	lsls	r3, r3, #16
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	4313      	orrs	r3, r2
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7812      	ldrb	r2, [r2, #0]
 8006de8:	4610      	mov	r0, r2
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	6811      	ldr	r1, [r2, #0]
 8006dee:	ea43 0200 	orr.w	r2, r3, r0
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	440b      	add	r3, r1
 8006df8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006dfc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	3318      	adds	r3, #24
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	4413      	add	r3, r2
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	6811      	ldr	r1, [r2, #0]
 8006e10:	f043 0201 	orr.w	r2, r3, #1
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	3318      	adds	r3, #24
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	440b      	add	r3, r1
 8006e1c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e00e      	b.n	8006e40 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e006      	b.n	8006e40 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3724      	adds	r7, #36	@ 0x24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d003      	beq.n	8006e70 <HAL_CAN_GetRxMessage+0x24>
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	f040 8103 	bne.w	8007076 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10e      	bne.n	8006e94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d116      	bne.n	8006eb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0f7      	b.n	8007084 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e0e8      	b.n	8007084 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	331b      	adds	r3, #27
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	4413      	add	r3, r2
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0204 	and.w	r2, r3, #4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10c      	bne.n	8006eea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	331b      	adds	r3, #27
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	4413      	add	r3, r2
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	0d5b      	lsrs	r3, r3, #21
 8006ee0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	e00b      	b.n	8006f02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	331b      	adds	r3, #27
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	4413      	add	r3, r2
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	08db      	lsrs	r3, r3, #3
 8006efa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	331b      	adds	r3, #27
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	4413      	add	r3, r2
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0202 	and.w	r2, r3, #2
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	331b      	adds	r3, #27
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	4413      	add	r3, r2
 8006f24:	3304      	adds	r3, #4
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2208      	movs	r2, #8
 8006f34:	611a      	str	r2, [r3, #16]
 8006f36:	e00b      	b.n	8006f50 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	331b      	adds	r3, #27
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	4413      	add	r3, r2
 8006f44:	3304      	adds	r3, #4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 020f 	and.w	r2, r3, #15
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	331b      	adds	r3, #27
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	0a1b      	lsrs	r3, r3, #8
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	331b      	adds	r3, #27
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	4413      	add	r3, r2
 8006f74:	3304      	adds	r3, #4
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	0c1b      	lsrs	r3, r3, #16
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	0a1a      	lsrs	r2, r3, #8
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	0c1a      	lsrs	r2, r3, #16
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	0e1a      	lsrs	r2, r3, #24
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	3303      	adds	r3, #3
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	4413      	add	r3, r2
 8007006:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	0a1a      	lsrs	r2, r3, #8
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	3305      	adds	r3, #5
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	4413      	add	r3, r2
 8007020:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	0c1a      	lsrs	r2, r3, #16
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	3306      	adds	r3, #6
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	4413      	add	r3, r2
 800703a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	0e1a      	lsrs	r2, r3, #24
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	3307      	adds	r3, #7
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d108      	bne.n	8007062 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0220 	orr.w	r2, r2, #32
 800705e:	60da      	str	r2, [r3, #12]
 8007060:	e007      	b.n	8007072 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0220 	orr.w	r2, r2, #32
 8007070:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e006      	b.n	8007084 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070a4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80070a6:	7afb      	ldrb	r3, [r7, #11]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d002      	beq.n	80070b2 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d10f      	bne.n	80070d2 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e005      	b.n	80070d2 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80070d2:	68fb      	ldr	r3, [r7, #12]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <__NVIC_SetPriorityGrouping+0x44>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070fc:	4013      	ands	r3, r2
 80070fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007108:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800710c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007112:	4a04      	ldr	r2, [pc, #16]	@ (8007124 <__NVIC_SetPriorityGrouping+0x44>)
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	60d3      	str	r3, [r2, #12]
}
 8007118:	bf00      	nop
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	e000ed00 	.word	0xe000ed00

08007128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <__NVIC_GetPriorityGrouping+0x18>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	0a1b      	lsrs	r3, r3, #8
 8007132:	f003 0307 	and.w	r3, r3, #7
}
 8007136:	4618      	mov	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	e000ed00 	.word	0xe000ed00

08007144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007154:	2b00      	cmp	r3, #0
 8007156:	db0a      	blt.n	800716e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	490c      	ldr	r1, [pc, #48]	@ (8007190 <__NVIC_SetPriority+0x4c>)
 800715e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007162:	0112      	lsls	r2, r2, #4
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	440b      	add	r3, r1
 8007168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800716c:	e00a      	b.n	8007184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	4908      	ldr	r1, [pc, #32]	@ (8007194 <__NVIC_SetPriority+0x50>)
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	3b04      	subs	r3, #4
 800717c:	0112      	lsls	r2, r2, #4
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	440b      	add	r3, r1
 8007182:	761a      	strb	r2, [r3, #24]
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	e000e100 	.word	0xe000e100
 8007194:	e000ed00 	.word	0xe000ed00

08007198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007198:	b480      	push	{r7}
 800719a:	b089      	sub	sp, #36	@ 0x24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f1c3 0307 	rsb	r3, r3, #7
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	bf28      	it	cs
 80071b6:	2304      	movcs	r3, #4
 80071b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	3304      	adds	r3, #4
 80071be:	2b06      	cmp	r3, #6
 80071c0:	d902      	bls.n	80071c8 <NVIC_EncodePriority+0x30>
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3b03      	subs	r3, #3
 80071c6:	e000      	b.n	80071ca <NVIC_EncodePriority+0x32>
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	fa02 f303 	lsl.w	r3, r2, r3
 80071d6:	43da      	mvns	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	401a      	ands	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071e0:	f04f 31ff 	mov.w	r1, #4294967295
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ea:	43d9      	mvns	r1, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071f0:	4313      	orrs	r3, r2
         );
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3724      	adds	r7, #36	@ 0x24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3b01      	subs	r3, #1
 800720c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007210:	d301      	bcc.n	8007216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007212:	2301      	movs	r3, #1
 8007214:	e00f      	b.n	8007236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007216:	4a0a      	ldr	r2, [pc, #40]	@ (8007240 <SysTick_Config+0x40>)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3b01      	subs	r3, #1
 800721c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800721e:	210f      	movs	r1, #15
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	f7ff ff8e 	bl	8007144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007228:	4b05      	ldr	r3, [pc, #20]	@ (8007240 <SysTick_Config+0x40>)
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800722e:	4b04      	ldr	r3, [pc, #16]	@ (8007240 <SysTick_Config+0x40>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	e000e010 	.word	0xe000e010

08007244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ff47 	bl	80070e0 <__NVIC_SetPriorityGrouping>
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800725a:	b580      	push	{r7, lr}
 800725c:	b086      	sub	sp, #24
 800725e:	af00      	add	r7, sp, #0
 8007260:	4603      	mov	r3, r0
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800726c:	f7ff ff5c 	bl	8007128 <__NVIC_GetPriorityGrouping>
 8007270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	6978      	ldr	r0, [r7, #20]
 8007278:	f7ff ff8e 	bl	8007198 <NVIC_EncodePriority>
 800727c:	4602      	mov	r2, r0
 800727e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007282:	4611      	mov	r1, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff ff5d 	bl	8007144 <__NVIC_SetPriority>
}
 800728a:	bf00      	nop
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff ffb0 	bl	8007200 <SysTick_Config>
 80072a0:	4603      	mov	r3, r0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b089      	sub	sp, #36	@ 0x24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80072be:	2300      	movs	r3, #0
 80072c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	e16b      	b.n	80075a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072c8:	2201      	movs	r2, #1
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4013      	ands	r3, r2
 80072da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	f040 815a 	bne.w	800759a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d005      	beq.n	80072fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d130      	bne.n	8007360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	2203      	movs	r2, #3
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	43db      	mvns	r3, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	4013      	ands	r3, r2
 8007314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	fa02 f303 	lsl.w	r3, r2, r3
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	4313      	orrs	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007334:	2201      	movs	r2, #1
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	43db      	mvns	r3, r3
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	4013      	ands	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	091b      	lsrs	r3, r3, #4
 800734a:	f003 0201 	and.w	r2, r3, #1
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4313      	orrs	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	2b03      	cmp	r3, #3
 800736a:	d017      	beq.n	800739c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	2203      	movs	r2, #3
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	43db      	mvns	r3, r3
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4013      	ands	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4313      	orrs	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d123      	bne.n	80073f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	08da      	lsrs	r2, r3, #3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3208      	adds	r2, #8
 80073b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	220f      	movs	r2, #15
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	43db      	mvns	r3, r3
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	4013      	ands	r3, r2
 80073ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	4313      	orrs	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	08da      	lsrs	r2, r3, #3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3208      	adds	r2, #8
 80073ea:	69b9      	ldr	r1, [r7, #24]
 80073ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	2203      	movs	r2, #3
 80073fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007400:	43db      	mvns	r3, r3
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	4013      	ands	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f003 0203 	and.w	r2, r3, #3
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	4313      	orrs	r3, r2
 800741c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80b4 	beq.w	800759a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	4b60      	ldr	r3, [pc, #384]	@ (80075b8 <HAL_GPIO_Init+0x30c>)
 8007438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743a:	4a5f      	ldr	r2, [pc, #380]	@ (80075b8 <HAL_GPIO_Init+0x30c>)
 800743c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007440:	6453      	str	r3, [r2, #68]	@ 0x44
 8007442:	4b5d      	ldr	r3, [pc, #372]	@ (80075b8 <HAL_GPIO_Init+0x30c>)
 8007444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800744e:	4a5b      	ldr	r2, [pc, #364]	@ (80075bc <HAL_GPIO_Init+0x310>)
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	089b      	lsrs	r3, r3, #2
 8007454:	3302      	adds	r3, #2
 8007456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800745a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	220f      	movs	r2, #15
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	43db      	mvns	r3, r3
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4013      	ands	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a52      	ldr	r2, [pc, #328]	@ (80075c0 <HAL_GPIO_Init+0x314>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d02b      	beq.n	80074d2 <HAL_GPIO_Init+0x226>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a51      	ldr	r2, [pc, #324]	@ (80075c4 <HAL_GPIO_Init+0x318>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d025      	beq.n	80074ce <HAL_GPIO_Init+0x222>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a50      	ldr	r2, [pc, #320]	@ (80075c8 <HAL_GPIO_Init+0x31c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d01f      	beq.n	80074ca <HAL_GPIO_Init+0x21e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a4f      	ldr	r2, [pc, #316]	@ (80075cc <HAL_GPIO_Init+0x320>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d019      	beq.n	80074c6 <HAL_GPIO_Init+0x21a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a4e      	ldr	r2, [pc, #312]	@ (80075d0 <HAL_GPIO_Init+0x324>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <HAL_GPIO_Init+0x216>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a4d      	ldr	r2, [pc, #308]	@ (80075d4 <HAL_GPIO_Init+0x328>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00d      	beq.n	80074be <HAL_GPIO_Init+0x212>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a4c      	ldr	r2, [pc, #304]	@ (80075d8 <HAL_GPIO_Init+0x32c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d007      	beq.n	80074ba <HAL_GPIO_Init+0x20e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a4b      	ldr	r2, [pc, #300]	@ (80075dc <HAL_GPIO_Init+0x330>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d101      	bne.n	80074b6 <HAL_GPIO_Init+0x20a>
 80074b2:	2307      	movs	r3, #7
 80074b4:	e00e      	b.n	80074d4 <HAL_GPIO_Init+0x228>
 80074b6:	2308      	movs	r3, #8
 80074b8:	e00c      	b.n	80074d4 <HAL_GPIO_Init+0x228>
 80074ba:	2306      	movs	r3, #6
 80074bc:	e00a      	b.n	80074d4 <HAL_GPIO_Init+0x228>
 80074be:	2305      	movs	r3, #5
 80074c0:	e008      	b.n	80074d4 <HAL_GPIO_Init+0x228>
 80074c2:	2304      	movs	r3, #4
 80074c4:	e006      	b.n	80074d4 <HAL_GPIO_Init+0x228>
 80074c6:	2303      	movs	r3, #3
 80074c8:	e004      	b.n	80074d4 <HAL_GPIO_Init+0x228>
 80074ca:	2302      	movs	r3, #2
 80074cc:	e002      	b.n	80074d4 <HAL_GPIO_Init+0x228>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <HAL_GPIO_Init+0x228>
 80074d2:	2300      	movs	r3, #0
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	f002 0203 	and.w	r2, r2, #3
 80074da:	0092      	lsls	r2, r2, #2
 80074dc:	4093      	lsls	r3, r2
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074e4:	4935      	ldr	r1, [pc, #212]	@ (80075bc <HAL_GPIO_Init+0x310>)
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	089b      	lsrs	r3, r3, #2
 80074ea:	3302      	adds	r3, #2
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074f2:	4b3b      	ldr	r3, [pc, #236]	@ (80075e0 <HAL_GPIO_Init+0x334>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	43db      	mvns	r3, r3
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	4013      	ands	r3, r2
 8007500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007516:	4a32      	ldr	r2, [pc, #200]	@ (80075e0 <HAL_GPIO_Init+0x334>)
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800751c:	4b30      	ldr	r3, [pc, #192]	@ (80075e0 <HAL_GPIO_Init+0x334>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	43db      	mvns	r3, r3
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	4013      	ands	r3, r2
 800752a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007540:	4a27      	ldr	r2, [pc, #156]	@ (80075e0 <HAL_GPIO_Init+0x334>)
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007546:	4b26      	ldr	r3, [pc, #152]	@ (80075e0 <HAL_GPIO_Init+0x334>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	43db      	mvns	r3, r3
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	4013      	ands	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800756a:	4a1d      	ldr	r2, [pc, #116]	@ (80075e0 <HAL_GPIO_Init+0x334>)
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007570:	4b1b      	ldr	r3, [pc, #108]	@ (80075e0 <HAL_GPIO_Init+0x334>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	43db      	mvns	r3, r3
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	4013      	ands	r3, r2
 800757e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007594:	4a12      	ldr	r2, [pc, #72]	@ (80075e0 <HAL_GPIO_Init+0x334>)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	3301      	adds	r3, #1
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	2b0f      	cmp	r3, #15
 80075a4:	f67f ae90 	bls.w	80072c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3724      	adds	r7, #36	@ 0x24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40023800 	.word	0x40023800
 80075bc:	40013800 	.word	0x40013800
 80075c0:	40020000 	.word	0x40020000
 80075c4:	40020400 	.word	0x40020400
 80075c8:	40020800 	.word	0x40020800
 80075cc:	40020c00 	.word	0x40020c00
 80075d0:	40021000 	.word	0x40021000
 80075d4:	40021400 	.word	0x40021400
 80075d8:	40021800 	.word	0x40021800
 80075dc:	40021c00 	.word	0x40021c00
 80075e0:	40013c00 	.word	0x40013c00

080075e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	887b      	ldrh	r3, [r7, #2]
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075fc:	2301      	movs	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
 8007600:	e001      	b.n	8007606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	807b      	strh	r3, [r7, #2]
 8007620:	4613      	mov	r3, r2
 8007622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007624:	787b      	ldrb	r3, [r7, #1]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800762a:	887a      	ldrh	r2, [r7, #2]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007630:	e003      	b.n	800763a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007632:	887b      	ldrh	r3, [r7, #2]
 8007634:	041a      	lsls	r2, r3, #16
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	619a      	str	r2, [r3, #24]
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007658:	887a      	ldrh	r2, [r7, #2]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4013      	ands	r3, r2
 800765e:	041a      	lsls	r2, r3, #16
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	43d9      	mvns	r1, r3
 8007664:	887b      	ldrh	r3, [r7, #2]
 8007666:	400b      	ands	r3, r1
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	619a      	str	r2, [r3, #24]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e267      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d075      	beq.n	8007786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800769a:	4b88      	ldr	r3, [pc, #544]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 030c 	and.w	r3, r3, #12
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d00c      	beq.n	80076c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076a6:	4b85      	ldr	r3, [pc, #532]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d112      	bne.n	80076d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076b2:	4b82      	ldr	r3, [pc, #520]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076be:	d10b      	bne.n	80076d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076c0:	4b7e      	ldr	r3, [pc, #504]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d05b      	beq.n	8007784 <HAL_RCC_OscConfig+0x108>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d157      	bne.n	8007784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e242      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e0:	d106      	bne.n	80076f0 <HAL_RCC_OscConfig+0x74>
 80076e2:	4b76      	ldr	r3, [pc, #472]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a75      	ldr	r2, [pc, #468]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80076e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	e01d      	b.n	800772c <HAL_RCC_OscConfig+0xb0>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076f8:	d10c      	bne.n	8007714 <HAL_RCC_OscConfig+0x98>
 80076fa:	4b70      	ldr	r3, [pc, #448]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a6f      	ldr	r2, [pc, #444]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	4b6d      	ldr	r3, [pc, #436]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a6c      	ldr	r2, [pc, #432]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 800770c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	e00b      	b.n	800772c <HAL_RCC_OscConfig+0xb0>
 8007714:	4b69      	ldr	r3, [pc, #420]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a68      	ldr	r2, [pc, #416]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 800771a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	4b66      	ldr	r3, [pc, #408]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a65      	ldr	r2, [pc, #404]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800772a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d013      	beq.n	800775c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007734:	f7fe fe0a 	bl	800634c <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800773c:	f7fe fe06 	bl	800634c <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b64      	cmp	r3, #100	@ 0x64
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e207      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800774e:	4b5b      	ldr	r3, [pc, #364]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCC_OscConfig+0xc0>
 800775a:	e014      	b.n	8007786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800775c:	f7fe fdf6 	bl	800634c <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007764:	f7fe fdf2 	bl	800634c <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	@ 0x64
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e1f3      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007776:	4b51      	ldr	r3, [pc, #324]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0xe8>
 8007782:	e000      	b.n	8007786 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d063      	beq.n	800785a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007792:	4b4a      	ldr	r3, [pc, #296]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800779e:	4b47      	ldr	r3, [pc, #284]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d11c      	bne.n	80077e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077aa:	4b44      	ldr	r3, [pc, #272]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d116      	bne.n	80077e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077b6:	4b41      	ldr	r3, [pc, #260]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d005      	beq.n	80077ce <HAL_RCC_OscConfig+0x152>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d001      	beq.n	80077ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e1c7      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ce:	4b3b      	ldr	r3, [pc, #236]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4937      	ldr	r1, [pc, #220]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077e2:	e03a      	b.n	800785a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d020      	beq.n	800782e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077ec:	4b34      	ldr	r3, [pc, #208]	@ (80078c0 <HAL_RCC_OscConfig+0x244>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f2:	f7fe fdab 	bl	800634c <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077fa:	f7fe fda7 	bl	800634c <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e1a8      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800780c:	4b2b      	ldr	r3, [pc, #172]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0f0      	beq.n	80077fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007818:	4b28      	ldr	r3, [pc, #160]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4925      	ldr	r1, [pc, #148]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007828:	4313      	orrs	r3, r2
 800782a:	600b      	str	r3, [r1, #0]
 800782c:	e015      	b.n	800785a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800782e:	4b24      	ldr	r3, [pc, #144]	@ (80078c0 <HAL_RCC_OscConfig+0x244>)
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007834:	f7fe fd8a 	bl	800634c <HAL_GetTick>
 8007838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800783a:	e008      	b.n	800784e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800783c:	f7fe fd86 	bl	800634c <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e187      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800784e:	4b1b      	ldr	r3, [pc, #108]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1f0      	bne.n	800783c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d036      	beq.n	80078d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d016      	beq.n	800789c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800786e:	4b15      	ldr	r3, [pc, #84]	@ (80078c4 <HAL_RCC_OscConfig+0x248>)
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007874:	f7fe fd6a 	bl	800634c <HAL_GetTick>
 8007878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800787a:	e008      	b.n	800788e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800787c:	f7fe fd66 	bl	800634c <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	2b02      	cmp	r3, #2
 8007888:	d901      	bls.n	800788e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e167      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800788e:	4b0b      	ldr	r3, [pc, #44]	@ (80078bc <HAL_RCC_OscConfig+0x240>)
 8007890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0f0      	beq.n	800787c <HAL_RCC_OscConfig+0x200>
 800789a:	e01b      	b.n	80078d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800789c:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <HAL_RCC_OscConfig+0x248>)
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078a2:	f7fe fd53 	bl	800634c <HAL_GetTick>
 80078a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078a8:	e00e      	b.n	80078c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078aa:	f7fe fd4f 	bl	800634c <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d907      	bls.n	80078c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e150      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
 80078bc:	40023800 	.word	0x40023800
 80078c0:	42470000 	.word	0x42470000
 80078c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c8:	4b88      	ldr	r3, [pc, #544]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 80078ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1ea      	bne.n	80078aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8097 	beq.w	8007a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078e2:	2300      	movs	r3, #0
 80078e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078e6:	4b81      	ldr	r3, [pc, #516]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10f      	bne.n	8007912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078f2:	2300      	movs	r3, #0
 80078f4:	60bb      	str	r3, [r7, #8]
 80078f6:	4b7d      	ldr	r3, [pc, #500]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 80078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fa:	4a7c      	ldr	r2, [pc, #496]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 80078fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007900:	6413      	str	r3, [r2, #64]	@ 0x40
 8007902:	4b7a      	ldr	r3, [pc, #488]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800790a:	60bb      	str	r3, [r7, #8]
 800790c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007912:	4b77      	ldr	r3, [pc, #476]	@ (8007af0 <HAL_RCC_OscConfig+0x474>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d118      	bne.n	8007950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800791e:	4b74      	ldr	r3, [pc, #464]	@ (8007af0 <HAL_RCC_OscConfig+0x474>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a73      	ldr	r2, [pc, #460]	@ (8007af0 <HAL_RCC_OscConfig+0x474>)
 8007924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800792a:	f7fe fd0f 	bl	800634c <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007932:	f7fe fd0b 	bl	800634c <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e10c      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007944:	4b6a      	ldr	r3, [pc, #424]	@ (8007af0 <HAL_RCC_OscConfig+0x474>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f0      	beq.n	8007932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d106      	bne.n	8007966 <HAL_RCC_OscConfig+0x2ea>
 8007958:	4b64      	ldr	r3, [pc, #400]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800795c:	4a63      	ldr	r2, [pc, #396]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	6713      	str	r3, [r2, #112]	@ 0x70
 8007964:	e01c      	b.n	80079a0 <HAL_RCC_OscConfig+0x324>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	2b05      	cmp	r3, #5
 800796c:	d10c      	bne.n	8007988 <HAL_RCC_OscConfig+0x30c>
 800796e:	4b5f      	ldr	r3, [pc, #380]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007972:	4a5e      	ldr	r2, [pc, #376]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007974:	f043 0304 	orr.w	r3, r3, #4
 8007978:	6713      	str	r3, [r2, #112]	@ 0x70
 800797a:	4b5c      	ldr	r3, [pc, #368]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 800797c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797e:	4a5b      	ldr	r2, [pc, #364]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007980:	f043 0301 	orr.w	r3, r3, #1
 8007984:	6713      	str	r3, [r2, #112]	@ 0x70
 8007986:	e00b      	b.n	80079a0 <HAL_RCC_OscConfig+0x324>
 8007988:	4b58      	ldr	r3, [pc, #352]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798c:	4a57      	ldr	r2, [pc, #348]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	6713      	str	r3, [r2, #112]	@ 0x70
 8007994:	4b55      	ldr	r3, [pc, #340]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007998:	4a54      	ldr	r2, [pc, #336]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 800799a:	f023 0304 	bic.w	r3, r3, #4
 800799e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d015      	beq.n	80079d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a8:	f7fe fcd0 	bl	800634c <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ae:	e00a      	b.n	80079c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b0:	f7fe fccc 	bl	800634c <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079be:	4293      	cmp	r3, r2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e0cb      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079c6:	4b49      	ldr	r3, [pc, #292]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 80079c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0ee      	beq.n	80079b0 <HAL_RCC_OscConfig+0x334>
 80079d2:	e014      	b.n	80079fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079d4:	f7fe fcba 	bl	800634c <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079da:	e00a      	b.n	80079f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079dc:	f7fe fcb6 	bl	800634c <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e0b5      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079f2:	4b3e      	ldr	r3, [pc, #248]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1ee      	bne.n	80079dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d105      	bne.n	8007a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a04:	4b39      	ldr	r3, [pc, #228]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	4a38      	ldr	r2, [pc, #224]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80a1 	beq.w	8007b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a1a:	4b34      	ldr	r3, [pc, #208]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 030c 	and.w	r3, r3, #12
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d05c      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d141      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a2e:	4b31      	ldr	r3, [pc, #196]	@ (8007af4 <HAL_RCC_OscConfig+0x478>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a34:	f7fe fc8a 	bl	800634c <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a3c:	f7fe fc86 	bl	800634c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e087      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a4e:	4b27      	ldr	r3, [pc, #156]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f0      	bne.n	8007a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69da      	ldr	r2, [r3, #28]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a68:	019b      	lsls	r3, r3, #6
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	3b01      	subs	r3, #1
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	061b      	lsls	r3, r3, #24
 8007a7e:	491b      	ldr	r1, [pc, #108]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a84:	4b1b      	ldr	r3, [pc, #108]	@ (8007af4 <HAL_RCC_OscConfig+0x478>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a8a:	f7fe fc5f 	bl	800634c <HAL_GetTick>
 8007a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a92:	f7fe fc5b 	bl	800634c <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e05c      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aa4:	4b11      	ldr	r3, [pc, #68]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f0      	beq.n	8007a92 <HAL_RCC_OscConfig+0x416>
 8007ab0:	e054      	b.n	8007b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ab2:	4b10      	ldr	r3, [pc, #64]	@ (8007af4 <HAL_RCC_OscConfig+0x478>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab8:	f7fe fc48 	bl	800634c <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ac0:	f7fe fc44 	bl	800634c <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e045      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad2:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <HAL_RCC_OscConfig+0x470>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x444>
 8007ade:	e03d      	b.n	8007b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d107      	bne.n	8007af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e038      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
 8007aec:	40023800 	.word	0x40023800
 8007af0:	40007000 	.word	0x40007000
 8007af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007af8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b68 <HAL_RCC_OscConfig+0x4ec>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d028      	beq.n	8007b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d121      	bne.n	8007b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d11a      	bne.n	8007b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d111      	bne.n	8007b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	3b01      	subs	r3, #1
 8007b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d107      	bne.n	8007b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d001      	beq.n	8007b5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e000      	b.n	8007b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40023800 	.word	0x40023800

08007b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0cc      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b80:	4b68      	ldr	r3, [pc, #416]	@ (8007d24 <HAL_RCC_ClockConfig+0x1b8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d90c      	bls.n	8007ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b8e:	4b65      	ldr	r3, [pc, #404]	@ (8007d24 <HAL_RCC_ClockConfig+0x1b8>)
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b96:	4b63      	ldr	r3, [pc, #396]	@ (8007d24 <HAL_RCC_ClockConfig+0x1b8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d001      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e0b8      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d020      	beq.n	8007bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bc0:	4b59      	ldr	r3, [pc, #356]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	4a58      	ldr	r2, [pc, #352]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007bca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bd8:	4b53      	ldr	r3, [pc, #332]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	4a52      	ldr	r2, [pc, #328]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be4:	4b50      	ldr	r3, [pc, #320]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	494d      	ldr	r1, [pc, #308]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d044      	beq.n	8007c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d107      	bne.n	8007c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c0a:	4b47      	ldr	r3, [pc, #284]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d119      	bne.n	8007c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e07f      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d003      	beq.n	8007c2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d107      	bne.n	8007c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e06f      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e067      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c4a:	4b37      	ldr	r3, [pc, #220]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f023 0203 	bic.w	r2, r3, #3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	4934      	ldr	r1, [pc, #208]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c5c:	f7fe fb76 	bl	800634c <HAL_GetTick>
 8007c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c62:	e00a      	b.n	8007c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c64:	f7fe fb72 	bl	800634c <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e04f      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 020c 	and.w	r2, r3, #12
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d1eb      	bne.n	8007c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c8c:	4b25      	ldr	r3, [pc, #148]	@ (8007d24 <HAL_RCC_ClockConfig+0x1b8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d20c      	bcs.n	8007cb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c9a:	4b22      	ldr	r3, [pc, #136]	@ (8007d24 <HAL_RCC_ClockConfig+0x1b8>)
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca2:	4b20      	ldr	r3, [pc, #128]	@ (8007d24 <HAL_RCC_ClockConfig+0x1b8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d001      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e032      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cc0:	4b19      	ldr	r3, [pc, #100]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	4916      	ldr	r1, [pc, #88]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cde:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	490e      	ldr	r1, [pc, #56]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cf2:	f000 f821 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	091b      	lsrs	r3, r3, #4
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	490a      	ldr	r1, [pc, #40]	@ (8007d2c <HAL_RCC_ClockConfig+0x1c0>)
 8007d04:	5ccb      	ldrb	r3, [r1, r3]
 8007d06:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0a:	4a09      	ldr	r2, [pc, #36]	@ (8007d30 <HAL_RCC_ClockConfig+0x1c4>)
 8007d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007d0e:	4b09      	ldr	r3, [pc, #36]	@ (8007d34 <HAL_RCC_ClockConfig+0x1c8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fad6 	bl	80062c4 <HAL_InitTick>

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	40023c00 	.word	0x40023c00
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	080108f8 	.word	0x080108f8
 8007d30:	20000018 	.word	0x20000018
 8007d34:	2000001c 	.word	0x2000001c

08007d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d3c:	b090      	sub	sp, #64	@ 0x40
 8007d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d50:	4b59      	ldr	r3, [pc, #356]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 030c 	and.w	r3, r3, #12
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d00d      	beq.n	8007d78 <HAL_RCC_GetSysClockFreq+0x40>
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	f200 80a1 	bhi.w	8007ea4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x34>
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d003      	beq.n	8007d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d6a:	e09b      	b.n	8007ea4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d6c:	4b53      	ldr	r3, [pc, #332]	@ (8007ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8007d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d70:	e09b      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d72:	4b53      	ldr	r3, [pc, #332]	@ (8007ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d76:	e098      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d78:	4b4f      	ldr	r3, [pc, #316]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d82:	4b4d      	ldr	r3, [pc, #308]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d028      	beq.n	8007de0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	099b      	lsrs	r3, r3, #6
 8007d94:	2200      	movs	r2, #0
 8007d96:	623b      	str	r3, [r7, #32]
 8007d98:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007da0:	2100      	movs	r1, #0
 8007da2:	4b47      	ldr	r3, [pc, #284]	@ (8007ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007da4:	fb03 f201 	mul.w	r2, r3, r1
 8007da8:	2300      	movs	r3, #0
 8007daa:	fb00 f303 	mul.w	r3, r0, r3
 8007dae:	4413      	add	r3, r2
 8007db0:	4a43      	ldr	r2, [pc, #268]	@ (8007ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007db2:	fba0 1202 	umull	r1, r2, r0, r2
 8007db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007db8:	460a      	mov	r2, r1
 8007dba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dbe:	4413      	add	r3, r2
 8007dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	61fa      	str	r2, [r7, #28]
 8007dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007dd2:	f7f8 fe97 	bl	8000b04 <__aeabi_uldivmod>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4613      	mov	r3, r2
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dde:	e053      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007de0:	4b35      	ldr	r3, [pc, #212]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	2200      	movs	r2, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	617a      	str	r2, [r7, #20]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007df2:	f04f 0b00 	mov.w	fp, #0
 8007df6:	4652      	mov	r2, sl
 8007df8:	465b      	mov	r3, fp
 8007dfa:	f04f 0000 	mov.w	r0, #0
 8007dfe:	f04f 0100 	mov.w	r1, #0
 8007e02:	0159      	lsls	r1, r3, #5
 8007e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e08:	0150      	lsls	r0, r2, #5
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	ebb2 080a 	subs.w	r8, r2, sl
 8007e12:	eb63 090b 	sbc.w	r9, r3, fp
 8007e16:	f04f 0200 	mov.w	r2, #0
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e2a:	ebb2 0408 	subs.w	r4, r2, r8
 8007e2e:	eb63 0509 	sbc.w	r5, r3, r9
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	00eb      	lsls	r3, r5, #3
 8007e3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e40:	00e2      	lsls	r2, r4, #3
 8007e42:	4614      	mov	r4, r2
 8007e44:	461d      	mov	r5, r3
 8007e46:	eb14 030a 	adds.w	r3, r4, sl
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	eb45 030b 	adc.w	r3, r5, fp
 8007e50:	607b      	str	r3, [r7, #4]
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e5e:	4629      	mov	r1, r5
 8007e60:	028b      	lsls	r3, r1, #10
 8007e62:	4621      	mov	r1, r4
 8007e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e68:	4621      	mov	r1, r4
 8007e6a:	028a      	lsls	r2, r1, #10
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e72:	2200      	movs	r2, #0
 8007e74:	60bb      	str	r3, [r7, #8]
 8007e76:	60fa      	str	r2, [r7, #12]
 8007e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e7c:	f7f8 fe42 	bl	8000b04 <__aeabi_uldivmod>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4613      	mov	r3, r2
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007e88:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	3301      	adds	r3, #1
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007e98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ea2:	e002      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ea4:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8007ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3740      	adds	r7, #64	@ 0x40
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	00f42400 	.word	0x00f42400
 8007ec0:	017d7840 	.word	0x017d7840

08007ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e07b      	b.n	8007fce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d108      	bne.n	8007ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ee6:	d009      	beq.n	8007efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	61da      	str	r2, [r3, #28]
 8007eee:	e005      	b.n	8007efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fd ffd4 	bl	8005ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f80:	ea42 0103 	orr.w	r1, r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	0c1b      	lsrs	r3, r3, #16
 8007f9a:	f003 0104 	and.w	r1, r3, #4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa2:	f003 0210 	and.w	r2, r3, #16
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69da      	ldr	r2, [r3, #28]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b088      	sub	sp, #32
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	603b      	str	r3, [r7, #0]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fe6:	f7fe f9b1 	bl	800634c <HAL_GetTick>
 8007fea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d001      	beq.n	8008000 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e12a      	b.n	8008256 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_SPI_Transmit+0x36>
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e122      	b.n	8008256 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_SPI_Transmit+0x48>
 800801a:	2302      	movs	r3, #2
 800801c:	e11b      	b.n	8008256 <HAL_SPI_Transmit+0x280>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2203      	movs	r2, #3
 800802a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	88fa      	ldrh	r2, [r7, #6]
 8008044:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800806c:	d10f      	bne.n	800808e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800807c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800808c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008098:	2b40      	cmp	r3, #64	@ 0x40
 800809a:	d007      	beq.n	80080ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080b4:	d152      	bne.n	800815c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <HAL_SPI_Transmit+0xee>
 80080be:	8b7b      	ldrh	r3, [r7, #26]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d145      	bne.n	8008150 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c8:	881a      	ldrh	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d4:	1c9a      	adds	r2, r3, #2
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080e8:	e032      	b.n	8008150 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d112      	bne.n	800811e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fc:	881a      	ldrh	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008112:	b29b      	uxth	r3, r3
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800811c:	e018      	b.n	8008150 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800811e:	f7fe f915 	bl	800634c <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d803      	bhi.n	8008136 <HAL_SPI_Transmit+0x160>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d102      	bne.n	800813c <HAL_SPI_Transmit+0x166>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e082      	b.n	8008256 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1c7      	bne.n	80080ea <HAL_SPI_Transmit+0x114>
 800815a:	e053      	b.n	8008204 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <HAL_SPI_Transmit+0x194>
 8008164:	8b7b      	ldrh	r3, [r7, #26]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d147      	bne.n	80081fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	330c      	adds	r3, #12
 8008174:	7812      	ldrb	r2, [r2, #0]
 8008176:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008186:	b29b      	uxth	r3, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	b29a      	uxth	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008190:	e033      	b.n	80081fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b02      	cmp	r3, #2
 800819e:	d113      	bne.n	80081c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	330c      	adds	r3, #12
 80081aa:	7812      	ldrb	r2, [r2, #0]
 80081ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081bc:	b29b      	uxth	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80081c6:	e018      	b.n	80081fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c8:	f7fe f8c0 	bl	800634c <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d803      	bhi.n	80081e0 <HAL_SPI_Transmit+0x20a>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081de:	d102      	bne.n	80081e6 <HAL_SPI_Transmit+0x210>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d109      	bne.n	80081fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e02d      	b.n	8008256 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1c6      	bne.n	8008192 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 fa59 	bl	80086c0 <SPI_EndRxTxTransaction>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2220      	movs	r2, #32
 8008218:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008222:	2300      	movs	r3, #0
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008254:	2300      	movs	r3, #0
  }
}
 8008256:	4618      	mov	r0, r3
 8008258:	3720      	adds	r7, #32
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b08a      	sub	sp, #40	@ 0x28
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800826c:	2301      	movs	r3, #1
 800826e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008270:	f7fe f86c 	bl	800634c <HAL_GetTick>
 8008274:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800827c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008284:	887b      	ldrh	r3, [r7, #2]
 8008286:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008288:	7ffb      	ldrb	r3, [r7, #31]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d00c      	beq.n	80082a8 <HAL_SPI_TransmitReceive+0x4a>
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008294:	d106      	bne.n	80082a4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <HAL_SPI_TransmitReceive+0x46>
 800829e:	7ffb      	ldrb	r3, [r7, #31]
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d001      	beq.n	80082a8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80082a4:	2302      	movs	r3, #2
 80082a6:	e17f      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <HAL_SPI_TransmitReceive+0x5c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <HAL_SPI_TransmitReceive+0x5c>
 80082b4:	887b      	ldrh	r3, [r7, #2]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e174      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x6e>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e16d      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x34a>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d003      	beq.n	80082e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2205      	movs	r2, #5
 80082e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	887a      	ldrh	r2, [r7, #2]
 80082f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	887a      	ldrh	r2, [r7, #2]
 80082fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	887a      	ldrh	r2, [r7, #2]
 800830a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	887a      	ldrh	r2, [r7, #2]
 8008310:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008328:	2b40      	cmp	r3, #64	@ 0x40
 800832a:	d007      	beq.n	800833c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800833a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008344:	d17e      	bne.n	8008444 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <HAL_SPI_TransmitReceive+0xf6>
 800834e:	8afb      	ldrh	r3, [r7, #22]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d16c      	bne.n	800842e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008358:	881a      	ldrh	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008364:	1c9a      	adds	r2, r3, #2
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800836e:	b29b      	uxth	r3, r3
 8008370:	3b01      	subs	r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008378:	e059      	b.n	800842e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b02      	cmp	r3, #2
 8008386:	d11b      	bne.n	80083c0 <HAL_SPI_TransmitReceive+0x162>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d016      	beq.n	80083c0 <HAL_SPI_TransmitReceive+0x162>
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	2b01      	cmp	r3, #1
 8008396:	d113      	bne.n	80083c0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839c:	881a      	ldrh	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a8:	1c9a      	adds	r2, r3, #2
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d119      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x1a4>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d014      	beq.n	8008402 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e2:	b292      	uxth	r2, r2
 80083e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	1c9a      	adds	r2, r3, #2
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083fe:	2301      	movs	r3, #1
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008402:	f7fd ffa3 	bl	800634c <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800840e:	429a      	cmp	r2, r3
 8008410:	d80d      	bhi.n	800842e <HAL_SPI_TransmitReceive+0x1d0>
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d009      	beq.n	800842e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e0bc      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1a0      	bne.n	800837a <HAL_SPI_TransmitReceive+0x11c>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d19b      	bne.n	800837a <HAL_SPI_TransmitReceive+0x11c>
 8008442:	e082      	b.n	800854a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <HAL_SPI_TransmitReceive+0x1f4>
 800844c:	8afb      	ldrh	r3, [r7, #22]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d171      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008478:	e05d      	b.n	8008536 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b02      	cmp	r3, #2
 8008486:	d11c      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x264>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d017      	beq.n	80084c2 <HAL_SPI_TransmitReceive+0x264>
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	2b01      	cmp	r3, #1
 8008496:	d114      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	330c      	adds	r3, #12
 80084a2:	7812      	ldrb	r2, [r2, #0]
 80084a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d119      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x2a6>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	b2d2      	uxtb	r2, r2
 80084e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008500:	2301      	movs	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008504:	f7fd ff22 	bl	800634c <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008510:	429a      	cmp	r2, r3
 8008512:	d803      	bhi.n	800851c <HAL_SPI_TransmitReceive+0x2be>
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d102      	bne.n	8008522 <HAL_SPI_TransmitReceive+0x2c4>
 800851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e038      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800853a:	b29b      	uxth	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d19c      	bne.n	800847a <HAL_SPI_TransmitReceive+0x21c>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d197      	bne.n	800847a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800854a:	6a3a      	ldr	r2, [r7, #32]
 800854c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 f8b6 	bl	80086c0 <SPI_EndRxTxTransaction>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d008      	beq.n	800856c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2220      	movs	r2, #32
 800855e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e01d      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008574:	2300      	movs	r3, #0
 8008576:	613b      	str	r3, [r7, #16]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e000      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80085a6:	2300      	movs	r3, #0
  }
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3728      	adds	r7, #40	@ 0x28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085c0:	f7fd fec4 	bl	800634c <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085d0:	f7fd febc 	bl	800634c <HAL_GetTick>
 80085d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085d6:	4b39      	ldr	r3, [pc, #228]	@ (80086bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	015b      	lsls	r3, r3, #5
 80085dc:	0d1b      	lsrs	r3, r3, #20
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	fb02 f303 	mul.w	r3, r2, r3
 80085e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085e6:	e055      	b.n	8008694 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d051      	beq.n	8008694 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085f0:	f7fd feac 	bl	800634c <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d902      	bls.n	8008606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d13d      	bne.n	8008682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800861e:	d111      	bne.n	8008644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008628:	d004      	beq.n	8008634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008632:	d107      	bne.n	8008644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800864c:	d10f      	bne.n	800866e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800866c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e018      	b.n	80086b4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e002      	b.n	8008694 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	3b01      	subs	r3, #1
 8008692:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4013      	ands	r3, r2
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	bf0c      	ite	eq
 80086a4:	2301      	moveq	r3, #1
 80086a6:	2300      	movne	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d19a      	bne.n	80085e8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3720      	adds	r7, #32
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20000018 	.word	0x20000018

080086c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2201      	movs	r2, #1
 80086d4:	2102      	movs	r1, #2
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff ff6a 	bl	80085b0 <SPI_WaitFlagStateUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d007      	beq.n	80086f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e6:	f043 0220 	orr.w	r2, r3, #32
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e032      	b.n	8008758 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008760 <SPI_EndRxTxTransaction+0xa0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008764 <SPI_EndRxTxTransaction+0xa4>)
 80086f8:	fba2 2303 	umull	r2, r3, r2, r3
 80086fc:	0d5b      	lsrs	r3, r3, #21
 80086fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008710:	d112      	bne.n	8008738 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2200      	movs	r2, #0
 800871a:	2180      	movs	r1, #128	@ 0x80
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f7ff ff47 	bl	80085b0 <SPI_WaitFlagStateUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d016      	beq.n	8008756 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872c:	f043 0220 	orr.w	r2, r3, #32
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e00f      	b.n	8008758 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	3b01      	subs	r3, #1
 8008742:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874e:	2b80      	cmp	r3, #128	@ 0x80
 8008750:	d0f2      	beq.n	8008738 <SPI_EndRxTxTransaction+0x78>
 8008752:	e000      	b.n	8008756 <SPI_EndRxTxTransaction+0x96>
        break;
 8008754:	bf00      	nop
  }

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000018 	.word	0x20000018
 8008764:	165e9f81 	.word	0x165e9f81

08008768 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e041      	b.n	80087fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7fd fbe0 	bl	8005f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3304      	adds	r3, #4
 80087a4:	4619      	mov	r1, r3
 80087a6:	4610      	mov	r0, r2
 80087a8:	f000 f9da 	bl	8008b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e041      	b.n	800889c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d106      	bne.n	8008832 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7fd fbb3 	bl	8005f98 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2202      	movs	r2, #2
 8008836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3304      	adds	r3, #4
 8008842:	4619      	mov	r1, r3
 8008844:	4610      	mov	r0, r2
 8008846:	f000 f98b 	bl	8008b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80088be:	2302      	movs	r3, #2
 80088c0:	e088      	b.n	80089d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11b      	bne.n	8008908 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80088e0:	f000 fb94 	bl	800900c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 020c 	bic.w	r2, r2, #12
 80088f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6999      	ldr	r1, [r3, #24]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	619a      	str	r2, [r3, #24]
 8008906:	e060      	b.n	80089ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b04      	cmp	r3, #4
 800890c:	d11c      	bne.n	8008948 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800891e:	f000 fbe9 	bl	80090f4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008930:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6999      	ldr	r1, [r3, #24]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	021a      	lsls	r2, r3, #8
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	619a      	str	r2, [r3, #24]
 8008946:	e040      	b.n	80089ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b08      	cmp	r3, #8
 800894c:	d11b      	bne.n	8008986 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800895e:	f000 fc06 	bl	800916e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69da      	ldr	r2, [r3, #28]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 020c 	bic.w	r2, r2, #12
 8008970:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69d9      	ldr	r1, [r3, #28]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	61da      	str	r2, [r3, #28]
 8008984:	e021      	b.n	80089ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b0c      	cmp	r3, #12
 800898a:	d11c      	bne.n	80089c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800899c:	f000 fc23 	bl	80091e6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	69da      	ldr	r2, [r3, #28]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80089ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69d9      	ldr	r1, [r3, #28]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	021a      	lsls	r2, r3, #8
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	61da      	str	r2, [r3, #28]
 80089c4:	e001      	b.n	80089ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e0ae      	b.n	8008b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b0c      	cmp	r3, #12
 8008a06:	f200 809f 	bhi.w	8008b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a45 	.word	0x08008a45
 8008a14:	08008b49 	.word	0x08008b49
 8008a18:	08008b49 	.word	0x08008b49
 8008a1c:	08008b49 	.word	0x08008b49
 8008a20:	08008a85 	.word	0x08008a85
 8008a24:	08008b49 	.word	0x08008b49
 8008a28:	08008b49 	.word	0x08008b49
 8008a2c:	08008b49 	.word	0x08008b49
 8008a30:	08008ac7 	.word	0x08008ac7
 8008a34:	08008b49 	.word	0x08008b49
 8008a38:	08008b49 	.word	0x08008b49
 8008a3c:	08008b49 	.word	0x08008b49
 8008a40:	08008b07 	.word	0x08008b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f92e 	bl	8008cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699a      	ldr	r2, [r3, #24]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0208 	orr.w	r2, r2, #8
 8008a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0204 	bic.w	r2, r2, #4
 8008a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6999      	ldr	r1, [r3, #24]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	619a      	str	r2, [r3, #24]
      break;
 8008a82:	e064      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 f97e 	bl	8008d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6999      	ldr	r1, [r3, #24]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	021a      	lsls	r2, r3, #8
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	619a      	str	r2, [r3, #24]
      break;
 8008ac4:	e043      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f9d3 	bl	8008e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69da      	ldr	r2, [r3, #28]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 0208 	orr.w	r2, r2, #8
 8008ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	69da      	ldr	r2, [r3, #28]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0204 	bic.w	r2, r2, #4
 8008af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69d9      	ldr	r1, [r3, #28]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	691a      	ldr	r2, [r3, #16]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	61da      	str	r2, [r3, #28]
      break;
 8008b04:	e023      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fa27 	bl	8008f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69da      	ldr	r2, [r3, #28]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69d9      	ldr	r1, [r3, #28]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	021a      	lsls	r2, r3, #8
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	61da      	str	r2, [r3, #28]
      break;
 8008b46:	e002      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a43      	ldr	r2, [pc, #268]	@ (8008c80 <TIM_Base_SetConfig+0x120>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d013      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b7e:	d00f      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a40      	ldr	r2, [pc, #256]	@ (8008c84 <TIM_Base_SetConfig+0x124>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00b      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8008c88 <TIM_Base_SetConfig+0x128>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d007      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a3e      	ldr	r2, [pc, #248]	@ (8008c8c <TIM_Base_SetConfig+0x12c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8008c90 <TIM_Base_SetConfig+0x130>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d108      	bne.n	8008bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a32      	ldr	r2, [pc, #200]	@ (8008c80 <TIM_Base_SetConfig+0x120>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d02b      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc0:	d027      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8008c84 <TIM_Base_SetConfig+0x124>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d023      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8008c88 <TIM_Base_SetConfig+0x128>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d01f      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c8c <TIM_Base_SetConfig+0x12c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d01b      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8008c90 <TIM_Base_SetConfig+0x130>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d017      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c94 <TIM_Base_SetConfig+0x134>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d013      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2a      	ldr	r2, [pc, #168]	@ (8008c98 <TIM_Base_SetConfig+0x138>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00f      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a29      	ldr	r2, [pc, #164]	@ (8008c9c <TIM_Base_SetConfig+0x13c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00b      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a28      	ldr	r2, [pc, #160]	@ (8008ca0 <TIM_Base_SetConfig+0x140>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d007      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a27      	ldr	r2, [pc, #156]	@ (8008ca4 <TIM_Base_SetConfig+0x144>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d003      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a26      	ldr	r2, [pc, #152]	@ (8008ca8 <TIM_Base_SetConfig+0x148>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d108      	bne.n	8008c24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a0e      	ldr	r2, [pc, #56]	@ (8008c80 <TIM_Base_SetConfig+0x120>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d003      	beq.n	8008c52 <TIM_Base_SetConfig+0xf2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a10      	ldr	r2, [pc, #64]	@ (8008c90 <TIM_Base_SetConfig+0x130>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d103      	bne.n	8008c5a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f043 0204 	orr.w	r2, r3, #4
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	601a      	str	r2, [r3, #0]
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40010400 	.word	0x40010400
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40014400 	.word	0x40014400
 8008c9c:	40014800 	.word	0x40014800
 8008ca0:	40001800 	.word	0x40001800
 8008ca4:	40001c00 	.word	0x40001c00
 8008ca8:	40002000 	.word	0x40002000

08008cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	f023 0201 	bic.w	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0303 	bic.w	r3, r3, #3
 8008ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f023 0302 	bic.w	r3, r3, #2
 8008cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a20      	ldr	r2, [pc, #128]	@ (8008d84 <TIM_OC1_SetConfig+0xd8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d003      	beq.n	8008d10 <TIM_OC1_SetConfig+0x64>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8008d88 <TIM_OC1_SetConfig+0xdc>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10c      	bne.n	8008d2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0308 	bic.w	r3, r3, #8
 8008d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f023 0304 	bic.w	r3, r3, #4
 8008d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a15      	ldr	r2, [pc, #84]	@ (8008d84 <TIM_OC1_SetConfig+0xd8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d003      	beq.n	8008d3a <TIM_OC1_SetConfig+0x8e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a14      	ldr	r2, [pc, #80]	@ (8008d88 <TIM_OC1_SetConfig+0xdc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d111      	bne.n	8008d5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	621a      	str	r2, [r3, #32]
}
 8008d78:	bf00      	nop
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	40010000 	.word	0x40010000
 8008d88:	40010400 	.word	0x40010400

08008d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	f023 0210 	bic.w	r2, r3, #16
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f023 0320 	bic.w	r3, r3, #32
 8008dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	011b      	lsls	r3, r3, #4
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a22      	ldr	r2, [pc, #136]	@ (8008e70 <TIM_OC2_SetConfig+0xe4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d003      	beq.n	8008df4 <TIM_OC2_SetConfig+0x68>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a21      	ldr	r2, [pc, #132]	@ (8008e74 <TIM_OC2_SetConfig+0xe8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d10d      	bne.n	8008e10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a17      	ldr	r2, [pc, #92]	@ (8008e70 <TIM_OC2_SetConfig+0xe4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_OC2_SetConfig+0x94>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a16      	ldr	r2, [pc, #88]	@ (8008e74 <TIM_OC2_SetConfig+0xe8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d113      	bne.n	8008e48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	621a      	str	r2, [r3, #32]
}
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40010000 	.word	0x40010000
 8008e74:	40010400 	.word	0x40010400

08008e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a21      	ldr	r2, [pc, #132]	@ (8008f58 <TIM_OC3_SetConfig+0xe0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d003      	beq.n	8008ede <TIM_OC3_SetConfig+0x66>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a20      	ldr	r2, [pc, #128]	@ (8008f5c <TIM_OC3_SetConfig+0xe4>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d10d      	bne.n	8008efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	021b      	lsls	r3, r3, #8
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a16      	ldr	r2, [pc, #88]	@ (8008f58 <TIM_OC3_SetConfig+0xe0>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d003      	beq.n	8008f0a <TIM_OC3_SetConfig+0x92>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a15      	ldr	r2, [pc, #84]	@ (8008f5c <TIM_OC3_SetConfig+0xe4>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d113      	bne.n	8008f32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	621a      	str	r2, [r3, #32]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	40010000 	.word	0x40010000
 8008f5c:	40010400 	.word	0x40010400

08008f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	031b      	lsls	r3, r3, #12
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a12      	ldr	r2, [pc, #72]	@ (8009004 <TIM_OC4_SetConfig+0xa4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d003      	beq.n	8008fc8 <TIM_OC4_SetConfig+0x68>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a11      	ldr	r2, [pc, #68]	@ (8009008 <TIM_OC4_SetConfig+0xa8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d109      	bne.n	8008fdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	019b      	lsls	r3, r3, #6
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	621a      	str	r2, [r3, #32]
}
 8008ff6:	bf00      	nop
 8008ff8:	371c      	adds	r7, #28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40010000 	.word	0x40010000
 8009008:	40010400 	.word	0x40010400

0800900c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6a1b      	ldr	r3, [r3, #32]
 8009024:	f023 0201 	bic.w	r2, r3, #1
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4a28      	ldr	r2, [pc, #160]	@ (80090d8 <TIM_TI1_SetConfig+0xcc>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d01b      	beq.n	8009072 <TIM_TI1_SetConfig+0x66>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009040:	d017      	beq.n	8009072 <TIM_TI1_SetConfig+0x66>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4a25      	ldr	r2, [pc, #148]	@ (80090dc <TIM_TI1_SetConfig+0xd0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d013      	beq.n	8009072 <TIM_TI1_SetConfig+0x66>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	4a24      	ldr	r2, [pc, #144]	@ (80090e0 <TIM_TI1_SetConfig+0xd4>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00f      	beq.n	8009072 <TIM_TI1_SetConfig+0x66>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4a23      	ldr	r2, [pc, #140]	@ (80090e4 <TIM_TI1_SetConfig+0xd8>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d00b      	beq.n	8009072 <TIM_TI1_SetConfig+0x66>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4a22      	ldr	r2, [pc, #136]	@ (80090e8 <TIM_TI1_SetConfig+0xdc>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d007      	beq.n	8009072 <TIM_TI1_SetConfig+0x66>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4a21      	ldr	r2, [pc, #132]	@ (80090ec <TIM_TI1_SetConfig+0xe0>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d003      	beq.n	8009072 <TIM_TI1_SetConfig+0x66>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4a20      	ldr	r2, [pc, #128]	@ (80090f0 <TIM_TI1_SetConfig+0xe4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d101      	bne.n	8009076 <TIM_TI1_SetConfig+0x6a>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <TIM_TI1_SetConfig+0x6c>
 8009076:	2300      	movs	r3, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d008      	beq.n	800908e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f023 0303 	bic.w	r3, r3, #3
 8009082:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e003      	b.n	8009096 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f043 0301 	orr.w	r3, r3, #1
 8009094:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800909c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f023 030a 	bic.w	r3, r3, #10
 80090b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f003 030a 	and.w	r3, r3, #10
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	621a      	str	r2, [r3, #32]
}
 80090ca:	bf00      	nop
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	40010000 	.word	0x40010000
 80090dc:	40000400 	.word	0x40000400
 80090e0:	40000800 	.word	0x40000800
 80090e4:	40000c00 	.word	0x40000c00
 80090e8:	40010400 	.word	0x40010400
 80090ec:	40014000 	.word	0x40014000
 80090f0:	40001800 	.word	0x40001800

080090f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	f023 0210 	bic.w	r2, r3, #16
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	021b      	lsls	r3, r3, #8
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	4313      	orrs	r3, r2
 800912a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	031b      	lsls	r3, r3, #12
 8009138:	b29b      	uxth	r3, r3
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4313      	orrs	r3, r2
 800913e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009146:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	011b      	lsls	r3, r3, #4
 800914c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	4313      	orrs	r3, r2
 8009154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	621a      	str	r2, [r3, #32]
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800916e:	b480      	push	{r7}
 8009170:	b087      	sub	sp, #28
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80091be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	021b      	lsls	r3, r3, #8
 80091c4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	621a      	str	r2, [r3, #32]
}
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b087      	sub	sp, #28
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	607a      	str	r2, [r7, #4]
 80091f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009212:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	021b      	lsls	r3, r3, #8
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009224:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	031b      	lsls	r3, r3, #12
 800922a:	b29b      	uxth	r3, r3
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	4313      	orrs	r3, r2
 8009230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009238:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	031b      	lsls	r3, r3, #12
 800923e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	621a      	str	r2, [r3, #32]
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009274:	2302      	movs	r3, #2
 8009276:	e05a      	b.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800929e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a21      	ldr	r2, [pc, #132]	@ (800933c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d022      	beq.n	8009302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c4:	d01d      	beq.n	8009302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009340 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d018      	beq.n	8009302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009344 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d013      	beq.n	8009302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a1a      	ldr	r2, [pc, #104]	@ (8009348 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00e      	beq.n	8009302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a18      	ldr	r2, [pc, #96]	@ (800934c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d009      	beq.n	8009302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a17      	ldr	r2, [pc, #92]	@ (8009350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d004      	beq.n	8009302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a15      	ldr	r2, [pc, #84]	@ (8009354 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d10c      	bne.n	800931c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	4313      	orrs	r3, r2
 8009312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	40010000 	.word	0x40010000
 8009340:	40000400 	.word	0x40000400
 8009344:	40000800 	.word	0x40000800
 8009348:	40000c00 	.word	0x40000c00
 800934c:	40010400 	.word	0x40010400
 8009350:	40014000 	.word	0x40014000
 8009354:	40001800 	.word	0x40001800

08009358 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009370:	2302      	movs	r3, #2
 8009372:	e03d      	b.n	80093f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	4313      	orrs	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	71fb      	strb	r3, [r7, #7]
 8009406:	460b      	mov	r3, r1
 8009408:	71bb      	strb	r3, [r7, #6]
 800940a:	4613      	mov	r3, r2
 800940c:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800940e:	79fa      	ldrb	r2, [r7, #7]
 8009410:	79bb      	ldrb	r3, [r7, #6]
 8009412:	fa02 f303 	lsl.w	r3, r2, r3
 8009416:	b2da      	uxtb	r2, r3
 8009418:	797b      	ldrb	r3, [r7, #5]
 800941a:	4013      	ands	r3, r2
 800941c:	b2db      	uxtb	r3, r3
}
 800941e:	4618      	mov	r0, r3
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <pack_right_shift_u8>:

static inline uint8_t pack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	4603      	mov	r3, r0
 8009432:	71fb      	strb	r3, [r7, #7]
 8009434:	460b      	mov	r3, r1
 8009436:	71bb      	strb	r3, [r7, #6]
 8009438:	4613      	mov	r3, r2
 800943a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800943c:	79fa      	ldrb	r2, [r7, #7]
 800943e:	79bb      	ldrb	r3, [r7, #6]
 8009440:	fa42 f303 	asr.w	r3, r2, r3
 8009444:	b2da      	uxtb	r2, r3
 8009446:	797b      	ldrb	r3, [r7, #5]
 8009448:	4013      	ands	r3, r2
 800944a:	b2db      	uxtb	r3, r3
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	71fb      	strb	r3, [r7, #7]
 8009462:	460b      	mov	r3, r1
 8009464:	71bb      	strb	r3, [r7, #6]
 8009466:	4613      	mov	r3, r2
 8009468:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800946a:	79fa      	ldrb	r2, [r7, #7]
 800946c:	797b      	ldrb	r3, [r7, #5]
 800946e:	4013      	ands	r3, r2
 8009470:	b2db      	uxtb	r3, r3
 8009472:	461a      	mov	r2, r3
 8009474:	79bb      	ldrb	r3, [r7, #6]
 8009476:	fa02 f303 	lsl.w	r3, r2, r3
 800947a:	b29b      	uxth	r3, r3
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
 8009492:	460b      	mov	r3, r1
 8009494:	71bb      	strb	r3, [r7, #6]
 8009496:	4613      	mov	r3, r2
 8009498:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800949a:	79fa      	ldrb	r2, [r7, #7]
 800949c:	797b      	ldrb	r3, [r7, #5]
 800949e:	4013      	ands	r3, r2
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	79bb      	ldrb	r3, [r7, #6]
 80094a6:	fa42 f303 	asr.w	r3, r2, r3
 80094aa:	b2db      	uxtb	r3, r3
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	71fb      	strb	r3, [r7, #7]
 80094c2:	460b      	mov	r3, r1
 80094c4:	71bb      	strb	r3, [r7, #6]
 80094c6:	4613      	mov	r3, r2
 80094c8:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 80094ca:	79fa      	ldrb	r2, [r7, #7]
 80094cc:	797b      	ldrb	r3, [r7, #5]
 80094ce:	4013      	ands	r3, r2
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	79bb      	ldrb	r3, [r7, #6]
 80094d6:	fa42 f303 	asr.w	r3, r2, r3
 80094da:	b29b      	uxth	r3, r3
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <can1_ams_status_1_pack>:

int can1_ams_status_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_status_1_t *src_p,
    size_t size)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
    uint8_t max_cell_temperature;
    uint8_t max_cell_voltage;
    uint8_t min_cell_temperature;
    uint8_t min_cell_voltage;

    if (size < 8u) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b07      	cmp	r3, #7
 80094f8:	d802      	bhi.n	8009500 <can1_ams_status_1_pack+0x18>
        return (-EINVAL);
 80094fa:	f06f 0315 	mvn.w	r3, #21
 80094fe:	e128      	b.n	8009752 <can1_ams_status_1_pack+0x26a>
    }

    memset(&dst_p[0], 0, 8);
 8009500:	2208      	movs	r2, #8
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f007 f8bf 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->charging_status, 0u, 0x03u);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2203      	movs	r2, #3
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff ff72 	bl	80093fc <pack_left_shift_u8>
 8009518:	4603      	mov	r3, r0
 800951a:	461a      	mov	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	4313      	orrs	r3, r2
 8009522:	b2da      	uxtb	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air1_closed, 2u, 0x04u);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	2204      	movs	r2, #4
 800952e:	2102      	movs	r1, #2
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff ff63 	bl	80093fc <pack_left_shift_u8>
 8009536:	4603      	mov	r3, r0
 8009538:	461a      	mov	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	4313      	orrs	r3, r2
 8009540:	b2da      	uxtb	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air2_closed, 3u, 0x08u);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	789b      	ldrb	r3, [r3, #2]
 800954a:	2208      	movs	r2, #8
 800954c:	2103      	movs	r1, #3
 800954e:	4618      	mov	r0, r3
 8009550:	f7ff ff54 	bl	80093fc <pack_left_shift_u8>
 8009554:	4603      	mov	r3, r0
 8009556:	461a      	mov	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	4313      	orrs	r3, r2
 800955e:	b2da      	uxtb	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->sc_closed, 4u, 0x10u);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	78db      	ldrb	r3, [r3, #3]
 8009568:	2210      	movs	r2, #16
 800956a:	2104      	movs	r1, #4
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff ff45 	bl	80093fc <pack_left_shift_u8>
 8009572:	4603      	mov	r3, r0
 8009574:	461a      	mov	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	4313      	orrs	r3, r2
 800957c:	b2da      	uxtb	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->pre_charge_status, 5u, 0x20u);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	791b      	ldrb	r3, [r3, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	2105      	movs	r1, #5
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff ff36 	bl	80093fc <pack_left_shift_u8>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	4313      	orrs	r3, r2
 800959a:	b2da      	uxtb	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ams_error, 6u, 0x40u);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	795b      	ldrb	r3, [r3, #5]
 80095a4:	2240      	movs	r2, #64	@ 0x40
 80095a6:	2106      	movs	r1, #6
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff ff27 	bl	80093fc <pack_left_shift_u8>
 80095ae:	4603      	mov	r3, r0
 80095b0:	461a      	mov	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->imd_error, 7u, 0x80u);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	799b      	ldrb	r3, [r3, #6]
 80095c2:	2280      	movs	r2, #128	@ 0x80
 80095c4:	2107      	movs	r1, #7
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff ff18 	bl	80093fc <pack_left_shift_u8>
 80095cc:	4603      	mov	r3, r0
 80095ce:	461a      	mov	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->state_of_charge, 0u, 0x7fu);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	79db      	ldrb	r3, [r3, #7]
 80095e0:	227f      	movs	r2, #127	@ 0x7f
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff ff09 	bl	80093fc <pack_left_shift_u8>
 80095ea:	4603      	mov	r3, r0
 80095ec:	4619      	mov	r1, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3301      	adds	r3, #1
 80095f2:	781a      	ldrb	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	3301      	adds	r3, #1
 80095f8:	430a      	orrs	r2, r1
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->balance_status, 7u, 0x80u);
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	7a1b      	ldrb	r3, [r3, #8]
 8009602:	2280      	movs	r2, #128	@ 0x80
 8009604:	2107      	movs	r1, #7
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fef8 	bl	80093fc <pack_left_shift_u8>
 800960c:	4603      	mov	r3, r0
 800960e:	4619      	mov	r1, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	3301      	adds	r3, #1
 8009614:	781a      	ldrb	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3301      	adds	r3, #1
 800961a:	430a      	orrs	r2, r1
 800961c:	b2d2      	uxtb	r2, r2
 800961e:	701a      	strb	r2, [r3, #0]
    memcpy(&min_cell_voltage, &src_p->min_cell_voltage, sizeof(min_cell_voltage));
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	3310      	adds	r3, #16
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	753b      	strb	r3, [r7, #20]
    dst_p[2] |= pack_left_shift_u8(min_cell_voltage, 0u, 0xffu);
 8009628:	7d3b      	ldrb	r3, [r7, #20]
 800962a:	22ff      	movs	r2, #255	@ 0xff
 800962c:	2100      	movs	r1, #0
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff fee4 	bl	80093fc <pack_left_shift_u8>
 8009634:	4603      	mov	r3, r0
 8009636:	4619      	mov	r1, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3302      	adds	r3, #2
 800963c:	781a      	ldrb	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3302      	adds	r3, #2
 8009642:	430a      	orrs	r2, r1
 8009644:	b2d2      	uxtb	r2, r2
 8009646:	701a      	strb	r2, [r3, #0]
    memcpy(&max_cell_voltage, &src_p->max_cell_voltage, sizeof(max_cell_voltage));
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	3318      	adds	r3, #24
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	75bb      	strb	r3, [r7, #22]
    dst_p[3] |= pack_left_shift_u8(max_cell_voltage, 0u, 0xffu);
 8009650:	7dbb      	ldrb	r3, [r7, #22]
 8009652:	22ff      	movs	r2, #255	@ 0xff
 8009654:	2100      	movs	r1, #0
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fed0 	bl	80093fc <pack_left_shift_u8>
 800965c:	4603      	mov	r3, r0
 800965e:	4619      	mov	r1, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3303      	adds	r3, #3
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3303      	adds	r3, #3
 800966a:	430a      	orrs	r2, r1
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]
    memcpy(&min_cell_temperature, &src_p->min_cell_temperature, sizeof(min_cell_temperature));
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	3320      	adds	r3, #32
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	757b      	strb	r3, [r7, #21]
    dst_p[4] |= pack_left_shift_u8(min_cell_temperature, 0u, 0xffu);
 8009678:	7d7b      	ldrb	r3, [r7, #21]
 800967a:	22ff      	movs	r2, #255	@ 0xff
 800967c:	2100      	movs	r1, #0
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff febc 	bl	80093fc <pack_left_shift_u8>
 8009684:	4603      	mov	r3, r0
 8009686:	4619      	mov	r1, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3304      	adds	r3, #4
 800968c:	781a      	ldrb	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3304      	adds	r3, #4
 8009692:	430a      	orrs	r2, r1
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	701a      	strb	r2, [r3, #0]
    memcpy(&max_cell_temperature, &src_p->max_cell_temperature, sizeof(max_cell_temperature));
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	3328      	adds	r3, #40	@ 0x28
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	75fb      	strb	r3, [r7, #23]
    dst_p[5] |= pack_left_shift_u8(max_cell_temperature, 0u, 0xffu);
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	22ff      	movs	r2, #255	@ 0xff
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fea8 	bl	80093fc <pack_left_shift_u8>
 80096ac:	4603      	mov	r3, r0
 80096ae:	4619      	mov	r1, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3305      	adds	r3, #5
 80096b4:	781a      	ldrb	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3305      	adds	r3, #5
 80096ba:	430a      	orrs	r2, r1
 80096bc:	b2d2      	uxtb	r2, r2
 80096be:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u8(src_p->fan_speed, 0u, 0x7fu);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096c6:	227f      	movs	r2, #127	@ 0x7f
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff fe96 	bl	80093fc <pack_left_shift_u8>
 80096d0:	4603      	mov	r3, r0
 80096d2:	4619      	mov	r1, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3306      	adds	r3, #6
 80096d8:	781a      	ldrb	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3306      	adds	r3, #6
 80096de:	430a      	orrs	r2, r1
 80096e0:	b2d2      	uxtb	r2, r2
 80096e2:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u8(src_p->fsm_state, 7u, 0x80u);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80096ea:	2280      	movs	r2, #128	@ 0x80
 80096ec:	2107      	movs	r1, #7
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff fe84 	bl	80093fc <pack_left_shift_u8>
 80096f4:	4603      	mov	r3, r0
 80096f6:	4619      	mov	r1, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3306      	adds	r3, #6
 80096fc:	781a      	ldrb	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3306      	adds	r3, #6
 8009702:	430a      	orrs	r2, r1
 8009704:	b2d2      	uxtb	r2, r2
 8009706:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u8(src_p->fsm_state, 1u, 0x07u);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800970e:	2207      	movs	r2, #7
 8009710:	2101      	movs	r1, #1
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fe89 	bl	800942a <pack_right_shift_u8>
 8009718:	4603      	mov	r3, r0
 800971a:	4619      	mov	r1, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	3307      	adds	r3, #7
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3307      	adds	r3, #7
 8009726:	430a      	orrs	r2, r1
 8009728:	b2d2      	uxtb	r2, r2
 800972a:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_left_shift_u8(src_p->ticks, 3u, 0xf8u);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009732:	22f8      	movs	r2, #248	@ 0xf8
 8009734:	2103      	movs	r1, #3
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff fe60 	bl	80093fc <pack_left_shift_u8>
 800973c:	4603      	mov	r3, r0
 800973e:	4619      	mov	r1, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3307      	adds	r3, #7
 8009744:	781a      	ldrb	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3307      	adds	r3, #7
 800974a:	430a      	orrs	r2, r1
 800974c:	b2d2      	uxtb	r2, r2
 800974e:	701a      	strb	r2, [r3, #0]

    return (8);
 8009750:	2308      	movs	r3, #8
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	0000      	movs	r0, r0
 800975c:	0000      	movs	r0, r0
	...

08009760 <can1_ams_status_1_min_cell_voltage_encode>:
{
    return (value <= 1u);
}

double can1_ams_status_1_min_cell_voltage_encode(double value)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - 2.0) / 0.00784);
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009776:	f7f6 fd2b 	bl	80001d0 <__aeabi_dsub>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4610      	mov	r0, r2
 8009780:	4619      	mov	r1, r3
 8009782:	a309      	add	r3, pc, #36	@ (adr r3, 80097a8 <can1_ams_status_1_min_cell_voltage_encode+0x48>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f7f7 f804 	bl	8000794 <__aeabi_ddiv>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	ec43 2b17 	vmov	d7, r2, r3
}
 8009794:	eeb0 0a47 	vmov.f32	s0, s14
 8009798:	eef0 0a67 	vmov.f32	s1, s15
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	f3af 8000 	nop.w
 80097a8:	fcce1c58 	.word	0xfcce1c58
 80097ac:	3f800e6a 	.word	0x3f800e6a

080097b0 <can1_ams_status_1_max_cell_voltage_encode>:
{
    return ((value >= 63.775510204081634) && (value <= 318.8775510204082));
}

double can1_ams_status_1_max_cell_voltage_encode(double value)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - 2.4) / 0.00784);
 80097ba:	a30d      	add	r3, pc, #52	@ (adr r3, 80097f0 <can1_ams_status_1_max_cell_voltage_encode+0x40>)
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097c4:	f7f6 fd04 	bl	80001d0 <__aeabi_dsub>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4610      	mov	r0, r2
 80097ce:	4619      	mov	r1, r3
 80097d0:	a309      	add	r3, pc, #36	@ (adr r3, 80097f8 <can1_ams_status_1_max_cell_voltage_encode+0x48>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f7f6 ffdd 	bl	8000794 <__aeabi_ddiv>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	ec43 2b17 	vmov	d7, r2, r3
}
 80097e2:	eeb0 0a47 	vmov.f32	s0, s14
 80097e6:	eef0 0a67 	vmov.f32	s1, s15
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	33333333 	.word	0x33333333
 80097f4:	40033333 	.word	0x40033333
 80097f8:	fcce1c58 	.word	0xfcce1c58
 80097fc:	3f800e6a 	.word	0x3f800e6a

08009800 <can1_ams_status_1_min_cell_temperature_encode>:
{
    return ((value >= 12.755102040816338) && (value <= 267.8571428571429));
}

double can1_ams_status_1_min_cell_temperature_encode(double value)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - -10.0) / 0.4);
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	4b0e      	ldr	r3, [pc, #56]	@ (8009848 <can1_ams_status_1_min_cell_temperature_encode+0x48>)
 8009810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009814:	f7f6 fcde 	bl	80001d4 <__adddf3>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4610      	mov	r0, r2
 800981e:	4619      	mov	r1, r3
 8009820:	a307      	add	r3, pc, #28	@ (adr r3, 8009840 <can1_ams_status_1_min_cell_temperature_encode+0x40>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 ffb5 	bl	8000794 <__aeabi_ddiv>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	ec43 2b17 	vmov	d7, r2, r3
}
 8009832:	eeb0 0a47 	vmov.f32	s0, s14
 8009836:	eef0 0a67 	vmov.f32	s1, s15
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	9999999a 	.word	0x9999999a
 8009844:	3fd99999 	.word	0x3fd99999
 8009848:	40240000 	.word	0x40240000
 800984c:	00000000 	.word	0x00000000

08009850 <can1_ams_status_1_max_cell_temperature_encode>:
{
    return ((value >= 0.0) && (value <= 250.0));
}

double can1_ams_status_1_max_cell_temperature_encode(double value)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - -10.0) / 0.4);
 800985a:	f04f 0200 	mov.w	r2, #0
 800985e:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <can1_ams_status_1_max_cell_temperature_encode+0x48>)
 8009860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009864:	f7f6 fcb6 	bl	80001d4 <__adddf3>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4610      	mov	r0, r2
 800986e:	4619      	mov	r1, r3
 8009870:	a307      	add	r3, pc, #28	@ (adr r3, 8009890 <can1_ams_status_1_max_cell_temperature_encode+0x40>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 ff8d 	bl	8000794 <__aeabi_ddiv>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	ec43 2b17 	vmov	d7, r2, r3
}
 8009882:	eeb0 0a47 	vmov.f32	s0, s14
 8009886:	eef0 0a67 	vmov.f32	s1, s15
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	9999999a 	.word	0x9999999a
 8009894:	3fd99999 	.word	0x3fd99999
 8009898:	40240000 	.word	0x40240000

0800989c <can1_ams_status_1_ticks_encode>:
{
    return (value <= 15u);
}

uint8_t can1_ams_status_1_ticks_encode(double value)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value / 10.0);
 80098a6:	f04f 0200 	mov.w	r2, #0
 80098aa:	4b08      	ldr	r3, [pc, #32]	@ (80098cc <can1_ams_status_1_ticks_encode+0x30>)
 80098ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098b0:	f7f6 ff70 	bl	8000794 <__aeabi_ddiv>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4610      	mov	r0, r2
 80098ba:	4619      	mov	r1, r3
 80098bc:	f7f7 f902 	bl	8000ac4 <__aeabi_d2uiz>
 80098c0:	4603      	mov	r3, r0
 80098c2:	b2db      	uxtb	r3, r3
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	40240000 	.word	0x40240000

080098d0 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b07      	cmp	r3, #7
 80098e0:	d802      	bhi.n	80098e8 <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 80098e2:	f06f 0315 	mvn.w	r3, #21
 80098e6:	e047      	b.n	8009978 <can1_dbu_status_1_unpack+0xa8>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2201      	movs	r2, #1
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fdc9 	bl	8009488 <unpack_right_shift_u8>
 80098f6:	4603      	mov	r3, r0
 80098f8:	461a      	mov	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2202      	movs	r2, #2
 8009904:	2101      	movs	r1, #1
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fdbe 	bl	8009488 <unpack_right_shift_u8>
 800990c:	4603      	mov	r3, r0
 800990e:	461a      	mov	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	705a      	strb	r2, [r3, #1]
    dst_p->selected_mission = unpack_right_shift_u8(src_p[0], 2u, 0x1cu);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	221c      	movs	r2, #28
 800991a:	2102      	movs	r1, #2
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fdb3 	bl	8009488 <unpack_right_shift_u8>
 8009922:	4603      	mov	r3, r0
 8009924:	461a      	mov	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	709a      	strb	r2, [r3, #2]
    dbu_temperature = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	3306      	adds	r3, #6
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	22f0      	movs	r2, #240	@ 0xf0
 8009932:	2104      	movs	r1, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff fdbf 	bl	80094b8 <unpack_right_shift_u16>
 800993a:	4603      	mov	r3, r0
 800993c:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	3307      	adds	r3, #7
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	22ff      	movs	r2, #255	@ 0xff
 8009946:	2104      	movs	r1, #4
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fd85 	bl	8009458 <unpack_left_shift_u16>
 800994e:	4603      	mov	r3, r0
 8009950:	461a      	mov	r2, r3
 8009952:	8afb      	ldrh	r3, [r7, #22]
 8009954:	4313      	orrs	r3, r2
 8009956:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8009958:	8afb      	ldrh	r3, [r7, #22]
 800995a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800995e:	2b00      	cmp	r3, #0
 8009960:	d005      	beq.n	800996e <can1_dbu_status_1_unpack+0x9e>
        dbu_temperature |= 0xf000u;
 8009962:	8afb      	ldrh	r3, [r7, #22]
 8009964:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009968:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800996c:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 800996e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	809a      	strh	r2, [r3, #4]

    return (0);
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <can1_ecu_status_unpack>:

int can1_ecu_status_unpack(
    struct can1_ecu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <can1_ecu_status_unpack+0x18>
        return (-EINVAL);
 8009992:	f06f 0315 	mvn.w	r3, #21
 8009996:	e02c      	b.n	80099f2 <can1_ecu_status_unpack+0x72>
    }

    dst_p->ts_not_off = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2201      	movs	r2, #1
 800999e:	2100      	movs	r1, #0
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff fd71 	bl	8009488 <unpack_right_shift_u8>
 80099a6:	4603      	mov	r3, r0
 80099a8:	461a      	mov	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	701a      	strb	r2, [r3, #0]
    dst_p->rst_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2202      	movs	r2, #2
 80099b4:	2101      	movs	r1, #1
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff fd66 	bl	8009488 <unpack_right_shift_u8>
 80099bc:	4603      	mov	r3, r0
 80099be:	461a      	mov	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	705a      	strb	r2, [r3, #1]
    dst_p->sidepanel_activate_ts_button = unpack_right_shift_u8(src_p[0], 2u, 0x04u);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2204      	movs	r2, #4
 80099ca:	2102      	movs	r1, #2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fd5b 	bl	8009488 <unpack_right_shift_u8>
 80099d2:	4603      	mov	r3, r0
 80099d4:	461a      	mov	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	709a      	strb	r2, [r3, #2]
    dst_p->ts_off = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	2280      	movs	r2, #128	@ 0x80
 80099e0:	2107      	movs	r1, #7
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fd50 	bl	8009488 <unpack_right_shift_u8>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	70da      	strb	r2, [r3, #3]

    return (0);
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <can1_ams_s01_voltages_1_pack>:

int can1_ams_s01_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s01_voltages_1_t *src_p,
    size_t size)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	d802      	bhi.n	8009a12 <can1_ams_s01_voltages_1_pack+0x18>
        return (-EINVAL);
 8009a0c:	f06f 0315 	mvn.w	r3, #21
 8009a10:	e069      	b.n	8009ae6 <can1_ams_s01_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8009a12:	2206      	movs	r2, #6
 8009a14:	2100      	movs	r1, #0
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f006 fe36 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s01v01, 0u, 0xffu);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	22ff      	movs	r2, #255	@ 0xff
 8009a22:	2100      	movs	r1, #0
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff fce9 	bl	80093fc <pack_left_shift_u8>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s01v02, 0u, 0xffu);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	785b      	ldrb	r3, [r3, #1]
 8009a3e:	22ff      	movs	r2, #255	@ 0xff
 8009a40:	2100      	movs	r1, #0
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff fcda 	bl	80093fc <pack_left_shift_u8>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	781a      	ldrb	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3301      	adds	r3, #1
 8009a56:	430a      	orrs	r2, r1
 8009a58:	b2d2      	uxtb	r2, r2
 8009a5a:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s01v03, 0u, 0xffu);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	789b      	ldrb	r3, [r3, #2]
 8009a60:	22ff      	movs	r2, #255	@ 0xff
 8009a62:	2100      	movs	r1, #0
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff fcc9 	bl	80093fc <pack_left_shift_u8>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3302      	adds	r3, #2
 8009a72:	781a      	ldrb	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3302      	adds	r3, #2
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s01v04, 0u, 0xffu);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	78db      	ldrb	r3, [r3, #3]
 8009a82:	22ff      	movs	r2, #255	@ 0xff
 8009a84:	2100      	movs	r1, #0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff fcb8 	bl	80093fc <pack_left_shift_u8>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	4619      	mov	r1, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3303      	adds	r3, #3
 8009a94:	781a      	ldrb	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3303      	adds	r3, #3
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	b2d2      	uxtb	r2, r2
 8009a9e:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s01v05, 0u, 0xffu);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	791b      	ldrb	r3, [r3, #4]
 8009aa4:	22ff      	movs	r2, #255	@ 0xff
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff fca7 	bl	80093fc <pack_left_shift_u8>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	781a      	ldrb	r2, [r3, #0]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3304      	adds	r3, #4
 8009abc:	430a      	orrs	r2, r1
 8009abe:	b2d2      	uxtb	r2, r2
 8009ac0:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s01v06, 0u, 0xffu);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	795b      	ldrb	r3, [r3, #5]
 8009ac6:	22ff      	movs	r2, #255	@ 0xff
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff fc96 	bl	80093fc <pack_left_shift_u8>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3305      	adds	r3, #5
 8009ad8:	781a      	ldrb	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3305      	adds	r3, #5
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]

    return (6);
 8009ae4:	2306      	movs	r3, #6
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
	...

08009af0 <can1_ams_s01_voltages_1_s01v01_encode>:

    return 0;
}

uint8_t can1_ams_s01_voltages_1_s01v01_encode(double value)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009afa:	f04f 0200 	mov.w	r2, #0
 8009afe:	4b10      	ldr	r3, [pc, #64]	@ (8009b40 <can1_ams_s01_voltages_1_s01v01_encode+0x50>)
 8009b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b04:	f7f6 fb64 	bl	80001d0 <__aeabi_dsub>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	4619      	mov	r1, r3
 8009b10:	a309      	add	r3, pc, #36	@ (adr r3, 8009b38 <can1_ams_s01_voltages_1_s01v01_encode+0x48>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fe3d 	bl	8000794 <__aeabi_ddiv>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4610      	mov	r0, r2
 8009b20:	4619      	mov	r1, r3
 8009b22:	f7f6 ffcf 	bl	8000ac4 <__aeabi_d2uiz>
 8009b26:	4603      	mov	r3, r0
 8009b28:	b2db      	uxtb	r3, r3
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	f3af 8000 	nop.w
 8009b38:	fcce1c58 	.word	0xfcce1c58
 8009b3c:	3f800e6a 	.word	0x3f800e6a
 8009b40:	40040000 	.word	0x40040000
 8009b44:	00000000 	.word	0x00000000

08009b48 <can1_ams_s01_voltages_1_s01v02_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v02_encode(double value)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	4b10      	ldr	r3, [pc, #64]	@ (8009b98 <can1_ams_s01_voltages_1_s01v02_encode+0x50>)
 8009b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b5c:	f7f6 fb38 	bl	80001d0 <__aeabi_dsub>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4610      	mov	r0, r2
 8009b66:	4619      	mov	r1, r3
 8009b68:	a309      	add	r3, pc, #36	@ (adr r3, 8009b90 <can1_ams_s01_voltages_1_s01v02_encode+0x48>)
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f7f6 fe11 	bl	8000794 <__aeabi_ddiv>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4610      	mov	r0, r2
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f7f6 ffa3 	bl	8000ac4 <__aeabi_d2uiz>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	b2db      	uxtb	r3, r3
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w
 8009b90:	fcce1c58 	.word	0xfcce1c58
 8009b94:	3f800e6a 	.word	0x3f800e6a
 8009b98:	40040000 	.word	0x40040000
 8009b9c:	00000000 	.word	0x00000000

08009ba0 <can1_ams_s01_voltages_1_s01v03_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v03_encode(double value)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009baa:	f04f 0200 	mov.w	r2, #0
 8009bae:	4b10      	ldr	r3, [pc, #64]	@ (8009bf0 <can1_ams_s01_voltages_1_s01v03_encode+0x50>)
 8009bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bb4:	f7f6 fb0c 	bl	80001d0 <__aeabi_dsub>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	a309      	add	r3, pc, #36	@ (adr r3, 8009be8 <can1_ams_s01_voltages_1_s01v03_encode+0x48>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	f7f6 fde5 	bl	8000794 <__aeabi_ddiv>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4610      	mov	r0, r2
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f7f6 ff77 	bl	8000ac4 <__aeabi_d2uiz>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	b2db      	uxtb	r3, r3
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	f3af 8000 	nop.w
 8009be8:	fcce1c58 	.word	0xfcce1c58
 8009bec:	3f800e6a 	.word	0x3f800e6a
 8009bf0:	40040000 	.word	0x40040000
 8009bf4:	00000000 	.word	0x00000000

08009bf8 <can1_ams_s01_voltages_1_s01v04_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v04_encode(double value)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009c02:	f04f 0200 	mov.w	r2, #0
 8009c06:	4b10      	ldr	r3, [pc, #64]	@ (8009c48 <can1_ams_s01_voltages_1_s01v04_encode+0x50>)
 8009c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c0c:	f7f6 fae0 	bl	80001d0 <__aeabi_dsub>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4610      	mov	r0, r2
 8009c16:	4619      	mov	r1, r3
 8009c18:	a309      	add	r3, pc, #36	@ (adr r3, 8009c40 <can1_ams_s01_voltages_1_s01v04_encode+0x48>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fdb9 	bl	8000794 <__aeabi_ddiv>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4610      	mov	r0, r2
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f7f6 ff4b 	bl	8000ac4 <__aeabi_d2uiz>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	b2db      	uxtb	r3, r3
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w
 8009c40:	fcce1c58 	.word	0xfcce1c58
 8009c44:	3f800e6a 	.word	0x3f800e6a
 8009c48:	40040000 	.word	0x40040000
 8009c4c:	00000000 	.word	0x00000000

08009c50 <can1_ams_s01_voltages_1_s01v05_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v05_encode(double value)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009c5a:	f04f 0200 	mov.w	r2, #0
 8009c5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ca0 <can1_ams_s01_voltages_1_s01v05_encode+0x50>)
 8009c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c64:	f7f6 fab4 	bl	80001d0 <__aeabi_dsub>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	a309      	add	r3, pc, #36	@ (adr r3, 8009c98 <can1_ams_s01_voltages_1_s01v05_encode+0x48>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fd8d 	bl	8000794 <__aeabi_ddiv>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4619      	mov	r1, r3
 8009c82:	f7f6 ff1f 	bl	8000ac4 <__aeabi_d2uiz>
 8009c86:	4603      	mov	r3, r0
 8009c88:	b2db      	uxtb	r3, r3
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	f3af 8000 	nop.w
 8009c98:	fcce1c58 	.word	0xfcce1c58
 8009c9c:	3f800e6a 	.word	0x3f800e6a
 8009ca0:	40040000 	.word	0x40040000
 8009ca4:	00000000 	.word	0x00000000

08009ca8 <can1_ams_s01_voltages_1_s01v06_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v06_encode(double value)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009cb2:	f04f 0200 	mov.w	r2, #0
 8009cb6:	4b10      	ldr	r3, [pc, #64]	@ (8009cf8 <can1_ams_s01_voltages_1_s01v06_encode+0x50>)
 8009cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cbc:	f7f6 fa88 	bl	80001d0 <__aeabi_dsub>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	a309      	add	r3, pc, #36	@ (adr r3, 8009cf0 <can1_ams_s01_voltages_1_s01v06_encode+0x48>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f7f6 fd61 	bl	8000794 <__aeabi_ddiv>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4619      	mov	r1, r3
 8009cda:	f7f6 fef3 	bl	8000ac4 <__aeabi_d2uiz>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	b2db      	uxtb	r3, r3
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	f3af 8000 	nop.w
 8009cf0:	fcce1c58 	.word	0xfcce1c58
 8009cf4:	3f800e6a 	.word	0x3f800e6a
 8009cf8:	40040000 	.word	0x40040000

08009cfc <can1_ams_s01_voltages_2_pack>:

int can1_ams_s01_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s01_voltages_2_t *src_p,
    size_t size)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d802      	bhi.n	8009d14 <can1_ams_s01_voltages_2_pack+0x18>
        return (-EINVAL);
 8009d0e:	f06f 0315 	mvn.w	r3, #21
 8009d12:	e058      	b.n	8009dc6 <can1_ams_s01_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 8009d14:	2205      	movs	r2, #5
 8009d16:	2100      	movs	r1, #0
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f006 fcb5 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s01v07, 0u, 0xffu);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	22ff      	movs	r2, #255	@ 0xff
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff fb68 	bl	80093fc <pack_left_shift_u8>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s01v08, 0u, 0xffu);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	22ff      	movs	r2, #255	@ 0xff
 8009d42:	2100      	movs	r1, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7ff fb59 	bl	80093fc <pack_left_shift_u8>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	781a      	ldrb	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3301      	adds	r3, #1
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	b2d2      	uxtb	r2, r2
 8009d5c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s01v09, 0u, 0xffu);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	789b      	ldrb	r3, [r3, #2]
 8009d62:	22ff      	movs	r2, #255	@ 0xff
 8009d64:	2100      	movs	r1, #0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff fb48 	bl	80093fc <pack_left_shift_u8>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	4619      	mov	r1, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	3302      	adds	r3, #2
 8009d74:	781a      	ldrb	r2, [r3, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3302      	adds	r3, #2
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	b2d2      	uxtb	r2, r2
 8009d7e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s01v10, 0u, 0xffu);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	78db      	ldrb	r3, [r3, #3]
 8009d84:	22ff      	movs	r2, #255	@ 0xff
 8009d86:	2100      	movs	r1, #0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff fb37 	bl	80093fc <pack_left_shift_u8>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	4619      	mov	r1, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3303      	adds	r3, #3
 8009d96:	781a      	ldrb	r2, [r3, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3303      	adds	r3, #3
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	b2d2      	uxtb	r2, r2
 8009da0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s01v11, 0u, 0xffu);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	22ff      	movs	r2, #255	@ 0xff
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff fb26 	bl	80093fc <pack_left_shift_u8>
 8009db0:	4603      	mov	r3, r0
 8009db2:	4619      	mov	r1, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3304      	adds	r3, #4
 8009db8:	781a      	ldrb	r2, [r3, #0]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	701a      	strb	r2, [r3, #0]

    return (5);
 8009dc4:	2305      	movs	r3, #5
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <can1_ams_s01_voltages_2_s01v07_encode>:

    return 0;
}

uint8_t can1_ams_s01_voltages_2_s01v07_encode(double value)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009dda:	f04f 0200 	mov.w	r2, #0
 8009dde:	4b10      	ldr	r3, [pc, #64]	@ (8009e20 <can1_ams_s01_voltages_2_s01v07_encode+0x50>)
 8009de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009de4:	f7f6 f9f4 	bl	80001d0 <__aeabi_dsub>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4610      	mov	r0, r2
 8009dee:	4619      	mov	r1, r3
 8009df0:	a309      	add	r3, pc, #36	@ (adr r3, 8009e18 <can1_ams_s01_voltages_2_s01v07_encode+0x48>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 fccd 	bl	8000794 <__aeabi_ddiv>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4610      	mov	r0, r2
 8009e00:	4619      	mov	r1, r3
 8009e02:	f7f6 fe5f 	bl	8000ac4 <__aeabi_d2uiz>
 8009e06:	4603      	mov	r3, r0
 8009e08:	b2db      	uxtb	r3, r3
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	f3af 8000 	nop.w
 8009e18:	fcce1c58 	.word	0xfcce1c58
 8009e1c:	3f800e6a 	.word	0x3f800e6a
 8009e20:	40040000 	.word	0x40040000
 8009e24:	00000000 	.word	0x00000000

08009e28 <can1_ams_s01_voltages_2_s01v08_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v08_encode(double value)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	4b10      	ldr	r3, [pc, #64]	@ (8009e78 <can1_ams_s01_voltages_2_s01v08_encode+0x50>)
 8009e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e3c:	f7f6 f9c8 	bl	80001d0 <__aeabi_dsub>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4610      	mov	r0, r2
 8009e46:	4619      	mov	r1, r3
 8009e48:	a309      	add	r3, pc, #36	@ (adr r3, 8009e70 <can1_ams_s01_voltages_2_s01v08_encode+0x48>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fca1 	bl	8000794 <__aeabi_ddiv>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4610      	mov	r0, r2
 8009e58:	4619      	mov	r1, r3
 8009e5a:	f7f6 fe33 	bl	8000ac4 <__aeabi_d2uiz>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	b2db      	uxtb	r3, r3
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	f3af 8000 	nop.w
 8009e70:	fcce1c58 	.word	0xfcce1c58
 8009e74:	3f800e6a 	.word	0x3f800e6a
 8009e78:	40040000 	.word	0x40040000
 8009e7c:	00000000 	.word	0x00000000

08009e80 <can1_ams_s01_voltages_2_s01v09_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v09_encode(double value)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009e8a:	f04f 0200 	mov.w	r2, #0
 8009e8e:	4b10      	ldr	r3, [pc, #64]	@ (8009ed0 <can1_ams_s01_voltages_2_s01v09_encode+0x50>)
 8009e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e94:	f7f6 f99c 	bl	80001d0 <__aeabi_dsub>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	a309      	add	r3, pc, #36	@ (adr r3, 8009ec8 <can1_ams_s01_voltages_2_s01v09_encode+0x48>)
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f7f6 fc75 	bl	8000794 <__aeabi_ddiv>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	4610      	mov	r0, r2
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f7f6 fe07 	bl	8000ac4 <__aeabi_d2uiz>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	b2db      	uxtb	r3, r3
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	f3af 8000 	nop.w
 8009ec8:	fcce1c58 	.word	0xfcce1c58
 8009ecc:	3f800e6a 	.word	0x3f800e6a
 8009ed0:	40040000 	.word	0x40040000
 8009ed4:	00000000 	.word	0x00000000

08009ed8 <can1_ams_s01_voltages_2_s01v10_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v10_encode(double value)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009ee2:	f04f 0200 	mov.w	r2, #0
 8009ee6:	4b10      	ldr	r3, [pc, #64]	@ (8009f28 <can1_ams_s01_voltages_2_s01v10_encode+0x50>)
 8009ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eec:	f7f6 f970 	bl	80001d0 <__aeabi_dsub>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	a309      	add	r3, pc, #36	@ (adr r3, 8009f20 <can1_ams_s01_voltages_2_s01v10_encode+0x48>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	f7f6 fc49 	bl	8000794 <__aeabi_ddiv>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4610      	mov	r0, r2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	f7f6 fddb 	bl	8000ac4 <__aeabi_d2uiz>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	b2db      	uxtb	r3, r3
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	f3af 8000 	nop.w
 8009f20:	fcce1c58 	.word	0xfcce1c58
 8009f24:	3f800e6a 	.word	0x3f800e6a
 8009f28:	40040000 	.word	0x40040000
 8009f2c:	00000000 	.word	0x00000000

08009f30 <can1_ams_s01_voltages_2_s01v11_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v11_encode(double value)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009f3a:	f04f 0200 	mov.w	r2, #0
 8009f3e:	4b10      	ldr	r3, [pc, #64]	@ (8009f80 <can1_ams_s01_voltages_2_s01v11_encode+0x50>)
 8009f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f44:	f7f6 f944 	bl	80001d0 <__aeabi_dsub>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4619      	mov	r1, r3
 8009f50:	a309      	add	r3, pc, #36	@ (adr r3, 8009f78 <can1_ams_s01_voltages_2_s01v11_encode+0x48>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 fc1d 	bl	8000794 <__aeabi_ddiv>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4610      	mov	r0, r2
 8009f60:	4619      	mov	r1, r3
 8009f62:	f7f6 fdaf 	bl	8000ac4 <__aeabi_d2uiz>
 8009f66:	4603      	mov	r3, r0
 8009f68:	b2db      	uxtb	r3, r3
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	f3af 8000 	nop.w
 8009f78:	fcce1c58 	.word	0xfcce1c58
 8009f7c:	3f800e6a 	.word	0x3f800e6a
 8009f80:	40040000 	.word	0x40040000

08009f84 <can1_ams_s02_voltages_1_pack>:

int can1_ams_s02_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s02_voltages_1_t *src_p,
    size_t size)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	d802      	bhi.n	8009f9c <can1_ams_s02_voltages_1_pack+0x18>
        return (-EINVAL);
 8009f96:	f06f 0315 	mvn.w	r3, #21
 8009f9a:	e069      	b.n	800a070 <can1_ams_s02_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8009f9c:	2206      	movs	r2, #6
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f006 fb71 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s02v01, 0u, 0xffu);
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	22ff      	movs	r2, #255	@ 0xff
 8009fac:	2100      	movs	r1, #0
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff fa24 	bl	80093fc <pack_left_shift_u8>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s02v02, 0u, 0xffu);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	22ff      	movs	r2, #255	@ 0xff
 8009fca:	2100      	movs	r1, #0
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fa15 	bl	80093fc <pack_left_shift_u8>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	781a      	ldrb	r2, [r3, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s02v03, 0u, 0xffu);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	789b      	ldrb	r3, [r3, #2]
 8009fea:	22ff      	movs	r2, #255	@ 0xff
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff fa04 	bl	80093fc <pack_left_shift_u8>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3302      	adds	r3, #2
 8009ffc:	781a      	ldrb	r2, [r3, #0]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3302      	adds	r3, #2
 800a002:	430a      	orrs	r2, r1
 800a004:	b2d2      	uxtb	r2, r2
 800a006:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s02v04, 0u, 0xffu);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	78db      	ldrb	r3, [r3, #3]
 800a00c:	22ff      	movs	r2, #255	@ 0xff
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff f9f3 	bl	80093fc <pack_left_shift_u8>
 800a016:	4603      	mov	r3, r0
 800a018:	4619      	mov	r1, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3303      	adds	r3, #3
 800a01e:	781a      	ldrb	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3303      	adds	r3, #3
 800a024:	430a      	orrs	r2, r1
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s02v05, 0u, 0xffu);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	791b      	ldrb	r3, [r3, #4]
 800a02e:	22ff      	movs	r2, #255	@ 0xff
 800a030:	2100      	movs	r1, #0
 800a032:	4618      	mov	r0, r3
 800a034:	f7ff f9e2 	bl	80093fc <pack_left_shift_u8>
 800a038:	4603      	mov	r3, r0
 800a03a:	4619      	mov	r1, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3304      	adds	r3, #4
 800a040:	781a      	ldrb	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3304      	adds	r3, #4
 800a046:	430a      	orrs	r2, r1
 800a048:	b2d2      	uxtb	r2, r2
 800a04a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s02v06, 0u, 0xffu);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	795b      	ldrb	r3, [r3, #5]
 800a050:	22ff      	movs	r2, #255	@ 0xff
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f7ff f9d1 	bl	80093fc <pack_left_shift_u8>
 800a05a:	4603      	mov	r3, r0
 800a05c:	4619      	mov	r1, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3305      	adds	r3, #5
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3305      	adds	r3, #5
 800a068:	430a      	orrs	r2, r1
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	701a      	strb	r2, [r3, #0]

    return (6);
 800a06e:	2306      	movs	r3, #6
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <can1_ams_s02_voltages_1_s02v01_encode>:

    return 0;
}

uint8_t can1_ams_s02_voltages_1_s02v01_encode(double value)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a082:	f04f 0200 	mov.w	r2, #0
 800a086:	4b10      	ldr	r3, [pc, #64]	@ (800a0c8 <can1_ams_s02_voltages_1_s02v01_encode+0x50>)
 800a088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a08c:	f7f6 f8a0 	bl	80001d0 <__aeabi_dsub>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4610      	mov	r0, r2
 800a096:	4619      	mov	r1, r3
 800a098:	a309      	add	r3, pc, #36	@ (adr r3, 800a0c0 <can1_ams_s02_voltages_1_s02v01_encode+0x48>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 fb79 	bl	8000794 <__aeabi_ddiv>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	f7f6 fd0b 	bl	8000ac4 <__aeabi_d2uiz>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	b2db      	uxtb	r3, r3
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	f3af 8000 	nop.w
 800a0c0:	fcce1c58 	.word	0xfcce1c58
 800a0c4:	3f800e6a 	.word	0x3f800e6a
 800a0c8:	40040000 	.word	0x40040000
 800a0cc:	00000000 	.word	0x00000000

0800a0d0 <can1_ams_s02_voltages_1_s02v02_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v02_encode(double value)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a0da:	f04f 0200 	mov.w	r2, #0
 800a0de:	4b10      	ldr	r3, [pc, #64]	@ (800a120 <can1_ams_s02_voltages_1_s02v02_encode+0x50>)
 800a0e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0e4:	f7f6 f874 	bl	80001d0 <__aeabi_dsub>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	a309      	add	r3, pc, #36	@ (adr r3, 800a118 <can1_ams_s02_voltages_1_s02v02_encode+0x48>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fb4d 	bl	8000794 <__aeabi_ddiv>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4610      	mov	r0, r2
 800a100:	4619      	mov	r1, r3
 800a102:	f7f6 fcdf 	bl	8000ac4 <__aeabi_d2uiz>
 800a106:	4603      	mov	r3, r0
 800a108:	b2db      	uxtb	r3, r3
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	f3af 8000 	nop.w
 800a118:	fcce1c58 	.word	0xfcce1c58
 800a11c:	3f800e6a 	.word	0x3f800e6a
 800a120:	40040000 	.word	0x40040000
 800a124:	00000000 	.word	0x00000000

0800a128 <can1_ams_s02_voltages_1_s02v03_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v03_encode(double value)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a132:	f04f 0200 	mov.w	r2, #0
 800a136:	4b10      	ldr	r3, [pc, #64]	@ (800a178 <can1_ams_s02_voltages_1_s02v03_encode+0x50>)
 800a138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a13c:	f7f6 f848 	bl	80001d0 <__aeabi_dsub>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4610      	mov	r0, r2
 800a146:	4619      	mov	r1, r3
 800a148:	a309      	add	r3, pc, #36	@ (adr r3, 800a170 <can1_ams_s02_voltages_1_s02v03_encode+0x48>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f7f6 fb21 	bl	8000794 <__aeabi_ddiv>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4610      	mov	r0, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	f7f6 fcb3 	bl	8000ac4 <__aeabi_d2uiz>
 800a15e:	4603      	mov	r3, r0
 800a160:	b2db      	uxtb	r3, r3
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	f3af 8000 	nop.w
 800a170:	fcce1c58 	.word	0xfcce1c58
 800a174:	3f800e6a 	.word	0x3f800e6a
 800a178:	40040000 	.word	0x40040000
 800a17c:	00000000 	.word	0x00000000

0800a180 <can1_ams_s02_voltages_1_s02v04_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v04_encode(double value)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a18a:	f04f 0200 	mov.w	r2, #0
 800a18e:	4b10      	ldr	r3, [pc, #64]	@ (800a1d0 <can1_ams_s02_voltages_1_s02v04_encode+0x50>)
 800a190:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a194:	f7f6 f81c 	bl	80001d0 <__aeabi_dsub>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4610      	mov	r0, r2
 800a19e:	4619      	mov	r1, r3
 800a1a0:	a309      	add	r3, pc, #36	@ (adr r3, 800a1c8 <can1_ams_s02_voltages_1_s02v04_encode+0x48>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	f7f6 faf5 	bl	8000794 <__aeabi_ddiv>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f7f6 fc87 	bl	8000ac4 <__aeabi_d2uiz>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	b2db      	uxtb	r3, r3
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	f3af 8000 	nop.w
 800a1c8:	fcce1c58 	.word	0xfcce1c58
 800a1cc:	3f800e6a 	.word	0x3f800e6a
 800a1d0:	40040000 	.word	0x40040000
 800a1d4:	00000000 	.word	0x00000000

0800a1d8 <can1_ams_s02_voltages_1_s02v05_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v05_encode(double value)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a1e2:	f04f 0200 	mov.w	r2, #0
 800a1e6:	4b10      	ldr	r3, [pc, #64]	@ (800a228 <can1_ams_s02_voltages_1_s02v05_encode+0x50>)
 800a1e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1ec:	f7f5 fff0 	bl	80001d0 <__aeabi_dsub>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	a309      	add	r3, pc, #36	@ (adr r3, 800a220 <can1_ams_s02_voltages_1_s02v05_encode+0x48>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f6 fac9 	bl	8000794 <__aeabi_ddiv>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4610      	mov	r0, r2
 800a208:	4619      	mov	r1, r3
 800a20a:	f7f6 fc5b 	bl	8000ac4 <__aeabi_d2uiz>
 800a20e:	4603      	mov	r3, r0
 800a210:	b2db      	uxtb	r3, r3
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	f3af 8000 	nop.w
 800a220:	fcce1c58 	.word	0xfcce1c58
 800a224:	3f800e6a 	.word	0x3f800e6a
 800a228:	40040000 	.word	0x40040000
 800a22c:	00000000 	.word	0x00000000

0800a230 <can1_ams_s02_voltages_1_s02v06_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v06_encode(double value)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a23a:	f04f 0200 	mov.w	r2, #0
 800a23e:	4b10      	ldr	r3, [pc, #64]	@ (800a280 <can1_ams_s02_voltages_1_s02v06_encode+0x50>)
 800a240:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a244:	f7f5 ffc4 	bl	80001d0 <__aeabi_dsub>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	4610      	mov	r0, r2
 800a24e:	4619      	mov	r1, r3
 800a250:	a309      	add	r3, pc, #36	@ (adr r3, 800a278 <can1_ams_s02_voltages_1_s02v06_encode+0x48>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f7f6 fa9d 	bl	8000794 <__aeabi_ddiv>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4610      	mov	r0, r2
 800a260:	4619      	mov	r1, r3
 800a262:	f7f6 fc2f 	bl	8000ac4 <__aeabi_d2uiz>
 800a266:	4603      	mov	r3, r0
 800a268:	b2db      	uxtb	r3, r3
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	f3af 8000 	nop.w
 800a278:	fcce1c58 	.word	0xfcce1c58
 800a27c:	3f800e6a 	.word	0x3f800e6a
 800a280:	40040000 	.word	0x40040000

0800a284 <can1_ams_s02_voltages_2_pack>:

int can1_ams_s02_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s02_voltages_2_t *src_p,
    size_t size)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b04      	cmp	r3, #4
 800a294:	d802      	bhi.n	800a29c <can1_ams_s02_voltages_2_pack+0x18>
        return (-EINVAL);
 800a296:	f06f 0315 	mvn.w	r3, #21
 800a29a:	e058      	b.n	800a34e <can1_ams_s02_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800a29c:	2205      	movs	r2, #5
 800a29e:	2100      	movs	r1, #0
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f006 f9f1 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s02v07, 0u, 0xffu);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	22ff      	movs	r2, #255	@ 0xff
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff f8a4 	bl	80093fc <pack_left_shift_u8>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s02v08, 0u, 0xffu);
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	785b      	ldrb	r3, [r3, #1]
 800a2c8:	22ff      	movs	r2, #255	@ 0xff
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff f895 	bl	80093fc <pack_left_shift_u8>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	781a      	ldrb	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s02v09, 0u, 0xffu);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	789b      	ldrb	r3, [r3, #2]
 800a2ea:	22ff      	movs	r2, #255	@ 0xff
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff f884 	bl	80093fc <pack_left_shift_u8>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3302      	adds	r3, #2
 800a2fc:	781a      	ldrb	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3302      	adds	r3, #2
 800a302:	430a      	orrs	r2, r1
 800a304:	b2d2      	uxtb	r2, r2
 800a306:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s02v10, 0u, 0xffu);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	78db      	ldrb	r3, [r3, #3]
 800a30c:	22ff      	movs	r2, #255	@ 0xff
 800a30e:	2100      	movs	r1, #0
 800a310:	4618      	mov	r0, r3
 800a312:	f7ff f873 	bl	80093fc <pack_left_shift_u8>
 800a316:	4603      	mov	r3, r0
 800a318:	4619      	mov	r1, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3303      	adds	r3, #3
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3303      	adds	r3, #3
 800a324:	430a      	orrs	r2, r1
 800a326:	b2d2      	uxtb	r2, r2
 800a328:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s02v11, 0u, 0xffu);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	791b      	ldrb	r3, [r3, #4]
 800a32e:	22ff      	movs	r2, #255	@ 0xff
 800a330:	2100      	movs	r1, #0
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff f862 	bl	80093fc <pack_left_shift_u8>
 800a338:	4603      	mov	r3, r0
 800a33a:	4619      	mov	r1, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3304      	adds	r3, #4
 800a340:	781a      	ldrb	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3304      	adds	r3, #4
 800a346:	430a      	orrs	r2, r1
 800a348:	b2d2      	uxtb	r2, r2
 800a34a:	701a      	strb	r2, [r3, #0]

    return (5);
 800a34c:	2305      	movs	r3, #5
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
	...

0800a358 <can1_ams_s02_voltages_2_s02v07_encode>:

    return 0;
}

uint8_t can1_ams_s02_voltages_2_s02v07_encode(double value)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a362:	f04f 0200 	mov.w	r2, #0
 800a366:	4b10      	ldr	r3, [pc, #64]	@ (800a3a8 <can1_ams_s02_voltages_2_s02v07_encode+0x50>)
 800a368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a36c:	f7f5 ff30 	bl	80001d0 <__aeabi_dsub>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4610      	mov	r0, r2
 800a376:	4619      	mov	r1, r3
 800a378:	a309      	add	r3, pc, #36	@ (adr r3, 800a3a0 <can1_ams_s02_voltages_2_s02v07_encode+0x48>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f6 fa09 	bl	8000794 <__aeabi_ddiv>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4610      	mov	r0, r2
 800a388:	4619      	mov	r1, r3
 800a38a:	f7f6 fb9b 	bl	8000ac4 <__aeabi_d2uiz>
 800a38e:	4603      	mov	r3, r0
 800a390:	b2db      	uxtb	r3, r3
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	f3af 8000 	nop.w
 800a3a0:	fcce1c58 	.word	0xfcce1c58
 800a3a4:	3f800e6a 	.word	0x3f800e6a
 800a3a8:	40040000 	.word	0x40040000
 800a3ac:	00000000 	.word	0x00000000

0800a3b0 <can1_ams_s02_voltages_2_s02v08_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v08_encode(double value)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a3ba:	f04f 0200 	mov.w	r2, #0
 800a3be:	4b10      	ldr	r3, [pc, #64]	@ (800a400 <can1_ams_s02_voltages_2_s02v08_encode+0x50>)
 800a3c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3c4:	f7f5 ff04 	bl	80001d0 <__aeabi_dsub>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	a309      	add	r3, pc, #36	@ (adr r3, 800a3f8 <can1_ams_s02_voltages_2_s02v08_encode+0x48>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f6 f9dd 	bl	8000794 <__aeabi_ddiv>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4610      	mov	r0, r2
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	f7f6 fb6f 	bl	8000ac4 <__aeabi_d2uiz>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	b2db      	uxtb	r3, r3
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	fcce1c58 	.word	0xfcce1c58
 800a3fc:	3f800e6a 	.word	0x3f800e6a
 800a400:	40040000 	.word	0x40040000
 800a404:	00000000 	.word	0x00000000

0800a408 <can1_ams_s02_voltages_2_s02v09_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v09_encode(double value)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a412:	f04f 0200 	mov.w	r2, #0
 800a416:	4b10      	ldr	r3, [pc, #64]	@ (800a458 <can1_ams_s02_voltages_2_s02v09_encode+0x50>)
 800a418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a41c:	f7f5 fed8 	bl	80001d0 <__aeabi_dsub>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4610      	mov	r0, r2
 800a426:	4619      	mov	r1, r3
 800a428:	a309      	add	r3, pc, #36	@ (adr r3, 800a450 <can1_ams_s02_voltages_2_s02v09_encode+0x48>)
 800a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42e:	f7f6 f9b1 	bl	8000794 <__aeabi_ddiv>
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	4610      	mov	r0, r2
 800a438:	4619      	mov	r1, r3
 800a43a:	f7f6 fb43 	bl	8000ac4 <__aeabi_d2uiz>
 800a43e:	4603      	mov	r3, r0
 800a440:	b2db      	uxtb	r3, r3
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	f3af 8000 	nop.w
 800a450:	fcce1c58 	.word	0xfcce1c58
 800a454:	3f800e6a 	.word	0x3f800e6a
 800a458:	40040000 	.word	0x40040000
 800a45c:	00000000 	.word	0x00000000

0800a460 <can1_ams_s02_voltages_2_s02v10_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v10_encode(double value)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a46a:	f04f 0200 	mov.w	r2, #0
 800a46e:	4b10      	ldr	r3, [pc, #64]	@ (800a4b0 <can1_ams_s02_voltages_2_s02v10_encode+0x50>)
 800a470:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a474:	f7f5 feac 	bl	80001d0 <__aeabi_dsub>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4610      	mov	r0, r2
 800a47e:	4619      	mov	r1, r3
 800a480:	a309      	add	r3, pc, #36	@ (adr r3, 800a4a8 <can1_ams_s02_voltages_2_s02v10_encode+0x48>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f6 f985 	bl	8000794 <__aeabi_ddiv>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4610      	mov	r0, r2
 800a490:	4619      	mov	r1, r3
 800a492:	f7f6 fb17 	bl	8000ac4 <__aeabi_d2uiz>
 800a496:	4603      	mov	r3, r0
 800a498:	b2db      	uxtb	r3, r3
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	fcce1c58 	.word	0xfcce1c58
 800a4ac:	3f800e6a 	.word	0x3f800e6a
 800a4b0:	40040000 	.word	0x40040000

0800a4b4 <can1_ams_s03_voltages_1_pack>:

int can1_ams_s03_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s03_voltages_1_t *src_p,
    size_t size)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	d802      	bhi.n	800a4cc <can1_ams_s03_voltages_1_pack+0x18>
        return (-EINVAL);
 800a4c6:	f06f 0315 	mvn.w	r3, #21
 800a4ca:	e069      	b.n	800a5a0 <can1_ams_s03_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800a4cc:	2206      	movs	r2, #6
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f006 f8d9 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s03v01, 0u, 0xffu);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	22ff      	movs	r2, #255	@ 0xff
 800a4dc:	2100      	movs	r1, #0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe ff8c 	bl	80093fc <pack_left_shift_u8>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s03v02, 0u, 0xffu);
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	785b      	ldrb	r3, [r3, #1]
 800a4f8:	22ff      	movs	r2, #255	@ 0xff
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe ff7d 	bl	80093fc <pack_left_shift_u8>
 800a502:	4603      	mov	r3, r0
 800a504:	4619      	mov	r1, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3301      	adds	r3, #1
 800a50a:	781a      	ldrb	r2, [r3, #0]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	430a      	orrs	r2, r1
 800a512:	b2d2      	uxtb	r2, r2
 800a514:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s03v03, 0u, 0xffu);
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	789b      	ldrb	r3, [r3, #2]
 800a51a:	22ff      	movs	r2, #255	@ 0xff
 800a51c:	2100      	movs	r1, #0
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe ff6c 	bl	80093fc <pack_left_shift_u8>
 800a524:	4603      	mov	r3, r0
 800a526:	4619      	mov	r1, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3302      	adds	r3, #2
 800a52c:	781a      	ldrb	r2, [r3, #0]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3302      	adds	r3, #2
 800a532:	430a      	orrs	r2, r1
 800a534:	b2d2      	uxtb	r2, r2
 800a536:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s03v04, 0u, 0xffu);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	78db      	ldrb	r3, [r3, #3]
 800a53c:	22ff      	movs	r2, #255	@ 0xff
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe ff5b 	bl	80093fc <pack_left_shift_u8>
 800a546:	4603      	mov	r3, r0
 800a548:	4619      	mov	r1, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3303      	adds	r3, #3
 800a54e:	781a      	ldrb	r2, [r3, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3303      	adds	r3, #3
 800a554:	430a      	orrs	r2, r1
 800a556:	b2d2      	uxtb	r2, r2
 800a558:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s03v05, 0u, 0xffu);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	791b      	ldrb	r3, [r3, #4]
 800a55e:	22ff      	movs	r2, #255	@ 0xff
 800a560:	2100      	movs	r1, #0
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe ff4a 	bl	80093fc <pack_left_shift_u8>
 800a568:	4603      	mov	r3, r0
 800a56a:	4619      	mov	r1, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3304      	adds	r3, #4
 800a570:	781a      	ldrb	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3304      	adds	r3, #4
 800a576:	430a      	orrs	r2, r1
 800a578:	b2d2      	uxtb	r2, r2
 800a57a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s03v06, 0u, 0xffu);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	795b      	ldrb	r3, [r3, #5]
 800a580:	22ff      	movs	r2, #255	@ 0xff
 800a582:	2100      	movs	r1, #0
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe ff39 	bl	80093fc <pack_left_shift_u8>
 800a58a:	4603      	mov	r3, r0
 800a58c:	4619      	mov	r1, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3305      	adds	r3, #5
 800a592:	781a      	ldrb	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3305      	adds	r3, #5
 800a598:	430a      	orrs	r2, r1
 800a59a:	b2d2      	uxtb	r2, r2
 800a59c:	701a      	strb	r2, [r3, #0]

    return (6);
 800a59e:	2306      	movs	r3, #6
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <can1_ams_s03_voltages_1_s03v01_encode>:

    return 0;
}

uint8_t can1_ams_s03_voltages_1_s03v01_encode(double value)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a5b2:	f04f 0200 	mov.w	r2, #0
 800a5b6:	4b10      	ldr	r3, [pc, #64]	@ (800a5f8 <can1_ams_s03_voltages_1_s03v01_encode+0x50>)
 800a5b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5bc:	f7f5 fe08 	bl	80001d0 <__aeabi_dsub>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	a309      	add	r3, pc, #36	@ (adr r3, 800a5f0 <can1_ams_s03_voltages_1_s03v01_encode+0x48>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f6 f8e1 	bl	8000794 <__aeabi_ddiv>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	4619      	mov	r1, r3
 800a5da:	f7f6 fa73 	bl	8000ac4 <__aeabi_d2uiz>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	b2db      	uxtb	r3, r3
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	f3af 8000 	nop.w
 800a5f0:	fcce1c58 	.word	0xfcce1c58
 800a5f4:	3f800e6a 	.word	0x3f800e6a
 800a5f8:	40040000 	.word	0x40040000
 800a5fc:	00000000 	.word	0x00000000

0800a600 <can1_ams_s03_voltages_1_s03v02_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v02_encode(double value)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a60a:	f04f 0200 	mov.w	r2, #0
 800a60e:	4b10      	ldr	r3, [pc, #64]	@ (800a650 <can1_ams_s03_voltages_1_s03v02_encode+0x50>)
 800a610:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a614:	f7f5 fddc 	bl	80001d0 <__aeabi_dsub>
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	4610      	mov	r0, r2
 800a61e:	4619      	mov	r1, r3
 800a620:	a309      	add	r3, pc, #36	@ (adr r3, 800a648 <can1_ams_s03_voltages_1_s03v02_encode+0x48>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f7f6 f8b5 	bl	8000794 <__aeabi_ddiv>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4610      	mov	r0, r2
 800a630:	4619      	mov	r1, r3
 800a632:	f7f6 fa47 	bl	8000ac4 <__aeabi_d2uiz>
 800a636:	4603      	mov	r3, r0
 800a638:	b2db      	uxtb	r3, r3
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	f3af 8000 	nop.w
 800a648:	fcce1c58 	.word	0xfcce1c58
 800a64c:	3f800e6a 	.word	0x3f800e6a
 800a650:	40040000 	.word	0x40040000
 800a654:	00000000 	.word	0x00000000

0800a658 <can1_ams_s03_voltages_1_s03v03_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v03_encode(double value)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a662:	f04f 0200 	mov.w	r2, #0
 800a666:	4b10      	ldr	r3, [pc, #64]	@ (800a6a8 <can1_ams_s03_voltages_1_s03v03_encode+0x50>)
 800a668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a66c:	f7f5 fdb0 	bl	80001d0 <__aeabi_dsub>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4610      	mov	r0, r2
 800a676:	4619      	mov	r1, r3
 800a678:	a309      	add	r3, pc, #36	@ (adr r3, 800a6a0 <can1_ams_s03_voltages_1_s03v03_encode+0x48>)
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	f7f6 f889 	bl	8000794 <__aeabi_ddiv>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4610      	mov	r0, r2
 800a688:	4619      	mov	r1, r3
 800a68a:	f7f6 fa1b 	bl	8000ac4 <__aeabi_d2uiz>
 800a68e:	4603      	mov	r3, r0
 800a690:	b2db      	uxtb	r3, r3
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	f3af 8000 	nop.w
 800a6a0:	fcce1c58 	.word	0xfcce1c58
 800a6a4:	3f800e6a 	.word	0x3f800e6a
 800a6a8:	40040000 	.word	0x40040000
 800a6ac:	00000000 	.word	0x00000000

0800a6b0 <can1_ams_s03_voltages_1_s03v04_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v04_encode(double value)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a6ba:	f04f 0200 	mov.w	r2, #0
 800a6be:	4b10      	ldr	r3, [pc, #64]	@ (800a700 <can1_ams_s03_voltages_1_s03v04_encode+0x50>)
 800a6c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6c4:	f7f5 fd84 	bl	80001d0 <__aeabi_dsub>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	a309      	add	r3, pc, #36	@ (adr r3, 800a6f8 <can1_ams_s03_voltages_1_s03v04_encode+0x48>)
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	f7f6 f85d 	bl	8000794 <__aeabi_ddiv>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4610      	mov	r0, r2
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f7f6 f9ef 	bl	8000ac4 <__aeabi_d2uiz>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	b2db      	uxtb	r3, r3
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	f3af 8000 	nop.w
 800a6f8:	fcce1c58 	.word	0xfcce1c58
 800a6fc:	3f800e6a 	.word	0x3f800e6a
 800a700:	40040000 	.word	0x40040000
 800a704:	00000000 	.word	0x00000000

0800a708 <can1_ams_s03_voltages_1_s03v05_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v05_encode(double value)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a712:	f04f 0200 	mov.w	r2, #0
 800a716:	4b10      	ldr	r3, [pc, #64]	@ (800a758 <can1_ams_s03_voltages_1_s03v05_encode+0x50>)
 800a718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a71c:	f7f5 fd58 	bl	80001d0 <__aeabi_dsub>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4610      	mov	r0, r2
 800a726:	4619      	mov	r1, r3
 800a728:	a309      	add	r3, pc, #36	@ (adr r3, 800a750 <can1_ams_s03_voltages_1_s03v05_encode+0x48>)
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	f7f6 f831 	bl	8000794 <__aeabi_ddiv>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	4610      	mov	r0, r2
 800a738:	4619      	mov	r1, r3
 800a73a:	f7f6 f9c3 	bl	8000ac4 <__aeabi_d2uiz>
 800a73e:	4603      	mov	r3, r0
 800a740:	b2db      	uxtb	r3, r3
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	f3af 8000 	nop.w
 800a750:	fcce1c58 	.word	0xfcce1c58
 800a754:	3f800e6a 	.word	0x3f800e6a
 800a758:	40040000 	.word	0x40040000
 800a75c:	00000000 	.word	0x00000000

0800a760 <can1_ams_s03_voltages_1_s03v06_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v06_encode(double value)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a76a:	f04f 0200 	mov.w	r2, #0
 800a76e:	4b10      	ldr	r3, [pc, #64]	@ (800a7b0 <can1_ams_s03_voltages_1_s03v06_encode+0x50>)
 800a770:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a774:	f7f5 fd2c 	bl	80001d0 <__aeabi_dsub>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4610      	mov	r0, r2
 800a77e:	4619      	mov	r1, r3
 800a780:	a309      	add	r3, pc, #36	@ (adr r3, 800a7a8 <can1_ams_s03_voltages_1_s03v06_encode+0x48>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f6 f805 	bl	8000794 <__aeabi_ddiv>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4610      	mov	r0, r2
 800a790:	4619      	mov	r1, r3
 800a792:	f7f6 f997 	bl	8000ac4 <__aeabi_d2uiz>
 800a796:	4603      	mov	r3, r0
 800a798:	b2db      	uxtb	r3, r3
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	f3af 8000 	nop.w
 800a7a8:	fcce1c58 	.word	0xfcce1c58
 800a7ac:	3f800e6a 	.word	0x3f800e6a
 800a7b0:	40040000 	.word	0x40040000

0800a7b4 <can1_ams_s03_voltages_2_pack>:

int can1_ams_s03_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s03_voltages_2_t *src_p,
    size_t size)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d802      	bhi.n	800a7cc <can1_ams_s03_voltages_2_pack+0x18>
        return (-EINVAL);
 800a7c6:	f06f 0315 	mvn.w	r3, #21
 800a7ca:	e058      	b.n	800a87e <can1_ams_s03_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800a7cc:	2205      	movs	r2, #5
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f005 ff59 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s03v07, 0u, 0xffu);
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	22ff      	movs	r2, #255	@ 0xff
 800a7dc:	2100      	movs	r1, #0
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe fe0c 	bl	80093fc <pack_left_shift_u8>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s03v08, 0u, 0xffu);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	785b      	ldrb	r3, [r3, #1]
 800a7f8:	22ff      	movs	r2, #255	@ 0xff
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fe fdfd 	bl	80093fc <pack_left_shift_u8>
 800a802:	4603      	mov	r3, r0
 800a804:	4619      	mov	r1, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3301      	adds	r3, #1
 800a80a:	781a      	ldrb	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3301      	adds	r3, #1
 800a810:	430a      	orrs	r2, r1
 800a812:	b2d2      	uxtb	r2, r2
 800a814:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s03v09, 0u, 0xffu);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	789b      	ldrb	r3, [r3, #2]
 800a81a:	22ff      	movs	r2, #255	@ 0xff
 800a81c:	2100      	movs	r1, #0
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fdec 	bl	80093fc <pack_left_shift_u8>
 800a824:	4603      	mov	r3, r0
 800a826:	4619      	mov	r1, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	3302      	adds	r3, #2
 800a82c:	781a      	ldrb	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3302      	adds	r3, #2
 800a832:	430a      	orrs	r2, r1
 800a834:	b2d2      	uxtb	r2, r2
 800a836:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s03v10, 0u, 0xffu);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	78db      	ldrb	r3, [r3, #3]
 800a83c:	22ff      	movs	r2, #255	@ 0xff
 800a83e:	2100      	movs	r1, #0
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe fddb 	bl	80093fc <pack_left_shift_u8>
 800a846:	4603      	mov	r3, r0
 800a848:	4619      	mov	r1, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3303      	adds	r3, #3
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3303      	adds	r3, #3
 800a854:	430a      	orrs	r2, r1
 800a856:	b2d2      	uxtb	r2, r2
 800a858:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s03v11, 0u, 0xffu);
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	791b      	ldrb	r3, [r3, #4]
 800a85e:	22ff      	movs	r2, #255	@ 0xff
 800a860:	2100      	movs	r1, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fdca 	bl	80093fc <pack_left_shift_u8>
 800a868:	4603      	mov	r3, r0
 800a86a:	4619      	mov	r1, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3304      	adds	r3, #4
 800a870:	781a      	ldrb	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3304      	adds	r3, #4
 800a876:	430a      	orrs	r2, r1
 800a878:	b2d2      	uxtb	r2, r2
 800a87a:	701a      	strb	r2, [r3, #0]

    return (5);
 800a87c:	2305      	movs	r3, #5
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
	...

0800a888 <can1_ams_s03_voltages_2_s03v07_encode>:

    return 0;
}

uint8_t can1_ams_s03_voltages_2_s03v07_encode(double value)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	4b10      	ldr	r3, [pc, #64]	@ (800a8d8 <can1_ams_s03_voltages_2_s03v07_encode+0x50>)
 800a898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a89c:	f7f5 fc98 	bl	80001d0 <__aeabi_dsub>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	a309      	add	r3, pc, #36	@ (adr r3, 800a8d0 <can1_ams_s03_voltages_2_s03v07_encode+0x48>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 ff71 	bl	8000794 <__aeabi_ddiv>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7f6 f903 	bl	8000ac4 <__aeabi_d2uiz>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	b2db      	uxtb	r3, r3
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	f3af 8000 	nop.w
 800a8d0:	fcce1c58 	.word	0xfcce1c58
 800a8d4:	3f800e6a 	.word	0x3f800e6a
 800a8d8:	40040000 	.word	0x40040000
 800a8dc:	00000000 	.word	0x00000000

0800a8e0 <can1_ams_s03_voltages_2_s03v08_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v08_encode(double value)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a8ea:	f04f 0200 	mov.w	r2, #0
 800a8ee:	4b10      	ldr	r3, [pc, #64]	@ (800a930 <can1_ams_s03_voltages_2_s03v08_encode+0x50>)
 800a8f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8f4:	f7f5 fc6c 	bl	80001d0 <__aeabi_dsub>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	4619      	mov	r1, r3
 800a900:	a309      	add	r3, pc, #36	@ (adr r3, 800a928 <can1_ams_s03_voltages_2_s03v08_encode+0x48>)
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f7f5 ff45 	bl	8000794 <__aeabi_ddiv>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4610      	mov	r0, r2
 800a910:	4619      	mov	r1, r3
 800a912:	f7f6 f8d7 	bl	8000ac4 <__aeabi_d2uiz>
 800a916:	4603      	mov	r3, r0
 800a918:	b2db      	uxtb	r3, r3
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	f3af 8000 	nop.w
 800a928:	fcce1c58 	.word	0xfcce1c58
 800a92c:	3f800e6a 	.word	0x3f800e6a
 800a930:	40040000 	.word	0x40040000
 800a934:	00000000 	.word	0x00000000

0800a938 <can1_ams_s03_voltages_2_s03v09_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v09_encode(double value)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a942:	f04f 0200 	mov.w	r2, #0
 800a946:	4b10      	ldr	r3, [pc, #64]	@ (800a988 <can1_ams_s03_voltages_2_s03v09_encode+0x50>)
 800a948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a94c:	f7f5 fc40 	bl	80001d0 <__aeabi_dsub>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4610      	mov	r0, r2
 800a956:	4619      	mov	r1, r3
 800a958:	a309      	add	r3, pc, #36	@ (adr r3, 800a980 <can1_ams_s03_voltages_2_s03v09_encode+0x48>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	f7f5 ff19 	bl	8000794 <__aeabi_ddiv>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4610      	mov	r0, r2
 800a968:	4619      	mov	r1, r3
 800a96a:	f7f6 f8ab 	bl	8000ac4 <__aeabi_d2uiz>
 800a96e:	4603      	mov	r3, r0
 800a970:	b2db      	uxtb	r3, r3
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	f3af 8000 	nop.w
 800a980:	fcce1c58 	.word	0xfcce1c58
 800a984:	3f800e6a 	.word	0x3f800e6a
 800a988:	40040000 	.word	0x40040000
 800a98c:	00000000 	.word	0x00000000

0800a990 <can1_ams_s03_voltages_2_s03v10_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v10_encode(double value)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a99a:	f04f 0200 	mov.w	r2, #0
 800a99e:	4b10      	ldr	r3, [pc, #64]	@ (800a9e0 <can1_ams_s03_voltages_2_s03v10_encode+0x50>)
 800a9a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9a4:	f7f5 fc14 	bl	80001d0 <__aeabi_dsub>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	a309      	add	r3, pc, #36	@ (adr r3, 800a9d8 <can1_ams_s03_voltages_2_s03v10_encode+0x48>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f7f5 feed 	bl	8000794 <__aeabi_ddiv>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4610      	mov	r0, r2
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f7f6 f87f 	bl	8000ac4 <__aeabi_d2uiz>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	b2db      	uxtb	r3, r3
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	f3af 8000 	nop.w
 800a9d8:	fcce1c58 	.word	0xfcce1c58
 800a9dc:	3f800e6a 	.word	0x3f800e6a
 800a9e0:	40040000 	.word	0x40040000
 800a9e4:	00000000 	.word	0x00000000

0800a9e8 <can1_ams_s03_voltages_2_s03v11_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v11_encode(double value)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800a9f2:	f04f 0200 	mov.w	r2, #0
 800a9f6:	4b10      	ldr	r3, [pc, #64]	@ (800aa38 <can1_ams_s03_voltages_2_s03v11_encode+0x50>)
 800a9f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9fc:	f7f5 fbe8 	bl	80001d0 <__aeabi_dsub>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4610      	mov	r0, r2
 800aa06:	4619      	mov	r1, r3
 800aa08:	a309      	add	r3, pc, #36	@ (adr r3, 800aa30 <can1_ams_s03_voltages_2_s03v11_encode+0x48>)
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f7f5 fec1 	bl	8000794 <__aeabi_ddiv>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4610      	mov	r0, r2
 800aa18:	4619      	mov	r1, r3
 800aa1a:	f7f6 f853 	bl	8000ac4 <__aeabi_d2uiz>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	b2db      	uxtb	r3, r3
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w
 800aa30:	fcce1c58 	.word	0xfcce1c58
 800aa34:	3f800e6a 	.word	0x3f800e6a
 800aa38:	40040000 	.word	0x40040000

0800aa3c <can1_ams_s04_voltages_1_pack>:

int can1_ams_s04_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s04_voltages_1_t *src_p,
    size_t size)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b05      	cmp	r3, #5
 800aa4c:	d802      	bhi.n	800aa54 <can1_ams_s04_voltages_1_pack+0x18>
        return (-EINVAL);
 800aa4e:	f06f 0315 	mvn.w	r3, #21
 800aa52:	e069      	b.n	800ab28 <can1_ams_s04_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800aa54:	2206      	movs	r2, #6
 800aa56:	2100      	movs	r1, #0
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f005 fe15 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s04v01, 0u, 0xffu);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	22ff      	movs	r2, #255	@ 0xff
 800aa64:	2100      	movs	r1, #0
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fcc8 	bl	80093fc <pack_left_shift_u8>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	461a      	mov	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s04v02, 0u, 0xffu);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	785b      	ldrb	r3, [r3, #1]
 800aa80:	22ff      	movs	r2, #255	@ 0xff
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fcb9 	bl	80093fc <pack_left_shift_u8>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3301      	adds	r3, #1
 800aa92:	781a      	ldrb	r2, [r3, #0]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3301      	adds	r3, #1
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	b2d2      	uxtb	r2, r2
 800aa9c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s04v03, 0u, 0xffu);
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	789b      	ldrb	r3, [r3, #2]
 800aaa2:	22ff      	movs	r2, #255	@ 0xff
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fca8 	bl	80093fc <pack_left_shift_u8>
 800aaac:	4603      	mov	r3, r0
 800aaae:	4619      	mov	r1, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3302      	adds	r3, #2
 800aab4:	781a      	ldrb	r2, [r3, #0]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3302      	adds	r3, #2
 800aaba:	430a      	orrs	r2, r1
 800aabc:	b2d2      	uxtb	r2, r2
 800aabe:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s04v04, 0u, 0xffu);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	78db      	ldrb	r3, [r3, #3]
 800aac4:	22ff      	movs	r2, #255	@ 0xff
 800aac6:	2100      	movs	r1, #0
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fe fc97 	bl	80093fc <pack_left_shift_u8>
 800aace:	4603      	mov	r3, r0
 800aad0:	4619      	mov	r1, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3303      	adds	r3, #3
 800aad6:	781a      	ldrb	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3303      	adds	r3, #3
 800aadc:	430a      	orrs	r2, r1
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s04v05, 0u, 0xffu);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	791b      	ldrb	r3, [r3, #4]
 800aae6:	22ff      	movs	r2, #255	@ 0xff
 800aae8:	2100      	movs	r1, #0
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fc86 	bl	80093fc <pack_left_shift_u8>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	781a      	ldrb	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3304      	adds	r3, #4
 800aafe:	430a      	orrs	r2, r1
 800ab00:	b2d2      	uxtb	r2, r2
 800ab02:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s04v06, 0u, 0xffu);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	795b      	ldrb	r3, [r3, #5]
 800ab08:	22ff      	movs	r2, #255	@ 0xff
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fc75 	bl	80093fc <pack_left_shift_u8>
 800ab12:	4603      	mov	r3, r0
 800ab14:	4619      	mov	r1, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3305      	adds	r3, #5
 800ab1a:	781a      	ldrb	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3305      	adds	r3, #5
 800ab20:	430a      	orrs	r2, r1
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	701a      	strb	r2, [r3, #0]

    return (6);
 800ab26:	2306      	movs	r3, #6
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <can1_ams_s04_voltages_1_s04v01_encode>:

    return 0;
}

uint8_t can1_ams_s04_voltages_1_s04v01_encode(double value)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ab3a:	f04f 0200 	mov.w	r2, #0
 800ab3e:	4b10      	ldr	r3, [pc, #64]	@ (800ab80 <can1_ams_s04_voltages_1_s04v01_encode+0x50>)
 800ab40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab44:	f7f5 fb44 	bl	80001d0 <__aeabi_dsub>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	4619      	mov	r1, r3
 800ab50:	a309      	add	r3, pc, #36	@ (adr r3, 800ab78 <can1_ams_s04_voltages_1_s04v01_encode+0x48>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f7f5 fe1d 	bl	8000794 <__aeabi_ddiv>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4610      	mov	r0, r2
 800ab60:	4619      	mov	r1, r3
 800ab62:	f7f5 ffaf 	bl	8000ac4 <__aeabi_d2uiz>
 800ab66:	4603      	mov	r3, r0
 800ab68:	b2db      	uxtb	r3, r3
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	f3af 8000 	nop.w
 800ab78:	fcce1c58 	.word	0xfcce1c58
 800ab7c:	3f800e6a 	.word	0x3f800e6a
 800ab80:	40040000 	.word	0x40040000
 800ab84:	00000000 	.word	0x00000000

0800ab88 <can1_ams_s04_voltages_1_s04v02_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v02_encode(double value)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ab92:	f04f 0200 	mov.w	r2, #0
 800ab96:	4b10      	ldr	r3, [pc, #64]	@ (800abd8 <can1_ams_s04_voltages_1_s04v02_encode+0x50>)
 800ab98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab9c:	f7f5 fb18 	bl	80001d0 <__aeabi_dsub>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4610      	mov	r0, r2
 800aba6:	4619      	mov	r1, r3
 800aba8:	a309      	add	r3, pc, #36	@ (adr r3, 800abd0 <can1_ams_s04_voltages_1_s04v02_encode+0x48>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f7f5 fdf1 	bl	8000794 <__aeabi_ddiv>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	4610      	mov	r0, r2
 800abb8:	4619      	mov	r1, r3
 800abba:	f7f5 ff83 	bl	8000ac4 <__aeabi_d2uiz>
 800abbe:	4603      	mov	r3, r0
 800abc0:	b2db      	uxtb	r3, r3
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w
 800abd0:	fcce1c58 	.word	0xfcce1c58
 800abd4:	3f800e6a 	.word	0x3f800e6a
 800abd8:	40040000 	.word	0x40040000
 800abdc:	00000000 	.word	0x00000000

0800abe0 <can1_ams_s04_voltages_1_s04v03_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v03_encode(double value)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800abea:	f04f 0200 	mov.w	r2, #0
 800abee:	4b10      	ldr	r3, [pc, #64]	@ (800ac30 <can1_ams_s04_voltages_1_s04v03_encode+0x50>)
 800abf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abf4:	f7f5 faec 	bl	80001d0 <__aeabi_dsub>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4610      	mov	r0, r2
 800abfe:	4619      	mov	r1, r3
 800ac00:	a309      	add	r3, pc, #36	@ (adr r3, 800ac28 <can1_ams_s04_voltages_1_s04v03_encode+0x48>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 fdc5 	bl	8000794 <__aeabi_ddiv>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4610      	mov	r0, r2
 800ac10:	4619      	mov	r1, r3
 800ac12:	f7f5 ff57 	bl	8000ac4 <__aeabi_d2uiz>
 800ac16:	4603      	mov	r3, r0
 800ac18:	b2db      	uxtb	r3, r3
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	f3af 8000 	nop.w
 800ac28:	fcce1c58 	.word	0xfcce1c58
 800ac2c:	3f800e6a 	.word	0x3f800e6a
 800ac30:	40040000 	.word	0x40040000
 800ac34:	00000000 	.word	0x00000000

0800ac38 <can1_ams_s04_voltages_1_s04v04_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v04_encode(double value)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ac42:	f04f 0200 	mov.w	r2, #0
 800ac46:	4b10      	ldr	r3, [pc, #64]	@ (800ac88 <can1_ams_s04_voltages_1_s04v04_encode+0x50>)
 800ac48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac4c:	f7f5 fac0 	bl	80001d0 <__aeabi_dsub>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4610      	mov	r0, r2
 800ac56:	4619      	mov	r1, r3
 800ac58:	a309      	add	r3, pc, #36	@ (adr r3, 800ac80 <can1_ams_s04_voltages_1_s04v04_encode+0x48>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f7f5 fd99 	bl	8000794 <__aeabi_ddiv>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4610      	mov	r0, r2
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f7f5 ff2b 	bl	8000ac4 <__aeabi_d2uiz>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	b2db      	uxtb	r3, r3
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	f3af 8000 	nop.w
 800ac80:	fcce1c58 	.word	0xfcce1c58
 800ac84:	3f800e6a 	.word	0x3f800e6a
 800ac88:	40040000 	.word	0x40040000
 800ac8c:	00000000 	.word	0x00000000

0800ac90 <can1_ams_s04_voltages_1_s04v05_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v05_encode(double value)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	4b10      	ldr	r3, [pc, #64]	@ (800ace0 <can1_ams_s04_voltages_1_s04v05_encode+0x50>)
 800aca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aca4:	f7f5 fa94 	bl	80001d0 <__aeabi_dsub>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4610      	mov	r0, r2
 800acae:	4619      	mov	r1, r3
 800acb0:	a309      	add	r3, pc, #36	@ (adr r3, 800acd8 <can1_ams_s04_voltages_1_s04v05_encode+0x48>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 fd6d 	bl	8000794 <__aeabi_ddiv>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4610      	mov	r0, r2
 800acc0:	4619      	mov	r1, r3
 800acc2:	f7f5 feff 	bl	8000ac4 <__aeabi_d2uiz>
 800acc6:	4603      	mov	r3, r0
 800acc8:	b2db      	uxtb	r3, r3
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	f3af 8000 	nop.w
 800acd8:	fcce1c58 	.word	0xfcce1c58
 800acdc:	3f800e6a 	.word	0x3f800e6a
 800ace0:	40040000 	.word	0x40040000
 800ace4:	00000000 	.word	0x00000000

0800ace8 <can1_ams_s04_voltages_1_s04v06_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v06_encode(double value)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800acf2:	f04f 0200 	mov.w	r2, #0
 800acf6:	4b10      	ldr	r3, [pc, #64]	@ (800ad38 <can1_ams_s04_voltages_1_s04v06_encode+0x50>)
 800acf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acfc:	f7f5 fa68 	bl	80001d0 <__aeabi_dsub>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4610      	mov	r0, r2
 800ad06:	4619      	mov	r1, r3
 800ad08:	a309      	add	r3, pc, #36	@ (adr r3, 800ad30 <can1_ams_s04_voltages_1_s04v06_encode+0x48>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f7f5 fd41 	bl	8000794 <__aeabi_ddiv>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	4610      	mov	r0, r2
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f7f5 fed3 	bl	8000ac4 <__aeabi_d2uiz>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	b2db      	uxtb	r3, r3
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	f3af 8000 	nop.w
 800ad30:	fcce1c58 	.word	0xfcce1c58
 800ad34:	3f800e6a 	.word	0x3f800e6a
 800ad38:	40040000 	.word	0x40040000

0800ad3c <can1_ams_s04_voltages_2_pack>:

int can1_ams_s04_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s04_voltages_2_t *src_p,
    size_t size)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	d802      	bhi.n	800ad54 <can1_ams_s04_voltages_2_pack+0x18>
        return (-EINVAL);
 800ad4e:	f06f 0315 	mvn.w	r3, #21
 800ad52:	e058      	b.n	800ae06 <can1_ams_s04_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800ad54:	2205      	movs	r2, #5
 800ad56:	2100      	movs	r1, #0
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f005 fc95 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s04v07, 0u, 0xffu);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	22ff      	movs	r2, #255	@ 0xff
 800ad64:	2100      	movs	r1, #0
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fb48 	bl	80093fc <pack_left_shift_u8>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s04v08, 0u, 0xffu);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	785b      	ldrb	r3, [r3, #1]
 800ad80:	22ff      	movs	r2, #255	@ 0xff
 800ad82:	2100      	movs	r1, #0
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fe fb39 	bl	80093fc <pack_left_shift_u8>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3301      	adds	r3, #1
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	3301      	adds	r3, #1
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s04v09, 0u, 0xffu);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	789b      	ldrb	r3, [r3, #2]
 800ada2:	22ff      	movs	r2, #255	@ 0xff
 800ada4:	2100      	movs	r1, #0
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe fb28 	bl	80093fc <pack_left_shift_u8>
 800adac:	4603      	mov	r3, r0
 800adae:	4619      	mov	r1, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	3302      	adds	r3, #2
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3302      	adds	r3, #2
 800adba:	430a      	orrs	r2, r1
 800adbc:	b2d2      	uxtb	r2, r2
 800adbe:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s04v10, 0u, 0xffu);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	78db      	ldrb	r3, [r3, #3]
 800adc4:	22ff      	movs	r2, #255	@ 0xff
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fe fb17 	bl	80093fc <pack_left_shift_u8>
 800adce:	4603      	mov	r3, r0
 800add0:	4619      	mov	r1, r3
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3303      	adds	r3, #3
 800add6:	781a      	ldrb	r2, [r3, #0]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3303      	adds	r3, #3
 800addc:	430a      	orrs	r2, r1
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s04v11, 0u, 0xffu);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	791b      	ldrb	r3, [r3, #4]
 800ade6:	22ff      	movs	r2, #255	@ 0xff
 800ade8:	2100      	movs	r1, #0
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fb06 	bl	80093fc <pack_left_shift_u8>
 800adf0:	4603      	mov	r3, r0
 800adf2:	4619      	mov	r1, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3304      	adds	r3, #4
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3304      	adds	r3, #4
 800adfe:	430a      	orrs	r2, r1
 800ae00:	b2d2      	uxtb	r2, r2
 800ae02:	701a      	strb	r2, [r3, #0]

    return (5);
 800ae04:	2305      	movs	r3, #5
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <can1_ams_s04_voltages_2_s04v07_encode>:

    return 0;
}

uint8_t can1_ams_s04_voltages_2_s04v07_encode(double value)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ae1a:	f04f 0200 	mov.w	r2, #0
 800ae1e:	4b10      	ldr	r3, [pc, #64]	@ (800ae60 <can1_ams_s04_voltages_2_s04v07_encode+0x50>)
 800ae20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae24:	f7f5 f9d4 	bl	80001d0 <__aeabi_dsub>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	4619      	mov	r1, r3
 800ae30:	a309      	add	r3, pc, #36	@ (adr r3, 800ae58 <can1_ams_s04_voltages_2_s04v07_encode+0x48>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f7f5 fcad 	bl	8000794 <__aeabi_ddiv>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4610      	mov	r0, r2
 800ae40:	4619      	mov	r1, r3
 800ae42:	f7f5 fe3f 	bl	8000ac4 <__aeabi_d2uiz>
 800ae46:	4603      	mov	r3, r0
 800ae48:	b2db      	uxtb	r3, r3
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	f3af 8000 	nop.w
 800ae58:	fcce1c58 	.word	0xfcce1c58
 800ae5c:	3f800e6a 	.word	0x3f800e6a
 800ae60:	40040000 	.word	0x40040000
 800ae64:	00000000 	.word	0x00000000

0800ae68 <can1_ams_s04_voltages_2_s04v08_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v08_encode(double value)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ae72:	f04f 0200 	mov.w	r2, #0
 800ae76:	4b10      	ldr	r3, [pc, #64]	@ (800aeb8 <can1_ams_s04_voltages_2_s04v08_encode+0x50>)
 800ae78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae7c:	f7f5 f9a8 	bl	80001d0 <__aeabi_dsub>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4610      	mov	r0, r2
 800ae86:	4619      	mov	r1, r3
 800ae88:	a309      	add	r3, pc, #36	@ (adr r3, 800aeb0 <can1_ams_s04_voltages_2_s04v08_encode+0x48>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fc81 	bl	8000794 <__aeabi_ddiv>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4610      	mov	r0, r2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f7f5 fe13 	bl	8000ac4 <__aeabi_d2uiz>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	b2db      	uxtb	r3, r3
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	f3af 8000 	nop.w
 800aeb0:	fcce1c58 	.word	0xfcce1c58
 800aeb4:	3f800e6a 	.word	0x3f800e6a
 800aeb8:	40040000 	.word	0x40040000
 800aebc:	00000000 	.word	0x00000000

0800aec0 <can1_ams_s04_voltages_2_s04v09_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v09_encode(double value)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800aeca:	f04f 0200 	mov.w	r2, #0
 800aece:	4b10      	ldr	r3, [pc, #64]	@ (800af10 <can1_ams_s04_voltages_2_s04v09_encode+0x50>)
 800aed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aed4:	f7f5 f97c 	bl	80001d0 <__aeabi_dsub>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4610      	mov	r0, r2
 800aede:	4619      	mov	r1, r3
 800aee0:	a309      	add	r3, pc, #36	@ (adr r3, 800af08 <can1_ams_s04_voltages_2_s04v09_encode+0x48>)
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	f7f5 fc55 	bl	8000794 <__aeabi_ddiv>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4610      	mov	r0, r2
 800aef0:	4619      	mov	r1, r3
 800aef2:	f7f5 fde7 	bl	8000ac4 <__aeabi_d2uiz>
 800aef6:	4603      	mov	r3, r0
 800aef8:	b2db      	uxtb	r3, r3
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	f3af 8000 	nop.w
 800af08:	fcce1c58 	.word	0xfcce1c58
 800af0c:	3f800e6a 	.word	0x3f800e6a
 800af10:	40040000 	.word	0x40040000
 800af14:	00000000 	.word	0x00000000

0800af18 <can1_ams_s04_voltages_2_s04v10_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v10_encode(double value)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800af22:	f04f 0200 	mov.w	r2, #0
 800af26:	4b10      	ldr	r3, [pc, #64]	@ (800af68 <can1_ams_s04_voltages_2_s04v10_encode+0x50>)
 800af28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af2c:	f7f5 f950 	bl	80001d0 <__aeabi_dsub>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4610      	mov	r0, r2
 800af36:	4619      	mov	r1, r3
 800af38:	a309      	add	r3, pc, #36	@ (adr r3, 800af60 <can1_ams_s04_voltages_2_s04v10_encode+0x48>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	f7f5 fc29 	bl	8000794 <__aeabi_ddiv>
 800af42:	4602      	mov	r2, r0
 800af44:	460b      	mov	r3, r1
 800af46:	4610      	mov	r0, r2
 800af48:	4619      	mov	r1, r3
 800af4a:	f7f5 fdbb 	bl	8000ac4 <__aeabi_d2uiz>
 800af4e:	4603      	mov	r3, r0
 800af50:	b2db      	uxtb	r3, r3
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	f3af 8000 	nop.w
 800af60:	fcce1c58 	.word	0xfcce1c58
 800af64:	3f800e6a 	.word	0x3f800e6a
 800af68:	40040000 	.word	0x40040000

0800af6c <can1_ams_s05_voltages_1_pack>:

int can1_ams_s05_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s05_voltages_1_t *src_p,
    size_t size)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b05      	cmp	r3, #5
 800af7c:	d802      	bhi.n	800af84 <can1_ams_s05_voltages_1_pack+0x18>
        return (-EINVAL);
 800af7e:	f06f 0315 	mvn.w	r3, #21
 800af82:	e069      	b.n	800b058 <can1_ams_s05_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800af84:	2206      	movs	r2, #6
 800af86:	2100      	movs	r1, #0
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f005 fb7d 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s05v01, 0u, 0xffu);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	22ff      	movs	r2, #255	@ 0xff
 800af94:	2100      	movs	r1, #0
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fa30 	bl	80093fc <pack_left_shift_u8>
 800af9c:	4603      	mov	r3, r0
 800af9e:	461a      	mov	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s05v02, 0u, 0xffu);
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	22ff      	movs	r2, #255	@ 0xff
 800afb2:	2100      	movs	r1, #0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fe fa21 	bl	80093fc <pack_left_shift_u8>
 800afba:	4603      	mov	r3, r0
 800afbc:	4619      	mov	r1, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3301      	adds	r3, #1
 800afc2:	781a      	ldrb	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3301      	adds	r3, #1
 800afc8:	430a      	orrs	r2, r1
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s05v03, 0u, 0xffu);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	789b      	ldrb	r3, [r3, #2]
 800afd2:	22ff      	movs	r2, #255	@ 0xff
 800afd4:	2100      	movs	r1, #0
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe fa10 	bl	80093fc <pack_left_shift_u8>
 800afdc:	4603      	mov	r3, r0
 800afde:	4619      	mov	r1, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3302      	adds	r3, #2
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3302      	adds	r3, #2
 800afea:	430a      	orrs	r2, r1
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s05v04, 0u, 0xffu);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	78db      	ldrb	r3, [r3, #3]
 800aff4:	22ff      	movs	r2, #255	@ 0xff
 800aff6:	2100      	movs	r1, #0
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe f9ff 	bl	80093fc <pack_left_shift_u8>
 800affe:	4603      	mov	r3, r0
 800b000:	4619      	mov	r1, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3303      	adds	r3, #3
 800b006:	781a      	ldrb	r2, [r3, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3303      	adds	r3, #3
 800b00c:	430a      	orrs	r2, r1
 800b00e:	b2d2      	uxtb	r2, r2
 800b010:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s05v05, 0u, 0xffu);
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	791b      	ldrb	r3, [r3, #4]
 800b016:	22ff      	movs	r2, #255	@ 0xff
 800b018:	2100      	movs	r1, #0
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe f9ee 	bl	80093fc <pack_left_shift_u8>
 800b020:	4603      	mov	r3, r0
 800b022:	4619      	mov	r1, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3304      	adds	r3, #4
 800b028:	781a      	ldrb	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3304      	adds	r3, #4
 800b02e:	430a      	orrs	r2, r1
 800b030:	b2d2      	uxtb	r2, r2
 800b032:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s05v06, 0u, 0xffu);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	795b      	ldrb	r3, [r3, #5]
 800b038:	22ff      	movs	r2, #255	@ 0xff
 800b03a:	2100      	movs	r1, #0
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fe f9dd 	bl	80093fc <pack_left_shift_u8>
 800b042:	4603      	mov	r3, r0
 800b044:	4619      	mov	r1, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	3305      	adds	r3, #5
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3305      	adds	r3, #5
 800b050:	430a      	orrs	r2, r1
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	701a      	strb	r2, [r3, #0]

    return (6);
 800b056:	2306      	movs	r3, #6
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <can1_ams_s05_voltages_1_s05v01_encode>:

    return 0;
}

uint8_t can1_ams_s05_voltages_1_s05v01_encode(double value)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b06a:	f04f 0200 	mov.w	r2, #0
 800b06e:	4b10      	ldr	r3, [pc, #64]	@ (800b0b0 <can1_ams_s05_voltages_1_s05v01_encode+0x50>)
 800b070:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b074:	f7f5 f8ac 	bl	80001d0 <__aeabi_dsub>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4610      	mov	r0, r2
 800b07e:	4619      	mov	r1, r3
 800b080:	a309      	add	r3, pc, #36	@ (adr r3, 800b0a8 <can1_ams_s05_voltages_1_s05v01_encode+0x48>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 fb85 	bl	8000794 <__aeabi_ddiv>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4610      	mov	r0, r2
 800b090:	4619      	mov	r1, r3
 800b092:	f7f5 fd17 	bl	8000ac4 <__aeabi_d2uiz>
 800b096:	4603      	mov	r3, r0
 800b098:	b2db      	uxtb	r3, r3
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	f3af 8000 	nop.w
 800b0a8:	fcce1c58 	.word	0xfcce1c58
 800b0ac:	3f800e6a 	.word	0x3f800e6a
 800b0b0:	40040000 	.word	0x40040000
 800b0b4:	00000000 	.word	0x00000000

0800b0b8 <can1_ams_s05_voltages_1_s05v02_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v02_encode(double value)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b0c2:	f04f 0200 	mov.w	r2, #0
 800b0c6:	4b10      	ldr	r3, [pc, #64]	@ (800b108 <can1_ams_s05_voltages_1_s05v02_encode+0x50>)
 800b0c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0cc:	f7f5 f880 	bl	80001d0 <__aeabi_dsub>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	a309      	add	r3, pc, #36	@ (adr r3, 800b100 <can1_ams_s05_voltages_1_s05v02_encode+0x48>)
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	f7f5 fb59 	bl	8000794 <__aeabi_ddiv>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	f7f5 fceb 	bl	8000ac4 <__aeabi_d2uiz>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	b2db      	uxtb	r3, r3
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	f3af 8000 	nop.w
 800b100:	fcce1c58 	.word	0xfcce1c58
 800b104:	3f800e6a 	.word	0x3f800e6a
 800b108:	40040000 	.word	0x40040000
 800b10c:	00000000 	.word	0x00000000

0800b110 <can1_ams_s05_voltages_1_s05v03_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v03_encode(double value)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	4b10      	ldr	r3, [pc, #64]	@ (800b160 <can1_ams_s05_voltages_1_s05v03_encode+0x50>)
 800b120:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b124:	f7f5 f854 	bl	80001d0 <__aeabi_dsub>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	4610      	mov	r0, r2
 800b12e:	4619      	mov	r1, r3
 800b130:	a309      	add	r3, pc, #36	@ (adr r3, 800b158 <can1_ams_s05_voltages_1_s05v03_encode+0x48>)
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	f7f5 fb2d 	bl	8000794 <__aeabi_ddiv>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4610      	mov	r0, r2
 800b140:	4619      	mov	r1, r3
 800b142:	f7f5 fcbf 	bl	8000ac4 <__aeabi_d2uiz>
 800b146:	4603      	mov	r3, r0
 800b148:	b2db      	uxtb	r3, r3
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	f3af 8000 	nop.w
 800b158:	fcce1c58 	.word	0xfcce1c58
 800b15c:	3f800e6a 	.word	0x3f800e6a
 800b160:	40040000 	.word	0x40040000
 800b164:	00000000 	.word	0x00000000

0800b168 <can1_ams_s05_voltages_1_s05v04_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v04_encode(double value)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b172:	f04f 0200 	mov.w	r2, #0
 800b176:	4b10      	ldr	r3, [pc, #64]	@ (800b1b8 <can1_ams_s05_voltages_1_s05v04_encode+0x50>)
 800b178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b17c:	f7f5 f828 	bl	80001d0 <__aeabi_dsub>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4610      	mov	r0, r2
 800b186:	4619      	mov	r1, r3
 800b188:	a309      	add	r3, pc, #36	@ (adr r3, 800b1b0 <can1_ams_s05_voltages_1_s05v04_encode+0x48>)
 800b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18e:	f7f5 fb01 	bl	8000794 <__aeabi_ddiv>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	4610      	mov	r0, r2
 800b198:	4619      	mov	r1, r3
 800b19a:	f7f5 fc93 	bl	8000ac4 <__aeabi_d2uiz>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	b2db      	uxtb	r3, r3
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	f3af 8000 	nop.w
 800b1b0:	fcce1c58 	.word	0xfcce1c58
 800b1b4:	3f800e6a 	.word	0x3f800e6a
 800b1b8:	40040000 	.word	0x40040000
 800b1bc:	00000000 	.word	0x00000000

0800b1c0 <can1_ams_s05_voltages_1_s05v05_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v05_encode(double value)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b1ca:	f04f 0200 	mov.w	r2, #0
 800b1ce:	4b10      	ldr	r3, [pc, #64]	@ (800b210 <can1_ams_s05_voltages_1_s05v05_encode+0x50>)
 800b1d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1d4:	f7f4 fffc 	bl	80001d0 <__aeabi_dsub>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4610      	mov	r0, r2
 800b1de:	4619      	mov	r1, r3
 800b1e0:	a309      	add	r3, pc, #36	@ (adr r3, 800b208 <can1_ams_s05_voltages_1_s05v05_encode+0x48>)
 800b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e6:	f7f5 fad5 	bl	8000794 <__aeabi_ddiv>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	f7f5 fc67 	bl	8000ac4 <__aeabi_d2uiz>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	b2db      	uxtb	r3, r3
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	fcce1c58 	.word	0xfcce1c58
 800b20c:	3f800e6a 	.word	0x3f800e6a
 800b210:	40040000 	.word	0x40040000
 800b214:	00000000 	.word	0x00000000

0800b218 <can1_ams_s05_voltages_1_s05v06_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v06_encode(double value)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b222:	f04f 0200 	mov.w	r2, #0
 800b226:	4b10      	ldr	r3, [pc, #64]	@ (800b268 <can1_ams_s05_voltages_1_s05v06_encode+0x50>)
 800b228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b22c:	f7f4 ffd0 	bl	80001d0 <__aeabi_dsub>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4610      	mov	r0, r2
 800b236:	4619      	mov	r1, r3
 800b238:	a309      	add	r3, pc, #36	@ (adr r3, 800b260 <can1_ams_s05_voltages_1_s05v06_encode+0x48>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	f7f5 faa9 	bl	8000794 <__aeabi_ddiv>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4610      	mov	r0, r2
 800b248:	4619      	mov	r1, r3
 800b24a:	f7f5 fc3b 	bl	8000ac4 <__aeabi_d2uiz>
 800b24e:	4603      	mov	r3, r0
 800b250:	b2db      	uxtb	r3, r3
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	f3af 8000 	nop.w
 800b260:	fcce1c58 	.word	0xfcce1c58
 800b264:	3f800e6a 	.word	0x3f800e6a
 800b268:	40040000 	.word	0x40040000

0800b26c <can1_ams_s05_voltages_2_pack>:

int can1_ams_s05_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s05_voltages_2_t *src_p,
    size_t size)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b04      	cmp	r3, #4
 800b27c:	d802      	bhi.n	800b284 <can1_ams_s05_voltages_2_pack+0x18>
        return (-EINVAL);
 800b27e:	f06f 0315 	mvn.w	r3, #21
 800b282:	e058      	b.n	800b336 <can1_ams_s05_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800b284:	2205      	movs	r2, #5
 800b286:	2100      	movs	r1, #0
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f005 f9fd 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s05v07, 0u, 0xffu);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	22ff      	movs	r2, #255	@ 0xff
 800b294:	2100      	movs	r1, #0
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe f8b0 	bl	80093fc <pack_left_shift_u8>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s05v08, 0u, 0xffu);
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	785b      	ldrb	r3, [r3, #1]
 800b2b0:	22ff      	movs	r2, #255	@ 0xff
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fe f8a1 	bl	80093fc <pack_left_shift_u8>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	4619      	mov	r1, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	781a      	ldrb	r2, [r3, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	b2d2      	uxtb	r2, r2
 800b2cc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s05v09, 0u, 0xffu);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	789b      	ldrb	r3, [r3, #2]
 800b2d2:	22ff      	movs	r2, #255	@ 0xff
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe f890 	bl	80093fc <pack_left_shift_u8>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3302      	adds	r3, #2
 800b2e4:	781a      	ldrb	r2, [r3, #0]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3302      	adds	r3, #2
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	b2d2      	uxtb	r2, r2
 800b2ee:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s05v10, 0u, 0xffu);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	78db      	ldrb	r3, [r3, #3]
 800b2f4:	22ff      	movs	r2, #255	@ 0xff
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fe f87f 	bl	80093fc <pack_left_shift_u8>
 800b2fe:	4603      	mov	r3, r0
 800b300:	4619      	mov	r1, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3303      	adds	r3, #3
 800b306:	781a      	ldrb	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3303      	adds	r3, #3
 800b30c:	430a      	orrs	r2, r1
 800b30e:	b2d2      	uxtb	r2, r2
 800b310:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s05v11, 0u, 0xffu);
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	791b      	ldrb	r3, [r3, #4]
 800b316:	22ff      	movs	r2, #255	@ 0xff
 800b318:	2100      	movs	r1, #0
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe f86e 	bl	80093fc <pack_left_shift_u8>
 800b320:	4603      	mov	r3, r0
 800b322:	4619      	mov	r1, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3304      	adds	r3, #4
 800b328:	781a      	ldrb	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3304      	adds	r3, #4
 800b32e:	430a      	orrs	r2, r1
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	701a      	strb	r2, [r3, #0]

    return (5);
 800b334:	2305      	movs	r3, #5
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <can1_ams_s05_voltages_2_s05v07_encode>:

    return 0;
}

uint8_t can1_ams_s05_voltages_2_s05v07_encode(double value)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b34a:	f04f 0200 	mov.w	r2, #0
 800b34e:	4b10      	ldr	r3, [pc, #64]	@ (800b390 <can1_ams_s05_voltages_2_s05v07_encode+0x50>)
 800b350:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b354:	f7f4 ff3c 	bl	80001d0 <__aeabi_dsub>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4610      	mov	r0, r2
 800b35e:	4619      	mov	r1, r3
 800b360:	a309      	add	r3, pc, #36	@ (adr r3, 800b388 <can1_ams_s05_voltages_2_s05v07_encode+0x48>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f5 fa15 	bl	8000794 <__aeabi_ddiv>
 800b36a:	4602      	mov	r2, r0
 800b36c:	460b      	mov	r3, r1
 800b36e:	4610      	mov	r0, r2
 800b370:	4619      	mov	r1, r3
 800b372:	f7f5 fba7 	bl	8000ac4 <__aeabi_d2uiz>
 800b376:	4603      	mov	r3, r0
 800b378:	b2db      	uxtb	r3, r3
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	f3af 8000 	nop.w
 800b388:	fcce1c58 	.word	0xfcce1c58
 800b38c:	3f800e6a 	.word	0x3f800e6a
 800b390:	40040000 	.word	0x40040000
 800b394:	00000000 	.word	0x00000000

0800b398 <can1_ams_s05_voltages_2_s05v08_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v08_encode(double value)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b3a2:	f04f 0200 	mov.w	r2, #0
 800b3a6:	4b10      	ldr	r3, [pc, #64]	@ (800b3e8 <can1_ams_s05_voltages_2_s05v08_encode+0x50>)
 800b3a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3ac:	f7f4 ff10 	bl	80001d0 <__aeabi_dsub>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	a309      	add	r3, pc, #36	@ (adr r3, 800b3e0 <can1_ams_s05_voltages_2_s05v08_encode+0x48>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f5 f9e9 	bl	8000794 <__aeabi_ddiv>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	f7f5 fb7b 	bl	8000ac4 <__aeabi_d2uiz>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	b2db      	uxtb	r3, r3
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	f3af 8000 	nop.w
 800b3e0:	fcce1c58 	.word	0xfcce1c58
 800b3e4:	3f800e6a 	.word	0x3f800e6a
 800b3e8:	40040000 	.word	0x40040000
 800b3ec:	00000000 	.word	0x00000000

0800b3f0 <can1_ams_s05_voltages_2_s05v09_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v09_encode(double value)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b3fa:	f04f 0200 	mov.w	r2, #0
 800b3fe:	4b10      	ldr	r3, [pc, #64]	@ (800b440 <can1_ams_s05_voltages_2_s05v09_encode+0x50>)
 800b400:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b404:	f7f4 fee4 	bl	80001d0 <__aeabi_dsub>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4610      	mov	r0, r2
 800b40e:	4619      	mov	r1, r3
 800b410:	a309      	add	r3, pc, #36	@ (adr r3, 800b438 <can1_ams_s05_voltages_2_s05v09_encode+0x48>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f5 f9bd 	bl	8000794 <__aeabi_ddiv>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4610      	mov	r0, r2
 800b420:	4619      	mov	r1, r3
 800b422:	f7f5 fb4f 	bl	8000ac4 <__aeabi_d2uiz>
 800b426:	4603      	mov	r3, r0
 800b428:	b2db      	uxtb	r3, r3
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	f3af 8000 	nop.w
 800b438:	fcce1c58 	.word	0xfcce1c58
 800b43c:	3f800e6a 	.word	0x3f800e6a
 800b440:	40040000 	.word	0x40040000
 800b444:	00000000 	.word	0x00000000

0800b448 <can1_ams_s05_voltages_2_s05v10_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v10_encode(double value)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b452:	f04f 0200 	mov.w	r2, #0
 800b456:	4b10      	ldr	r3, [pc, #64]	@ (800b498 <can1_ams_s05_voltages_2_s05v10_encode+0x50>)
 800b458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b45c:	f7f4 feb8 	bl	80001d0 <__aeabi_dsub>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4610      	mov	r0, r2
 800b466:	4619      	mov	r1, r3
 800b468:	a309      	add	r3, pc, #36	@ (adr r3, 800b490 <can1_ams_s05_voltages_2_s05v10_encode+0x48>)
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f7f5 f991 	bl	8000794 <__aeabi_ddiv>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4610      	mov	r0, r2
 800b478:	4619      	mov	r1, r3
 800b47a:	f7f5 fb23 	bl	8000ac4 <__aeabi_d2uiz>
 800b47e:	4603      	mov	r3, r0
 800b480:	b2db      	uxtb	r3, r3
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	f3af 8000 	nop.w
 800b490:	fcce1c58 	.word	0xfcce1c58
 800b494:	3f800e6a 	.word	0x3f800e6a
 800b498:	40040000 	.word	0x40040000
 800b49c:	00000000 	.word	0x00000000

0800b4a0 <can1_ams_s05_voltages_2_s05v11_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v11_encode(double value)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b4aa:	f04f 0200 	mov.w	r2, #0
 800b4ae:	4b10      	ldr	r3, [pc, #64]	@ (800b4f0 <can1_ams_s05_voltages_2_s05v11_encode+0x50>)
 800b4b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4b4:	f7f4 fe8c 	bl	80001d0 <__aeabi_dsub>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4610      	mov	r0, r2
 800b4be:	4619      	mov	r1, r3
 800b4c0:	a309      	add	r3, pc, #36	@ (adr r3, 800b4e8 <can1_ams_s05_voltages_2_s05v11_encode+0x48>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f7f5 f965 	bl	8000794 <__aeabi_ddiv>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	f7f5 faf7 	bl	8000ac4 <__aeabi_d2uiz>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	b2db      	uxtb	r3, r3
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	f3af 8000 	nop.w
 800b4e8:	fcce1c58 	.word	0xfcce1c58
 800b4ec:	3f800e6a 	.word	0x3f800e6a
 800b4f0:	40040000 	.word	0x40040000

0800b4f4 <can1_ams_s06_voltages_1_pack>:

int can1_ams_s06_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s06_voltages_1_t *src_p,
    size_t size)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b05      	cmp	r3, #5
 800b504:	d802      	bhi.n	800b50c <can1_ams_s06_voltages_1_pack+0x18>
        return (-EINVAL);
 800b506:	f06f 0315 	mvn.w	r3, #21
 800b50a:	e069      	b.n	800b5e0 <can1_ams_s06_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800b50c:	2206      	movs	r2, #6
 800b50e:	2100      	movs	r1, #0
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f005 f8b9 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s06v01, 0u, 0xffu);
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	22ff      	movs	r2, #255	@ 0xff
 800b51c:	2100      	movs	r1, #0
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fd ff6c 	bl	80093fc <pack_left_shift_u8>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s06v02, 0u, 0xffu);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	22ff      	movs	r2, #255	@ 0xff
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fd ff5d 	bl	80093fc <pack_left_shift_u8>
 800b542:	4603      	mov	r3, r0
 800b544:	4619      	mov	r1, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3301      	adds	r3, #1
 800b54a:	781a      	ldrb	r2, [r3, #0]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3301      	adds	r3, #1
 800b550:	430a      	orrs	r2, r1
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s06v03, 0u, 0xffu);
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	789b      	ldrb	r3, [r3, #2]
 800b55a:	22ff      	movs	r2, #255	@ 0xff
 800b55c:	2100      	movs	r1, #0
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fd ff4c 	bl	80093fc <pack_left_shift_u8>
 800b564:	4603      	mov	r3, r0
 800b566:	4619      	mov	r1, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	3302      	adds	r3, #2
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3302      	adds	r3, #2
 800b572:	430a      	orrs	r2, r1
 800b574:	b2d2      	uxtb	r2, r2
 800b576:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s06v04, 0u, 0xffu);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	78db      	ldrb	r3, [r3, #3]
 800b57c:	22ff      	movs	r2, #255	@ 0xff
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f7fd ff3b 	bl	80093fc <pack_left_shift_u8>
 800b586:	4603      	mov	r3, r0
 800b588:	4619      	mov	r1, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3303      	adds	r3, #3
 800b58e:	781a      	ldrb	r2, [r3, #0]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3303      	adds	r3, #3
 800b594:	430a      	orrs	r2, r1
 800b596:	b2d2      	uxtb	r2, r2
 800b598:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s06v05, 0u, 0xffu);
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	791b      	ldrb	r3, [r3, #4]
 800b59e:	22ff      	movs	r2, #255	@ 0xff
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fd ff2a 	bl	80093fc <pack_left_shift_u8>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	b2d2      	uxtb	r2, r2
 800b5ba:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s06v06, 0u, 0xffu);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	795b      	ldrb	r3, [r3, #5]
 800b5c0:	22ff      	movs	r2, #255	@ 0xff
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fd ff19 	bl	80093fc <pack_left_shift_u8>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	3305      	adds	r3, #5
 800b5d2:	781a      	ldrb	r2, [r3, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	3305      	adds	r3, #5
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	701a      	strb	r2, [r3, #0]

    return (6);
 800b5de:	2306      	movs	r3, #6
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <can1_ams_s06_voltages_1_s06v01_encode>:

    return 0;
}

uint8_t can1_ams_s06_voltages_1_s06v01_encode(double value)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b5f2:	f04f 0200 	mov.w	r2, #0
 800b5f6:	4b10      	ldr	r3, [pc, #64]	@ (800b638 <can1_ams_s06_voltages_1_s06v01_encode+0x50>)
 800b5f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5fc:	f7f4 fde8 	bl	80001d0 <__aeabi_dsub>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4610      	mov	r0, r2
 800b606:	4619      	mov	r1, r3
 800b608:	a309      	add	r3, pc, #36	@ (adr r3, 800b630 <can1_ams_s06_voltages_1_s06v01_encode+0x48>)
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f7f5 f8c1 	bl	8000794 <__aeabi_ddiv>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4610      	mov	r0, r2
 800b618:	4619      	mov	r1, r3
 800b61a:	f7f5 fa53 	bl	8000ac4 <__aeabi_d2uiz>
 800b61e:	4603      	mov	r3, r0
 800b620:	b2db      	uxtb	r3, r3
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	f3af 8000 	nop.w
 800b630:	fcce1c58 	.word	0xfcce1c58
 800b634:	3f800e6a 	.word	0x3f800e6a
 800b638:	40040000 	.word	0x40040000
 800b63c:	00000000 	.word	0x00000000

0800b640 <can1_ams_s06_voltages_1_s06v02_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v02_encode(double value)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	4b10      	ldr	r3, [pc, #64]	@ (800b690 <can1_ams_s06_voltages_1_s06v02_encode+0x50>)
 800b650:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b654:	f7f4 fdbc 	bl	80001d0 <__aeabi_dsub>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4610      	mov	r0, r2
 800b65e:	4619      	mov	r1, r3
 800b660:	a309      	add	r3, pc, #36	@ (adr r3, 800b688 <can1_ams_s06_voltages_1_s06v02_encode+0x48>)
 800b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b666:	f7f5 f895 	bl	8000794 <__aeabi_ddiv>
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	4610      	mov	r0, r2
 800b670:	4619      	mov	r1, r3
 800b672:	f7f5 fa27 	bl	8000ac4 <__aeabi_d2uiz>
 800b676:	4603      	mov	r3, r0
 800b678:	b2db      	uxtb	r3, r3
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	f3af 8000 	nop.w
 800b688:	fcce1c58 	.word	0xfcce1c58
 800b68c:	3f800e6a 	.word	0x3f800e6a
 800b690:	40040000 	.word	0x40040000
 800b694:	00000000 	.word	0x00000000

0800b698 <can1_ams_s06_voltages_1_s06v03_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v03_encode(double value)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b6a2:	f04f 0200 	mov.w	r2, #0
 800b6a6:	4b10      	ldr	r3, [pc, #64]	@ (800b6e8 <can1_ams_s06_voltages_1_s06v03_encode+0x50>)
 800b6a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b6ac:	f7f4 fd90 	bl	80001d0 <__aeabi_dsub>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	a309      	add	r3, pc, #36	@ (adr r3, 800b6e0 <can1_ams_s06_voltages_1_s06v03_encode+0x48>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f5 f869 	bl	8000794 <__aeabi_ddiv>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	f7f5 f9fb 	bl	8000ac4 <__aeabi_d2uiz>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	b2db      	uxtb	r3, r3
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	f3af 8000 	nop.w
 800b6e0:	fcce1c58 	.word	0xfcce1c58
 800b6e4:	3f800e6a 	.word	0x3f800e6a
 800b6e8:	40040000 	.word	0x40040000
 800b6ec:	00000000 	.word	0x00000000

0800b6f0 <can1_ams_s06_voltages_1_s06v04_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v04_encode(double value)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b6fa:	f04f 0200 	mov.w	r2, #0
 800b6fe:	4b10      	ldr	r3, [pc, #64]	@ (800b740 <can1_ams_s06_voltages_1_s06v04_encode+0x50>)
 800b700:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b704:	f7f4 fd64 	bl	80001d0 <__aeabi_dsub>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4610      	mov	r0, r2
 800b70e:	4619      	mov	r1, r3
 800b710:	a309      	add	r3, pc, #36	@ (adr r3, 800b738 <can1_ams_s06_voltages_1_s06v04_encode+0x48>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f7f5 f83d 	bl	8000794 <__aeabi_ddiv>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4610      	mov	r0, r2
 800b720:	4619      	mov	r1, r3
 800b722:	f7f5 f9cf 	bl	8000ac4 <__aeabi_d2uiz>
 800b726:	4603      	mov	r3, r0
 800b728:	b2db      	uxtb	r3, r3
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	f3af 8000 	nop.w
 800b738:	fcce1c58 	.word	0xfcce1c58
 800b73c:	3f800e6a 	.word	0x3f800e6a
 800b740:	40040000 	.word	0x40040000
 800b744:	00000000 	.word	0x00000000

0800b748 <can1_ams_s06_voltages_1_s06v05_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v05_encode(double value)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b752:	f04f 0200 	mov.w	r2, #0
 800b756:	4b10      	ldr	r3, [pc, #64]	@ (800b798 <can1_ams_s06_voltages_1_s06v05_encode+0x50>)
 800b758:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b75c:	f7f4 fd38 	bl	80001d0 <__aeabi_dsub>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	4610      	mov	r0, r2
 800b766:	4619      	mov	r1, r3
 800b768:	a309      	add	r3, pc, #36	@ (adr r3, 800b790 <can1_ams_s06_voltages_1_s06v05_encode+0x48>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f7f5 f811 	bl	8000794 <__aeabi_ddiv>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4610      	mov	r0, r2
 800b778:	4619      	mov	r1, r3
 800b77a:	f7f5 f9a3 	bl	8000ac4 <__aeabi_d2uiz>
 800b77e:	4603      	mov	r3, r0
 800b780:	b2db      	uxtb	r3, r3
}
 800b782:	4618      	mov	r0, r3
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	f3af 8000 	nop.w
 800b790:	fcce1c58 	.word	0xfcce1c58
 800b794:	3f800e6a 	.word	0x3f800e6a
 800b798:	40040000 	.word	0x40040000
 800b79c:	00000000 	.word	0x00000000

0800b7a0 <can1_ams_s06_voltages_1_s06v06_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v06_encode(double value)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b7aa:	f04f 0200 	mov.w	r2, #0
 800b7ae:	4b10      	ldr	r3, [pc, #64]	@ (800b7f0 <can1_ams_s06_voltages_1_s06v06_encode+0x50>)
 800b7b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7b4:	f7f4 fd0c 	bl	80001d0 <__aeabi_dsub>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4619      	mov	r1, r3
 800b7c0:	a309      	add	r3, pc, #36	@ (adr r3, 800b7e8 <can1_ams_s06_voltages_1_s06v06_encode+0x48>)
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f7f4 ffe5 	bl	8000794 <__aeabi_ddiv>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	f7f5 f977 	bl	8000ac4 <__aeabi_d2uiz>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	b2db      	uxtb	r3, r3
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	f3af 8000 	nop.w
 800b7e8:	fcce1c58 	.word	0xfcce1c58
 800b7ec:	3f800e6a 	.word	0x3f800e6a
 800b7f0:	40040000 	.word	0x40040000

0800b7f4 <can1_ams_s06_voltages_2_pack>:

int can1_ams_s06_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s06_voltages_2_t *src_p,
    size_t size)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b04      	cmp	r3, #4
 800b804:	d802      	bhi.n	800b80c <can1_ams_s06_voltages_2_pack+0x18>
        return (-EINVAL);
 800b806:	f06f 0315 	mvn.w	r3, #21
 800b80a:	e058      	b.n	800b8be <can1_ams_s06_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800b80c:	2205      	movs	r2, #5
 800b80e:	2100      	movs	r1, #0
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f004 ff39 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s06v07, 0u, 0xffu);
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	22ff      	movs	r2, #255	@ 0xff
 800b81c:	2100      	movs	r1, #0
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd fdec 	bl	80093fc <pack_left_shift_u8>
 800b824:	4603      	mov	r3, r0
 800b826:	461a      	mov	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s06v08, 0u, 0xffu);
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	785b      	ldrb	r3, [r3, #1]
 800b838:	22ff      	movs	r2, #255	@ 0xff
 800b83a:	2100      	movs	r1, #0
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fd fddd 	bl	80093fc <pack_left_shift_u8>
 800b842:	4603      	mov	r3, r0
 800b844:	4619      	mov	r1, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	781a      	ldrb	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3301      	adds	r3, #1
 800b850:	430a      	orrs	r2, r1
 800b852:	b2d2      	uxtb	r2, r2
 800b854:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s06v09, 0u, 0xffu);
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	789b      	ldrb	r3, [r3, #2]
 800b85a:	22ff      	movs	r2, #255	@ 0xff
 800b85c:	2100      	movs	r1, #0
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fd fdcc 	bl	80093fc <pack_left_shift_u8>
 800b864:	4603      	mov	r3, r0
 800b866:	4619      	mov	r1, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3302      	adds	r3, #2
 800b86c:	781a      	ldrb	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3302      	adds	r3, #2
 800b872:	430a      	orrs	r2, r1
 800b874:	b2d2      	uxtb	r2, r2
 800b876:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s06v10, 0u, 0xffu);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	78db      	ldrb	r3, [r3, #3]
 800b87c:	22ff      	movs	r2, #255	@ 0xff
 800b87e:	2100      	movs	r1, #0
 800b880:	4618      	mov	r0, r3
 800b882:	f7fd fdbb 	bl	80093fc <pack_left_shift_u8>
 800b886:	4603      	mov	r3, r0
 800b888:	4619      	mov	r1, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3303      	adds	r3, #3
 800b88e:	781a      	ldrb	r2, [r3, #0]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3303      	adds	r3, #3
 800b894:	430a      	orrs	r2, r1
 800b896:	b2d2      	uxtb	r2, r2
 800b898:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s06v11, 0u, 0xffu);
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	791b      	ldrb	r3, [r3, #4]
 800b89e:	22ff      	movs	r2, #255	@ 0xff
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fd fdaa 	bl	80093fc <pack_left_shift_u8>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	781a      	ldrb	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	b2d2      	uxtb	r2, r2
 800b8ba:	701a      	strb	r2, [r3, #0]

    return (5);
 800b8bc:	2305      	movs	r3, #5
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
	...

0800b8c8 <can1_ams_s06_voltages_2_s06v07_encode>:

    return 0;
}

uint8_t can1_ams_s06_voltages_2_s06v07_encode(double value)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b8d2:	f04f 0200 	mov.w	r2, #0
 800b8d6:	4b10      	ldr	r3, [pc, #64]	@ (800b918 <can1_ams_s06_voltages_2_s06v07_encode+0x50>)
 800b8d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8dc:	f7f4 fc78 	bl	80001d0 <__aeabi_dsub>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	a309      	add	r3, pc, #36	@ (adr r3, 800b910 <can1_ams_s06_voltages_2_s06v07_encode+0x48>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f7f4 ff51 	bl	8000794 <__aeabi_ddiv>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	f7f5 f8e3 	bl	8000ac4 <__aeabi_d2uiz>
 800b8fe:	4603      	mov	r3, r0
 800b900:	b2db      	uxtb	r3, r3
}
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	f3af 8000 	nop.w
 800b910:	fcce1c58 	.word	0xfcce1c58
 800b914:	3f800e6a 	.word	0x3f800e6a
 800b918:	40040000 	.word	0x40040000
 800b91c:	00000000 	.word	0x00000000

0800b920 <can1_ams_s06_voltages_2_s06v08_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v08_encode(double value)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b92a:	f04f 0200 	mov.w	r2, #0
 800b92e:	4b10      	ldr	r3, [pc, #64]	@ (800b970 <can1_ams_s06_voltages_2_s06v08_encode+0x50>)
 800b930:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b934:	f7f4 fc4c 	bl	80001d0 <__aeabi_dsub>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4610      	mov	r0, r2
 800b93e:	4619      	mov	r1, r3
 800b940:	a309      	add	r3, pc, #36	@ (adr r3, 800b968 <can1_ams_s06_voltages_2_s06v08_encode+0x48>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	f7f4 ff25 	bl	8000794 <__aeabi_ddiv>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	4610      	mov	r0, r2
 800b950:	4619      	mov	r1, r3
 800b952:	f7f5 f8b7 	bl	8000ac4 <__aeabi_d2uiz>
 800b956:	4603      	mov	r3, r0
 800b958:	b2db      	uxtb	r3, r3
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	f3af 8000 	nop.w
 800b968:	fcce1c58 	.word	0xfcce1c58
 800b96c:	3f800e6a 	.word	0x3f800e6a
 800b970:	40040000 	.word	0x40040000
 800b974:	00000000 	.word	0x00000000

0800b978 <can1_ams_s06_voltages_2_s06v09_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v09_encode(double value)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b982:	f04f 0200 	mov.w	r2, #0
 800b986:	4b10      	ldr	r3, [pc, #64]	@ (800b9c8 <can1_ams_s06_voltages_2_s06v09_encode+0x50>)
 800b988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b98c:	f7f4 fc20 	bl	80001d0 <__aeabi_dsub>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4610      	mov	r0, r2
 800b996:	4619      	mov	r1, r3
 800b998:	a309      	add	r3, pc, #36	@ (adr r3, 800b9c0 <can1_ams_s06_voltages_2_s06v09_encode+0x48>)
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	f7f4 fef9 	bl	8000794 <__aeabi_ddiv>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	f7f5 f88b 	bl	8000ac4 <__aeabi_d2uiz>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	b2db      	uxtb	r3, r3
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	f3af 8000 	nop.w
 800b9c0:	fcce1c58 	.word	0xfcce1c58
 800b9c4:	3f800e6a 	.word	0x3f800e6a
 800b9c8:	40040000 	.word	0x40040000
 800b9cc:	00000000 	.word	0x00000000

0800b9d0 <can1_ams_s06_voltages_2_s06v10_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v10_encode(double value)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800b9da:	f04f 0200 	mov.w	r2, #0
 800b9de:	4b10      	ldr	r3, [pc, #64]	@ (800ba20 <can1_ams_s06_voltages_2_s06v10_encode+0x50>)
 800b9e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9e4:	f7f4 fbf4 	bl	80001d0 <__aeabi_dsub>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	a309      	add	r3, pc, #36	@ (adr r3, 800ba18 <can1_ams_s06_voltages_2_s06v10_encode+0x48>)
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	f7f4 fecd 	bl	8000794 <__aeabi_ddiv>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	4610      	mov	r0, r2
 800ba00:	4619      	mov	r1, r3
 800ba02:	f7f5 f85f 	bl	8000ac4 <__aeabi_d2uiz>
 800ba06:	4603      	mov	r3, r0
 800ba08:	b2db      	uxtb	r3, r3
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	f3af 8000 	nop.w
 800ba18:	fcce1c58 	.word	0xfcce1c58
 800ba1c:	3f800e6a 	.word	0x3f800e6a
 800ba20:	40040000 	.word	0x40040000

0800ba24 <can1_ams_s07_voltages_1_pack>:

int can1_ams_s07_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s07_voltages_1_t *src_p,
    size_t size)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b05      	cmp	r3, #5
 800ba34:	d802      	bhi.n	800ba3c <can1_ams_s07_voltages_1_pack+0x18>
        return (-EINVAL);
 800ba36:	f06f 0315 	mvn.w	r3, #21
 800ba3a:	e069      	b.n	800bb10 <can1_ams_s07_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800ba3c:	2206      	movs	r2, #6
 800ba3e:	2100      	movs	r1, #0
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f004 fe21 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s07v01, 0u, 0xffu);
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	22ff      	movs	r2, #255	@ 0xff
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fd fcd4 	bl	80093fc <pack_left_shift_u8>
 800ba54:	4603      	mov	r3, r0
 800ba56:	461a      	mov	r2, r3
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s07v02, 0u, 0xffu);
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	785b      	ldrb	r3, [r3, #1]
 800ba68:	22ff      	movs	r2, #255	@ 0xff
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fd fcc5 	bl	80093fc <pack_left_shift_u8>
 800ba72:	4603      	mov	r3, r0
 800ba74:	4619      	mov	r1, r3
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	781a      	ldrb	r2, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	430a      	orrs	r2, r1
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s07v03, 0u, 0xffu);
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	789b      	ldrb	r3, [r3, #2]
 800ba8a:	22ff      	movs	r2, #255	@ 0xff
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fd fcb4 	bl	80093fc <pack_left_shift_u8>
 800ba94:	4603      	mov	r3, r0
 800ba96:	4619      	mov	r1, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3302      	adds	r3, #2
 800ba9c:	781a      	ldrb	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3302      	adds	r3, #2
 800baa2:	430a      	orrs	r2, r1
 800baa4:	b2d2      	uxtb	r2, r2
 800baa6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s07v04, 0u, 0xffu);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	78db      	ldrb	r3, [r3, #3]
 800baac:	22ff      	movs	r2, #255	@ 0xff
 800baae:	2100      	movs	r1, #0
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fd fca3 	bl	80093fc <pack_left_shift_u8>
 800bab6:	4603      	mov	r3, r0
 800bab8:	4619      	mov	r1, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3303      	adds	r3, #3
 800babe:	781a      	ldrb	r2, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	3303      	adds	r3, #3
 800bac4:	430a      	orrs	r2, r1
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s07v05, 0u, 0xffu);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	791b      	ldrb	r3, [r3, #4]
 800bace:	22ff      	movs	r2, #255	@ 0xff
 800bad0:	2100      	movs	r1, #0
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fd fc92 	bl	80093fc <pack_left_shift_u8>
 800bad8:	4603      	mov	r3, r0
 800bada:	4619      	mov	r1, r3
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3304      	adds	r3, #4
 800bae0:	781a      	ldrb	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	3304      	adds	r3, #4
 800bae6:	430a      	orrs	r2, r1
 800bae8:	b2d2      	uxtb	r2, r2
 800baea:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s07v06, 0u, 0xffu);
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	795b      	ldrb	r3, [r3, #5]
 800baf0:	22ff      	movs	r2, #255	@ 0xff
 800baf2:	2100      	movs	r1, #0
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fd fc81 	bl	80093fc <pack_left_shift_u8>
 800bafa:	4603      	mov	r3, r0
 800bafc:	4619      	mov	r1, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3305      	adds	r3, #5
 800bb02:	781a      	ldrb	r2, [r3, #0]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	3305      	adds	r3, #5
 800bb08:	430a      	orrs	r2, r1
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	701a      	strb	r2, [r3, #0]

    return (6);
 800bb0e:	2306      	movs	r3, #6
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <can1_ams_s07_voltages_1_s07v01_encode>:

    return 0;
}

uint8_t can1_ams_s07_voltages_1_s07v01_encode(double value)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bb22:	f04f 0200 	mov.w	r2, #0
 800bb26:	4b10      	ldr	r3, [pc, #64]	@ (800bb68 <can1_ams_s07_voltages_1_s07v01_encode+0x50>)
 800bb28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb2c:	f7f4 fb50 	bl	80001d0 <__aeabi_dsub>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4610      	mov	r0, r2
 800bb36:	4619      	mov	r1, r3
 800bb38:	a309      	add	r3, pc, #36	@ (adr r3, 800bb60 <can1_ams_s07_voltages_1_s07v01_encode+0x48>)
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	f7f4 fe29 	bl	8000794 <__aeabi_ddiv>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4610      	mov	r0, r2
 800bb48:	4619      	mov	r1, r3
 800bb4a:	f7f4 ffbb 	bl	8000ac4 <__aeabi_d2uiz>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	b2db      	uxtb	r3, r3
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	f3af 8000 	nop.w
 800bb60:	fcce1c58 	.word	0xfcce1c58
 800bb64:	3f800e6a 	.word	0x3f800e6a
 800bb68:	40040000 	.word	0x40040000
 800bb6c:	00000000 	.word	0x00000000

0800bb70 <can1_ams_s07_voltages_1_s07v02_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v02_encode(double value)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bb7a:	f04f 0200 	mov.w	r2, #0
 800bb7e:	4b10      	ldr	r3, [pc, #64]	@ (800bbc0 <can1_ams_s07_voltages_1_s07v02_encode+0x50>)
 800bb80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb84:	f7f4 fb24 	bl	80001d0 <__aeabi_dsub>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	4619      	mov	r1, r3
 800bb90:	a309      	add	r3, pc, #36	@ (adr r3, 800bbb8 <can1_ams_s07_voltages_1_s07v02_encode+0x48>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fdfd 	bl	8000794 <__aeabi_ddiv>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4610      	mov	r0, r2
 800bba0:	4619      	mov	r1, r3
 800bba2:	f7f4 ff8f 	bl	8000ac4 <__aeabi_d2uiz>
 800bba6:	4603      	mov	r3, r0
 800bba8:	b2db      	uxtb	r3, r3
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	fcce1c58 	.word	0xfcce1c58
 800bbbc:	3f800e6a 	.word	0x3f800e6a
 800bbc0:	40040000 	.word	0x40040000
 800bbc4:	00000000 	.word	0x00000000

0800bbc8 <can1_ams_s07_voltages_1_s07v03_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v03_encode(double value)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bbd2:	f04f 0200 	mov.w	r2, #0
 800bbd6:	4b10      	ldr	r3, [pc, #64]	@ (800bc18 <can1_ams_s07_voltages_1_s07v03_encode+0x50>)
 800bbd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bbdc:	f7f4 faf8 	bl	80001d0 <__aeabi_dsub>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	a309      	add	r3, pc, #36	@ (adr r3, 800bc10 <can1_ams_s07_voltages_1_s07v03_encode+0x48>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f7f4 fdd1 	bl	8000794 <__aeabi_ddiv>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	f7f4 ff63 	bl	8000ac4 <__aeabi_d2uiz>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	b2db      	uxtb	r3, r3
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	f3af 8000 	nop.w
 800bc10:	fcce1c58 	.word	0xfcce1c58
 800bc14:	3f800e6a 	.word	0x3f800e6a
 800bc18:	40040000 	.word	0x40040000
 800bc1c:	00000000 	.word	0x00000000

0800bc20 <can1_ams_s07_voltages_1_s07v04_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v04_encode(double value)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bc2a:	f04f 0200 	mov.w	r2, #0
 800bc2e:	4b10      	ldr	r3, [pc, #64]	@ (800bc70 <can1_ams_s07_voltages_1_s07v04_encode+0x50>)
 800bc30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc34:	f7f4 facc 	bl	80001d0 <__aeabi_dsub>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4610      	mov	r0, r2
 800bc3e:	4619      	mov	r1, r3
 800bc40:	a309      	add	r3, pc, #36	@ (adr r3, 800bc68 <can1_ams_s07_voltages_1_s07v04_encode+0x48>)
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	f7f4 fda5 	bl	8000794 <__aeabi_ddiv>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	4610      	mov	r0, r2
 800bc50:	4619      	mov	r1, r3
 800bc52:	f7f4 ff37 	bl	8000ac4 <__aeabi_d2uiz>
 800bc56:	4603      	mov	r3, r0
 800bc58:	b2db      	uxtb	r3, r3
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	f3af 8000 	nop.w
 800bc68:	fcce1c58 	.word	0xfcce1c58
 800bc6c:	3f800e6a 	.word	0x3f800e6a
 800bc70:	40040000 	.word	0x40040000
 800bc74:	00000000 	.word	0x00000000

0800bc78 <can1_ams_s07_voltages_1_s07v05_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v05_encode(double value)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bc82:	f04f 0200 	mov.w	r2, #0
 800bc86:	4b10      	ldr	r3, [pc, #64]	@ (800bcc8 <can1_ams_s07_voltages_1_s07v05_encode+0x50>)
 800bc88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc8c:	f7f4 faa0 	bl	80001d0 <__aeabi_dsub>
 800bc90:	4602      	mov	r2, r0
 800bc92:	460b      	mov	r3, r1
 800bc94:	4610      	mov	r0, r2
 800bc96:	4619      	mov	r1, r3
 800bc98:	a309      	add	r3, pc, #36	@ (adr r3, 800bcc0 <can1_ams_s07_voltages_1_s07v05_encode+0x48>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 fd79 	bl	8000794 <__aeabi_ddiv>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	4610      	mov	r0, r2
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f7f4 ff0b 	bl	8000ac4 <__aeabi_d2uiz>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	b2db      	uxtb	r3, r3
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	f3af 8000 	nop.w
 800bcc0:	fcce1c58 	.word	0xfcce1c58
 800bcc4:	3f800e6a 	.word	0x3f800e6a
 800bcc8:	40040000 	.word	0x40040000
 800bccc:	00000000 	.word	0x00000000

0800bcd0 <can1_ams_s07_voltages_1_s07v06_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v06_encode(double value)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bcda:	f04f 0200 	mov.w	r2, #0
 800bcde:	4b10      	ldr	r3, [pc, #64]	@ (800bd20 <can1_ams_s07_voltages_1_s07v06_encode+0x50>)
 800bce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bce4:	f7f4 fa74 	bl	80001d0 <__aeabi_dsub>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4610      	mov	r0, r2
 800bcee:	4619      	mov	r1, r3
 800bcf0:	a309      	add	r3, pc, #36	@ (adr r3, 800bd18 <can1_ams_s07_voltages_1_s07v06_encode+0x48>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f7f4 fd4d 	bl	8000794 <__aeabi_ddiv>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4610      	mov	r0, r2
 800bd00:	4619      	mov	r1, r3
 800bd02:	f7f4 fedf 	bl	8000ac4 <__aeabi_d2uiz>
 800bd06:	4603      	mov	r3, r0
 800bd08:	b2db      	uxtb	r3, r3
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	f3af 8000 	nop.w
 800bd18:	fcce1c58 	.word	0xfcce1c58
 800bd1c:	3f800e6a 	.word	0x3f800e6a
 800bd20:	40040000 	.word	0x40040000

0800bd24 <can1_ams_s07_voltages_2_pack>:

int can1_ams_s07_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s07_voltages_2_t *src_p,
    size_t size)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b04      	cmp	r3, #4
 800bd34:	d802      	bhi.n	800bd3c <can1_ams_s07_voltages_2_pack+0x18>
        return (-EINVAL);
 800bd36:	f06f 0315 	mvn.w	r3, #21
 800bd3a:	e058      	b.n	800bdee <can1_ams_s07_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800bd3c:	2205      	movs	r2, #5
 800bd3e:	2100      	movs	r1, #0
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f004 fca1 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s07v07, 0u, 0xffu);
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	22ff      	movs	r2, #255	@ 0xff
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fd fb54 	bl	80093fc <pack_left_shift_u8>
 800bd54:	4603      	mov	r3, r0
 800bd56:	461a      	mov	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s07v08, 0u, 0xffu);
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	785b      	ldrb	r3, [r3, #1]
 800bd68:	22ff      	movs	r2, #255	@ 0xff
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fd fb45 	bl	80093fc <pack_left_shift_u8>
 800bd72:	4603      	mov	r3, r0
 800bd74:	4619      	mov	r1, r3
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	781a      	ldrb	r2, [r3, #0]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	430a      	orrs	r2, r1
 800bd82:	b2d2      	uxtb	r2, r2
 800bd84:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s07v09, 0u, 0xffu);
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	789b      	ldrb	r3, [r3, #2]
 800bd8a:	22ff      	movs	r2, #255	@ 0xff
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fd fb34 	bl	80093fc <pack_left_shift_u8>
 800bd94:	4603      	mov	r3, r0
 800bd96:	4619      	mov	r1, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	3302      	adds	r3, #2
 800bd9c:	781a      	ldrb	r2, [r3, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	3302      	adds	r3, #2
 800bda2:	430a      	orrs	r2, r1
 800bda4:	b2d2      	uxtb	r2, r2
 800bda6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s07v10, 0u, 0xffu);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	78db      	ldrb	r3, [r3, #3]
 800bdac:	22ff      	movs	r2, #255	@ 0xff
 800bdae:	2100      	movs	r1, #0
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fd fb23 	bl	80093fc <pack_left_shift_u8>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	4619      	mov	r1, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3303      	adds	r3, #3
 800bdbe:	781a      	ldrb	r2, [r3, #0]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3303      	adds	r3, #3
 800bdc4:	430a      	orrs	r2, r1
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s07v11, 0u, 0xffu);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	791b      	ldrb	r3, [r3, #4]
 800bdce:	22ff      	movs	r2, #255	@ 0xff
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7fd fb12 	bl	80093fc <pack_left_shift_u8>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	4619      	mov	r1, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3304      	adds	r3, #4
 800bde0:	781a      	ldrb	r2, [r3, #0]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3304      	adds	r3, #4
 800bde6:	430a      	orrs	r2, r1
 800bde8:	b2d2      	uxtb	r2, r2
 800bdea:	701a      	strb	r2, [r3, #0]

    return (5);
 800bdec:	2305      	movs	r3, #5
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <can1_ams_s07_voltages_2_s07v07_encode>:

    return 0;
}

uint8_t can1_ams_s07_voltages_2_s07v07_encode(double value)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	4b10      	ldr	r3, [pc, #64]	@ (800be48 <can1_ams_s07_voltages_2_s07v07_encode+0x50>)
 800be08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800be0c:	f7f4 f9e0 	bl	80001d0 <__aeabi_dsub>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4610      	mov	r0, r2
 800be16:	4619      	mov	r1, r3
 800be18:	a309      	add	r3, pc, #36	@ (adr r3, 800be40 <can1_ams_s07_voltages_2_s07v07_encode+0x48>)
 800be1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1e:	f7f4 fcb9 	bl	8000794 <__aeabi_ddiv>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	4610      	mov	r0, r2
 800be28:	4619      	mov	r1, r3
 800be2a:	f7f4 fe4b 	bl	8000ac4 <__aeabi_d2uiz>
 800be2e:	4603      	mov	r3, r0
 800be30:	b2db      	uxtb	r3, r3
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	f3af 8000 	nop.w
 800be40:	fcce1c58 	.word	0xfcce1c58
 800be44:	3f800e6a 	.word	0x3f800e6a
 800be48:	40040000 	.word	0x40040000
 800be4c:	00000000 	.word	0x00000000

0800be50 <can1_ams_s07_voltages_2_s07v08_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v08_encode(double value)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800be5a:	f04f 0200 	mov.w	r2, #0
 800be5e:	4b10      	ldr	r3, [pc, #64]	@ (800bea0 <can1_ams_s07_voltages_2_s07v08_encode+0x50>)
 800be60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800be64:	f7f4 f9b4 	bl	80001d0 <__aeabi_dsub>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4610      	mov	r0, r2
 800be6e:	4619      	mov	r1, r3
 800be70:	a309      	add	r3, pc, #36	@ (adr r3, 800be98 <can1_ams_s07_voltages_2_s07v08_encode+0x48>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f7f4 fc8d 	bl	8000794 <__aeabi_ddiv>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	4610      	mov	r0, r2
 800be80:	4619      	mov	r1, r3
 800be82:	f7f4 fe1f 	bl	8000ac4 <__aeabi_d2uiz>
 800be86:	4603      	mov	r3, r0
 800be88:	b2db      	uxtb	r3, r3
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	f3af 8000 	nop.w
 800be98:	fcce1c58 	.word	0xfcce1c58
 800be9c:	3f800e6a 	.word	0x3f800e6a
 800bea0:	40040000 	.word	0x40040000
 800bea4:	00000000 	.word	0x00000000

0800bea8 <can1_ams_s07_voltages_2_s07v09_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v09_encode(double value)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800beb2:	f04f 0200 	mov.w	r2, #0
 800beb6:	4b10      	ldr	r3, [pc, #64]	@ (800bef8 <can1_ams_s07_voltages_2_s07v09_encode+0x50>)
 800beb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bebc:	f7f4 f988 	bl	80001d0 <__aeabi_dsub>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4610      	mov	r0, r2
 800bec6:	4619      	mov	r1, r3
 800bec8:	a309      	add	r3, pc, #36	@ (adr r3, 800bef0 <can1_ams_s07_voltages_2_s07v09_encode+0x48>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	f7f4 fc61 	bl	8000794 <__aeabi_ddiv>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	4610      	mov	r0, r2
 800bed8:	4619      	mov	r1, r3
 800beda:	f7f4 fdf3 	bl	8000ac4 <__aeabi_d2uiz>
 800bede:	4603      	mov	r3, r0
 800bee0:	b2db      	uxtb	r3, r3
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	f3af 8000 	nop.w
 800bef0:	fcce1c58 	.word	0xfcce1c58
 800bef4:	3f800e6a 	.word	0x3f800e6a
 800bef8:	40040000 	.word	0x40040000
 800befc:	00000000 	.word	0x00000000

0800bf00 <can1_ams_s07_voltages_2_s07v10_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v10_encode(double value)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bf0a:	f04f 0200 	mov.w	r2, #0
 800bf0e:	4b10      	ldr	r3, [pc, #64]	@ (800bf50 <can1_ams_s07_voltages_2_s07v10_encode+0x50>)
 800bf10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf14:	f7f4 f95c 	bl	80001d0 <__aeabi_dsub>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	4619      	mov	r1, r3
 800bf20:	a309      	add	r3, pc, #36	@ (adr r3, 800bf48 <can1_ams_s07_voltages_2_s07v10_encode+0x48>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fc35 	bl	8000794 <__aeabi_ddiv>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4610      	mov	r0, r2
 800bf30:	4619      	mov	r1, r3
 800bf32:	f7f4 fdc7 	bl	8000ac4 <__aeabi_d2uiz>
 800bf36:	4603      	mov	r3, r0
 800bf38:	b2db      	uxtb	r3, r3
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	f3af 8000 	nop.w
 800bf48:	fcce1c58 	.word	0xfcce1c58
 800bf4c:	3f800e6a 	.word	0x3f800e6a
 800bf50:	40040000 	.word	0x40040000
 800bf54:	00000000 	.word	0x00000000

0800bf58 <can1_ams_s07_voltages_2_s07v11_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v11_encode(double value)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800bf62:	f04f 0200 	mov.w	r2, #0
 800bf66:	4b10      	ldr	r3, [pc, #64]	@ (800bfa8 <can1_ams_s07_voltages_2_s07v11_encode+0x50>)
 800bf68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf6c:	f7f4 f930 	bl	80001d0 <__aeabi_dsub>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4610      	mov	r0, r2
 800bf76:	4619      	mov	r1, r3
 800bf78:	a309      	add	r3, pc, #36	@ (adr r3, 800bfa0 <can1_ams_s07_voltages_2_s07v11_encode+0x48>)
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f7f4 fc09 	bl	8000794 <__aeabi_ddiv>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4610      	mov	r0, r2
 800bf88:	4619      	mov	r1, r3
 800bf8a:	f7f4 fd9b 	bl	8000ac4 <__aeabi_d2uiz>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	b2db      	uxtb	r3, r3
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	f3af 8000 	nop.w
 800bfa0:	fcce1c58 	.word	0xfcce1c58
 800bfa4:	3f800e6a 	.word	0x3f800e6a
 800bfa8:	40040000 	.word	0x40040000

0800bfac <can1_ams_s08_voltages_1_pack>:

int can1_ams_s08_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s08_voltages_1_t *src_p,
    size_t size)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b05      	cmp	r3, #5
 800bfbc:	d802      	bhi.n	800bfc4 <can1_ams_s08_voltages_1_pack+0x18>
        return (-EINVAL);
 800bfbe:	f06f 0315 	mvn.w	r3, #21
 800bfc2:	e069      	b.n	800c098 <can1_ams_s08_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800bfc4:	2206      	movs	r2, #6
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f004 fb5d 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s08v01, 0u, 0xffu);
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	22ff      	movs	r2, #255	@ 0xff
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fd fa10 	bl	80093fc <pack_left_shift_u8>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	461a      	mov	r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s08v02, 0u, 0xffu);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	785b      	ldrb	r3, [r3, #1]
 800bff0:	22ff      	movs	r2, #255	@ 0xff
 800bff2:	2100      	movs	r1, #0
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fd fa01 	bl	80093fc <pack_left_shift_u8>
 800bffa:	4603      	mov	r3, r0
 800bffc:	4619      	mov	r1, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	3301      	adds	r3, #1
 800c002:	781a      	ldrb	r2, [r3, #0]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3301      	adds	r3, #1
 800c008:	430a      	orrs	r2, r1
 800c00a:	b2d2      	uxtb	r2, r2
 800c00c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s08v03, 0u, 0xffu);
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	789b      	ldrb	r3, [r3, #2]
 800c012:	22ff      	movs	r2, #255	@ 0xff
 800c014:	2100      	movs	r1, #0
 800c016:	4618      	mov	r0, r3
 800c018:	f7fd f9f0 	bl	80093fc <pack_left_shift_u8>
 800c01c:	4603      	mov	r3, r0
 800c01e:	4619      	mov	r1, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3302      	adds	r3, #2
 800c024:	781a      	ldrb	r2, [r3, #0]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3302      	adds	r3, #2
 800c02a:	430a      	orrs	r2, r1
 800c02c:	b2d2      	uxtb	r2, r2
 800c02e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s08v04, 0u, 0xffu);
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	78db      	ldrb	r3, [r3, #3]
 800c034:	22ff      	movs	r2, #255	@ 0xff
 800c036:	2100      	movs	r1, #0
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fd f9df 	bl	80093fc <pack_left_shift_u8>
 800c03e:	4603      	mov	r3, r0
 800c040:	4619      	mov	r1, r3
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3303      	adds	r3, #3
 800c046:	781a      	ldrb	r2, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	3303      	adds	r3, #3
 800c04c:	430a      	orrs	r2, r1
 800c04e:	b2d2      	uxtb	r2, r2
 800c050:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s08v05, 0u, 0xffu);
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	791b      	ldrb	r3, [r3, #4]
 800c056:	22ff      	movs	r2, #255	@ 0xff
 800c058:	2100      	movs	r1, #0
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd f9ce 	bl	80093fc <pack_left_shift_u8>
 800c060:	4603      	mov	r3, r0
 800c062:	4619      	mov	r1, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	3304      	adds	r3, #4
 800c068:	781a      	ldrb	r2, [r3, #0]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3304      	adds	r3, #4
 800c06e:	430a      	orrs	r2, r1
 800c070:	b2d2      	uxtb	r2, r2
 800c072:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s08v06, 0u, 0xffu);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	795b      	ldrb	r3, [r3, #5]
 800c078:	22ff      	movs	r2, #255	@ 0xff
 800c07a:	2100      	movs	r1, #0
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fd f9bd 	bl	80093fc <pack_left_shift_u8>
 800c082:	4603      	mov	r3, r0
 800c084:	4619      	mov	r1, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3305      	adds	r3, #5
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3305      	adds	r3, #5
 800c090:	430a      	orrs	r2, r1
 800c092:	b2d2      	uxtb	r2, r2
 800c094:	701a      	strb	r2, [r3, #0]

    return (6);
 800c096:	2306      	movs	r3, #6
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <can1_ams_s08_voltages_1_s08v01_encode>:

    return 0;
}

uint8_t can1_ams_s08_voltages_1_s08v01_encode(double value)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c0aa:	f04f 0200 	mov.w	r2, #0
 800c0ae:	4b10      	ldr	r3, [pc, #64]	@ (800c0f0 <can1_ams_s08_voltages_1_s08v01_encode+0x50>)
 800c0b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c0b4:	f7f4 f88c 	bl	80001d0 <__aeabi_dsub>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4619      	mov	r1, r3
 800c0c0:	a309      	add	r3, pc, #36	@ (adr r3, 800c0e8 <can1_ams_s08_voltages_1_s08v01_encode+0x48>)
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f7f4 fb65 	bl	8000794 <__aeabi_ddiv>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7f4 fcf7 	bl	8000ac4 <__aeabi_d2uiz>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	b2db      	uxtb	r3, r3
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	f3af 8000 	nop.w
 800c0e8:	fcce1c58 	.word	0xfcce1c58
 800c0ec:	3f800e6a 	.word	0x3f800e6a
 800c0f0:	40040000 	.word	0x40040000
 800c0f4:	00000000 	.word	0x00000000

0800c0f8 <can1_ams_s08_voltages_1_s08v02_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v02_encode(double value)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c102:	f04f 0200 	mov.w	r2, #0
 800c106:	4b10      	ldr	r3, [pc, #64]	@ (800c148 <can1_ams_s08_voltages_1_s08v02_encode+0x50>)
 800c108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c10c:	f7f4 f860 	bl	80001d0 <__aeabi_dsub>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4610      	mov	r0, r2
 800c116:	4619      	mov	r1, r3
 800c118:	a309      	add	r3, pc, #36	@ (adr r3, 800c140 <can1_ams_s08_voltages_1_s08v02_encode+0x48>)
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	f7f4 fb39 	bl	8000794 <__aeabi_ddiv>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	4610      	mov	r0, r2
 800c128:	4619      	mov	r1, r3
 800c12a:	f7f4 fccb 	bl	8000ac4 <__aeabi_d2uiz>
 800c12e:	4603      	mov	r3, r0
 800c130:	b2db      	uxtb	r3, r3
}
 800c132:	4618      	mov	r0, r3
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	f3af 8000 	nop.w
 800c140:	fcce1c58 	.word	0xfcce1c58
 800c144:	3f800e6a 	.word	0x3f800e6a
 800c148:	40040000 	.word	0x40040000
 800c14c:	00000000 	.word	0x00000000

0800c150 <can1_ams_s08_voltages_1_s08v03_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v03_encode(double value)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c15a:	f04f 0200 	mov.w	r2, #0
 800c15e:	4b10      	ldr	r3, [pc, #64]	@ (800c1a0 <can1_ams_s08_voltages_1_s08v03_encode+0x50>)
 800c160:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c164:	f7f4 f834 	bl	80001d0 <__aeabi_dsub>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4610      	mov	r0, r2
 800c16e:	4619      	mov	r1, r3
 800c170:	a309      	add	r3, pc, #36	@ (adr r3, 800c198 <can1_ams_s08_voltages_1_s08v03_encode+0x48>)
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f7f4 fb0d 	bl	8000794 <__aeabi_ddiv>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4610      	mov	r0, r2
 800c180:	4619      	mov	r1, r3
 800c182:	f7f4 fc9f 	bl	8000ac4 <__aeabi_d2uiz>
 800c186:	4603      	mov	r3, r0
 800c188:	b2db      	uxtb	r3, r3
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	f3af 8000 	nop.w
 800c198:	fcce1c58 	.word	0xfcce1c58
 800c19c:	3f800e6a 	.word	0x3f800e6a
 800c1a0:	40040000 	.word	0x40040000
 800c1a4:	00000000 	.word	0x00000000

0800c1a8 <can1_ams_s08_voltages_1_s08v04_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v04_encode(double value)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	4b10      	ldr	r3, [pc, #64]	@ (800c1f8 <can1_ams_s08_voltages_1_s08v04_encode+0x50>)
 800c1b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1bc:	f7f4 f808 	bl	80001d0 <__aeabi_dsub>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	a309      	add	r3, pc, #36	@ (adr r3, 800c1f0 <can1_ams_s08_voltages_1_s08v04_encode+0x48>)
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	f7f4 fae1 	bl	8000794 <__aeabi_ddiv>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	4619      	mov	r1, r3
 800c1da:	f7f4 fc73 	bl	8000ac4 <__aeabi_d2uiz>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	b2db      	uxtb	r3, r3
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	f3af 8000 	nop.w
 800c1f0:	fcce1c58 	.word	0xfcce1c58
 800c1f4:	3f800e6a 	.word	0x3f800e6a
 800c1f8:	40040000 	.word	0x40040000
 800c1fc:	00000000 	.word	0x00000000

0800c200 <can1_ams_s08_voltages_1_s08v05_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v05_encode(double value)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c20a:	f04f 0200 	mov.w	r2, #0
 800c20e:	4b10      	ldr	r3, [pc, #64]	@ (800c250 <can1_ams_s08_voltages_1_s08v05_encode+0x50>)
 800c210:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c214:	f7f3 ffdc 	bl	80001d0 <__aeabi_dsub>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4610      	mov	r0, r2
 800c21e:	4619      	mov	r1, r3
 800c220:	a309      	add	r3, pc, #36	@ (adr r3, 800c248 <can1_ams_s08_voltages_1_s08v05_encode+0x48>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	f7f4 fab5 	bl	8000794 <__aeabi_ddiv>
 800c22a:	4602      	mov	r2, r0
 800c22c:	460b      	mov	r3, r1
 800c22e:	4610      	mov	r0, r2
 800c230:	4619      	mov	r1, r3
 800c232:	f7f4 fc47 	bl	8000ac4 <__aeabi_d2uiz>
 800c236:	4603      	mov	r3, r0
 800c238:	b2db      	uxtb	r3, r3
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	f3af 8000 	nop.w
 800c248:	fcce1c58 	.word	0xfcce1c58
 800c24c:	3f800e6a 	.word	0x3f800e6a
 800c250:	40040000 	.word	0x40040000
 800c254:	00000000 	.word	0x00000000

0800c258 <can1_ams_s08_voltages_1_s08v06_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v06_encode(double value)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c262:	f04f 0200 	mov.w	r2, #0
 800c266:	4b10      	ldr	r3, [pc, #64]	@ (800c2a8 <can1_ams_s08_voltages_1_s08v06_encode+0x50>)
 800c268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c26c:	f7f3 ffb0 	bl	80001d0 <__aeabi_dsub>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4610      	mov	r0, r2
 800c276:	4619      	mov	r1, r3
 800c278:	a309      	add	r3, pc, #36	@ (adr r3, 800c2a0 <can1_ams_s08_voltages_1_s08v06_encode+0x48>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 fa89 	bl	8000794 <__aeabi_ddiv>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4610      	mov	r0, r2
 800c288:	4619      	mov	r1, r3
 800c28a:	f7f4 fc1b 	bl	8000ac4 <__aeabi_d2uiz>
 800c28e:	4603      	mov	r3, r0
 800c290:	b2db      	uxtb	r3, r3
}
 800c292:	4618      	mov	r0, r3
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	f3af 8000 	nop.w
 800c2a0:	fcce1c58 	.word	0xfcce1c58
 800c2a4:	3f800e6a 	.word	0x3f800e6a
 800c2a8:	40040000 	.word	0x40040000

0800c2ac <can1_ams_s08_voltages_2_pack>:

int can1_ams_s08_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s08_voltages_2_t *src_p,
    size_t size)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b04      	cmp	r3, #4
 800c2bc:	d802      	bhi.n	800c2c4 <can1_ams_s08_voltages_2_pack+0x18>
        return (-EINVAL);
 800c2be:	f06f 0315 	mvn.w	r3, #21
 800c2c2:	e058      	b.n	800c376 <can1_ams_s08_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800c2c4:	2205      	movs	r2, #5
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f004 f9dd 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s08v07, 0u, 0xffu);
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	22ff      	movs	r2, #255	@ 0xff
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fd f890 	bl	80093fc <pack_left_shift_u8>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s08v08, 0u, 0xffu);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	785b      	ldrb	r3, [r3, #1]
 800c2f0:	22ff      	movs	r2, #255	@ 0xff
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fd f881 	bl	80093fc <pack_left_shift_u8>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3301      	adds	r3, #1
 800c302:	781a      	ldrb	r2, [r3, #0]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	3301      	adds	r3, #1
 800c308:	430a      	orrs	r2, r1
 800c30a:	b2d2      	uxtb	r2, r2
 800c30c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s08v09, 0u, 0xffu);
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	789b      	ldrb	r3, [r3, #2]
 800c312:	22ff      	movs	r2, #255	@ 0xff
 800c314:	2100      	movs	r1, #0
 800c316:	4618      	mov	r0, r3
 800c318:	f7fd f870 	bl	80093fc <pack_left_shift_u8>
 800c31c:	4603      	mov	r3, r0
 800c31e:	4619      	mov	r1, r3
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	3302      	adds	r3, #2
 800c324:	781a      	ldrb	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3302      	adds	r3, #2
 800c32a:	430a      	orrs	r2, r1
 800c32c:	b2d2      	uxtb	r2, r2
 800c32e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s08v10, 0u, 0xffu);
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	78db      	ldrb	r3, [r3, #3]
 800c334:	22ff      	movs	r2, #255	@ 0xff
 800c336:	2100      	movs	r1, #0
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fd f85f 	bl	80093fc <pack_left_shift_u8>
 800c33e:	4603      	mov	r3, r0
 800c340:	4619      	mov	r1, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	3303      	adds	r3, #3
 800c346:	781a      	ldrb	r2, [r3, #0]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3303      	adds	r3, #3
 800c34c:	430a      	orrs	r2, r1
 800c34e:	b2d2      	uxtb	r2, r2
 800c350:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s08v11, 0u, 0xffu);
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	791b      	ldrb	r3, [r3, #4]
 800c356:	22ff      	movs	r2, #255	@ 0xff
 800c358:	2100      	movs	r1, #0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fd f84e 	bl	80093fc <pack_left_shift_u8>
 800c360:	4603      	mov	r3, r0
 800c362:	4619      	mov	r1, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	3304      	adds	r3, #4
 800c368:	781a      	ldrb	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	3304      	adds	r3, #4
 800c36e:	430a      	orrs	r2, r1
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	701a      	strb	r2, [r3, #0]

    return (5);
 800c374:	2305      	movs	r3, #5
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <can1_ams_s08_voltages_2_s08v07_encode>:

    return 0;
}

uint8_t can1_ams_s08_voltages_2_s08v07_encode(double value)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c38a:	f04f 0200 	mov.w	r2, #0
 800c38e:	4b10      	ldr	r3, [pc, #64]	@ (800c3d0 <can1_ams_s08_voltages_2_s08v07_encode+0x50>)
 800c390:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c394:	f7f3 ff1c 	bl	80001d0 <__aeabi_dsub>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4610      	mov	r0, r2
 800c39e:	4619      	mov	r1, r3
 800c3a0:	a309      	add	r3, pc, #36	@ (adr r3, 800c3c8 <can1_ams_s08_voltages_2_s08v07_encode+0x48>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f7f4 f9f5 	bl	8000794 <__aeabi_ddiv>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	f7f4 fb87 	bl	8000ac4 <__aeabi_d2uiz>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	b2db      	uxtb	r3, r3
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	f3af 8000 	nop.w
 800c3c8:	fcce1c58 	.word	0xfcce1c58
 800c3cc:	3f800e6a 	.word	0x3f800e6a
 800c3d0:	40040000 	.word	0x40040000
 800c3d4:	00000000 	.word	0x00000000

0800c3d8 <can1_ams_s08_voltages_2_s08v08_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v08_encode(double value)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c3e2:	f04f 0200 	mov.w	r2, #0
 800c3e6:	4b10      	ldr	r3, [pc, #64]	@ (800c428 <can1_ams_s08_voltages_2_s08v08_encode+0x50>)
 800c3e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3ec:	f7f3 fef0 	bl	80001d0 <__aeabi_dsub>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	a309      	add	r3, pc, #36	@ (adr r3, 800c420 <can1_ams_s08_voltages_2_s08v08_encode+0x48>)
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f7f4 f9c9 	bl	8000794 <__aeabi_ddiv>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	4610      	mov	r0, r2
 800c408:	4619      	mov	r1, r3
 800c40a:	f7f4 fb5b 	bl	8000ac4 <__aeabi_d2uiz>
 800c40e:	4603      	mov	r3, r0
 800c410:	b2db      	uxtb	r3, r3
}
 800c412:	4618      	mov	r0, r3
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	f3af 8000 	nop.w
 800c420:	fcce1c58 	.word	0xfcce1c58
 800c424:	3f800e6a 	.word	0x3f800e6a
 800c428:	40040000 	.word	0x40040000
 800c42c:	00000000 	.word	0x00000000

0800c430 <can1_ams_s08_voltages_2_s08v09_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v09_encode(double value)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c43a:	f04f 0200 	mov.w	r2, #0
 800c43e:	4b10      	ldr	r3, [pc, #64]	@ (800c480 <can1_ams_s08_voltages_2_s08v09_encode+0x50>)
 800c440:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c444:	f7f3 fec4 	bl	80001d0 <__aeabi_dsub>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	4610      	mov	r0, r2
 800c44e:	4619      	mov	r1, r3
 800c450:	a309      	add	r3, pc, #36	@ (adr r3, 800c478 <can1_ams_s08_voltages_2_s08v09_encode+0x48>)
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	f7f4 f99d 	bl	8000794 <__aeabi_ddiv>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	4610      	mov	r0, r2
 800c460:	4619      	mov	r1, r3
 800c462:	f7f4 fb2f 	bl	8000ac4 <__aeabi_d2uiz>
 800c466:	4603      	mov	r3, r0
 800c468:	b2db      	uxtb	r3, r3
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	f3af 8000 	nop.w
 800c478:	fcce1c58 	.word	0xfcce1c58
 800c47c:	3f800e6a 	.word	0x3f800e6a
 800c480:	40040000 	.word	0x40040000
 800c484:	00000000 	.word	0x00000000

0800c488 <can1_ams_s08_voltages_2_s08v10_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v10_encode(double value)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c492:	f04f 0200 	mov.w	r2, #0
 800c496:	4b10      	ldr	r3, [pc, #64]	@ (800c4d8 <can1_ams_s08_voltages_2_s08v10_encode+0x50>)
 800c498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c49c:	f7f3 fe98 	bl	80001d0 <__aeabi_dsub>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	a309      	add	r3, pc, #36	@ (adr r3, 800c4d0 <can1_ams_s08_voltages_2_s08v10_encode+0x48>)
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	f7f4 f971 	bl	8000794 <__aeabi_ddiv>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	f7f4 fb03 	bl	8000ac4 <__aeabi_d2uiz>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	b2db      	uxtb	r3, r3
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	f3af 8000 	nop.w
 800c4d0:	fcce1c58 	.word	0xfcce1c58
 800c4d4:	3f800e6a 	.word	0x3f800e6a
 800c4d8:	40040000 	.word	0x40040000

0800c4dc <can1_ams_s09_voltages_1_pack>:

int can1_ams_s09_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s09_voltages_1_t *src_p,
    size_t size)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d802      	bhi.n	800c4f4 <can1_ams_s09_voltages_1_pack+0x18>
        return (-EINVAL);
 800c4ee:	f06f 0315 	mvn.w	r3, #21
 800c4f2:	e069      	b.n	800c5c8 <can1_ams_s09_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800c4f4:	2206      	movs	r2, #6
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f004 f8c5 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s09v01, 0u, 0xffu);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	22ff      	movs	r2, #255	@ 0xff
 800c504:	2100      	movs	r1, #0
 800c506:	4618      	mov	r0, r3
 800c508:	f7fc ff78 	bl	80093fc <pack_left_shift_u8>
 800c50c:	4603      	mov	r3, r0
 800c50e:	461a      	mov	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	4313      	orrs	r3, r2
 800c516:	b2da      	uxtb	r2, r3
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s09v02, 0u, 0xffu);
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	785b      	ldrb	r3, [r3, #1]
 800c520:	22ff      	movs	r2, #255	@ 0xff
 800c522:	2100      	movs	r1, #0
 800c524:	4618      	mov	r0, r3
 800c526:	f7fc ff69 	bl	80093fc <pack_left_shift_u8>
 800c52a:	4603      	mov	r3, r0
 800c52c:	4619      	mov	r1, r3
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3301      	adds	r3, #1
 800c532:	781a      	ldrb	r2, [r3, #0]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	430a      	orrs	r2, r1
 800c53a:	b2d2      	uxtb	r2, r2
 800c53c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s09v03, 0u, 0xffu);
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	789b      	ldrb	r3, [r3, #2]
 800c542:	22ff      	movs	r2, #255	@ 0xff
 800c544:	2100      	movs	r1, #0
 800c546:	4618      	mov	r0, r3
 800c548:	f7fc ff58 	bl	80093fc <pack_left_shift_u8>
 800c54c:	4603      	mov	r3, r0
 800c54e:	4619      	mov	r1, r3
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3302      	adds	r3, #2
 800c554:	781a      	ldrb	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3302      	adds	r3, #2
 800c55a:	430a      	orrs	r2, r1
 800c55c:	b2d2      	uxtb	r2, r2
 800c55e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s09v04, 0u, 0xffu);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	78db      	ldrb	r3, [r3, #3]
 800c564:	22ff      	movs	r2, #255	@ 0xff
 800c566:	2100      	movs	r1, #0
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fc ff47 	bl	80093fc <pack_left_shift_u8>
 800c56e:	4603      	mov	r3, r0
 800c570:	4619      	mov	r1, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3303      	adds	r3, #3
 800c576:	781a      	ldrb	r2, [r3, #0]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3303      	adds	r3, #3
 800c57c:	430a      	orrs	r2, r1
 800c57e:	b2d2      	uxtb	r2, r2
 800c580:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s09v05, 0u, 0xffu);
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	791b      	ldrb	r3, [r3, #4]
 800c586:	22ff      	movs	r2, #255	@ 0xff
 800c588:	2100      	movs	r1, #0
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fc ff36 	bl	80093fc <pack_left_shift_u8>
 800c590:	4603      	mov	r3, r0
 800c592:	4619      	mov	r1, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3304      	adds	r3, #4
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3304      	adds	r3, #4
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	b2d2      	uxtb	r2, r2
 800c5a2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s09v06, 0u, 0xffu);
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	795b      	ldrb	r3, [r3, #5]
 800c5a8:	22ff      	movs	r2, #255	@ 0xff
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fc ff25 	bl	80093fc <pack_left_shift_u8>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	3305      	adds	r3, #5
 800c5ba:	781a      	ldrb	r2, [r3, #0]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	3305      	adds	r3, #5
 800c5c0:	430a      	orrs	r2, r1
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	701a      	strb	r2, [r3, #0]

    return (6);
 800c5c6:	2306      	movs	r3, #6
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <can1_ams_s09_voltages_1_s09v01_encode>:

    return 0;
}

uint8_t can1_ams_s09_voltages_1_s09v01_encode(double value)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c5da:	f04f 0200 	mov.w	r2, #0
 800c5de:	4b10      	ldr	r3, [pc, #64]	@ (800c620 <can1_ams_s09_voltages_1_s09v01_encode+0x50>)
 800c5e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c5e4:	f7f3 fdf4 	bl	80001d0 <__aeabi_dsub>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	a309      	add	r3, pc, #36	@ (adr r3, 800c618 <can1_ams_s09_voltages_1_s09v01_encode+0x48>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f4 f8cd 	bl	8000794 <__aeabi_ddiv>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4610      	mov	r0, r2
 800c600:	4619      	mov	r1, r3
 800c602:	f7f4 fa5f 	bl	8000ac4 <__aeabi_d2uiz>
 800c606:	4603      	mov	r3, r0
 800c608:	b2db      	uxtb	r3, r3
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	f3af 8000 	nop.w
 800c618:	fcce1c58 	.word	0xfcce1c58
 800c61c:	3f800e6a 	.word	0x3f800e6a
 800c620:	40040000 	.word	0x40040000
 800c624:	00000000 	.word	0x00000000

0800c628 <can1_ams_s09_voltages_1_s09v02_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v02_encode(double value)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c632:	f04f 0200 	mov.w	r2, #0
 800c636:	4b10      	ldr	r3, [pc, #64]	@ (800c678 <can1_ams_s09_voltages_1_s09v02_encode+0x50>)
 800c638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c63c:	f7f3 fdc8 	bl	80001d0 <__aeabi_dsub>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4610      	mov	r0, r2
 800c646:	4619      	mov	r1, r3
 800c648:	a309      	add	r3, pc, #36	@ (adr r3, 800c670 <can1_ams_s09_voltages_1_s09v02_encode+0x48>)
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f7f4 f8a1 	bl	8000794 <__aeabi_ddiv>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4610      	mov	r0, r2
 800c658:	4619      	mov	r1, r3
 800c65a:	f7f4 fa33 	bl	8000ac4 <__aeabi_d2uiz>
 800c65e:	4603      	mov	r3, r0
 800c660:	b2db      	uxtb	r3, r3
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w
 800c670:	fcce1c58 	.word	0xfcce1c58
 800c674:	3f800e6a 	.word	0x3f800e6a
 800c678:	40040000 	.word	0x40040000
 800c67c:	00000000 	.word	0x00000000

0800c680 <can1_ams_s09_voltages_1_s09v03_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v03_encode(double value)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c68a:	f04f 0200 	mov.w	r2, #0
 800c68e:	4b10      	ldr	r3, [pc, #64]	@ (800c6d0 <can1_ams_s09_voltages_1_s09v03_encode+0x50>)
 800c690:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c694:	f7f3 fd9c 	bl	80001d0 <__aeabi_dsub>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4610      	mov	r0, r2
 800c69e:	4619      	mov	r1, r3
 800c6a0:	a309      	add	r3, pc, #36	@ (adr r3, 800c6c8 <can1_ams_s09_voltages_1_s09v03_encode+0x48>)
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f7f4 f875 	bl	8000794 <__aeabi_ddiv>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	f7f4 fa07 	bl	8000ac4 <__aeabi_d2uiz>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	b2db      	uxtb	r3, r3
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	f3af 8000 	nop.w
 800c6c8:	fcce1c58 	.word	0xfcce1c58
 800c6cc:	3f800e6a 	.word	0x3f800e6a
 800c6d0:	40040000 	.word	0x40040000
 800c6d4:	00000000 	.word	0x00000000

0800c6d8 <can1_ams_s09_voltages_1_s09v04_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v04_encode(double value)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c6e2:	f04f 0200 	mov.w	r2, #0
 800c6e6:	4b10      	ldr	r3, [pc, #64]	@ (800c728 <can1_ams_s09_voltages_1_s09v04_encode+0x50>)
 800c6e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6ec:	f7f3 fd70 	bl	80001d0 <__aeabi_dsub>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	a309      	add	r3, pc, #36	@ (adr r3, 800c720 <can1_ams_s09_voltages_1_s09v04_encode+0x48>)
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	f7f4 f849 	bl	8000794 <__aeabi_ddiv>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4610      	mov	r0, r2
 800c708:	4619      	mov	r1, r3
 800c70a:	f7f4 f9db 	bl	8000ac4 <__aeabi_d2uiz>
 800c70e:	4603      	mov	r3, r0
 800c710:	b2db      	uxtb	r3, r3
}
 800c712:	4618      	mov	r0, r3
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	f3af 8000 	nop.w
 800c720:	fcce1c58 	.word	0xfcce1c58
 800c724:	3f800e6a 	.word	0x3f800e6a
 800c728:	40040000 	.word	0x40040000
 800c72c:	00000000 	.word	0x00000000

0800c730 <can1_ams_s09_voltages_1_s09v05_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v05_encode(double value)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c73a:	f04f 0200 	mov.w	r2, #0
 800c73e:	4b10      	ldr	r3, [pc, #64]	@ (800c780 <can1_ams_s09_voltages_1_s09v05_encode+0x50>)
 800c740:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c744:	f7f3 fd44 	bl	80001d0 <__aeabi_dsub>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	4610      	mov	r0, r2
 800c74e:	4619      	mov	r1, r3
 800c750:	a309      	add	r3, pc, #36	@ (adr r3, 800c778 <can1_ams_s09_voltages_1_s09v05_encode+0x48>)
 800c752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c756:	f7f4 f81d 	bl	8000794 <__aeabi_ddiv>
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	4610      	mov	r0, r2
 800c760:	4619      	mov	r1, r3
 800c762:	f7f4 f9af 	bl	8000ac4 <__aeabi_d2uiz>
 800c766:	4603      	mov	r3, r0
 800c768:	b2db      	uxtb	r3, r3
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	f3af 8000 	nop.w
 800c778:	fcce1c58 	.word	0xfcce1c58
 800c77c:	3f800e6a 	.word	0x3f800e6a
 800c780:	40040000 	.word	0x40040000
 800c784:	00000000 	.word	0x00000000

0800c788 <can1_ams_s09_voltages_1_s09v06_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v06_encode(double value)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c792:	f04f 0200 	mov.w	r2, #0
 800c796:	4b10      	ldr	r3, [pc, #64]	@ (800c7d8 <can1_ams_s09_voltages_1_s09v06_encode+0x50>)
 800c798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c79c:	f7f3 fd18 	bl	80001d0 <__aeabi_dsub>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	a309      	add	r3, pc, #36	@ (adr r3, 800c7d0 <can1_ams_s09_voltages_1_s09v06_encode+0x48>)
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	f7f3 fff1 	bl	8000794 <__aeabi_ddiv>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	f7f4 f983 	bl	8000ac4 <__aeabi_d2uiz>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	b2db      	uxtb	r3, r3
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	f3af 8000 	nop.w
 800c7d0:	fcce1c58 	.word	0xfcce1c58
 800c7d4:	3f800e6a 	.word	0x3f800e6a
 800c7d8:	40040000 	.word	0x40040000

0800c7dc <can1_ams_s09_voltages_2_pack>:

int can1_ams_s09_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s09_voltages_2_t *src_p,
    size_t size)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	d802      	bhi.n	800c7f4 <can1_ams_s09_voltages_2_pack+0x18>
        return (-EINVAL);
 800c7ee:	f06f 0315 	mvn.w	r3, #21
 800c7f2:	e058      	b.n	800c8a6 <can1_ams_s09_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800c7f4:	2205      	movs	r2, #5
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f003 ff45 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s09v07, 0u, 0xffu);
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	22ff      	movs	r2, #255	@ 0xff
 800c804:	2100      	movs	r1, #0
 800c806:	4618      	mov	r0, r3
 800c808:	f7fc fdf8 	bl	80093fc <pack_left_shift_u8>
 800c80c:	4603      	mov	r3, r0
 800c80e:	461a      	mov	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	4313      	orrs	r3, r2
 800c816:	b2da      	uxtb	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s09v08, 0u, 0xffu);
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	785b      	ldrb	r3, [r3, #1]
 800c820:	22ff      	movs	r2, #255	@ 0xff
 800c822:	2100      	movs	r1, #0
 800c824:	4618      	mov	r0, r3
 800c826:	f7fc fde9 	bl	80093fc <pack_left_shift_u8>
 800c82a:	4603      	mov	r3, r0
 800c82c:	4619      	mov	r1, r3
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3301      	adds	r3, #1
 800c832:	781a      	ldrb	r2, [r3, #0]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	3301      	adds	r3, #1
 800c838:	430a      	orrs	r2, r1
 800c83a:	b2d2      	uxtb	r2, r2
 800c83c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s09v09, 0u, 0xffu);
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	789b      	ldrb	r3, [r3, #2]
 800c842:	22ff      	movs	r2, #255	@ 0xff
 800c844:	2100      	movs	r1, #0
 800c846:	4618      	mov	r0, r3
 800c848:	f7fc fdd8 	bl	80093fc <pack_left_shift_u8>
 800c84c:	4603      	mov	r3, r0
 800c84e:	4619      	mov	r1, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3302      	adds	r3, #2
 800c854:	781a      	ldrb	r2, [r3, #0]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3302      	adds	r3, #2
 800c85a:	430a      	orrs	r2, r1
 800c85c:	b2d2      	uxtb	r2, r2
 800c85e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s09v10, 0u, 0xffu);
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	78db      	ldrb	r3, [r3, #3]
 800c864:	22ff      	movs	r2, #255	@ 0xff
 800c866:	2100      	movs	r1, #0
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fc fdc7 	bl	80093fc <pack_left_shift_u8>
 800c86e:	4603      	mov	r3, r0
 800c870:	4619      	mov	r1, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3303      	adds	r3, #3
 800c876:	781a      	ldrb	r2, [r3, #0]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3303      	adds	r3, #3
 800c87c:	430a      	orrs	r2, r1
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s09v11, 0u, 0xffu);
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	791b      	ldrb	r3, [r3, #4]
 800c886:	22ff      	movs	r2, #255	@ 0xff
 800c888:	2100      	movs	r1, #0
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fc fdb6 	bl	80093fc <pack_left_shift_u8>
 800c890:	4603      	mov	r3, r0
 800c892:	4619      	mov	r1, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3304      	adds	r3, #4
 800c898:	781a      	ldrb	r2, [r3, #0]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3304      	adds	r3, #4
 800c89e:	430a      	orrs	r2, r1
 800c8a0:	b2d2      	uxtb	r2, r2
 800c8a2:	701a      	strb	r2, [r3, #0]

    return (5);
 800c8a4:	2305      	movs	r3, #5
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <can1_ams_s09_voltages_2_s09v07_encode>:

    return 0;
}

uint8_t can1_ams_s09_voltages_2_s09v07_encode(double value)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c8ba:	f04f 0200 	mov.w	r2, #0
 800c8be:	4b10      	ldr	r3, [pc, #64]	@ (800c900 <can1_ams_s09_voltages_2_s09v07_encode+0x50>)
 800c8c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8c4:	f7f3 fc84 	bl	80001d0 <__aeabi_dsub>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	a309      	add	r3, pc, #36	@ (adr r3, 800c8f8 <can1_ams_s09_voltages_2_s09v07_encode+0x48>)
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f7f3 ff5d 	bl	8000794 <__aeabi_ddiv>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	4610      	mov	r0, r2
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	f7f4 f8ef 	bl	8000ac4 <__aeabi_d2uiz>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	b2db      	uxtb	r3, r3
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	f3af 8000 	nop.w
 800c8f8:	fcce1c58 	.word	0xfcce1c58
 800c8fc:	3f800e6a 	.word	0x3f800e6a
 800c900:	40040000 	.word	0x40040000
 800c904:	00000000 	.word	0x00000000

0800c908 <can1_ams_s09_voltages_2_s09v08_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v08_encode(double value)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c912:	f04f 0200 	mov.w	r2, #0
 800c916:	4b10      	ldr	r3, [pc, #64]	@ (800c958 <can1_ams_s09_voltages_2_s09v08_encode+0x50>)
 800c918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c91c:	f7f3 fc58 	bl	80001d0 <__aeabi_dsub>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4610      	mov	r0, r2
 800c926:	4619      	mov	r1, r3
 800c928:	a309      	add	r3, pc, #36	@ (adr r3, 800c950 <can1_ams_s09_voltages_2_s09v08_encode+0x48>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	f7f3 ff31 	bl	8000794 <__aeabi_ddiv>
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	4610      	mov	r0, r2
 800c938:	4619      	mov	r1, r3
 800c93a:	f7f4 f8c3 	bl	8000ac4 <__aeabi_d2uiz>
 800c93e:	4603      	mov	r3, r0
 800c940:	b2db      	uxtb	r3, r3
}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	f3af 8000 	nop.w
 800c950:	fcce1c58 	.word	0xfcce1c58
 800c954:	3f800e6a 	.word	0x3f800e6a
 800c958:	40040000 	.word	0x40040000
 800c95c:	00000000 	.word	0x00000000

0800c960 <can1_ams_s09_voltages_2_s09v09_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v09_encode(double value)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c96a:	f04f 0200 	mov.w	r2, #0
 800c96e:	4b10      	ldr	r3, [pc, #64]	@ (800c9b0 <can1_ams_s09_voltages_2_s09v09_encode+0x50>)
 800c970:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c974:	f7f3 fc2c 	bl	80001d0 <__aeabi_dsub>
 800c978:	4602      	mov	r2, r0
 800c97a:	460b      	mov	r3, r1
 800c97c:	4610      	mov	r0, r2
 800c97e:	4619      	mov	r1, r3
 800c980:	a309      	add	r3, pc, #36	@ (adr r3, 800c9a8 <can1_ams_s09_voltages_2_s09v09_encode+0x48>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7f3 ff05 	bl	8000794 <__aeabi_ddiv>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4610      	mov	r0, r2
 800c990:	4619      	mov	r1, r3
 800c992:	f7f4 f897 	bl	8000ac4 <__aeabi_d2uiz>
 800c996:	4603      	mov	r3, r0
 800c998:	b2db      	uxtb	r3, r3
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	f3af 8000 	nop.w
 800c9a8:	fcce1c58 	.word	0xfcce1c58
 800c9ac:	3f800e6a 	.word	0x3f800e6a
 800c9b0:	40040000 	.word	0x40040000
 800c9b4:	00000000 	.word	0x00000000

0800c9b8 <can1_ams_s09_voltages_2_s09v10_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v10_encode(double value)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800c9c2:	f04f 0200 	mov.w	r2, #0
 800c9c6:	4b10      	ldr	r3, [pc, #64]	@ (800ca08 <can1_ams_s09_voltages_2_s09v10_encode+0x50>)
 800c9c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9cc:	f7f3 fc00 	bl	80001d0 <__aeabi_dsub>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	a309      	add	r3, pc, #36	@ (adr r3, 800ca00 <can1_ams_s09_voltages_2_s09v10_encode+0x48>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f7f3 fed9 	bl	8000794 <__aeabi_ddiv>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	f7f4 f86b 	bl	8000ac4 <__aeabi_d2uiz>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	b2db      	uxtb	r3, r3
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	f3af 8000 	nop.w
 800ca00:	fcce1c58 	.word	0xfcce1c58
 800ca04:	3f800e6a 	.word	0x3f800e6a
 800ca08:	40040000 	.word	0x40040000
 800ca0c:	00000000 	.word	0x00000000

0800ca10 <can1_ams_s09_voltages_2_s09v11_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v11_encode(double value)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ca1a:	f04f 0200 	mov.w	r2, #0
 800ca1e:	4b10      	ldr	r3, [pc, #64]	@ (800ca60 <can1_ams_s09_voltages_2_s09v11_encode+0x50>)
 800ca20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca24:	f7f3 fbd4 	bl	80001d0 <__aeabi_dsub>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	4619      	mov	r1, r3
 800ca30:	a309      	add	r3, pc, #36	@ (adr r3, 800ca58 <can1_ams_s09_voltages_2_s09v11_encode+0x48>)
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	f7f3 fead 	bl	8000794 <__aeabi_ddiv>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4610      	mov	r0, r2
 800ca40:	4619      	mov	r1, r3
 800ca42:	f7f4 f83f 	bl	8000ac4 <__aeabi_d2uiz>
 800ca46:	4603      	mov	r3, r0
 800ca48:	b2db      	uxtb	r3, r3
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	f3af 8000 	nop.w
 800ca58:	fcce1c58 	.word	0xfcce1c58
 800ca5c:	3f800e6a 	.word	0x3f800e6a
 800ca60:	40040000 	.word	0x40040000

0800ca64 <can1_ams_s10_voltages_1_pack>:

int can1_ams_s10_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s10_voltages_1_t *src_p,
    size_t size)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2b05      	cmp	r3, #5
 800ca74:	d802      	bhi.n	800ca7c <can1_ams_s10_voltages_1_pack+0x18>
        return (-EINVAL);
 800ca76:	f06f 0315 	mvn.w	r3, #21
 800ca7a:	e069      	b.n	800cb50 <can1_ams_s10_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800ca7c:	2206      	movs	r2, #6
 800ca7e:	2100      	movs	r1, #0
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f003 fe01 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s10v01, 0u, 0xffu);
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	22ff      	movs	r2, #255	@ 0xff
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fc fcb4 	bl	80093fc <pack_left_shift_u8>
 800ca94:	4603      	mov	r3, r0
 800ca96:	461a      	mov	r2, r3
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s10v02, 0u, 0xffu);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	785b      	ldrb	r3, [r3, #1]
 800caa8:	22ff      	movs	r2, #255	@ 0xff
 800caaa:	2100      	movs	r1, #0
 800caac:	4618      	mov	r0, r3
 800caae:	f7fc fca5 	bl	80093fc <pack_left_shift_u8>
 800cab2:	4603      	mov	r3, r0
 800cab4:	4619      	mov	r1, r3
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3301      	adds	r3, #1
 800caba:	781a      	ldrb	r2, [r3, #0]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3301      	adds	r3, #1
 800cac0:	430a      	orrs	r2, r1
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s10v03, 0u, 0xffu);
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	789b      	ldrb	r3, [r3, #2]
 800caca:	22ff      	movs	r2, #255	@ 0xff
 800cacc:	2100      	movs	r1, #0
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fc fc94 	bl	80093fc <pack_left_shift_u8>
 800cad4:	4603      	mov	r3, r0
 800cad6:	4619      	mov	r1, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3302      	adds	r3, #2
 800cadc:	781a      	ldrb	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3302      	adds	r3, #2
 800cae2:	430a      	orrs	r2, r1
 800cae4:	b2d2      	uxtb	r2, r2
 800cae6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s10v04, 0u, 0xffu);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	78db      	ldrb	r3, [r3, #3]
 800caec:	22ff      	movs	r2, #255	@ 0xff
 800caee:	2100      	movs	r1, #0
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fc fc83 	bl	80093fc <pack_left_shift_u8>
 800caf6:	4603      	mov	r3, r0
 800caf8:	4619      	mov	r1, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3303      	adds	r3, #3
 800cafe:	781a      	ldrb	r2, [r3, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3303      	adds	r3, #3
 800cb04:	430a      	orrs	r2, r1
 800cb06:	b2d2      	uxtb	r2, r2
 800cb08:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s10v05, 0u, 0xffu);
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	791b      	ldrb	r3, [r3, #4]
 800cb0e:	22ff      	movs	r2, #255	@ 0xff
 800cb10:	2100      	movs	r1, #0
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fc fc72 	bl	80093fc <pack_left_shift_u8>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	781a      	ldrb	r2, [r3, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3304      	adds	r3, #4
 800cb26:	430a      	orrs	r2, r1
 800cb28:	b2d2      	uxtb	r2, r2
 800cb2a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s10v06, 0u, 0xffu);
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	795b      	ldrb	r3, [r3, #5]
 800cb30:	22ff      	movs	r2, #255	@ 0xff
 800cb32:	2100      	movs	r1, #0
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fc fc61 	bl	80093fc <pack_left_shift_u8>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3305      	adds	r3, #5
 800cb42:	781a      	ldrb	r2, [r3, #0]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3305      	adds	r3, #5
 800cb48:	430a      	orrs	r2, r1
 800cb4a:	b2d2      	uxtb	r2, r2
 800cb4c:	701a      	strb	r2, [r3, #0]

    return (6);
 800cb4e:	2306      	movs	r3, #6
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <can1_ams_s10_voltages_1_s10v01_encode>:

    return 0;
}

uint8_t can1_ams_s10_voltages_1_s10v01_encode(double value)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cb62:	f04f 0200 	mov.w	r2, #0
 800cb66:	4b10      	ldr	r3, [pc, #64]	@ (800cba8 <can1_ams_s10_voltages_1_s10v01_encode+0x50>)
 800cb68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb6c:	f7f3 fb30 	bl	80001d0 <__aeabi_dsub>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4610      	mov	r0, r2
 800cb76:	4619      	mov	r1, r3
 800cb78:	a309      	add	r3, pc, #36	@ (adr r3, 800cba0 <can1_ams_s10_voltages_1_s10v01_encode+0x48>)
 800cb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7e:	f7f3 fe09 	bl	8000794 <__aeabi_ddiv>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	4610      	mov	r0, r2
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f7f3 ff9b 	bl	8000ac4 <__aeabi_d2uiz>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	b2db      	uxtb	r3, r3
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	f3af 8000 	nop.w
 800cba0:	fcce1c58 	.word	0xfcce1c58
 800cba4:	3f800e6a 	.word	0x3f800e6a
 800cba8:	40040000 	.word	0x40040000
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <can1_ams_s10_voltages_1_s10v02_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v02_encode(double value)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cbba:	f04f 0200 	mov.w	r2, #0
 800cbbe:	4b10      	ldr	r3, [pc, #64]	@ (800cc00 <can1_ams_s10_voltages_1_s10v02_encode+0x50>)
 800cbc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbc4:	f7f3 fb04 	bl	80001d0 <__aeabi_dsub>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	460b      	mov	r3, r1
 800cbcc:	4610      	mov	r0, r2
 800cbce:	4619      	mov	r1, r3
 800cbd0:	a309      	add	r3, pc, #36	@ (adr r3, 800cbf8 <can1_ams_s10_voltages_1_s10v02_encode+0x48>)
 800cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd6:	f7f3 fddd 	bl	8000794 <__aeabi_ddiv>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	460b      	mov	r3, r1
 800cbde:	4610      	mov	r0, r2
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	f7f3 ff6f 	bl	8000ac4 <__aeabi_d2uiz>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	b2db      	uxtb	r3, r3
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	f3af 8000 	nop.w
 800cbf8:	fcce1c58 	.word	0xfcce1c58
 800cbfc:	3f800e6a 	.word	0x3f800e6a
 800cc00:	40040000 	.word	0x40040000
 800cc04:	00000000 	.word	0x00000000

0800cc08 <can1_ams_s10_voltages_1_s10v03_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v03_encode(double value)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cc12:	f04f 0200 	mov.w	r2, #0
 800cc16:	4b10      	ldr	r3, [pc, #64]	@ (800cc58 <can1_ams_s10_voltages_1_s10v03_encode+0x50>)
 800cc18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc1c:	f7f3 fad8 	bl	80001d0 <__aeabi_dsub>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4610      	mov	r0, r2
 800cc26:	4619      	mov	r1, r3
 800cc28:	a309      	add	r3, pc, #36	@ (adr r3, 800cc50 <can1_ams_s10_voltages_1_s10v03_encode+0x48>)
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	f7f3 fdb1 	bl	8000794 <__aeabi_ddiv>
 800cc32:	4602      	mov	r2, r0
 800cc34:	460b      	mov	r3, r1
 800cc36:	4610      	mov	r0, r2
 800cc38:	4619      	mov	r1, r3
 800cc3a:	f7f3 ff43 	bl	8000ac4 <__aeabi_d2uiz>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	b2db      	uxtb	r3, r3
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	f3af 8000 	nop.w
 800cc50:	fcce1c58 	.word	0xfcce1c58
 800cc54:	3f800e6a 	.word	0x3f800e6a
 800cc58:	40040000 	.word	0x40040000
 800cc5c:	00000000 	.word	0x00000000

0800cc60 <can1_ams_s10_voltages_1_s10v04_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v04_encode(double value)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cc6a:	f04f 0200 	mov.w	r2, #0
 800cc6e:	4b10      	ldr	r3, [pc, #64]	@ (800ccb0 <can1_ams_s10_voltages_1_s10v04_encode+0x50>)
 800cc70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc74:	f7f3 faac 	bl	80001d0 <__aeabi_dsub>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	4619      	mov	r1, r3
 800cc80:	a309      	add	r3, pc, #36	@ (adr r3, 800cca8 <can1_ams_s10_voltages_1_s10v04_encode+0x48>)
 800cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc86:	f7f3 fd85 	bl	8000794 <__aeabi_ddiv>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	4610      	mov	r0, r2
 800cc90:	4619      	mov	r1, r3
 800cc92:	f7f3 ff17 	bl	8000ac4 <__aeabi_d2uiz>
 800cc96:	4603      	mov	r3, r0
 800cc98:	b2db      	uxtb	r3, r3
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	f3af 8000 	nop.w
 800cca8:	fcce1c58 	.word	0xfcce1c58
 800ccac:	3f800e6a 	.word	0x3f800e6a
 800ccb0:	40040000 	.word	0x40040000
 800ccb4:	00000000 	.word	0x00000000

0800ccb8 <can1_ams_s10_voltages_1_s10v05_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v05_encode(double value)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ccc2:	f04f 0200 	mov.w	r2, #0
 800ccc6:	4b10      	ldr	r3, [pc, #64]	@ (800cd08 <can1_ams_s10_voltages_1_s10v05_encode+0x50>)
 800ccc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cccc:	f7f3 fa80 	bl	80001d0 <__aeabi_dsub>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	a309      	add	r3, pc, #36	@ (adr r3, 800cd00 <can1_ams_s10_voltages_1_s10v05_encode+0x48>)
 800ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccde:	f7f3 fd59 	bl	8000794 <__aeabi_ddiv>
 800cce2:	4602      	mov	r2, r0
 800cce4:	460b      	mov	r3, r1
 800cce6:	4610      	mov	r0, r2
 800cce8:	4619      	mov	r1, r3
 800ccea:	f7f3 feeb 	bl	8000ac4 <__aeabi_d2uiz>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	b2db      	uxtb	r3, r3
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	f3af 8000 	nop.w
 800cd00:	fcce1c58 	.word	0xfcce1c58
 800cd04:	3f800e6a 	.word	0x3f800e6a
 800cd08:	40040000 	.word	0x40040000
 800cd0c:	00000000 	.word	0x00000000

0800cd10 <can1_ams_s10_voltages_1_s10v06_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v06_encode(double value)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cd1a:	f04f 0200 	mov.w	r2, #0
 800cd1e:	4b10      	ldr	r3, [pc, #64]	@ (800cd60 <can1_ams_s10_voltages_1_s10v06_encode+0x50>)
 800cd20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd24:	f7f3 fa54 	bl	80001d0 <__aeabi_dsub>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4619      	mov	r1, r3
 800cd30:	a309      	add	r3, pc, #36	@ (adr r3, 800cd58 <can1_ams_s10_voltages_1_s10v06_encode+0x48>)
 800cd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd36:	f7f3 fd2d 	bl	8000794 <__aeabi_ddiv>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	4610      	mov	r0, r2
 800cd40:	4619      	mov	r1, r3
 800cd42:	f7f3 febf 	bl	8000ac4 <__aeabi_d2uiz>
 800cd46:	4603      	mov	r3, r0
 800cd48:	b2db      	uxtb	r3, r3
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3708      	adds	r7, #8
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	f3af 8000 	nop.w
 800cd58:	fcce1c58 	.word	0xfcce1c58
 800cd5c:	3f800e6a 	.word	0x3f800e6a
 800cd60:	40040000 	.word	0x40040000

0800cd64 <can1_ams_s10_voltages_2_pack>:

int can1_ams_s10_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s10_voltages_2_t *src_p,
    size_t size)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b04      	cmp	r3, #4
 800cd74:	d802      	bhi.n	800cd7c <can1_ams_s10_voltages_2_pack+0x18>
        return (-EINVAL);
 800cd76:	f06f 0315 	mvn.w	r3, #21
 800cd7a:	e058      	b.n	800ce2e <can1_ams_s10_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800cd7c:	2205      	movs	r2, #5
 800cd7e:	2100      	movs	r1, #0
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f003 fc81 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s10v07, 0u, 0xffu);
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	22ff      	movs	r2, #255	@ 0xff
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fc fb34 	bl	80093fc <pack_left_shift_u8>
 800cd94:	4603      	mov	r3, r0
 800cd96:	461a      	mov	r2, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s10v08, 0u, 0xffu);
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	785b      	ldrb	r3, [r3, #1]
 800cda8:	22ff      	movs	r2, #255	@ 0xff
 800cdaa:	2100      	movs	r1, #0
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7fc fb25 	bl	80093fc <pack_left_shift_u8>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	781a      	ldrb	r2, [r3, #0]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	430a      	orrs	r2, r1
 800cdc2:	b2d2      	uxtb	r2, r2
 800cdc4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s10v09, 0u, 0xffu);
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	789b      	ldrb	r3, [r3, #2]
 800cdca:	22ff      	movs	r2, #255	@ 0xff
 800cdcc:	2100      	movs	r1, #0
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fc fb14 	bl	80093fc <pack_left_shift_u8>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3302      	adds	r3, #2
 800cddc:	781a      	ldrb	r2, [r3, #0]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	3302      	adds	r3, #2
 800cde2:	430a      	orrs	r2, r1
 800cde4:	b2d2      	uxtb	r2, r2
 800cde6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s10v10, 0u, 0xffu);
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	78db      	ldrb	r3, [r3, #3]
 800cdec:	22ff      	movs	r2, #255	@ 0xff
 800cdee:	2100      	movs	r1, #0
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fc fb03 	bl	80093fc <pack_left_shift_u8>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	3303      	adds	r3, #3
 800cdfe:	781a      	ldrb	r2, [r3, #0]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	3303      	adds	r3, #3
 800ce04:	430a      	orrs	r2, r1
 800ce06:	b2d2      	uxtb	r2, r2
 800ce08:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s10v11, 0u, 0xffu);
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	791b      	ldrb	r3, [r3, #4]
 800ce0e:	22ff      	movs	r2, #255	@ 0xff
 800ce10:	2100      	movs	r1, #0
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fc faf2 	bl	80093fc <pack_left_shift_u8>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	781a      	ldrb	r2, [r3, #0]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	3304      	adds	r3, #4
 800ce26:	430a      	orrs	r2, r1
 800ce28:	b2d2      	uxtb	r2, r2
 800ce2a:	701a      	strb	r2, [r3, #0]

    return (5);
 800ce2c:	2305      	movs	r3, #5
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <can1_ams_s10_voltages_2_s10v07_encode>:

    return 0;
}

uint8_t can1_ams_s10_voltages_2_s10v07_encode(double value)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ce42:	f04f 0200 	mov.w	r2, #0
 800ce46:	4b10      	ldr	r3, [pc, #64]	@ (800ce88 <can1_ams_s10_voltages_2_s10v07_encode+0x50>)
 800ce48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce4c:	f7f3 f9c0 	bl	80001d0 <__aeabi_dsub>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4610      	mov	r0, r2
 800ce56:	4619      	mov	r1, r3
 800ce58:	a309      	add	r3, pc, #36	@ (adr r3, 800ce80 <can1_ams_s10_voltages_2_s10v07_encode+0x48>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	f7f3 fc99 	bl	8000794 <__aeabi_ddiv>
 800ce62:	4602      	mov	r2, r0
 800ce64:	460b      	mov	r3, r1
 800ce66:	4610      	mov	r0, r2
 800ce68:	4619      	mov	r1, r3
 800ce6a:	f7f3 fe2b 	bl	8000ac4 <__aeabi_d2uiz>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	b2db      	uxtb	r3, r3
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	f3af 8000 	nop.w
 800ce80:	fcce1c58 	.word	0xfcce1c58
 800ce84:	3f800e6a 	.word	0x3f800e6a
 800ce88:	40040000 	.word	0x40040000
 800ce8c:	00000000 	.word	0x00000000

0800ce90 <can1_ams_s10_voltages_2_s10v08_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v08_encode(double value)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800ce9a:	f04f 0200 	mov.w	r2, #0
 800ce9e:	4b10      	ldr	r3, [pc, #64]	@ (800cee0 <can1_ams_s10_voltages_2_s10v08_encode+0x50>)
 800cea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cea4:	f7f3 f994 	bl	80001d0 <__aeabi_dsub>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4610      	mov	r0, r2
 800ceae:	4619      	mov	r1, r3
 800ceb0:	a309      	add	r3, pc, #36	@ (adr r3, 800ced8 <can1_ams_s10_voltages_2_s10v08_encode+0x48>)
 800ceb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb6:	f7f3 fc6d 	bl	8000794 <__aeabi_ddiv>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	4610      	mov	r0, r2
 800cec0:	4619      	mov	r1, r3
 800cec2:	f7f3 fdff 	bl	8000ac4 <__aeabi_d2uiz>
 800cec6:	4603      	mov	r3, r0
 800cec8:	b2db      	uxtb	r3, r3
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	f3af 8000 	nop.w
 800ced8:	fcce1c58 	.word	0xfcce1c58
 800cedc:	3f800e6a 	.word	0x3f800e6a
 800cee0:	40040000 	.word	0x40040000
 800cee4:	00000000 	.word	0x00000000

0800cee8 <can1_ams_s10_voltages_2_s10v09_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v09_encode(double value)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cef2:	f04f 0200 	mov.w	r2, #0
 800cef6:	4b10      	ldr	r3, [pc, #64]	@ (800cf38 <can1_ams_s10_voltages_2_s10v09_encode+0x50>)
 800cef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cefc:	f7f3 f968 	bl	80001d0 <__aeabi_dsub>
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	4610      	mov	r0, r2
 800cf06:	4619      	mov	r1, r3
 800cf08:	a309      	add	r3, pc, #36	@ (adr r3, 800cf30 <can1_ams_s10_voltages_2_s10v09_encode+0x48>)
 800cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0e:	f7f3 fc41 	bl	8000794 <__aeabi_ddiv>
 800cf12:	4602      	mov	r2, r0
 800cf14:	460b      	mov	r3, r1
 800cf16:	4610      	mov	r0, r2
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f7f3 fdd3 	bl	8000ac4 <__aeabi_d2uiz>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	b2db      	uxtb	r3, r3
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	f3af 8000 	nop.w
 800cf30:	fcce1c58 	.word	0xfcce1c58
 800cf34:	3f800e6a 	.word	0x3f800e6a
 800cf38:	40040000 	.word	0x40040000
 800cf3c:	00000000 	.word	0x00000000

0800cf40 <can1_ams_s10_voltages_2_s10v10_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v10_encode(double value)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800cf4a:	f04f 0200 	mov.w	r2, #0
 800cf4e:	4b10      	ldr	r3, [pc, #64]	@ (800cf90 <can1_ams_s10_voltages_2_s10v10_encode+0x50>)
 800cf50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf54:	f7f3 f93c 	bl	80001d0 <__aeabi_dsub>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	4619      	mov	r1, r3
 800cf60:	a309      	add	r3, pc, #36	@ (adr r3, 800cf88 <can1_ams_s10_voltages_2_s10v10_encode+0x48>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 fc15 	bl	8000794 <__aeabi_ddiv>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	4610      	mov	r0, r2
 800cf70:	4619      	mov	r1, r3
 800cf72:	f7f3 fda7 	bl	8000ac4 <__aeabi_d2uiz>
 800cf76:	4603      	mov	r3, r0
 800cf78:	b2db      	uxtb	r3, r3
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	f3af 8000 	nop.w
 800cf88:	fcce1c58 	.word	0xfcce1c58
 800cf8c:	3f800e6a 	.word	0x3f800e6a
 800cf90:	40040000 	.word	0x40040000

0800cf94 <can1_ams_s11_voltages_1_pack>:

int can1_ams_s11_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s11_voltages_1_t *src_p,
    size_t size)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b05      	cmp	r3, #5
 800cfa4:	d802      	bhi.n	800cfac <can1_ams_s11_voltages_1_pack+0x18>
        return (-EINVAL);
 800cfa6:	f06f 0315 	mvn.w	r3, #21
 800cfaa:	e069      	b.n	800d080 <can1_ams_s11_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800cfac:	2206      	movs	r2, #6
 800cfae:	2100      	movs	r1, #0
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f003 fb69 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s11v01, 0u, 0xffu);
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	22ff      	movs	r2, #255	@ 0xff
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fc fa1c 	bl	80093fc <pack_left_shift_u8>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s11v02, 0u, 0xffu);
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	785b      	ldrb	r3, [r3, #1]
 800cfd8:	22ff      	movs	r2, #255	@ 0xff
 800cfda:	2100      	movs	r1, #0
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fc fa0d 	bl	80093fc <pack_left_shift_u8>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	781a      	ldrb	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	3301      	adds	r3, #1
 800cff0:	430a      	orrs	r2, r1
 800cff2:	b2d2      	uxtb	r2, r2
 800cff4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s11v03, 0u, 0xffu);
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	789b      	ldrb	r3, [r3, #2]
 800cffa:	22ff      	movs	r2, #255	@ 0xff
 800cffc:	2100      	movs	r1, #0
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fc f9fc 	bl	80093fc <pack_left_shift_u8>
 800d004:	4603      	mov	r3, r0
 800d006:	4619      	mov	r1, r3
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	3302      	adds	r3, #2
 800d00c:	781a      	ldrb	r2, [r3, #0]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	3302      	adds	r3, #2
 800d012:	430a      	orrs	r2, r1
 800d014:	b2d2      	uxtb	r2, r2
 800d016:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s11v04, 0u, 0xffu);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	78db      	ldrb	r3, [r3, #3]
 800d01c:	22ff      	movs	r2, #255	@ 0xff
 800d01e:	2100      	movs	r1, #0
 800d020:	4618      	mov	r0, r3
 800d022:	f7fc f9eb 	bl	80093fc <pack_left_shift_u8>
 800d026:	4603      	mov	r3, r0
 800d028:	4619      	mov	r1, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	3303      	adds	r3, #3
 800d02e:	781a      	ldrb	r2, [r3, #0]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	3303      	adds	r3, #3
 800d034:	430a      	orrs	r2, r1
 800d036:	b2d2      	uxtb	r2, r2
 800d038:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s11v05, 0u, 0xffu);
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	791b      	ldrb	r3, [r3, #4]
 800d03e:	22ff      	movs	r2, #255	@ 0xff
 800d040:	2100      	movs	r1, #0
 800d042:	4618      	mov	r0, r3
 800d044:	f7fc f9da 	bl	80093fc <pack_left_shift_u8>
 800d048:	4603      	mov	r3, r0
 800d04a:	4619      	mov	r1, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	3304      	adds	r3, #4
 800d050:	781a      	ldrb	r2, [r3, #0]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3304      	adds	r3, #4
 800d056:	430a      	orrs	r2, r1
 800d058:	b2d2      	uxtb	r2, r2
 800d05a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s11v06, 0u, 0xffu);
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	795b      	ldrb	r3, [r3, #5]
 800d060:	22ff      	movs	r2, #255	@ 0xff
 800d062:	2100      	movs	r1, #0
 800d064:	4618      	mov	r0, r3
 800d066:	f7fc f9c9 	bl	80093fc <pack_left_shift_u8>
 800d06a:	4603      	mov	r3, r0
 800d06c:	4619      	mov	r1, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3305      	adds	r3, #5
 800d072:	781a      	ldrb	r2, [r3, #0]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3305      	adds	r3, #5
 800d078:	430a      	orrs	r2, r1
 800d07a:	b2d2      	uxtb	r2, r2
 800d07c:	701a      	strb	r2, [r3, #0]

    return (6);
 800d07e:	2306      	movs	r3, #6
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <can1_ams_s11_voltages_1_s11v01_encode>:

    return 0;
}

uint8_t can1_ams_s11_voltages_1_s11v01_encode(double value)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d092:	f04f 0200 	mov.w	r2, #0
 800d096:	4b10      	ldr	r3, [pc, #64]	@ (800d0d8 <can1_ams_s11_voltages_1_s11v01_encode+0x50>)
 800d098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d09c:	f7f3 f898 	bl	80001d0 <__aeabi_dsub>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	a309      	add	r3, pc, #36	@ (adr r3, 800d0d0 <can1_ams_s11_voltages_1_s11v01_encode+0x48>)
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	f7f3 fb71 	bl	8000794 <__aeabi_ddiv>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	f7f3 fd03 	bl	8000ac4 <__aeabi_d2uiz>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	b2db      	uxtb	r3, r3
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	f3af 8000 	nop.w
 800d0d0:	fcce1c58 	.word	0xfcce1c58
 800d0d4:	3f800e6a 	.word	0x3f800e6a
 800d0d8:	40040000 	.word	0x40040000
 800d0dc:	00000000 	.word	0x00000000

0800d0e0 <can1_ams_s11_voltages_1_s11v02_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v02_encode(double value)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d0ea:	f04f 0200 	mov.w	r2, #0
 800d0ee:	4b10      	ldr	r3, [pc, #64]	@ (800d130 <can1_ams_s11_voltages_1_s11v02_encode+0x50>)
 800d0f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0f4:	f7f3 f86c 	bl	80001d0 <__aeabi_dsub>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	4619      	mov	r1, r3
 800d100:	a309      	add	r3, pc, #36	@ (adr r3, 800d128 <can1_ams_s11_voltages_1_s11v02_encode+0x48>)
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	f7f3 fb45 	bl	8000794 <__aeabi_ddiv>
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	4610      	mov	r0, r2
 800d110:	4619      	mov	r1, r3
 800d112:	f7f3 fcd7 	bl	8000ac4 <__aeabi_d2uiz>
 800d116:	4603      	mov	r3, r0
 800d118:	b2db      	uxtb	r3, r3
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	f3af 8000 	nop.w
 800d128:	fcce1c58 	.word	0xfcce1c58
 800d12c:	3f800e6a 	.word	0x3f800e6a
 800d130:	40040000 	.word	0x40040000
 800d134:	00000000 	.word	0x00000000

0800d138 <can1_ams_s11_voltages_1_s11v03_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v03_encode(double value)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d142:	f04f 0200 	mov.w	r2, #0
 800d146:	4b10      	ldr	r3, [pc, #64]	@ (800d188 <can1_ams_s11_voltages_1_s11v03_encode+0x50>)
 800d148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d14c:	f7f3 f840 	bl	80001d0 <__aeabi_dsub>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	4610      	mov	r0, r2
 800d156:	4619      	mov	r1, r3
 800d158:	a309      	add	r3, pc, #36	@ (adr r3, 800d180 <can1_ams_s11_voltages_1_s11v03_encode+0x48>)
 800d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15e:	f7f3 fb19 	bl	8000794 <__aeabi_ddiv>
 800d162:	4602      	mov	r2, r0
 800d164:	460b      	mov	r3, r1
 800d166:	4610      	mov	r0, r2
 800d168:	4619      	mov	r1, r3
 800d16a:	f7f3 fcab 	bl	8000ac4 <__aeabi_d2uiz>
 800d16e:	4603      	mov	r3, r0
 800d170:	b2db      	uxtb	r3, r3
}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	f3af 8000 	nop.w
 800d180:	fcce1c58 	.word	0xfcce1c58
 800d184:	3f800e6a 	.word	0x3f800e6a
 800d188:	40040000 	.word	0x40040000
 800d18c:	00000000 	.word	0x00000000

0800d190 <can1_ams_s11_voltages_1_s11v04_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v04_encode(double value)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d19a:	f04f 0200 	mov.w	r2, #0
 800d19e:	4b10      	ldr	r3, [pc, #64]	@ (800d1e0 <can1_ams_s11_voltages_1_s11v04_encode+0x50>)
 800d1a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1a4:	f7f3 f814 	bl	80001d0 <__aeabi_dsub>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	a309      	add	r3, pc, #36	@ (adr r3, 800d1d8 <can1_ams_s11_voltages_1_s11v04_encode+0x48>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	f7f3 faed 	bl	8000794 <__aeabi_ddiv>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	460b      	mov	r3, r1
 800d1be:	4610      	mov	r0, r2
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	f7f3 fc7f 	bl	8000ac4 <__aeabi_d2uiz>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	b2db      	uxtb	r3, r3
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	f3af 8000 	nop.w
 800d1d8:	fcce1c58 	.word	0xfcce1c58
 800d1dc:	3f800e6a 	.word	0x3f800e6a
 800d1e0:	40040000 	.word	0x40040000
 800d1e4:	00000000 	.word	0x00000000

0800d1e8 <can1_ams_s11_voltages_1_s11v05_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v05_encode(double value)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d1f2:	f04f 0200 	mov.w	r2, #0
 800d1f6:	4b10      	ldr	r3, [pc, #64]	@ (800d238 <can1_ams_s11_voltages_1_s11v05_encode+0x50>)
 800d1f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1fc:	f7f2 ffe8 	bl	80001d0 <__aeabi_dsub>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	4610      	mov	r0, r2
 800d206:	4619      	mov	r1, r3
 800d208:	a309      	add	r3, pc, #36	@ (adr r3, 800d230 <can1_ams_s11_voltages_1_s11v05_encode+0x48>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f3 fac1 	bl	8000794 <__aeabi_ddiv>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4610      	mov	r0, r2
 800d218:	4619      	mov	r1, r3
 800d21a:	f7f3 fc53 	bl	8000ac4 <__aeabi_d2uiz>
 800d21e:	4603      	mov	r3, r0
 800d220:	b2db      	uxtb	r3, r3
}
 800d222:	4618      	mov	r0, r3
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	f3af 8000 	nop.w
 800d230:	fcce1c58 	.word	0xfcce1c58
 800d234:	3f800e6a 	.word	0x3f800e6a
 800d238:	40040000 	.word	0x40040000
 800d23c:	00000000 	.word	0x00000000

0800d240 <can1_ams_s11_voltages_1_s11v06_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v06_encode(double value)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d24a:	f04f 0200 	mov.w	r2, #0
 800d24e:	4b10      	ldr	r3, [pc, #64]	@ (800d290 <can1_ams_s11_voltages_1_s11v06_encode+0x50>)
 800d250:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d254:	f7f2 ffbc 	bl	80001d0 <__aeabi_dsub>
 800d258:	4602      	mov	r2, r0
 800d25a:	460b      	mov	r3, r1
 800d25c:	4610      	mov	r0, r2
 800d25e:	4619      	mov	r1, r3
 800d260:	a309      	add	r3, pc, #36	@ (adr r3, 800d288 <can1_ams_s11_voltages_1_s11v06_encode+0x48>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 fa95 	bl	8000794 <__aeabi_ddiv>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4610      	mov	r0, r2
 800d270:	4619      	mov	r1, r3
 800d272:	f7f3 fc27 	bl	8000ac4 <__aeabi_d2uiz>
 800d276:	4603      	mov	r3, r0
 800d278:	b2db      	uxtb	r3, r3
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	f3af 8000 	nop.w
 800d288:	fcce1c58 	.word	0xfcce1c58
 800d28c:	3f800e6a 	.word	0x3f800e6a
 800d290:	40040000 	.word	0x40040000

0800d294 <can1_ams_s11_voltages_2_pack>:

int can1_ams_s11_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s11_voltages_2_t *src_p,
    size_t size)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b04      	cmp	r3, #4
 800d2a4:	d802      	bhi.n	800d2ac <can1_ams_s11_voltages_2_pack+0x18>
        return (-EINVAL);
 800d2a6:	f06f 0315 	mvn.w	r3, #21
 800d2aa:	e058      	b.n	800d35e <can1_ams_s11_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800d2ac:	2205      	movs	r2, #5
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f003 f9e9 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s11v07, 0u, 0xffu);
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	22ff      	movs	r2, #255	@ 0xff
 800d2bc:	2100      	movs	r1, #0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fc f89c 	bl	80093fc <pack_left_shift_u8>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	b2da      	uxtb	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s11v08, 0u, 0xffu);
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	785b      	ldrb	r3, [r3, #1]
 800d2d8:	22ff      	movs	r2, #255	@ 0xff
 800d2da:	2100      	movs	r1, #0
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fc f88d 	bl	80093fc <pack_left_shift_u8>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	781a      	ldrb	r2, [r3, #0]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	430a      	orrs	r2, r1
 800d2f2:	b2d2      	uxtb	r2, r2
 800d2f4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s11v09, 0u, 0xffu);
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	789b      	ldrb	r3, [r3, #2]
 800d2fa:	22ff      	movs	r2, #255	@ 0xff
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fc f87c 	bl	80093fc <pack_left_shift_u8>
 800d304:	4603      	mov	r3, r0
 800d306:	4619      	mov	r1, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	3302      	adds	r3, #2
 800d30c:	781a      	ldrb	r2, [r3, #0]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	3302      	adds	r3, #2
 800d312:	430a      	orrs	r2, r1
 800d314:	b2d2      	uxtb	r2, r2
 800d316:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s11v10, 0u, 0xffu);
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	78db      	ldrb	r3, [r3, #3]
 800d31c:	22ff      	movs	r2, #255	@ 0xff
 800d31e:	2100      	movs	r1, #0
 800d320:	4618      	mov	r0, r3
 800d322:	f7fc f86b 	bl	80093fc <pack_left_shift_u8>
 800d326:	4603      	mov	r3, r0
 800d328:	4619      	mov	r1, r3
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3303      	adds	r3, #3
 800d32e:	781a      	ldrb	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3303      	adds	r3, #3
 800d334:	430a      	orrs	r2, r1
 800d336:	b2d2      	uxtb	r2, r2
 800d338:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s11v11, 0u, 0xffu);
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	791b      	ldrb	r3, [r3, #4]
 800d33e:	22ff      	movs	r2, #255	@ 0xff
 800d340:	2100      	movs	r1, #0
 800d342:	4618      	mov	r0, r3
 800d344:	f7fc f85a 	bl	80093fc <pack_left_shift_u8>
 800d348:	4603      	mov	r3, r0
 800d34a:	4619      	mov	r1, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3304      	adds	r3, #4
 800d350:	781a      	ldrb	r2, [r3, #0]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3304      	adds	r3, #4
 800d356:	430a      	orrs	r2, r1
 800d358:	b2d2      	uxtb	r2, r2
 800d35a:	701a      	strb	r2, [r3, #0]

    return (5);
 800d35c:	2305      	movs	r3, #5
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <can1_ams_s11_voltages_2_s11v07_encode>:

    return 0;
}

uint8_t can1_ams_s11_voltages_2_s11v07_encode(double value)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d372:	f04f 0200 	mov.w	r2, #0
 800d376:	4b10      	ldr	r3, [pc, #64]	@ (800d3b8 <can1_ams_s11_voltages_2_s11v07_encode+0x50>)
 800d378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d37c:	f7f2 ff28 	bl	80001d0 <__aeabi_dsub>
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	4610      	mov	r0, r2
 800d386:	4619      	mov	r1, r3
 800d388:	a309      	add	r3, pc, #36	@ (adr r3, 800d3b0 <can1_ams_s11_voltages_2_s11v07_encode+0x48>)
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	f7f3 fa01 	bl	8000794 <__aeabi_ddiv>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4610      	mov	r0, r2
 800d398:	4619      	mov	r1, r3
 800d39a:	f7f3 fb93 	bl	8000ac4 <__aeabi_d2uiz>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	b2db      	uxtb	r3, r3
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	f3af 8000 	nop.w
 800d3b0:	fcce1c58 	.word	0xfcce1c58
 800d3b4:	3f800e6a 	.word	0x3f800e6a
 800d3b8:	40040000 	.word	0x40040000
 800d3bc:	00000000 	.word	0x00000000

0800d3c0 <can1_ams_s11_voltages_2_s11v08_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v08_encode(double value)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d3ca:	f04f 0200 	mov.w	r2, #0
 800d3ce:	4b10      	ldr	r3, [pc, #64]	@ (800d410 <can1_ams_s11_voltages_2_s11v08_encode+0x50>)
 800d3d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3d4:	f7f2 fefc 	bl	80001d0 <__aeabi_dsub>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4610      	mov	r0, r2
 800d3de:	4619      	mov	r1, r3
 800d3e0:	a309      	add	r3, pc, #36	@ (adr r3, 800d408 <can1_ams_s11_voltages_2_s11v08_encode+0x48>)
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	f7f3 f9d5 	bl	8000794 <__aeabi_ddiv>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	4610      	mov	r0, r2
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	f7f3 fb67 	bl	8000ac4 <__aeabi_d2uiz>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	b2db      	uxtb	r3, r3
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	f3af 8000 	nop.w
 800d408:	fcce1c58 	.word	0xfcce1c58
 800d40c:	3f800e6a 	.word	0x3f800e6a
 800d410:	40040000 	.word	0x40040000
 800d414:	00000000 	.word	0x00000000

0800d418 <can1_ams_s11_voltages_2_s11v09_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v09_encode(double value)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d422:	f04f 0200 	mov.w	r2, #0
 800d426:	4b10      	ldr	r3, [pc, #64]	@ (800d468 <can1_ams_s11_voltages_2_s11v09_encode+0x50>)
 800d428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d42c:	f7f2 fed0 	bl	80001d0 <__aeabi_dsub>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	4610      	mov	r0, r2
 800d436:	4619      	mov	r1, r3
 800d438:	a309      	add	r3, pc, #36	@ (adr r3, 800d460 <can1_ams_s11_voltages_2_s11v09_encode+0x48>)
 800d43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43e:	f7f3 f9a9 	bl	8000794 <__aeabi_ddiv>
 800d442:	4602      	mov	r2, r0
 800d444:	460b      	mov	r3, r1
 800d446:	4610      	mov	r0, r2
 800d448:	4619      	mov	r1, r3
 800d44a:	f7f3 fb3b 	bl	8000ac4 <__aeabi_d2uiz>
 800d44e:	4603      	mov	r3, r0
 800d450:	b2db      	uxtb	r3, r3
}
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	f3af 8000 	nop.w
 800d460:	fcce1c58 	.word	0xfcce1c58
 800d464:	3f800e6a 	.word	0x3f800e6a
 800d468:	40040000 	.word	0x40040000
 800d46c:	00000000 	.word	0x00000000

0800d470 <can1_ams_s11_voltages_2_s11v10_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v10_encode(double value)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d47a:	f04f 0200 	mov.w	r2, #0
 800d47e:	4b10      	ldr	r3, [pc, #64]	@ (800d4c0 <can1_ams_s11_voltages_2_s11v10_encode+0x50>)
 800d480:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d484:	f7f2 fea4 	bl	80001d0 <__aeabi_dsub>
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4610      	mov	r0, r2
 800d48e:	4619      	mov	r1, r3
 800d490:	a309      	add	r3, pc, #36	@ (adr r3, 800d4b8 <can1_ams_s11_voltages_2_s11v10_encode+0x48>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f3 f97d 	bl	8000794 <__aeabi_ddiv>
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4610      	mov	r0, r2
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f7f3 fb0f 	bl	8000ac4 <__aeabi_d2uiz>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	b2db      	uxtb	r3, r3
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	f3af 8000 	nop.w
 800d4b8:	fcce1c58 	.word	0xfcce1c58
 800d4bc:	3f800e6a 	.word	0x3f800e6a
 800d4c0:	40040000 	.word	0x40040000
 800d4c4:	00000000 	.word	0x00000000

0800d4c8 <can1_ams_s11_voltages_2_s11v11_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v11_encode(double value)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d4d2:	f04f 0200 	mov.w	r2, #0
 800d4d6:	4b10      	ldr	r3, [pc, #64]	@ (800d518 <can1_ams_s11_voltages_2_s11v11_encode+0x50>)
 800d4d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d4dc:	f7f2 fe78 	bl	80001d0 <__aeabi_dsub>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	a309      	add	r3, pc, #36	@ (adr r3, 800d510 <can1_ams_s11_voltages_2_s11v11_encode+0x48>)
 800d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ee:	f7f3 f951 	bl	8000794 <__aeabi_ddiv>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	f7f3 fae3 	bl	8000ac4 <__aeabi_d2uiz>
 800d4fe:	4603      	mov	r3, r0
 800d500:	b2db      	uxtb	r3, r3
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	f3af 8000 	nop.w
 800d510:	fcce1c58 	.word	0xfcce1c58
 800d514:	3f800e6a 	.word	0x3f800e6a
 800d518:	40040000 	.word	0x40040000

0800d51c <can1_ams_s12_voltages_1_pack>:

int can1_ams_s12_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s12_voltages_1_t *src_p,
    size_t size)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b05      	cmp	r3, #5
 800d52c:	d802      	bhi.n	800d534 <can1_ams_s12_voltages_1_pack+0x18>
        return (-EINVAL);
 800d52e:	f06f 0315 	mvn.w	r3, #21
 800d532:	e069      	b.n	800d608 <can1_ams_s12_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800d534:	2206      	movs	r2, #6
 800d536:	2100      	movs	r1, #0
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f003 f8a5 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s12v01, 0u, 0xffu);
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	22ff      	movs	r2, #255	@ 0xff
 800d544:	2100      	movs	r1, #0
 800d546:	4618      	mov	r0, r3
 800d548:	f7fb ff58 	bl	80093fc <pack_left_shift_u8>
 800d54c:	4603      	mov	r3, r0
 800d54e:	461a      	mov	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	4313      	orrs	r3, r2
 800d556:	b2da      	uxtb	r2, r3
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s12v02, 0u, 0xffu);
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	785b      	ldrb	r3, [r3, #1]
 800d560:	22ff      	movs	r2, #255	@ 0xff
 800d562:	2100      	movs	r1, #0
 800d564:	4618      	mov	r0, r3
 800d566:	f7fb ff49 	bl	80093fc <pack_left_shift_u8>
 800d56a:	4603      	mov	r3, r0
 800d56c:	4619      	mov	r1, r3
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	3301      	adds	r3, #1
 800d572:	781a      	ldrb	r2, [r3, #0]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	3301      	adds	r3, #1
 800d578:	430a      	orrs	r2, r1
 800d57a:	b2d2      	uxtb	r2, r2
 800d57c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s12v03, 0u, 0xffu);
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	789b      	ldrb	r3, [r3, #2]
 800d582:	22ff      	movs	r2, #255	@ 0xff
 800d584:	2100      	movs	r1, #0
 800d586:	4618      	mov	r0, r3
 800d588:	f7fb ff38 	bl	80093fc <pack_left_shift_u8>
 800d58c:	4603      	mov	r3, r0
 800d58e:	4619      	mov	r1, r3
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3302      	adds	r3, #2
 800d594:	781a      	ldrb	r2, [r3, #0]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	3302      	adds	r3, #2
 800d59a:	430a      	orrs	r2, r1
 800d59c:	b2d2      	uxtb	r2, r2
 800d59e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s12v04, 0u, 0xffu);
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	78db      	ldrb	r3, [r3, #3]
 800d5a4:	22ff      	movs	r2, #255	@ 0xff
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fb ff27 	bl	80093fc <pack_left_shift_u8>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	3303      	adds	r3, #3
 800d5b6:	781a      	ldrb	r2, [r3, #0]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3303      	adds	r3, #3
 800d5bc:	430a      	orrs	r2, r1
 800d5be:	b2d2      	uxtb	r2, r2
 800d5c0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s12v05, 0u, 0xffu);
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	791b      	ldrb	r3, [r3, #4]
 800d5c6:	22ff      	movs	r2, #255	@ 0xff
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fb ff16 	bl	80093fc <pack_left_shift_u8>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	781a      	ldrb	r2, [r3, #0]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	3304      	adds	r3, #4
 800d5de:	430a      	orrs	r2, r1
 800d5e0:	b2d2      	uxtb	r2, r2
 800d5e2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s12v06, 0u, 0xffu);
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	795b      	ldrb	r3, [r3, #5]
 800d5e8:	22ff      	movs	r2, #255	@ 0xff
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fb ff05 	bl	80093fc <pack_left_shift_u8>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	3305      	adds	r3, #5
 800d5fa:	781a      	ldrb	r2, [r3, #0]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3305      	adds	r3, #5
 800d600:	430a      	orrs	r2, r1
 800d602:	b2d2      	uxtb	r2, r2
 800d604:	701a      	strb	r2, [r3, #0]

    return (6);
 800d606:	2306      	movs	r3, #6
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <can1_ams_s12_voltages_1_s12v01_encode>:

    return 0;
}

uint8_t can1_ams_s12_voltages_1_s12v01_encode(double value)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d61a:	f04f 0200 	mov.w	r2, #0
 800d61e:	4b10      	ldr	r3, [pc, #64]	@ (800d660 <can1_ams_s12_voltages_1_s12v01_encode+0x50>)
 800d620:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d624:	f7f2 fdd4 	bl	80001d0 <__aeabi_dsub>
 800d628:	4602      	mov	r2, r0
 800d62a:	460b      	mov	r3, r1
 800d62c:	4610      	mov	r0, r2
 800d62e:	4619      	mov	r1, r3
 800d630:	a309      	add	r3, pc, #36	@ (adr r3, 800d658 <can1_ams_s12_voltages_1_s12v01_encode+0x48>)
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	f7f3 f8ad 	bl	8000794 <__aeabi_ddiv>
 800d63a:	4602      	mov	r2, r0
 800d63c:	460b      	mov	r3, r1
 800d63e:	4610      	mov	r0, r2
 800d640:	4619      	mov	r1, r3
 800d642:	f7f3 fa3f 	bl	8000ac4 <__aeabi_d2uiz>
 800d646:	4603      	mov	r3, r0
 800d648:	b2db      	uxtb	r3, r3
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	f3af 8000 	nop.w
 800d658:	fcce1c58 	.word	0xfcce1c58
 800d65c:	3f800e6a 	.word	0x3f800e6a
 800d660:	40040000 	.word	0x40040000
 800d664:	00000000 	.word	0x00000000

0800d668 <can1_ams_s12_voltages_1_s12v02_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v02_encode(double value)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d672:	f04f 0200 	mov.w	r2, #0
 800d676:	4b10      	ldr	r3, [pc, #64]	@ (800d6b8 <can1_ams_s12_voltages_1_s12v02_encode+0x50>)
 800d678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d67c:	f7f2 fda8 	bl	80001d0 <__aeabi_dsub>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4610      	mov	r0, r2
 800d686:	4619      	mov	r1, r3
 800d688:	a309      	add	r3, pc, #36	@ (adr r3, 800d6b0 <can1_ams_s12_voltages_1_s12v02_encode+0x48>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	f7f3 f881 	bl	8000794 <__aeabi_ddiv>
 800d692:	4602      	mov	r2, r0
 800d694:	460b      	mov	r3, r1
 800d696:	4610      	mov	r0, r2
 800d698:	4619      	mov	r1, r3
 800d69a:	f7f3 fa13 	bl	8000ac4 <__aeabi_d2uiz>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	b2db      	uxtb	r3, r3
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	f3af 8000 	nop.w
 800d6b0:	fcce1c58 	.word	0xfcce1c58
 800d6b4:	3f800e6a 	.word	0x3f800e6a
 800d6b8:	40040000 	.word	0x40040000
 800d6bc:	00000000 	.word	0x00000000

0800d6c0 <can1_ams_s12_voltages_1_s12v03_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v03_encode(double value)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d6ca:	f04f 0200 	mov.w	r2, #0
 800d6ce:	4b10      	ldr	r3, [pc, #64]	@ (800d710 <can1_ams_s12_voltages_1_s12v03_encode+0x50>)
 800d6d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d6d4:	f7f2 fd7c 	bl	80001d0 <__aeabi_dsub>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4610      	mov	r0, r2
 800d6de:	4619      	mov	r1, r3
 800d6e0:	a309      	add	r3, pc, #36	@ (adr r3, 800d708 <can1_ams_s12_voltages_1_s12v03_encode+0x48>)
 800d6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e6:	f7f3 f855 	bl	8000794 <__aeabi_ddiv>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	f7f3 f9e7 	bl	8000ac4 <__aeabi_d2uiz>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	b2db      	uxtb	r3, r3
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	f3af 8000 	nop.w
 800d708:	fcce1c58 	.word	0xfcce1c58
 800d70c:	3f800e6a 	.word	0x3f800e6a
 800d710:	40040000 	.word	0x40040000
 800d714:	00000000 	.word	0x00000000

0800d718 <can1_ams_s12_voltages_1_s12v04_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v04_encode(double value)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d722:	f04f 0200 	mov.w	r2, #0
 800d726:	4b10      	ldr	r3, [pc, #64]	@ (800d768 <can1_ams_s12_voltages_1_s12v04_encode+0x50>)
 800d728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d72c:	f7f2 fd50 	bl	80001d0 <__aeabi_dsub>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4610      	mov	r0, r2
 800d736:	4619      	mov	r1, r3
 800d738:	a309      	add	r3, pc, #36	@ (adr r3, 800d760 <can1_ams_s12_voltages_1_s12v04_encode+0x48>)
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	f7f3 f829 	bl	8000794 <__aeabi_ddiv>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	4610      	mov	r0, r2
 800d748:	4619      	mov	r1, r3
 800d74a:	f7f3 f9bb 	bl	8000ac4 <__aeabi_d2uiz>
 800d74e:	4603      	mov	r3, r0
 800d750:	b2db      	uxtb	r3, r3
}
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	f3af 8000 	nop.w
 800d760:	fcce1c58 	.word	0xfcce1c58
 800d764:	3f800e6a 	.word	0x3f800e6a
 800d768:	40040000 	.word	0x40040000
 800d76c:	00000000 	.word	0x00000000

0800d770 <can1_ams_s12_voltages_1_s12v05_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v05_encode(double value)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d77a:	f04f 0200 	mov.w	r2, #0
 800d77e:	4b10      	ldr	r3, [pc, #64]	@ (800d7c0 <can1_ams_s12_voltages_1_s12v05_encode+0x50>)
 800d780:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d784:	f7f2 fd24 	bl	80001d0 <__aeabi_dsub>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	4610      	mov	r0, r2
 800d78e:	4619      	mov	r1, r3
 800d790:	a309      	add	r3, pc, #36	@ (adr r3, 800d7b8 <can1_ams_s12_voltages_1_s12v05_encode+0x48>)
 800d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d796:	f7f2 fffd 	bl	8000794 <__aeabi_ddiv>
 800d79a:	4602      	mov	r2, r0
 800d79c:	460b      	mov	r3, r1
 800d79e:	4610      	mov	r0, r2
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	f7f3 f98f 	bl	8000ac4 <__aeabi_d2uiz>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	b2db      	uxtb	r3, r3
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	f3af 8000 	nop.w
 800d7b8:	fcce1c58 	.word	0xfcce1c58
 800d7bc:	3f800e6a 	.word	0x3f800e6a
 800d7c0:	40040000 	.word	0x40040000
 800d7c4:	00000000 	.word	0x00000000

0800d7c8 <can1_ams_s12_voltages_1_s12v06_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v06_encode(double value)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d7d2:	f04f 0200 	mov.w	r2, #0
 800d7d6:	4b10      	ldr	r3, [pc, #64]	@ (800d818 <can1_ams_s12_voltages_1_s12v06_encode+0x50>)
 800d7d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7dc:	f7f2 fcf8 	bl	80001d0 <__aeabi_dsub>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	a309      	add	r3, pc, #36	@ (adr r3, 800d810 <can1_ams_s12_voltages_1_s12v06_encode+0x48>)
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f7f2 ffd1 	bl	8000794 <__aeabi_ddiv>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	f7f3 f963 	bl	8000ac4 <__aeabi_d2uiz>
 800d7fe:	4603      	mov	r3, r0
 800d800:	b2db      	uxtb	r3, r3
}
 800d802:	4618      	mov	r0, r3
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	f3af 8000 	nop.w
 800d810:	fcce1c58 	.word	0xfcce1c58
 800d814:	3f800e6a 	.word	0x3f800e6a
 800d818:	40040000 	.word	0x40040000

0800d81c <can1_ams_s12_voltages_2_pack>:

int can1_ams_s12_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s12_voltages_2_t *src_p,
    size_t size)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b04      	cmp	r3, #4
 800d82c:	d802      	bhi.n	800d834 <can1_ams_s12_voltages_2_pack+0x18>
        return (-EINVAL);
 800d82e:	f06f 0315 	mvn.w	r3, #21
 800d832:	e058      	b.n	800d8e6 <can1_ams_s12_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800d834:	2205      	movs	r2, #5
 800d836:	2100      	movs	r1, #0
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f002 ff25 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s12v07, 0u, 0xffu);
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	22ff      	movs	r2, #255	@ 0xff
 800d844:	2100      	movs	r1, #0
 800d846:	4618      	mov	r0, r3
 800d848:	f7fb fdd8 	bl	80093fc <pack_left_shift_u8>
 800d84c:	4603      	mov	r3, r0
 800d84e:	461a      	mov	r2, r3
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	4313      	orrs	r3, r2
 800d856:	b2da      	uxtb	r2, r3
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s12v08, 0u, 0xffu);
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	785b      	ldrb	r3, [r3, #1]
 800d860:	22ff      	movs	r2, #255	@ 0xff
 800d862:	2100      	movs	r1, #0
 800d864:	4618      	mov	r0, r3
 800d866:	f7fb fdc9 	bl	80093fc <pack_left_shift_u8>
 800d86a:	4603      	mov	r3, r0
 800d86c:	4619      	mov	r1, r3
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	3301      	adds	r3, #1
 800d872:	781a      	ldrb	r2, [r3, #0]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3301      	adds	r3, #1
 800d878:	430a      	orrs	r2, r1
 800d87a:	b2d2      	uxtb	r2, r2
 800d87c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s12v09, 0u, 0xffu);
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	789b      	ldrb	r3, [r3, #2]
 800d882:	22ff      	movs	r2, #255	@ 0xff
 800d884:	2100      	movs	r1, #0
 800d886:	4618      	mov	r0, r3
 800d888:	f7fb fdb8 	bl	80093fc <pack_left_shift_u8>
 800d88c:	4603      	mov	r3, r0
 800d88e:	4619      	mov	r1, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	3302      	adds	r3, #2
 800d894:	781a      	ldrb	r2, [r3, #0]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	3302      	adds	r3, #2
 800d89a:	430a      	orrs	r2, r1
 800d89c:	b2d2      	uxtb	r2, r2
 800d89e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s12v10, 0u, 0xffu);
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	78db      	ldrb	r3, [r3, #3]
 800d8a4:	22ff      	movs	r2, #255	@ 0xff
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fb fda7 	bl	80093fc <pack_left_shift_u8>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	3303      	adds	r3, #3
 800d8b6:	781a      	ldrb	r2, [r3, #0]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	3303      	adds	r3, #3
 800d8bc:	430a      	orrs	r2, r1
 800d8be:	b2d2      	uxtb	r2, r2
 800d8c0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s12v11, 0u, 0xffu);
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	791b      	ldrb	r3, [r3, #4]
 800d8c6:	22ff      	movs	r2, #255	@ 0xff
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fb fd96 	bl	80093fc <pack_left_shift_u8>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	781a      	ldrb	r2, [r3, #0]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	430a      	orrs	r2, r1
 800d8e0:	b2d2      	uxtb	r2, r2
 800d8e2:	701a      	strb	r2, [r3, #0]

    return (5);
 800d8e4:	2305      	movs	r3, #5
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
	...

0800d8f0 <can1_ams_s12_voltages_2_s12v07_encode>:

    return 0;
}

uint8_t can1_ams_s12_voltages_2_s12v07_encode(double value)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d8fa:	f04f 0200 	mov.w	r2, #0
 800d8fe:	4b10      	ldr	r3, [pc, #64]	@ (800d940 <can1_ams_s12_voltages_2_s12v07_encode+0x50>)
 800d900:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d904:	f7f2 fc64 	bl	80001d0 <__aeabi_dsub>
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	4610      	mov	r0, r2
 800d90e:	4619      	mov	r1, r3
 800d910:	a309      	add	r3, pc, #36	@ (adr r3, 800d938 <can1_ams_s12_voltages_2_s12v07_encode+0x48>)
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	f7f2 ff3d 	bl	8000794 <__aeabi_ddiv>
 800d91a:	4602      	mov	r2, r0
 800d91c:	460b      	mov	r3, r1
 800d91e:	4610      	mov	r0, r2
 800d920:	4619      	mov	r1, r3
 800d922:	f7f3 f8cf 	bl	8000ac4 <__aeabi_d2uiz>
 800d926:	4603      	mov	r3, r0
 800d928:	b2db      	uxtb	r3, r3
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	f3af 8000 	nop.w
 800d938:	fcce1c58 	.word	0xfcce1c58
 800d93c:	3f800e6a 	.word	0x3f800e6a
 800d940:	40040000 	.word	0x40040000
 800d944:	00000000 	.word	0x00000000

0800d948 <can1_ams_s12_voltages_2_s12v08_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v08_encode(double value)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d952:	f04f 0200 	mov.w	r2, #0
 800d956:	4b10      	ldr	r3, [pc, #64]	@ (800d998 <can1_ams_s12_voltages_2_s12v08_encode+0x50>)
 800d958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d95c:	f7f2 fc38 	bl	80001d0 <__aeabi_dsub>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	4610      	mov	r0, r2
 800d966:	4619      	mov	r1, r3
 800d968:	a309      	add	r3, pc, #36	@ (adr r3, 800d990 <can1_ams_s12_voltages_2_s12v08_encode+0x48>)
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f7f2 ff11 	bl	8000794 <__aeabi_ddiv>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4610      	mov	r0, r2
 800d978:	4619      	mov	r1, r3
 800d97a:	f7f3 f8a3 	bl	8000ac4 <__aeabi_d2uiz>
 800d97e:	4603      	mov	r3, r0
 800d980:	b2db      	uxtb	r3, r3
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	f3af 8000 	nop.w
 800d990:	fcce1c58 	.word	0xfcce1c58
 800d994:	3f800e6a 	.word	0x3f800e6a
 800d998:	40040000 	.word	0x40040000
 800d99c:	00000000 	.word	0x00000000

0800d9a0 <can1_ams_s12_voltages_2_s12v09_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v09_encode(double value)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800d9aa:	f04f 0200 	mov.w	r2, #0
 800d9ae:	4b10      	ldr	r3, [pc, #64]	@ (800d9f0 <can1_ams_s12_voltages_2_s12v09_encode+0x50>)
 800d9b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9b4:	f7f2 fc0c 	bl	80001d0 <__aeabi_dsub>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	4610      	mov	r0, r2
 800d9be:	4619      	mov	r1, r3
 800d9c0:	a309      	add	r3, pc, #36	@ (adr r3, 800d9e8 <can1_ams_s12_voltages_2_s12v09_encode+0x48>)
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	f7f2 fee5 	bl	8000794 <__aeabi_ddiv>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	f7f3 f877 	bl	8000ac4 <__aeabi_d2uiz>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	b2db      	uxtb	r3, r3
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	f3af 8000 	nop.w
 800d9e8:	fcce1c58 	.word	0xfcce1c58
 800d9ec:	3f800e6a 	.word	0x3f800e6a
 800d9f0:	40040000 	.word	0x40040000
 800d9f4:	00000000 	.word	0x00000000

0800d9f8 <can1_ams_s12_voltages_2_s12v10_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v10_encode(double value)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800da02:	f04f 0200 	mov.w	r2, #0
 800da06:	4b10      	ldr	r3, [pc, #64]	@ (800da48 <can1_ams_s12_voltages_2_s12v10_encode+0x50>)
 800da08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da0c:	f7f2 fbe0 	bl	80001d0 <__aeabi_dsub>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4610      	mov	r0, r2
 800da16:	4619      	mov	r1, r3
 800da18:	a309      	add	r3, pc, #36	@ (adr r3, 800da40 <can1_ams_s12_voltages_2_s12v10_encode+0x48>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 feb9 	bl	8000794 <__aeabi_ddiv>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	4610      	mov	r0, r2
 800da28:	4619      	mov	r1, r3
 800da2a:	f7f3 f84b 	bl	8000ac4 <__aeabi_d2uiz>
 800da2e:	4603      	mov	r3, r0
 800da30:	b2db      	uxtb	r3, r3
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	f3af 8000 	nop.w
 800da40:	fcce1c58 	.word	0xfcce1c58
 800da44:	3f800e6a 	.word	0x3f800e6a
 800da48:	40040000 	.word	0x40040000

0800da4c <can1_ams_parameters_set_unpack>:

int can1_ams_parameters_set_unpack(
    struct can1_ams_parameters_set_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b07      	cmp	r3, #7
 800da5c:	d802      	bhi.n	800da64 <can1_ams_parameters_set_unpack+0x18>
        return (-EINVAL);
 800da5e:	f06f 0315 	mvn.w	r3, #21
 800da62:	e05f      	b.n	800db24 <can1_ams_parameters_set_unpack+0xd8>
    }

    dst_p->cell_under_voltage_treshold = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	22ff      	movs	r2, #255	@ 0xff
 800da6a:	2100      	movs	r1, #0
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fb fd0b 	bl	8009488 <unpack_right_shift_u8>
 800da72:	4603      	mov	r3, r0
 800da74:	461a      	mov	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	701a      	strb	r2, [r3, #0]
    dst_p->cell_over_voltage_treshold = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	3301      	adds	r3, #1
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	22ff      	movs	r2, #255	@ 0xff
 800da82:	2100      	movs	r1, #0
 800da84:	4618      	mov	r0, r3
 800da86:	f7fb fcff 	bl	8009488 <unpack_right_shift_u8>
 800da8a:	4603      	mov	r3, r0
 800da8c:	461a      	mov	r2, r3
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	705a      	strb	r2, [r3, #1]
    dst_p->voltage_time_constraint = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	3302      	adds	r3, #2
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	22ff      	movs	r2, #255	@ 0xff
 800da9a:	2100      	movs	r1, #0
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fb fcf3 	bl	8009488 <unpack_right_shift_u8>
 800daa2:	4603      	mov	r3, r0
 800daa4:	461a      	mov	r2, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	709a      	strb	r2, [r3, #2]
    dst_p->temperature_time_constraint = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	3303      	adds	r3, #3
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	22ff      	movs	r2, #255	@ 0xff
 800dab2:	2100      	movs	r1, #0
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fb fce7 	bl	8009488 <unpack_right_shift_u8>
 800daba:	4603      	mov	r3, r0
 800dabc:	461a      	mov	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	70da      	strb	r2, [r3, #3]
    dst_p->current_time_constraint = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	3304      	adds	r3, #4
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	22ff      	movs	r2, #255	@ 0xff
 800daca:	2100      	movs	r1, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fb fcdb 	bl	8009488 <unpack_right_shift_u8>
 800dad2:	4603      	mov	r3, r0
 800dad4:	461a      	mov	r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	711a      	strb	r2, [r3, #4]
    dst_p->voltage_drive_lower_bound = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	3305      	adds	r3, #5
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	22ff      	movs	r2, #255	@ 0xff
 800dae2:	2100      	movs	r1, #0
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fb fccf 	bl	8009488 <unpack_right_shift_u8>
 800daea:	4603      	mov	r3, r0
 800daec:	461a      	mov	r2, r3
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	715a      	strb	r2, [r3, #5]
    dst_p->voltage_lower_bound = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	3306      	adds	r3, #6
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	22ff      	movs	r2, #255	@ 0xff
 800dafa:	2100      	movs	r1, #0
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fb fcc3 	bl	8009488 <unpack_right_shift_u8>
 800db02:	4603      	mov	r3, r0
 800db04:	461a      	mov	r2, r3
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	719a      	strb	r2, [r3, #6]
    dst_p->start_balancing = unpack_right_shift_u8(src_p[7], 0u, 0x01u);
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	3307      	adds	r3, #7
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2201      	movs	r2, #1
 800db12:	2100      	movs	r1, #0
 800db14:	4618      	mov	r0, r3
 800db16:	f7fb fcb7 	bl	8009488 <unpack_right_shift_u8>
 800db1a:	4603      	mov	r3, r0
 800db1c:	461a      	mov	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	71da      	strb	r2, [r3, #7]

    return (0);
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <can1_ams_s01_temperatures_pack>:

int can1_ams_s01_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s01_temperatures_t *src_p,
    size_t size)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b086      	sub	sp, #24
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
    uint8_t s01t02;
    uint8_t s01t03;
    uint8_t s01t04;
    uint8_t s01t05;

    if (size < 5u) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b04      	cmp	r3, #4
 800db3c:	d802      	bhi.n	800db44 <can1_ams_s01_temperatures_pack+0x18>
        return (-EINVAL);
 800db3e:	f06f 0315 	mvn.w	r3, #21
 800db42:	e067      	b.n	800dc14 <can1_ams_s01_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800db44:	2205      	movs	r2, #5
 800db46:	2100      	movs	r1, #0
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f002 fd9d 	bl	8010688 <memset>

    s01t01 = (uint8_t)src_p->s01t01;
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	f993 3000 	ldrsb.w	r3, [r3]
 800db54:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s01t01, 0u, 0xffu);
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	22ff      	movs	r2, #255	@ 0xff
 800db5a:	2100      	movs	r1, #0
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fb fc4d 	bl	80093fc <pack_left_shift_u8>
 800db62:	4603      	mov	r3, r0
 800db64:	461a      	mov	r2, r3
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	701a      	strb	r2, [r3, #0]
    s01t02 = (uint8_t)src_p->s01t02;
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800db78:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s01t02, 0u, 0xffu);
 800db7a:	7dbb      	ldrb	r3, [r7, #22]
 800db7c:	22ff      	movs	r2, #255	@ 0xff
 800db7e:	2100      	movs	r1, #0
 800db80:	4618      	mov	r0, r3
 800db82:	f7fb fc3b 	bl	80093fc <pack_left_shift_u8>
 800db86:	4603      	mov	r3, r0
 800db88:	4619      	mov	r1, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	3301      	adds	r3, #1
 800db8e:	781a      	ldrb	r2, [r3, #0]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	3301      	adds	r3, #1
 800db94:	430a      	orrs	r2, r1
 800db96:	b2d2      	uxtb	r2, r2
 800db98:	701a      	strb	r2, [r3, #0]
    s01t03 = (uint8_t)src_p->s01t03;
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dba0:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s01t03, 0u, 0xffu);
 800dba2:	7d7b      	ldrb	r3, [r7, #21]
 800dba4:	22ff      	movs	r2, #255	@ 0xff
 800dba6:	2100      	movs	r1, #0
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fb fc27 	bl	80093fc <pack_left_shift_u8>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	3302      	adds	r3, #2
 800dbb6:	781a      	ldrb	r2, [r3, #0]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	3302      	adds	r3, #2
 800dbbc:	430a      	orrs	r2, r1
 800dbbe:	b2d2      	uxtb	r2, r2
 800dbc0:	701a      	strb	r2, [r3, #0]
    s01t04 = (uint8_t)src_p->s01t04;
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800dbc8:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s01t04, 0u, 0xffu);
 800dbca:	7d3b      	ldrb	r3, [r7, #20]
 800dbcc:	22ff      	movs	r2, #255	@ 0xff
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fb fc13 	bl	80093fc <pack_left_shift_u8>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	4619      	mov	r1, r3
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3303      	adds	r3, #3
 800dbde:	781a      	ldrb	r2, [r3, #0]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3303      	adds	r3, #3
 800dbe4:	430a      	orrs	r2, r1
 800dbe6:	b2d2      	uxtb	r2, r2
 800dbe8:	701a      	strb	r2, [r3, #0]
    s01t05 = (uint8_t)src_p->s01t05;
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dbf0:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s01t05, 0u, 0xffu);
 800dbf2:	7cfb      	ldrb	r3, [r7, #19]
 800dbf4:	22ff      	movs	r2, #255	@ 0xff
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fb fbff 	bl	80093fc <pack_left_shift_u8>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	4619      	mov	r1, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3304      	adds	r3, #4
 800dc06:	781a      	ldrb	r2, [r3, #0]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	b2d2      	uxtb	r2, r2
 800dc10:	701a      	strb	r2, [r3, #0]

    return (5);
 800dc12:	2305      	movs	r3, #5
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	0000      	movs	r0, r0
	...

0800dc20 <can1_ams_s01_temperatures_s01t01_encode>:

    return 0;
}

int8_t can1_ams_s01_temperatures_s01t01_encode(double value)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800dc2a:	f04f 0200 	mov.w	r2, #0
 800dc2e:	4b10      	ldr	r3, [pc, #64]	@ (800dc70 <can1_ams_s01_temperatures_s01t01_encode+0x50>)
 800dc30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc34:	f7f2 face 	bl	80001d4 <__adddf3>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	4619      	mov	r1, r3
 800dc40:	a309      	add	r3, pc, #36	@ (adr r3, 800dc68 <can1_ams_s01_temperatures_s01t01_encode+0x48>)
 800dc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc46:	f7f2 fda5 	bl	8000794 <__aeabi_ddiv>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4610      	mov	r0, r2
 800dc50:	4619      	mov	r1, r3
 800dc52:	f7f2 ff0f 	bl	8000a74 <__aeabi_d2iz>
 800dc56:	4603      	mov	r3, r0
 800dc58:	b25b      	sxtb	r3, r3
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	f3af 8000 	nop.w
 800dc68:	9999999a 	.word	0x9999999a
 800dc6c:	3fd99999 	.word	0x3fd99999
 800dc70:	40240000 	.word	0x40240000
 800dc74:	00000000 	.word	0x00000000

0800dc78 <can1_ams_s01_temperatures_s01t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s01_temperatures_s01t02_encode(double value)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800dc82:	f04f 0200 	mov.w	r2, #0
 800dc86:	4b10      	ldr	r3, [pc, #64]	@ (800dcc8 <can1_ams_s01_temperatures_s01t02_encode+0x50>)
 800dc88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc8c:	f7f2 faa2 	bl	80001d4 <__adddf3>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	4610      	mov	r0, r2
 800dc96:	4619      	mov	r1, r3
 800dc98:	a309      	add	r3, pc, #36	@ (adr r3, 800dcc0 <can1_ams_s01_temperatures_s01t02_encode+0x48>)
 800dc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9e:	f7f2 fd79 	bl	8000794 <__aeabi_ddiv>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	4610      	mov	r0, r2
 800dca8:	4619      	mov	r1, r3
 800dcaa:	f7f2 fee3 	bl	8000a74 <__aeabi_d2iz>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	b25b      	sxtb	r3, r3
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	f3af 8000 	nop.w
 800dcc0:	9999999a 	.word	0x9999999a
 800dcc4:	3fd99999 	.word	0x3fd99999
 800dcc8:	40240000 	.word	0x40240000
 800dccc:	00000000 	.word	0x00000000

0800dcd0 <can1_ams_s01_temperatures_s01t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s01_temperatures_s01t03_encode(double value)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800dcda:	f04f 0200 	mov.w	r2, #0
 800dcde:	4b10      	ldr	r3, [pc, #64]	@ (800dd20 <can1_ams_s01_temperatures_s01t03_encode+0x50>)
 800dce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dce4:	f7f2 fa76 	bl	80001d4 <__adddf3>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	4610      	mov	r0, r2
 800dcee:	4619      	mov	r1, r3
 800dcf0:	a309      	add	r3, pc, #36	@ (adr r3, 800dd18 <can1_ams_s01_temperatures_s01t03_encode+0x48>)
 800dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf6:	f7f2 fd4d 	bl	8000794 <__aeabi_ddiv>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	4610      	mov	r0, r2
 800dd00:	4619      	mov	r1, r3
 800dd02:	f7f2 feb7 	bl	8000a74 <__aeabi_d2iz>
 800dd06:	4603      	mov	r3, r0
 800dd08:	b25b      	sxtb	r3, r3
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	f3af 8000 	nop.w
 800dd18:	9999999a 	.word	0x9999999a
 800dd1c:	3fd99999 	.word	0x3fd99999
 800dd20:	40240000 	.word	0x40240000
 800dd24:	00000000 	.word	0x00000000

0800dd28 <can1_ams_s01_temperatures_s01t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s01_temperatures_s01t04_encode(double value)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800dd32:	f04f 0200 	mov.w	r2, #0
 800dd36:	4b10      	ldr	r3, [pc, #64]	@ (800dd78 <can1_ams_s01_temperatures_s01t04_encode+0x50>)
 800dd38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd3c:	f7f2 fa4a 	bl	80001d4 <__adddf3>
 800dd40:	4602      	mov	r2, r0
 800dd42:	460b      	mov	r3, r1
 800dd44:	4610      	mov	r0, r2
 800dd46:	4619      	mov	r1, r3
 800dd48:	a309      	add	r3, pc, #36	@ (adr r3, 800dd70 <can1_ams_s01_temperatures_s01t04_encode+0x48>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 fd21 	bl	8000794 <__aeabi_ddiv>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4610      	mov	r0, r2
 800dd58:	4619      	mov	r1, r3
 800dd5a:	f7f2 fe8b 	bl	8000a74 <__aeabi_d2iz>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	b25b      	sxtb	r3, r3
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	f3af 8000 	nop.w
 800dd70:	9999999a 	.word	0x9999999a
 800dd74:	3fd99999 	.word	0x3fd99999
 800dd78:	40240000 	.word	0x40240000
 800dd7c:	00000000 	.word	0x00000000

0800dd80 <can1_ams_s01_temperatures_s01t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s01_temperatures_s01t05_encode(double value)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800dd8a:	f04f 0200 	mov.w	r2, #0
 800dd8e:	4b10      	ldr	r3, [pc, #64]	@ (800ddd0 <can1_ams_s01_temperatures_s01t05_encode+0x50>)
 800dd90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd94:	f7f2 fa1e 	bl	80001d4 <__adddf3>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	4619      	mov	r1, r3
 800dda0:	a309      	add	r3, pc, #36	@ (adr r3, 800ddc8 <can1_ams_s01_temperatures_s01t05_encode+0x48>)
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f7f2 fcf5 	bl	8000794 <__aeabi_ddiv>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	460b      	mov	r3, r1
 800ddae:	4610      	mov	r0, r2
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	f7f2 fe5f 	bl	8000a74 <__aeabi_d2iz>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	b25b      	sxtb	r3, r3
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	f3af 8000 	nop.w
 800ddc8:	9999999a 	.word	0x9999999a
 800ddcc:	3fd99999 	.word	0x3fd99999
 800ddd0:	40240000 	.word	0x40240000

0800ddd4 <can1_ams_s02_temperatures_pack>:

int can1_ams_s02_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s02_temperatures_t *src_p,
    size_t size)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
    uint8_t s02t02;
    uint8_t s02t03;
    uint8_t s02t04;
    uint8_t s02t05;

    if (size < 5u) {
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b04      	cmp	r3, #4
 800dde4:	d802      	bhi.n	800ddec <can1_ams_s02_temperatures_pack+0x18>
        return (-EINVAL);
 800dde6:	f06f 0315 	mvn.w	r3, #21
 800ddea:	e067      	b.n	800debc <can1_ams_s02_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800ddec:	2205      	movs	r2, #5
 800ddee:	2100      	movs	r1, #0
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f002 fc49 	bl	8010688 <memset>

    s02t01 = (uint8_t)src_p->s02t01;
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	f993 3000 	ldrsb.w	r3, [r3]
 800ddfc:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s02t01, 0u, 0xffu);
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	22ff      	movs	r2, #255	@ 0xff
 800de02:	2100      	movs	r1, #0
 800de04:	4618      	mov	r0, r3
 800de06:	f7fb faf9 	bl	80093fc <pack_left_shift_u8>
 800de0a:	4603      	mov	r3, r0
 800de0c:	461a      	mov	r2, r3
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	4313      	orrs	r3, r2
 800de14:	b2da      	uxtb	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	701a      	strb	r2, [r3, #0]
    s02t02 = (uint8_t)src_p->s02t02;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800de20:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s02t02, 0u, 0xffu);
 800de22:	7dbb      	ldrb	r3, [r7, #22]
 800de24:	22ff      	movs	r2, #255	@ 0xff
 800de26:	2100      	movs	r1, #0
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fb fae7 	bl	80093fc <pack_left_shift_u8>
 800de2e:	4603      	mov	r3, r0
 800de30:	4619      	mov	r1, r3
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	3301      	adds	r3, #1
 800de36:	781a      	ldrb	r2, [r3, #0]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	3301      	adds	r3, #1
 800de3c:	430a      	orrs	r2, r1
 800de3e:	b2d2      	uxtb	r2, r2
 800de40:	701a      	strb	r2, [r3, #0]
    s02t03 = (uint8_t)src_p->s02t03;
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800de48:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s02t03, 0u, 0xffu);
 800de4a:	7d7b      	ldrb	r3, [r7, #21]
 800de4c:	22ff      	movs	r2, #255	@ 0xff
 800de4e:	2100      	movs	r1, #0
 800de50:	4618      	mov	r0, r3
 800de52:	f7fb fad3 	bl	80093fc <pack_left_shift_u8>
 800de56:	4603      	mov	r3, r0
 800de58:	4619      	mov	r1, r3
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3302      	adds	r3, #2
 800de5e:	781a      	ldrb	r2, [r3, #0]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	3302      	adds	r3, #2
 800de64:	430a      	orrs	r2, r1
 800de66:	b2d2      	uxtb	r2, r2
 800de68:	701a      	strb	r2, [r3, #0]
    s02t04 = (uint8_t)src_p->s02t04;
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800de70:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s02t04, 0u, 0xffu);
 800de72:	7d3b      	ldrb	r3, [r7, #20]
 800de74:	22ff      	movs	r2, #255	@ 0xff
 800de76:	2100      	movs	r1, #0
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fb fabf 	bl	80093fc <pack_left_shift_u8>
 800de7e:	4603      	mov	r3, r0
 800de80:	4619      	mov	r1, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	3303      	adds	r3, #3
 800de86:	781a      	ldrb	r2, [r3, #0]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	3303      	adds	r3, #3
 800de8c:	430a      	orrs	r2, r1
 800de8e:	b2d2      	uxtb	r2, r2
 800de90:	701a      	strb	r2, [r3, #0]
    s02t05 = (uint8_t)src_p->s02t05;
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800de98:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s02t05, 0u, 0xffu);
 800de9a:	7cfb      	ldrb	r3, [r7, #19]
 800de9c:	22ff      	movs	r2, #255	@ 0xff
 800de9e:	2100      	movs	r1, #0
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fb faab 	bl	80093fc <pack_left_shift_u8>
 800dea6:	4603      	mov	r3, r0
 800dea8:	4619      	mov	r1, r3
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3304      	adds	r3, #4
 800deae:	781a      	ldrb	r2, [r3, #0]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3304      	adds	r3, #4
 800deb4:	430a      	orrs	r2, r1
 800deb6:	b2d2      	uxtb	r2, r2
 800deb8:	701a      	strb	r2, [r3, #0]

    return (5);
 800deba:	2305      	movs	r3, #5
}
 800debc:	4618      	mov	r0, r3
 800debe:	3718      	adds	r7, #24
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	0000      	movs	r0, r0
	...

0800dec8 <can1_ams_s02_temperatures_s02t01_encode>:

    return 0;
}

int8_t can1_ams_s02_temperatures_s02t01_encode(double value)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ded2:	f04f 0200 	mov.w	r2, #0
 800ded6:	4b10      	ldr	r3, [pc, #64]	@ (800df18 <can1_ams_s02_temperatures_s02t01_encode+0x50>)
 800ded8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dedc:	f7f2 f97a 	bl	80001d4 <__adddf3>
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	4610      	mov	r0, r2
 800dee6:	4619      	mov	r1, r3
 800dee8:	a309      	add	r3, pc, #36	@ (adr r3, 800df10 <can1_ams_s02_temperatures_s02t01_encode+0x48>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 fc51 	bl	8000794 <__aeabi_ddiv>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	4610      	mov	r0, r2
 800def8:	4619      	mov	r1, r3
 800defa:	f7f2 fdbb 	bl	8000a74 <__aeabi_d2iz>
 800defe:	4603      	mov	r3, r0
 800df00:	b25b      	sxtb	r3, r3
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	f3af 8000 	nop.w
 800df10:	9999999a 	.word	0x9999999a
 800df14:	3fd99999 	.word	0x3fd99999
 800df18:	40240000 	.word	0x40240000
 800df1c:	00000000 	.word	0x00000000

0800df20 <can1_ams_s02_temperatures_s02t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s02_temperatures_s02t02_encode(double value)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800df2a:	f04f 0200 	mov.w	r2, #0
 800df2e:	4b10      	ldr	r3, [pc, #64]	@ (800df70 <can1_ams_s02_temperatures_s02t02_encode+0x50>)
 800df30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df34:	f7f2 f94e 	bl	80001d4 <__adddf3>
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	4610      	mov	r0, r2
 800df3e:	4619      	mov	r1, r3
 800df40:	a309      	add	r3, pc, #36	@ (adr r3, 800df68 <can1_ams_s02_temperatures_s02t02_encode+0x48>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	f7f2 fc25 	bl	8000794 <__aeabi_ddiv>
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4610      	mov	r0, r2
 800df50:	4619      	mov	r1, r3
 800df52:	f7f2 fd8f 	bl	8000a74 <__aeabi_d2iz>
 800df56:	4603      	mov	r3, r0
 800df58:	b25b      	sxtb	r3, r3
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	f3af 8000 	nop.w
 800df68:	9999999a 	.word	0x9999999a
 800df6c:	3fd99999 	.word	0x3fd99999
 800df70:	40240000 	.word	0x40240000
 800df74:	00000000 	.word	0x00000000

0800df78 <can1_ams_s02_temperatures_s02t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s02_temperatures_s02t03_encode(double value)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800df82:	f04f 0200 	mov.w	r2, #0
 800df86:	4b10      	ldr	r3, [pc, #64]	@ (800dfc8 <can1_ams_s02_temperatures_s02t03_encode+0x50>)
 800df88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df8c:	f7f2 f922 	bl	80001d4 <__adddf3>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4610      	mov	r0, r2
 800df96:	4619      	mov	r1, r3
 800df98:	a309      	add	r3, pc, #36	@ (adr r3, 800dfc0 <can1_ams_s02_temperatures_s02t03_encode+0x48>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 fbf9 	bl	8000794 <__aeabi_ddiv>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	f7f2 fd63 	bl	8000a74 <__aeabi_d2iz>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	b25b      	sxtb	r3, r3
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w
 800dfc0:	9999999a 	.word	0x9999999a
 800dfc4:	3fd99999 	.word	0x3fd99999
 800dfc8:	40240000 	.word	0x40240000
 800dfcc:	00000000 	.word	0x00000000

0800dfd0 <can1_ams_s02_temperatures_s02t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s02_temperatures_s02t04_encode(double value)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800dfda:	f04f 0200 	mov.w	r2, #0
 800dfde:	4b10      	ldr	r3, [pc, #64]	@ (800e020 <can1_ams_s02_temperatures_s02t04_encode+0x50>)
 800dfe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dfe4:	f7f2 f8f6 	bl	80001d4 <__adddf3>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	4610      	mov	r0, r2
 800dfee:	4619      	mov	r1, r3
 800dff0:	a309      	add	r3, pc, #36	@ (adr r3, 800e018 <can1_ams_s02_temperatures_s02t04_encode+0x48>)
 800dff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff6:	f7f2 fbcd 	bl	8000794 <__aeabi_ddiv>
 800dffa:	4602      	mov	r2, r0
 800dffc:	460b      	mov	r3, r1
 800dffe:	4610      	mov	r0, r2
 800e000:	4619      	mov	r1, r3
 800e002:	f7f2 fd37 	bl	8000a74 <__aeabi_d2iz>
 800e006:	4603      	mov	r3, r0
 800e008:	b25b      	sxtb	r3, r3
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3708      	adds	r7, #8
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	f3af 8000 	nop.w
 800e018:	9999999a 	.word	0x9999999a
 800e01c:	3fd99999 	.word	0x3fd99999
 800e020:	40240000 	.word	0x40240000
 800e024:	00000000 	.word	0x00000000

0800e028 <can1_ams_s02_temperatures_s02t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s02_temperatures_s02t05_encode(double value)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e032:	f04f 0200 	mov.w	r2, #0
 800e036:	4b10      	ldr	r3, [pc, #64]	@ (800e078 <can1_ams_s02_temperatures_s02t05_encode+0x50>)
 800e038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e03c:	f7f2 f8ca 	bl	80001d4 <__adddf3>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4610      	mov	r0, r2
 800e046:	4619      	mov	r1, r3
 800e048:	a309      	add	r3, pc, #36	@ (adr r3, 800e070 <can1_ams_s02_temperatures_s02t05_encode+0x48>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	f7f2 fba1 	bl	8000794 <__aeabi_ddiv>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4610      	mov	r0, r2
 800e058:	4619      	mov	r1, r3
 800e05a:	f7f2 fd0b 	bl	8000a74 <__aeabi_d2iz>
 800e05e:	4603      	mov	r3, r0
 800e060:	b25b      	sxtb	r3, r3
}
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	f3af 8000 	nop.w
 800e070:	9999999a 	.word	0x9999999a
 800e074:	3fd99999 	.word	0x3fd99999
 800e078:	40240000 	.word	0x40240000

0800e07c <can1_ams_s03_temperatures_pack>:

int can1_ams_s03_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s03_temperatures_t *src_p,
    size_t size)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
    uint8_t s03t02;
    uint8_t s03t03;
    uint8_t s03t04;
    uint8_t s03t05;

    if (size < 5u) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b04      	cmp	r3, #4
 800e08c:	d802      	bhi.n	800e094 <can1_ams_s03_temperatures_pack+0x18>
        return (-EINVAL);
 800e08e:	f06f 0315 	mvn.w	r3, #21
 800e092:	e067      	b.n	800e164 <can1_ams_s03_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800e094:	2205      	movs	r2, #5
 800e096:	2100      	movs	r1, #0
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f002 faf5 	bl	8010688 <memset>

    s03t01 = (uint8_t)src_p->s03t01;
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	f993 3000 	ldrsb.w	r3, [r3]
 800e0a4:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s03t01, 0u, 0xffu);
 800e0a6:	7dfb      	ldrb	r3, [r7, #23]
 800e0a8:	22ff      	movs	r2, #255	@ 0xff
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fb f9a5 	bl	80093fc <pack_left_shift_u8>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	701a      	strb	r2, [r3, #0]
    s03t02 = (uint8_t)src_p->s03t02;
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e0c8:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s03t02, 0u, 0xffu);
 800e0ca:	7dbb      	ldrb	r3, [r7, #22]
 800e0cc:	22ff      	movs	r2, #255	@ 0xff
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fb f993 	bl	80093fc <pack_left_shift_u8>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	4619      	mov	r1, r3
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	781a      	ldrb	r2, [r3, #0]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	430a      	orrs	r2, r1
 800e0e6:	b2d2      	uxtb	r2, r2
 800e0e8:	701a      	strb	r2, [r3, #0]
    s03t03 = (uint8_t)src_p->s03t03;
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e0f0:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s03t03, 0u, 0xffu);
 800e0f2:	7d7b      	ldrb	r3, [r7, #21]
 800e0f4:	22ff      	movs	r2, #255	@ 0xff
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fb f97f 	bl	80093fc <pack_left_shift_u8>
 800e0fe:	4603      	mov	r3, r0
 800e100:	4619      	mov	r1, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3302      	adds	r3, #2
 800e106:	781a      	ldrb	r2, [r3, #0]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3302      	adds	r3, #2
 800e10c:	430a      	orrs	r2, r1
 800e10e:	b2d2      	uxtb	r2, r2
 800e110:	701a      	strb	r2, [r3, #0]
    s03t04 = (uint8_t)src_p->s03t04;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800e118:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s03t04, 0u, 0xffu);
 800e11a:	7d3b      	ldrb	r3, [r7, #20]
 800e11c:	22ff      	movs	r2, #255	@ 0xff
 800e11e:	2100      	movs	r1, #0
 800e120:	4618      	mov	r0, r3
 800e122:	f7fb f96b 	bl	80093fc <pack_left_shift_u8>
 800e126:	4603      	mov	r3, r0
 800e128:	4619      	mov	r1, r3
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	3303      	adds	r3, #3
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	3303      	adds	r3, #3
 800e134:	430a      	orrs	r2, r1
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	701a      	strb	r2, [r3, #0]
    s03t05 = (uint8_t)src_p->s03t05;
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e140:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s03t05, 0u, 0xffu);
 800e142:	7cfb      	ldrb	r3, [r7, #19]
 800e144:	22ff      	movs	r2, #255	@ 0xff
 800e146:	2100      	movs	r1, #0
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fb f957 	bl	80093fc <pack_left_shift_u8>
 800e14e:	4603      	mov	r3, r0
 800e150:	4619      	mov	r1, r3
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3304      	adds	r3, #4
 800e156:	781a      	ldrb	r2, [r3, #0]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	3304      	adds	r3, #4
 800e15c:	430a      	orrs	r2, r1
 800e15e:	b2d2      	uxtb	r2, r2
 800e160:	701a      	strb	r2, [r3, #0]

    return (5);
 800e162:	2305      	movs	r3, #5
}
 800e164:	4618      	mov	r0, r3
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	0000      	movs	r0, r0
	...

0800e170 <can1_ams_s03_temperatures_s03t01_encode>:

    return 0;
}

int8_t can1_ams_s03_temperatures_s03t01_encode(double value)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e17a:	f04f 0200 	mov.w	r2, #0
 800e17e:	4b10      	ldr	r3, [pc, #64]	@ (800e1c0 <can1_ams_s03_temperatures_s03t01_encode+0x50>)
 800e180:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e184:	f7f2 f826 	bl	80001d4 <__adddf3>
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	4610      	mov	r0, r2
 800e18e:	4619      	mov	r1, r3
 800e190:	a309      	add	r3, pc, #36	@ (adr r3, 800e1b8 <can1_ams_s03_temperatures_s03t01_encode+0x48>)
 800e192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e196:	f7f2 fafd 	bl	8000794 <__aeabi_ddiv>
 800e19a:	4602      	mov	r2, r0
 800e19c:	460b      	mov	r3, r1
 800e19e:	4610      	mov	r0, r2
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	f7f2 fc67 	bl	8000a74 <__aeabi_d2iz>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	b25b      	sxtb	r3, r3
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	f3af 8000 	nop.w
 800e1b8:	9999999a 	.word	0x9999999a
 800e1bc:	3fd99999 	.word	0x3fd99999
 800e1c0:	40240000 	.word	0x40240000
 800e1c4:	00000000 	.word	0x00000000

0800e1c8 <can1_ams_s03_temperatures_s03t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s03_temperatures_s03t02_encode(double value)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e1d2:	f04f 0200 	mov.w	r2, #0
 800e1d6:	4b10      	ldr	r3, [pc, #64]	@ (800e218 <can1_ams_s03_temperatures_s03t02_encode+0x50>)
 800e1d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e1dc:	f7f1 fffa 	bl	80001d4 <__adddf3>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	a309      	add	r3, pc, #36	@ (adr r3, 800e210 <can1_ams_s03_temperatures_s03t02_encode+0x48>)
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	f7f2 fad1 	bl	8000794 <__aeabi_ddiv>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	f7f2 fc3b 	bl	8000a74 <__aeabi_d2iz>
 800e1fe:	4603      	mov	r3, r0
 800e200:	b25b      	sxtb	r3, r3
}
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	f3af 8000 	nop.w
 800e210:	9999999a 	.word	0x9999999a
 800e214:	3fd99999 	.word	0x3fd99999
 800e218:	40240000 	.word	0x40240000
 800e21c:	00000000 	.word	0x00000000

0800e220 <can1_ams_s03_temperatures_s03t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s03_temperatures_s03t03_encode(double value)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e22a:	f04f 0200 	mov.w	r2, #0
 800e22e:	4b10      	ldr	r3, [pc, #64]	@ (800e270 <can1_ams_s03_temperatures_s03t03_encode+0x50>)
 800e230:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e234:	f7f1 ffce 	bl	80001d4 <__adddf3>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4610      	mov	r0, r2
 800e23e:	4619      	mov	r1, r3
 800e240:	a309      	add	r3, pc, #36	@ (adr r3, 800e268 <can1_ams_s03_temperatures_s03t03_encode+0x48>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	f7f2 faa5 	bl	8000794 <__aeabi_ddiv>
 800e24a:	4602      	mov	r2, r0
 800e24c:	460b      	mov	r3, r1
 800e24e:	4610      	mov	r0, r2
 800e250:	4619      	mov	r1, r3
 800e252:	f7f2 fc0f 	bl	8000a74 <__aeabi_d2iz>
 800e256:	4603      	mov	r3, r0
 800e258:	b25b      	sxtb	r3, r3
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	f3af 8000 	nop.w
 800e268:	9999999a 	.word	0x9999999a
 800e26c:	3fd99999 	.word	0x3fd99999
 800e270:	40240000 	.word	0x40240000
 800e274:	00000000 	.word	0x00000000

0800e278 <can1_ams_s03_temperatures_s03t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s03_temperatures_s03t04_encode(double value)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e282:	f04f 0200 	mov.w	r2, #0
 800e286:	4b10      	ldr	r3, [pc, #64]	@ (800e2c8 <can1_ams_s03_temperatures_s03t04_encode+0x50>)
 800e288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e28c:	f7f1 ffa2 	bl	80001d4 <__adddf3>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4610      	mov	r0, r2
 800e296:	4619      	mov	r1, r3
 800e298:	a309      	add	r3, pc, #36	@ (adr r3, 800e2c0 <can1_ams_s03_temperatures_s03t04_encode+0x48>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	f7f2 fa79 	bl	8000794 <__aeabi_ddiv>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	f7f2 fbe3 	bl	8000a74 <__aeabi_d2iz>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	b25b      	sxtb	r3, r3
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	f3af 8000 	nop.w
 800e2c0:	9999999a 	.word	0x9999999a
 800e2c4:	3fd99999 	.word	0x3fd99999
 800e2c8:	40240000 	.word	0x40240000
 800e2cc:	00000000 	.word	0x00000000

0800e2d0 <can1_ams_s03_temperatures_s03t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s03_temperatures_s03t05_encode(double value)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e2da:	f04f 0200 	mov.w	r2, #0
 800e2de:	4b10      	ldr	r3, [pc, #64]	@ (800e320 <can1_ams_s03_temperatures_s03t05_encode+0x50>)
 800e2e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e2e4:	f7f1 ff76 	bl	80001d4 <__adddf3>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	a309      	add	r3, pc, #36	@ (adr r3, 800e318 <can1_ams_s03_temperatures_s03t05_encode+0x48>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	f7f2 fa4d 	bl	8000794 <__aeabi_ddiv>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4610      	mov	r0, r2
 800e300:	4619      	mov	r1, r3
 800e302:	f7f2 fbb7 	bl	8000a74 <__aeabi_d2iz>
 800e306:	4603      	mov	r3, r0
 800e308:	b25b      	sxtb	r3, r3
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	f3af 8000 	nop.w
 800e318:	9999999a 	.word	0x9999999a
 800e31c:	3fd99999 	.word	0x3fd99999
 800e320:	40240000 	.word	0x40240000

0800e324 <can1_ams_s04_temperatures_pack>:

int can1_ams_s04_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s04_temperatures_t *src_p,
    size_t size)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
    uint8_t s04t02;
    uint8_t s04t03;
    uint8_t s04t04;
    uint8_t s04t05;

    if (size < 5u) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b04      	cmp	r3, #4
 800e334:	d802      	bhi.n	800e33c <can1_ams_s04_temperatures_pack+0x18>
        return (-EINVAL);
 800e336:	f06f 0315 	mvn.w	r3, #21
 800e33a:	e067      	b.n	800e40c <can1_ams_s04_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800e33c:	2205      	movs	r2, #5
 800e33e:	2100      	movs	r1, #0
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f002 f9a1 	bl	8010688 <memset>

    s04t01 = (uint8_t)src_p->s04t01;
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	f993 3000 	ldrsb.w	r3, [r3]
 800e34c:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s04t01, 0u, 0xffu);
 800e34e:	7dfb      	ldrb	r3, [r7, #23]
 800e350:	22ff      	movs	r2, #255	@ 0xff
 800e352:	2100      	movs	r1, #0
 800e354:	4618      	mov	r0, r3
 800e356:	f7fb f851 	bl	80093fc <pack_left_shift_u8>
 800e35a:	4603      	mov	r3, r0
 800e35c:	461a      	mov	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	4313      	orrs	r3, r2
 800e364:	b2da      	uxtb	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	701a      	strb	r2, [r3, #0]
    s04t02 = (uint8_t)src_p->s04t02;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e370:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s04t02, 0u, 0xffu);
 800e372:	7dbb      	ldrb	r3, [r7, #22]
 800e374:	22ff      	movs	r2, #255	@ 0xff
 800e376:	2100      	movs	r1, #0
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fb f83f 	bl	80093fc <pack_left_shift_u8>
 800e37e:	4603      	mov	r3, r0
 800e380:	4619      	mov	r1, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	3301      	adds	r3, #1
 800e386:	781a      	ldrb	r2, [r3, #0]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	3301      	adds	r3, #1
 800e38c:	430a      	orrs	r2, r1
 800e38e:	b2d2      	uxtb	r2, r2
 800e390:	701a      	strb	r2, [r3, #0]
    s04t03 = (uint8_t)src_p->s04t03;
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e398:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s04t03, 0u, 0xffu);
 800e39a:	7d7b      	ldrb	r3, [r7, #21]
 800e39c:	22ff      	movs	r2, #255	@ 0xff
 800e39e:	2100      	movs	r1, #0
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fb f82b 	bl	80093fc <pack_left_shift_u8>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3302      	adds	r3, #2
 800e3ae:	781a      	ldrb	r2, [r3, #0]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3302      	adds	r3, #2
 800e3b4:	430a      	orrs	r2, r1
 800e3b6:	b2d2      	uxtb	r2, r2
 800e3b8:	701a      	strb	r2, [r3, #0]
    s04t04 = (uint8_t)src_p->s04t04;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800e3c0:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s04t04, 0u, 0xffu);
 800e3c2:	7d3b      	ldrb	r3, [r7, #20]
 800e3c4:	22ff      	movs	r2, #255	@ 0xff
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fb f817 	bl	80093fc <pack_left_shift_u8>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	3303      	adds	r3, #3
 800e3d6:	781a      	ldrb	r2, [r3, #0]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	3303      	adds	r3, #3
 800e3dc:	430a      	orrs	r2, r1
 800e3de:	b2d2      	uxtb	r2, r2
 800e3e0:	701a      	strb	r2, [r3, #0]
    s04t05 = (uint8_t)src_p->s04t05;
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e3e8:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s04t05, 0u, 0xffu);
 800e3ea:	7cfb      	ldrb	r3, [r7, #19]
 800e3ec:	22ff      	movs	r2, #255	@ 0xff
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fb f803 	bl	80093fc <pack_left_shift_u8>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	3304      	adds	r3, #4
 800e3fe:	781a      	ldrb	r2, [r3, #0]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	3304      	adds	r3, #4
 800e404:	430a      	orrs	r2, r1
 800e406:	b2d2      	uxtb	r2, r2
 800e408:	701a      	strb	r2, [r3, #0]

    return (5);
 800e40a:	2305      	movs	r3, #5
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3718      	adds	r7, #24
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	0000      	movs	r0, r0
	...

0800e418 <can1_ams_s04_temperatures_s04t01_encode>:

    return 0;
}

int8_t can1_ams_s04_temperatures_s04t01_encode(double value)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e422:	f04f 0200 	mov.w	r2, #0
 800e426:	4b10      	ldr	r3, [pc, #64]	@ (800e468 <can1_ams_s04_temperatures_s04t01_encode+0x50>)
 800e428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e42c:	f7f1 fed2 	bl	80001d4 <__adddf3>
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4610      	mov	r0, r2
 800e436:	4619      	mov	r1, r3
 800e438:	a309      	add	r3, pc, #36	@ (adr r3, 800e460 <can1_ams_s04_temperatures_s04t01_encode+0x48>)
 800e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43e:	f7f2 f9a9 	bl	8000794 <__aeabi_ddiv>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	4610      	mov	r0, r2
 800e448:	4619      	mov	r1, r3
 800e44a:	f7f2 fb13 	bl	8000a74 <__aeabi_d2iz>
 800e44e:	4603      	mov	r3, r0
 800e450:	b25b      	sxtb	r3, r3
}
 800e452:	4618      	mov	r0, r3
 800e454:	3708      	adds	r7, #8
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	f3af 8000 	nop.w
 800e460:	9999999a 	.word	0x9999999a
 800e464:	3fd99999 	.word	0x3fd99999
 800e468:	40240000 	.word	0x40240000
 800e46c:	00000000 	.word	0x00000000

0800e470 <can1_ams_s04_temperatures_s04t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s04_temperatures_s04t02_encode(double value)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e47a:	f04f 0200 	mov.w	r2, #0
 800e47e:	4b10      	ldr	r3, [pc, #64]	@ (800e4c0 <can1_ams_s04_temperatures_s04t02_encode+0x50>)
 800e480:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e484:	f7f1 fea6 	bl	80001d4 <__adddf3>
 800e488:	4602      	mov	r2, r0
 800e48a:	460b      	mov	r3, r1
 800e48c:	4610      	mov	r0, r2
 800e48e:	4619      	mov	r1, r3
 800e490:	a309      	add	r3, pc, #36	@ (adr r3, 800e4b8 <can1_ams_s04_temperatures_s04t02_encode+0x48>)
 800e492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e496:	f7f2 f97d 	bl	8000794 <__aeabi_ddiv>
 800e49a:	4602      	mov	r2, r0
 800e49c:	460b      	mov	r3, r1
 800e49e:	4610      	mov	r0, r2
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	f7f2 fae7 	bl	8000a74 <__aeabi_d2iz>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	b25b      	sxtb	r3, r3
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	f3af 8000 	nop.w
 800e4b8:	9999999a 	.word	0x9999999a
 800e4bc:	3fd99999 	.word	0x3fd99999
 800e4c0:	40240000 	.word	0x40240000
 800e4c4:	00000000 	.word	0x00000000

0800e4c8 <can1_ams_s04_temperatures_s04t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s04_temperatures_s04t03_encode(double value)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e4d2:	f04f 0200 	mov.w	r2, #0
 800e4d6:	4b10      	ldr	r3, [pc, #64]	@ (800e518 <can1_ams_s04_temperatures_s04t03_encode+0x50>)
 800e4d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e4dc:	f7f1 fe7a 	bl	80001d4 <__adddf3>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	a309      	add	r3, pc, #36	@ (adr r3, 800e510 <can1_ams_s04_temperatures_s04t03_encode+0x48>)
 800e4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ee:	f7f2 f951 	bl	8000794 <__aeabi_ddiv>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	f7f2 fabb 	bl	8000a74 <__aeabi_d2iz>
 800e4fe:	4603      	mov	r3, r0
 800e500:	b25b      	sxtb	r3, r3
}
 800e502:	4618      	mov	r0, r3
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	f3af 8000 	nop.w
 800e510:	9999999a 	.word	0x9999999a
 800e514:	3fd99999 	.word	0x3fd99999
 800e518:	40240000 	.word	0x40240000
 800e51c:	00000000 	.word	0x00000000

0800e520 <can1_ams_s04_temperatures_s04t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s04_temperatures_s04t04_encode(double value)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e52a:	f04f 0200 	mov.w	r2, #0
 800e52e:	4b10      	ldr	r3, [pc, #64]	@ (800e570 <can1_ams_s04_temperatures_s04t04_encode+0x50>)
 800e530:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e534:	f7f1 fe4e 	bl	80001d4 <__adddf3>
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	4610      	mov	r0, r2
 800e53e:	4619      	mov	r1, r3
 800e540:	a309      	add	r3, pc, #36	@ (adr r3, 800e568 <can1_ams_s04_temperatures_s04t04_encode+0x48>)
 800e542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e546:	f7f2 f925 	bl	8000794 <__aeabi_ddiv>
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	4610      	mov	r0, r2
 800e550:	4619      	mov	r1, r3
 800e552:	f7f2 fa8f 	bl	8000a74 <__aeabi_d2iz>
 800e556:	4603      	mov	r3, r0
 800e558:	b25b      	sxtb	r3, r3
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	f3af 8000 	nop.w
 800e568:	9999999a 	.word	0x9999999a
 800e56c:	3fd99999 	.word	0x3fd99999
 800e570:	40240000 	.word	0x40240000
 800e574:	00000000 	.word	0x00000000

0800e578 <can1_ams_s04_temperatures_s04t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s04_temperatures_s04t05_encode(double value)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e582:	f04f 0200 	mov.w	r2, #0
 800e586:	4b10      	ldr	r3, [pc, #64]	@ (800e5c8 <can1_ams_s04_temperatures_s04t05_encode+0x50>)
 800e588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e58c:	f7f1 fe22 	bl	80001d4 <__adddf3>
 800e590:	4602      	mov	r2, r0
 800e592:	460b      	mov	r3, r1
 800e594:	4610      	mov	r0, r2
 800e596:	4619      	mov	r1, r3
 800e598:	a309      	add	r3, pc, #36	@ (adr r3, 800e5c0 <can1_ams_s04_temperatures_s04t05_encode+0x48>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f2 f8f9 	bl	8000794 <__aeabi_ddiv>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	f7f2 fa63 	bl	8000a74 <__aeabi_d2iz>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	b25b      	sxtb	r3, r3
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	f3af 8000 	nop.w
 800e5c0:	9999999a 	.word	0x9999999a
 800e5c4:	3fd99999 	.word	0x3fd99999
 800e5c8:	40240000 	.word	0x40240000

0800e5cc <can1_ams_s05_temperatures_pack>:

int can1_ams_s05_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s05_temperatures_t *src_p,
    size_t size)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b086      	sub	sp, #24
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
    uint8_t s05t02;
    uint8_t s05t03;
    uint8_t s05t04;
    uint8_t s05t05;

    if (size < 5u) {
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2b04      	cmp	r3, #4
 800e5dc:	d802      	bhi.n	800e5e4 <can1_ams_s05_temperatures_pack+0x18>
        return (-EINVAL);
 800e5de:	f06f 0315 	mvn.w	r3, #21
 800e5e2:	e067      	b.n	800e6b4 <can1_ams_s05_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800e5e4:	2205      	movs	r2, #5
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	68f8      	ldr	r0, [r7, #12]
 800e5ea:	f002 f84d 	bl	8010688 <memset>

    s05t01 = (uint8_t)src_p->s05t01;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	f993 3000 	ldrsb.w	r3, [r3]
 800e5f4:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s05t01, 0u, 0xffu);
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	22ff      	movs	r2, #255	@ 0xff
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7fa fefd 	bl	80093fc <pack_left_shift_u8>
 800e602:	4603      	mov	r3, r0
 800e604:	461a      	mov	r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	701a      	strb	r2, [r3, #0]
    s05t02 = (uint8_t)src_p->s05t02;
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e618:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s05t02, 0u, 0xffu);
 800e61a:	7dbb      	ldrb	r3, [r7, #22]
 800e61c:	22ff      	movs	r2, #255	@ 0xff
 800e61e:	2100      	movs	r1, #0
 800e620:	4618      	mov	r0, r3
 800e622:	f7fa feeb 	bl	80093fc <pack_left_shift_u8>
 800e626:	4603      	mov	r3, r0
 800e628:	4619      	mov	r1, r3
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	3301      	adds	r3, #1
 800e62e:	781a      	ldrb	r2, [r3, #0]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	3301      	adds	r3, #1
 800e634:	430a      	orrs	r2, r1
 800e636:	b2d2      	uxtb	r2, r2
 800e638:	701a      	strb	r2, [r3, #0]
    s05t03 = (uint8_t)src_p->s05t03;
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e640:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s05t03, 0u, 0xffu);
 800e642:	7d7b      	ldrb	r3, [r7, #21]
 800e644:	22ff      	movs	r2, #255	@ 0xff
 800e646:	2100      	movs	r1, #0
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fa fed7 	bl	80093fc <pack_left_shift_u8>
 800e64e:	4603      	mov	r3, r0
 800e650:	4619      	mov	r1, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3302      	adds	r3, #2
 800e656:	781a      	ldrb	r2, [r3, #0]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	3302      	adds	r3, #2
 800e65c:	430a      	orrs	r2, r1
 800e65e:	b2d2      	uxtb	r2, r2
 800e660:	701a      	strb	r2, [r3, #0]
    s05t04 = (uint8_t)src_p->s05t04;
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800e668:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s05t04, 0u, 0xffu);
 800e66a:	7d3b      	ldrb	r3, [r7, #20]
 800e66c:	22ff      	movs	r2, #255	@ 0xff
 800e66e:	2100      	movs	r1, #0
 800e670:	4618      	mov	r0, r3
 800e672:	f7fa fec3 	bl	80093fc <pack_left_shift_u8>
 800e676:	4603      	mov	r3, r0
 800e678:	4619      	mov	r1, r3
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	3303      	adds	r3, #3
 800e67e:	781a      	ldrb	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	3303      	adds	r3, #3
 800e684:	430a      	orrs	r2, r1
 800e686:	b2d2      	uxtb	r2, r2
 800e688:	701a      	strb	r2, [r3, #0]
    s05t05 = (uint8_t)src_p->s05t05;
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e690:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s05t05, 0u, 0xffu);
 800e692:	7cfb      	ldrb	r3, [r7, #19]
 800e694:	22ff      	movs	r2, #255	@ 0xff
 800e696:	2100      	movs	r1, #0
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fa feaf 	bl	80093fc <pack_left_shift_u8>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	781a      	ldrb	r2, [r3, #0]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3304      	adds	r3, #4
 800e6ac:	430a      	orrs	r2, r1
 800e6ae:	b2d2      	uxtb	r2, r2
 800e6b0:	701a      	strb	r2, [r3, #0]

    return (5);
 800e6b2:	2305      	movs	r3, #5
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	0000      	movs	r0, r0
	...

0800e6c0 <can1_ams_s05_temperatures_s05t01_encode>:

    return 0;
}

int8_t can1_ams_s05_temperatures_s05t01_encode(double value)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e6ca:	f04f 0200 	mov.w	r2, #0
 800e6ce:	4b10      	ldr	r3, [pc, #64]	@ (800e710 <can1_ams_s05_temperatures_s05t01_encode+0x50>)
 800e6d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e6d4:	f7f1 fd7e 	bl	80001d4 <__adddf3>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4610      	mov	r0, r2
 800e6de:	4619      	mov	r1, r3
 800e6e0:	a309      	add	r3, pc, #36	@ (adr r3, 800e708 <can1_ams_s05_temperatures_s05t01_encode+0x48>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	f7f2 f855 	bl	8000794 <__aeabi_ddiv>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	f7f2 f9bf 	bl	8000a74 <__aeabi_d2iz>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	b25b      	sxtb	r3, r3
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3708      	adds	r7, #8
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	f3af 8000 	nop.w
 800e708:	9999999a 	.word	0x9999999a
 800e70c:	3fd99999 	.word	0x3fd99999
 800e710:	40240000 	.word	0x40240000
 800e714:	00000000 	.word	0x00000000

0800e718 <can1_ams_s05_temperatures_s05t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s05_temperatures_s05t02_encode(double value)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e722:	f04f 0200 	mov.w	r2, #0
 800e726:	4b10      	ldr	r3, [pc, #64]	@ (800e768 <can1_ams_s05_temperatures_s05t02_encode+0x50>)
 800e728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e72c:	f7f1 fd52 	bl	80001d4 <__adddf3>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	4610      	mov	r0, r2
 800e736:	4619      	mov	r1, r3
 800e738:	a309      	add	r3, pc, #36	@ (adr r3, 800e760 <can1_ams_s05_temperatures_s05t02_encode+0x48>)
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	f7f2 f829 	bl	8000794 <__aeabi_ddiv>
 800e742:	4602      	mov	r2, r0
 800e744:	460b      	mov	r3, r1
 800e746:	4610      	mov	r0, r2
 800e748:	4619      	mov	r1, r3
 800e74a:	f7f2 f993 	bl	8000a74 <__aeabi_d2iz>
 800e74e:	4603      	mov	r3, r0
 800e750:	b25b      	sxtb	r3, r3
}
 800e752:	4618      	mov	r0, r3
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	f3af 8000 	nop.w
 800e760:	9999999a 	.word	0x9999999a
 800e764:	3fd99999 	.word	0x3fd99999
 800e768:	40240000 	.word	0x40240000
 800e76c:	00000000 	.word	0x00000000

0800e770 <can1_ams_s05_temperatures_s05t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s05_temperatures_s05t03_encode(double value)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e77a:	f04f 0200 	mov.w	r2, #0
 800e77e:	4b10      	ldr	r3, [pc, #64]	@ (800e7c0 <can1_ams_s05_temperatures_s05t03_encode+0x50>)
 800e780:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e784:	f7f1 fd26 	bl	80001d4 <__adddf3>
 800e788:	4602      	mov	r2, r0
 800e78a:	460b      	mov	r3, r1
 800e78c:	4610      	mov	r0, r2
 800e78e:	4619      	mov	r1, r3
 800e790:	a309      	add	r3, pc, #36	@ (adr r3, 800e7b8 <can1_ams_s05_temperatures_s05t03_encode+0x48>)
 800e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e796:	f7f1 fffd 	bl	8000794 <__aeabi_ddiv>
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	4610      	mov	r0, r2
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	f7f2 f967 	bl	8000a74 <__aeabi_d2iz>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	b25b      	sxtb	r3, r3
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	f3af 8000 	nop.w
 800e7b8:	9999999a 	.word	0x9999999a
 800e7bc:	3fd99999 	.word	0x3fd99999
 800e7c0:	40240000 	.word	0x40240000
 800e7c4:	00000000 	.word	0x00000000

0800e7c8 <can1_ams_s05_temperatures_s05t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s05_temperatures_s05t04_encode(double value)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e7d2:	f04f 0200 	mov.w	r2, #0
 800e7d6:	4b10      	ldr	r3, [pc, #64]	@ (800e818 <can1_ams_s05_temperatures_s05t04_encode+0x50>)
 800e7d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e7dc:	f7f1 fcfa 	bl	80001d4 <__adddf3>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	4610      	mov	r0, r2
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	a309      	add	r3, pc, #36	@ (adr r3, 800e810 <can1_ams_s05_temperatures_s05t04_encode+0x48>)
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	f7f1 ffd1 	bl	8000794 <__aeabi_ddiv>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	f7f2 f93b 	bl	8000a74 <__aeabi_d2iz>
 800e7fe:	4603      	mov	r3, r0
 800e800:	b25b      	sxtb	r3, r3
}
 800e802:	4618      	mov	r0, r3
 800e804:	3708      	adds	r7, #8
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	f3af 8000 	nop.w
 800e810:	9999999a 	.word	0x9999999a
 800e814:	3fd99999 	.word	0x3fd99999
 800e818:	40240000 	.word	0x40240000
 800e81c:	00000000 	.word	0x00000000

0800e820 <can1_ams_s05_temperatures_s05t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s05_temperatures_s05t05_encode(double value)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e82a:	f04f 0200 	mov.w	r2, #0
 800e82e:	4b10      	ldr	r3, [pc, #64]	@ (800e870 <can1_ams_s05_temperatures_s05t05_encode+0x50>)
 800e830:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e834:	f7f1 fcce 	bl	80001d4 <__adddf3>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4610      	mov	r0, r2
 800e83e:	4619      	mov	r1, r3
 800e840:	a309      	add	r3, pc, #36	@ (adr r3, 800e868 <can1_ams_s05_temperatures_s05t05_encode+0x48>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	f7f1 ffa5 	bl	8000794 <__aeabi_ddiv>
 800e84a:	4602      	mov	r2, r0
 800e84c:	460b      	mov	r3, r1
 800e84e:	4610      	mov	r0, r2
 800e850:	4619      	mov	r1, r3
 800e852:	f7f2 f90f 	bl	8000a74 <__aeabi_d2iz>
 800e856:	4603      	mov	r3, r0
 800e858:	b25b      	sxtb	r3, r3
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	f3af 8000 	nop.w
 800e868:	9999999a 	.word	0x9999999a
 800e86c:	3fd99999 	.word	0x3fd99999
 800e870:	40240000 	.word	0x40240000

0800e874 <can1_ams_s06_temperatures_pack>:

int can1_ams_s06_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s06_temperatures_t *src_p,
    size_t size)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	607a      	str	r2, [r7, #4]
    uint8_t s06t02;
    uint8_t s06t03;
    uint8_t s06t04;
    uint8_t s06t05;

    if (size < 5u) {
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b04      	cmp	r3, #4
 800e884:	d802      	bhi.n	800e88c <can1_ams_s06_temperatures_pack+0x18>
        return (-EINVAL);
 800e886:	f06f 0315 	mvn.w	r3, #21
 800e88a:	e067      	b.n	800e95c <can1_ams_s06_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800e88c:	2205      	movs	r2, #5
 800e88e:	2100      	movs	r1, #0
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f001 fef9 	bl	8010688 <memset>

    s06t01 = (uint8_t)src_p->s06t01;
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	f993 3000 	ldrsb.w	r3, [r3]
 800e89c:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s06t01, 0u, 0xffu);
 800e89e:	7dfb      	ldrb	r3, [r7, #23]
 800e8a0:	22ff      	movs	r2, #255	@ 0xff
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fa fda9 	bl	80093fc <pack_left_shift_u8>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	701a      	strb	r2, [r3, #0]
    s06t02 = (uint8_t)src_p->s06t02;
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e8c0:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s06t02, 0u, 0xffu);
 800e8c2:	7dbb      	ldrb	r3, [r7, #22]
 800e8c4:	22ff      	movs	r2, #255	@ 0xff
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fa fd97 	bl	80093fc <pack_left_shift_u8>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	781a      	ldrb	r2, [r3, #0]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	430a      	orrs	r2, r1
 800e8de:	b2d2      	uxtb	r2, r2
 800e8e0:	701a      	strb	r2, [r3, #0]
    s06t03 = (uint8_t)src_p->s06t03;
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e8e8:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s06t03, 0u, 0xffu);
 800e8ea:	7d7b      	ldrb	r3, [r7, #21]
 800e8ec:	22ff      	movs	r2, #255	@ 0xff
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fa fd83 	bl	80093fc <pack_left_shift_u8>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3302      	adds	r3, #2
 800e8fe:	781a      	ldrb	r2, [r3, #0]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3302      	adds	r3, #2
 800e904:	430a      	orrs	r2, r1
 800e906:	b2d2      	uxtb	r2, r2
 800e908:	701a      	strb	r2, [r3, #0]
    s06t04 = (uint8_t)src_p->s06t04;
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800e910:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s06t04, 0u, 0xffu);
 800e912:	7d3b      	ldrb	r3, [r7, #20]
 800e914:	22ff      	movs	r2, #255	@ 0xff
 800e916:	2100      	movs	r1, #0
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fa fd6f 	bl	80093fc <pack_left_shift_u8>
 800e91e:	4603      	mov	r3, r0
 800e920:	4619      	mov	r1, r3
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	3303      	adds	r3, #3
 800e926:	781a      	ldrb	r2, [r3, #0]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	3303      	adds	r3, #3
 800e92c:	430a      	orrs	r2, r1
 800e92e:	b2d2      	uxtb	r2, r2
 800e930:	701a      	strb	r2, [r3, #0]
    s06t05 = (uint8_t)src_p->s06t05;
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e938:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s06t05, 0u, 0xffu);
 800e93a:	7cfb      	ldrb	r3, [r7, #19]
 800e93c:	22ff      	movs	r2, #255	@ 0xff
 800e93e:	2100      	movs	r1, #0
 800e940:	4618      	mov	r0, r3
 800e942:	f7fa fd5b 	bl	80093fc <pack_left_shift_u8>
 800e946:	4603      	mov	r3, r0
 800e948:	4619      	mov	r1, r3
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	3304      	adds	r3, #4
 800e94e:	781a      	ldrb	r2, [r3, #0]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3304      	adds	r3, #4
 800e954:	430a      	orrs	r2, r1
 800e956:	b2d2      	uxtb	r2, r2
 800e958:	701a      	strb	r2, [r3, #0]

    return (5);
 800e95a:	2305      	movs	r3, #5
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3718      	adds	r7, #24
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	0000      	movs	r0, r0
	...

0800e968 <can1_ams_s06_temperatures_s06t01_encode>:

    return 0;
}

int8_t can1_ams_s06_temperatures_s06t01_encode(double value)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e972:	f04f 0200 	mov.w	r2, #0
 800e976:	4b10      	ldr	r3, [pc, #64]	@ (800e9b8 <can1_ams_s06_temperatures_s06t01_encode+0x50>)
 800e978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e97c:	f7f1 fc2a 	bl	80001d4 <__adddf3>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	4610      	mov	r0, r2
 800e986:	4619      	mov	r1, r3
 800e988:	a309      	add	r3, pc, #36	@ (adr r3, 800e9b0 <can1_ams_s06_temperatures_s06t01_encode+0x48>)
 800e98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98e:	f7f1 ff01 	bl	8000794 <__aeabi_ddiv>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	4610      	mov	r0, r2
 800e998:	4619      	mov	r1, r3
 800e99a:	f7f2 f86b 	bl	8000a74 <__aeabi_d2iz>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	b25b      	sxtb	r3, r3
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	f3af 8000 	nop.w
 800e9b0:	9999999a 	.word	0x9999999a
 800e9b4:	3fd99999 	.word	0x3fd99999
 800e9b8:	40240000 	.word	0x40240000
 800e9bc:	00000000 	.word	0x00000000

0800e9c0 <can1_ams_s06_temperatures_s06t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s06_temperatures_s06t02_encode(double value)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800e9ca:	f04f 0200 	mov.w	r2, #0
 800e9ce:	4b10      	ldr	r3, [pc, #64]	@ (800ea10 <can1_ams_s06_temperatures_s06t02_encode+0x50>)
 800e9d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e9d4:	f7f1 fbfe 	bl	80001d4 <__adddf3>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	460b      	mov	r3, r1
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4619      	mov	r1, r3
 800e9e0:	a309      	add	r3, pc, #36	@ (adr r3, 800ea08 <can1_ams_s06_temperatures_s06t02_encode+0x48>)
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	f7f1 fed5 	bl	8000794 <__aeabi_ddiv>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	4610      	mov	r0, r2
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	f7f2 f83f 	bl	8000a74 <__aeabi_d2iz>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	b25b      	sxtb	r3, r3
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	f3af 8000 	nop.w
 800ea08:	9999999a 	.word	0x9999999a
 800ea0c:	3fd99999 	.word	0x3fd99999
 800ea10:	40240000 	.word	0x40240000
 800ea14:	00000000 	.word	0x00000000

0800ea18 <can1_ams_s06_temperatures_s06t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s06_temperatures_s06t03_encode(double value)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ea22:	f04f 0200 	mov.w	r2, #0
 800ea26:	4b10      	ldr	r3, [pc, #64]	@ (800ea68 <can1_ams_s06_temperatures_s06t03_encode+0x50>)
 800ea28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ea2c:	f7f1 fbd2 	bl	80001d4 <__adddf3>
 800ea30:	4602      	mov	r2, r0
 800ea32:	460b      	mov	r3, r1
 800ea34:	4610      	mov	r0, r2
 800ea36:	4619      	mov	r1, r3
 800ea38:	a309      	add	r3, pc, #36	@ (adr r3, 800ea60 <can1_ams_s06_temperatures_s06t03_encode+0x48>)
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	f7f1 fea9 	bl	8000794 <__aeabi_ddiv>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4610      	mov	r0, r2
 800ea48:	4619      	mov	r1, r3
 800ea4a:	f7f2 f813 	bl	8000a74 <__aeabi_d2iz>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	b25b      	sxtb	r3, r3
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	f3af 8000 	nop.w
 800ea60:	9999999a 	.word	0x9999999a
 800ea64:	3fd99999 	.word	0x3fd99999
 800ea68:	40240000 	.word	0x40240000
 800ea6c:	00000000 	.word	0x00000000

0800ea70 <can1_ams_s06_temperatures_s06t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s06_temperatures_s06t04_encode(double value)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ea7a:	f04f 0200 	mov.w	r2, #0
 800ea7e:	4b10      	ldr	r3, [pc, #64]	@ (800eac0 <can1_ams_s06_temperatures_s06t04_encode+0x50>)
 800ea80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ea84:	f7f1 fba6 	bl	80001d4 <__adddf3>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	4619      	mov	r1, r3
 800ea90:	a309      	add	r3, pc, #36	@ (adr r3, 800eab8 <can1_ams_s06_temperatures_s06t04_encode+0x48>)
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	f7f1 fe7d 	bl	8000794 <__aeabi_ddiv>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	f7f1 ffe7 	bl	8000a74 <__aeabi_d2iz>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	b25b      	sxtb	r3, r3
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3708      	adds	r7, #8
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	f3af 8000 	nop.w
 800eab8:	9999999a 	.word	0x9999999a
 800eabc:	3fd99999 	.word	0x3fd99999
 800eac0:	40240000 	.word	0x40240000
 800eac4:	00000000 	.word	0x00000000

0800eac8 <can1_ams_s06_temperatures_s06t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s06_temperatures_s06t05_encode(double value)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ead2:	f04f 0200 	mov.w	r2, #0
 800ead6:	4b10      	ldr	r3, [pc, #64]	@ (800eb18 <can1_ams_s06_temperatures_s06t05_encode+0x50>)
 800ead8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eadc:	f7f1 fb7a 	bl	80001d4 <__adddf3>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4610      	mov	r0, r2
 800eae6:	4619      	mov	r1, r3
 800eae8:	a309      	add	r3, pc, #36	@ (adr r3, 800eb10 <can1_ams_s06_temperatures_s06t05_encode+0x48>)
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	f7f1 fe51 	bl	8000794 <__aeabi_ddiv>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	4619      	mov	r1, r3
 800eafa:	f7f1 ffbb 	bl	8000a74 <__aeabi_d2iz>
 800eafe:	4603      	mov	r3, r0
 800eb00:	b25b      	sxtb	r3, r3
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	f3af 8000 	nop.w
 800eb10:	9999999a 	.word	0x9999999a
 800eb14:	3fd99999 	.word	0x3fd99999
 800eb18:	40240000 	.word	0x40240000

0800eb1c <can1_ams_s07_temperatures_pack>:

int can1_ams_s07_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s07_temperatures_t *src_p,
    size_t size)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b086      	sub	sp, #24
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
    uint8_t s07t02;
    uint8_t s07t03;
    uint8_t s07t04;
    uint8_t s07t05;

    if (size < 5u) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	d802      	bhi.n	800eb34 <can1_ams_s07_temperatures_pack+0x18>
        return (-EINVAL);
 800eb2e:	f06f 0315 	mvn.w	r3, #21
 800eb32:	e067      	b.n	800ec04 <can1_ams_s07_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800eb34:	2205      	movs	r2, #5
 800eb36:	2100      	movs	r1, #0
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f001 fda5 	bl	8010688 <memset>

    s07t01 = (uint8_t)src_p->s07t01;
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	f993 3000 	ldrsb.w	r3, [r3]
 800eb44:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s07t01, 0u, 0xffu);
 800eb46:	7dfb      	ldrb	r3, [r7, #23]
 800eb48:	22ff      	movs	r2, #255	@ 0xff
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fa fc55 	bl	80093fc <pack_left_shift_u8>
 800eb52:	4603      	mov	r3, r0
 800eb54:	461a      	mov	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	701a      	strb	r2, [r3, #0]
    s07t02 = (uint8_t)src_p->s07t02;
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800eb68:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s07t02, 0u, 0xffu);
 800eb6a:	7dbb      	ldrb	r3, [r7, #22]
 800eb6c:	22ff      	movs	r2, #255	@ 0xff
 800eb6e:	2100      	movs	r1, #0
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fa fc43 	bl	80093fc <pack_left_shift_u8>
 800eb76:	4603      	mov	r3, r0
 800eb78:	4619      	mov	r1, r3
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	781a      	ldrb	r2, [r3, #0]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	3301      	adds	r3, #1
 800eb84:	430a      	orrs	r2, r1
 800eb86:	b2d2      	uxtb	r2, r2
 800eb88:	701a      	strb	r2, [r3, #0]
    s07t03 = (uint8_t)src_p->s07t03;
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800eb90:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s07t03, 0u, 0xffu);
 800eb92:	7d7b      	ldrb	r3, [r7, #21]
 800eb94:	22ff      	movs	r2, #255	@ 0xff
 800eb96:	2100      	movs	r1, #0
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fa fc2f 	bl	80093fc <pack_left_shift_u8>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	4619      	mov	r1, r3
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3302      	adds	r3, #2
 800eba6:	781a      	ldrb	r2, [r3, #0]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	3302      	adds	r3, #2
 800ebac:	430a      	orrs	r2, r1
 800ebae:	b2d2      	uxtb	r2, r2
 800ebb0:	701a      	strb	r2, [r3, #0]
    s07t04 = (uint8_t)src_p->s07t04;
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800ebb8:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s07t04, 0u, 0xffu);
 800ebba:	7d3b      	ldrb	r3, [r7, #20]
 800ebbc:	22ff      	movs	r2, #255	@ 0xff
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fa fc1b 	bl	80093fc <pack_left_shift_u8>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	4619      	mov	r1, r3
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	3303      	adds	r3, #3
 800ebce:	781a      	ldrb	r2, [r3, #0]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3303      	adds	r3, #3
 800ebd4:	430a      	orrs	r2, r1
 800ebd6:	b2d2      	uxtb	r2, r2
 800ebd8:	701a      	strb	r2, [r3, #0]
    s07t05 = (uint8_t)src_p->s07t05;
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ebe0:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s07t05, 0u, 0xffu);
 800ebe2:	7cfb      	ldrb	r3, [r7, #19]
 800ebe4:	22ff      	movs	r2, #255	@ 0xff
 800ebe6:	2100      	movs	r1, #0
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fa fc07 	bl	80093fc <pack_left_shift_u8>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	3304      	adds	r3, #4
 800ebf6:	781a      	ldrb	r2, [r3, #0]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	430a      	orrs	r2, r1
 800ebfe:	b2d2      	uxtb	r2, r2
 800ec00:	701a      	strb	r2, [r3, #0]

    return (5);
 800ec02:	2305      	movs	r3, #5
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3718      	adds	r7, #24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	0000      	movs	r0, r0
	...

0800ec10 <can1_ams_s07_temperatures_s07t01_encode>:

    return 0;
}

int8_t can1_ams_s07_temperatures_s07t01_encode(double value)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ec1a:	f04f 0200 	mov.w	r2, #0
 800ec1e:	4b10      	ldr	r3, [pc, #64]	@ (800ec60 <can1_ams_s07_temperatures_s07t01_encode+0x50>)
 800ec20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ec24:	f7f1 fad6 	bl	80001d4 <__adddf3>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	4619      	mov	r1, r3
 800ec30:	a309      	add	r3, pc, #36	@ (adr r3, 800ec58 <can1_ams_s07_temperatures_s07t01_encode+0x48>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fdad 	bl	8000794 <__aeabi_ddiv>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	4610      	mov	r0, r2
 800ec40:	4619      	mov	r1, r3
 800ec42:	f7f1 ff17 	bl	8000a74 <__aeabi_d2iz>
 800ec46:	4603      	mov	r3, r0
 800ec48:	b25b      	sxtb	r3, r3
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	f3af 8000 	nop.w
 800ec58:	9999999a 	.word	0x9999999a
 800ec5c:	3fd99999 	.word	0x3fd99999
 800ec60:	40240000 	.word	0x40240000
 800ec64:	00000000 	.word	0x00000000

0800ec68 <can1_ams_s07_temperatures_s07t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s07_temperatures_s07t02_encode(double value)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ec72:	f04f 0200 	mov.w	r2, #0
 800ec76:	4b10      	ldr	r3, [pc, #64]	@ (800ecb8 <can1_ams_s07_temperatures_s07t02_encode+0x50>)
 800ec78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ec7c:	f7f1 faaa 	bl	80001d4 <__adddf3>
 800ec80:	4602      	mov	r2, r0
 800ec82:	460b      	mov	r3, r1
 800ec84:	4610      	mov	r0, r2
 800ec86:	4619      	mov	r1, r3
 800ec88:	a309      	add	r3, pc, #36	@ (adr r3, 800ecb0 <can1_ams_s07_temperatures_s07t02_encode+0x48>)
 800ec8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8e:	f7f1 fd81 	bl	8000794 <__aeabi_ddiv>
 800ec92:	4602      	mov	r2, r0
 800ec94:	460b      	mov	r3, r1
 800ec96:	4610      	mov	r0, r2
 800ec98:	4619      	mov	r1, r3
 800ec9a:	f7f1 feeb 	bl	8000a74 <__aeabi_d2iz>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	b25b      	sxtb	r3, r3
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	f3af 8000 	nop.w
 800ecb0:	9999999a 	.word	0x9999999a
 800ecb4:	3fd99999 	.word	0x3fd99999
 800ecb8:	40240000 	.word	0x40240000
 800ecbc:	00000000 	.word	0x00000000

0800ecc0 <can1_ams_s07_temperatures_s07t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s07_temperatures_s07t03_encode(double value)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ecca:	f04f 0200 	mov.w	r2, #0
 800ecce:	4b10      	ldr	r3, [pc, #64]	@ (800ed10 <can1_ams_s07_temperatures_s07t03_encode+0x50>)
 800ecd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ecd4:	f7f1 fa7e 	bl	80001d4 <__adddf3>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4610      	mov	r0, r2
 800ecde:	4619      	mov	r1, r3
 800ece0:	a309      	add	r3, pc, #36	@ (adr r3, 800ed08 <can1_ams_s07_temperatures_s07t03_encode+0x48>)
 800ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece6:	f7f1 fd55 	bl	8000794 <__aeabi_ddiv>
 800ecea:	4602      	mov	r2, r0
 800ecec:	460b      	mov	r3, r1
 800ecee:	4610      	mov	r0, r2
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	f7f1 febf 	bl	8000a74 <__aeabi_d2iz>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	b25b      	sxtb	r3, r3
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	f3af 8000 	nop.w
 800ed08:	9999999a 	.word	0x9999999a
 800ed0c:	3fd99999 	.word	0x3fd99999
 800ed10:	40240000 	.word	0x40240000
 800ed14:	00000000 	.word	0x00000000

0800ed18 <can1_ams_s07_temperatures_s07t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s07_temperatures_s07t04_encode(double value)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ed22:	f04f 0200 	mov.w	r2, #0
 800ed26:	4b10      	ldr	r3, [pc, #64]	@ (800ed68 <can1_ams_s07_temperatures_s07t04_encode+0x50>)
 800ed28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed2c:	f7f1 fa52 	bl	80001d4 <__adddf3>
 800ed30:	4602      	mov	r2, r0
 800ed32:	460b      	mov	r3, r1
 800ed34:	4610      	mov	r0, r2
 800ed36:	4619      	mov	r1, r3
 800ed38:	a309      	add	r3, pc, #36	@ (adr r3, 800ed60 <can1_ams_s07_temperatures_s07t04_encode+0x48>)
 800ed3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3e:	f7f1 fd29 	bl	8000794 <__aeabi_ddiv>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	4610      	mov	r0, r2
 800ed48:	4619      	mov	r1, r3
 800ed4a:	f7f1 fe93 	bl	8000a74 <__aeabi_d2iz>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	b25b      	sxtb	r3, r3
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	f3af 8000 	nop.w
 800ed60:	9999999a 	.word	0x9999999a
 800ed64:	3fd99999 	.word	0x3fd99999
 800ed68:	40240000 	.word	0x40240000
 800ed6c:	00000000 	.word	0x00000000

0800ed70 <can1_ams_s07_temperatures_s07t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s07_temperatures_s07t05_encode(double value)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ed7a:	f04f 0200 	mov.w	r2, #0
 800ed7e:	4b10      	ldr	r3, [pc, #64]	@ (800edc0 <can1_ams_s07_temperatures_s07t05_encode+0x50>)
 800ed80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed84:	f7f1 fa26 	bl	80001d4 <__adddf3>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	4619      	mov	r1, r3
 800ed90:	a309      	add	r3, pc, #36	@ (adr r3, 800edb8 <can1_ams_s07_temperatures_s07t05_encode+0x48>)
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	f7f1 fcfd 	bl	8000794 <__aeabi_ddiv>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	4610      	mov	r0, r2
 800eda0:	4619      	mov	r1, r3
 800eda2:	f7f1 fe67 	bl	8000a74 <__aeabi_d2iz>
 800eda6:	4603      	mov	r3, r0
 800eda8:	b25b      	sxtb	r3, r3
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	f3af 8000 	nop.w
 800edb8:	9999999a 	.word	0x9999999a
 800edbc:	3fd99999 	.word	0x3fd99999
 800edc0:	40240000 	.word	0x40240000

0800edc4 <can1_ams_s08_temperatures_pack>:

int can1_ams_s08_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s08_temperatures_t *src_p,
    size_t size)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
    uint8_t s08t02;
    uint8_t s08t03;
    uint8_t s08t04;
    uint8_t s08t05;

    if (size < 5u) {
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b04      	cmp	r3, #4
 800edd4:	d802      	bhi.n	800eddc <can1_ams_s08_temperatures_pack+0x18>
        return (-EINVAL);
 800edd6:	f06f 0315 	mvn.w	r3, #21
 800edda:	e067      	b.n	800eeac <can1_ams_s08_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800eddc:	2205      	movs	r2, #5
 800edde:	2100      	movs	r1, #0
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f001 fc51 	bl	8010688 <memset>

    s08t01 = (uint8_t)src_p->s08t01;
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	f993 3000 	ldrsb.w	r3, [r3]
 800edec:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s08t01, 0u, 0xffu);
 800edee:	7dfb      	ldrb	r3, [r7, #23]
 800edf0:	22ff      	movs	r2, #255	@ 0xff
 800edf2:	2100      	movs	r1, #0
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fa fb01 	bl	80093fc <pack_left_shift_u8>
 800edfa:	4603      	mov	r3, r0
 800edfc:	461a      	mov	r2, r3
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	b2da      	uxtb	r2, r3
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	701a      	strb	r2, [r3, #0]
    s08t02 = (uint8_t)src_p->s08t02;
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ee10:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s08t02, 0u, 0xffu);
 800ee12:	7dbb      	ldrb	r3, [r7, #22]
 800ee14:	22ff      	movs	r2, #255	@ 0xff
 800ee16:	2100      	movs	r1, #0
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fa faef 	bl	80093fc <pack_left_shift_u8>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	4619      	mov	r1, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	3301      	adds	r3, #1
 800ee26:	781a      	ldrb	r2, [r3, #0]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	430a      	orrs	r2, r1
 800ee2e:	b2d2      	uxtb	r2, r2
 800ee30:	701a      	strb	r2, [r3, #0]
    s08t03 = (uint8_t)src_p->s08t03;
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ee38:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s08t03, 0u, 0xffu);
 800ee3a:	7d7b      	ldrb	r3, [r7, #21]
 800ee3c:	22ff      	movs	r2, #255	@ 0xff
 800ee3e:	2100      	movs	r1, #0
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fa fadb 	bl	80093fc <pack_left_shift_u8>
 800ee46:	4603      	mov	r3, r0
 800ee48:	4619      	mov	r1, r3
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	3302      	adds	r3, #2
 800ee4e:	781a      	ldrb	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	3302      	adds	r3, #2
 800ee54:	430a      	orrs	r2, r1
 800ee56:	b2d2      	uxtb	r2, r2
 800ee58:	701a      	strb	r2, [r3, #0]
    s08t04 = (uint8_t)src_p->s08t04;
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800ee60:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s08t04, 0u, 0xffu);
 800ee62:	7d3b      	ldrb	r3, [r7, #20]
 800ee64:	22ff      	movs	r2, #255	@ 0xff
 800ee66:	2100      	movs	r1, #0
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fa fac7 	bl	80093fc <pack_left_shift_u8>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	4619      	mov	r1, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	3303      	adds	r3, #3
 800ee76:	781a      	ldrb	r2, [r3, #0]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	3303      	adds	r3, #3
 800ee7c:	430a      	orrs	r2, r1
 800ee7e:	b2d2      	uxtb	r2, r2
 800ee80:	701a      	strb	r2, [r3, #0]
    s08t05 = (uint8_t)src_p->s08t05;
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ee88:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s08t05, 0u, 0xffu);
 800ee8a:	7cfb      	ldrb	r3, [r7, #19]
 800ee8c:	22ff      	movs	r2, #255	@ 0xff
 800ee8e:	2100      	movs	r1, #0
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fa fab3 	bl	80093fc <pack_left_shift_u8>
 800ee96:	4603      	mov	r3, r0
 800ee98:	4619      	mov	r1, r3
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	3304      	adds	r3, #4
 800ee9e:	781a      	ldrb	r2, [r3, #0]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	3304      	adds	r3, #4
 800eea4:	430a      	orrs	r2, r1
 800eea6:	b2d2      	uxtb	r2, r2
 800eea8:	701a      	strb	r2, [r3, #0]

    return (5);
 800eeaa:	2305      	movs	r3, #5
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3718      	adds	r7, #24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	0000      	movs	r0, r0
	...

0800eeb8 <can1_ams_s08_temperatures_s08t01_encode>:

    return 0;
}

int8_t can1_ams_s08_temperatures_s08t01_encode(double value)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800eec2:	f04f 0200 	mov.w	r2, #0
 800eec6:	4b10      	ldr	r3, [pc, #64]	@ (800ef08 <can1_ams_s08_temperatures_s08t01_encode+0x50>)
 800eec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eecc:	f7f1 f982 	bl	80001d4 <__adddf3>
 800eed0:	4602      	mov	r2, r0
 800eed2:	460b      	mov	r3, r1
 800eed4:	4610      	mov	r0, r2
 800eed6:	4619      	mov	r1, r3
 800eed8:	a309      	add	r3, pc, #36	@ (adr r3, 800ef00 <can1_ams_s08_temperatures_s08t01_encode+0x48>)
 800eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eede:	f7f1 fc59 	bl	8000794 <__aeabi_ddiv>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	4610      	mov	r0, r2
 800eee8:	4619      	mov	r1, r3
 800eeea:	f7f1 fdc3 	bl	8000a74 <__aeabi_d2iz>
 800eeee:	4603      	mov	r3, r0
 800eef0:	b25b      	sxtb	r3, r3
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	f3af 8000 	nop.w
 800ef00:	9999999a 	.word	0x9999999a
 800ef04:	3fd99999 	.word	0x3fd99999
 800ef08:	40240000 	.word	0x40240000
 800ef0c:	00000000 	.word	0x00000000

0800ef10 <can1_ams_s08_temperatures_s08t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s08_temperatures_s08t02_encode(double value)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ef1a:	f04f 0200 	mov.w	r2, #0
 800ef1e:	4b10      	ldr	r3, [pc, #64]	@ (800ef60 <can1_ams_s08_temperatures_s08t02_encode+0x50>)
 800ef20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef24:	f7f1 f956 	bl	80001d4 <__adddf3>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	4619      	mov	r1, r3
 800ef30:	a309      	add	r3, pc, #36	@ (adr r3, 800ef58 <can1_ams_s08_temperatures_s08t02_encode+0x48>)
 800ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef36:	f7f1 fc2d 	bl	8000794 <__aeabi_ddiv>
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4610      	mov	r0, r2
 800ef40:	4619      	mov	r1, r3
 800ef42:	f7f1 fd97 	bl	8000a74 <__aeabi_d2iz>
 800ef46:	4603      	mov	r3, r0
 800ef48:	b25b      	sxtb	r3, r3
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	f3af 8000 	nop.w
 800ef58:	9999999a 	.word	0x9999999a
 800ef5c:	3fd99999 	.word	0x3fd99999
 800ef60:	40240000 	.word	0x40240000
 800ef64:	00000000 	.word	0x00000000

0800ef68 <can1_ams_s08_temperatures_s08t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s08_temperatures_s08t03_encode(double value)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800ef72:	f04f 0200 	mov.w	r2, #0
 800ef76:	4b10      	ldr	r3, [pc, #64]	@ (800efb8 <can1_ams_s08_temperatures_s08t03_encode+0x50>)
 800ef78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef7c:	f7f1 f92a 	bl	80001d4 <__adddf3>
 800ef80:	4602      	mov	r2, r0
 800ef82:	460b      	mov	r3, r1
 800ef84:	4610      	mov	r0, r2
 800ef86:	4619      	mov	r1, r3
 800ef88:	a309      	add	r3, pc, #36	@ (adr r3, 800efb0 <can1_ams_s08_temperatures_s08t03_encode+0x48>)
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	f7f1 fc01 	bl	8000794 <__aeabi_ddiv>
 800ef92:	4602      	mov	r2, r0
 800ef94:	460b      	mov	r3, r1
 800ef96:	4610      	mov	r0, r2
 800ef98:	4619      	mov	r1, r3
 800ef9a:	f7f1 fd6b 	bl	8000a74 <__aeabi_d2iz>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	b25b      	sxtb	r3, r3
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	f3af 8000 	nop.w
 800efb0:	9999999a 	.word	0x9999999a
 800efb4:	3fd99999 	.word	0x3fd99999
 800efb8:	40240000 	.word	0x40240000
 800efbc:	00000000 	.word	0x00000000

0800efc0 <can1_ams_s08_temperatures_s08t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s08_temperatures_s08t04_encode(double value)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800efca:	f04f 0200 	mov.w	r2, #0
 800efce:	4b10      	ldr	r3, [pc, #64]	@ (800f010 <can1_ams_s08_temperatures_s08t04_encode+0x50>)
 800efd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800efd4:	f7f1 f8fe 	bl	80001d4 <__adddf3>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
 800efdc:	4610      	mov	r0, r2
 800efde:	4619      	mov	r1, r3
 800efe0:	a309      	add	r3, pc, #36	@ (adr r3, 800f008 <can1_ams_s08_temperatures_s08t04_encode+0x48>)
 800efe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe6:	f7f1 fbd5 	bl	8000794 <__aeabi_ddiv>
 800efea:	4602      	mov	r2, r0
 800efec:	460b      	mov	r3, r1
 800efee:	4610      	mov	r0, r2
 800eff0:	4619      	mov	r1, r3
 800eff2:	f7f1 fd3f 	bl	8000a74 <__aeabi_d2iz>
 800eff6:	4603      	mov	r3, r0
 800eff8:	b25b      	sxtb	r3, r3
}
 800effa:	4618      	mov	r0, r3
 800effc:	3708      	adds	r7, #8
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	f3af 8000 	nop.w
 800f008:	9999999a 	.word	0x9999999a
 800f00c:	3fd99999 	.word	0x3fd99999
 800f010:	40240000 	.word	0x40240000
 800f014:	00000000 	.word	0x00000000

0800f018 <can1_ams_s08_temperatures_s08t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s08_temperatures_s08t05_encode(double value)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f022:	f04f 0200 	mov.w	r2, #0
 800f026:	4b10      	ldr	r3, [pc, #64]	@ (800f068 <can1_ams_s08_temperatures_s08t05_encode+0x50>)
 800f028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f02c:	f7f1 f8d2 	bl	80001d4 <__adddf3>
 800f030:	4602      	mov	r2, r0
 800f032:	460b      	mov	r3, r1
 800f034:	4610      	mov	r0, r2
 800f036:	4619      	mov	r1, r3
 800f038:	a309      	add	r3, pc, #36	@ (adr r3, 800f060 <can1_ams_s08_temperatures_s08t05_encode+0x48>)
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	f7f1 fba9 	bl	8000794 <__aeabi_ddiv>
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	4610      	mov	r0, r2
 800f048:	4619      	mov	r1, r3
 800f04a:	f7f1 fd13 	bl	8000a74 <__aeabi_d2iz>
 800f04e:	4603      	mov	r3, r0
 800f050:	b25b      	sxtb	r3, r3
}
 800f052:	4618      	mov	r0, r3
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	f3af 8000 	nop.w
 800f060:	9999999a 	.word	0x9999999a
 800f064:	3fd99999 	.word	0x3fd99999
 800f068:	40240000 	.word	0x40240000

0800f06c <can1_ams_s09_temperatures_pack>:

int can1_ams_s09_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s09_temperatures_t *src_p,
    size_t size)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
    uint8_t s09t02;
    uint8_t s09t03;
    uint8_t s09t04;
    uint8_t s09t05;

    if (size < 5u) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b04      	cmp	r3, #4
 800f07c:	d802      	bhi.n	800f084 <can1_ams_s09_temperatures_pack+0x18>
        return (-EINVAL);
 800f07e:	f06f 0315 	mvn.w	r3, #21
 800f082:	e067      	b.n	800f154 <can1_ams_s09_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800f084:	2205      	movs	r2, #5
 800f086:	2100      	movs	r1, #0
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f001 fafd 	bl	8010688 <memset>

    s09t01 = (uint8_t)src_p->s09t01;
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	f993 3000 	ldrsb.w	r3, [r3]
 800f094:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s09t01, 0u, 0xffu);
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	22ff      	movs	r2, #255	@ 0xff
 800f09a:	2100      	movs	r1, #0
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fa f9ad 	bl	80093fc <pack_left_shift_u8>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	701a      	strb	r2, [r3, #0]
    s09t02 = (uint8_t)src_p->s09t02;
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f0b8:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s09t02, 0u, 0xffu);
 800f0ba:	7dbb      	ldrb	r3, [r7, #22]
 800f0bc:	22ff      	movs	r2, #255	@ 0xff
 800f0be:	2100      	movs	r1, #0
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fa f99b 	bl	80093fc <pack_left_shift_u8>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	781a      	ldrb	r2, [r3, #0]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	430a      	orrs	r2, r1
 800f0d6:	b2d2      	uxtb	r2, r2
 800f0d8:	701a      	strb	r2, [r3, #0]
    s09t03 = (uint8_t)src_p->s09t03;
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f0e0:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s09t03, 0u, 0xffu);
 800f0e2:	7d7b      	ldrb	r3, [r7, #21]
 800f0e4:	22ff      	movs	r2, #255	@ 0xff
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fa f987 	bl	80093fc <pack_left_shift_u8>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	3302      	adds	r3, #2
 800f0f6:	781a      	ldrb	r2, [r3, #0]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	3302      	adds	r3, #2
 800f0fc:	430a      	orrs	r2, r1
 800f0fe:	b2d2      	uxtb	r2, r2
 800f100:	701a      	strb	r2, [r3, #0]
    s09t04 = (uint8_t)src_p->s09t04;
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f108:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s09t04, 0u, 0xffu);
 800f10a:	7d3b      	ldrb	r3, [r7, #20]
 800f10c:	22ff      	movs	r2, #255	@ 0xff
 800f10e:	2100      	movs	r1, #0
 800f110:	4618      	mov	r0, r3
 800f112:	f7fa f973 	bl	80093fc <pack_left_shift_u8>
 800f116:	4603      	mov	r3, r0
 800f118:	4619      	mov	r1, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3303      	adds	r3, #3
 800f11e:	781a      	ldrb	r2, [r3, #0]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	3303      	adds	r3, #3
 800f124:	430a      	orrs	r2, r1
 800f126:	b2d2      	uxtb	r2, r2
 800f128:	701a      	strb	r2, [r3, #0]
    s09t05 = (uint8_t)src_p->s09t05;
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f130:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s09t05, 0u, 0xffu);
 800f132:	7cfb      	ldrb	r3, [r7, #19]
 800f134:	22ff      	movs	r2, #255	@ 0xff
 800f136:	2100      	movs	r1, #0
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fa f95f 	bl	80093fc <pack_left_shift_u8>
 800f13e:	4603      	mov	r3, r0
 800f140:	4619      	mov	r1, r3
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3304      	adds	r3, #4
 800f146:	781a      	ldrb	r2, [r3, #0]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	3304      	adds	r3, #4
 800f14c:	430a      	orrs	r2, r1
 800f14e:	b2d2      	uxtb	r2, r2
 800f150:	701a      	strb	r2, [r3, #0]

    return (5);
 800f152:	2305      	movs	r3, #5
}
 800f154:	4618      	mov	r0, r3
 800f156:	3718      	adds	r7, #24
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	0000      	movs	r0, r0
	...

0800f160 <can1_ams_s09_temperatures_s09t01_encode>:

    return 0;
}

int8_t can1_ams_s09_temperatures_s09t01_encode(double value)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f16a:	f04f 0200 	mov.w	r2, #0
 800f16e:	4b10      	ldr	r3, [pc, #64]	@ (800f1b0 <can1_ams_s09_temperatures_s09t01_encode+0x50>)
 800f170:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f174:	f7f1 f82e 	bl	80001d4 <__adddf3>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4610      	mov	r0, r2
 800f17e:	4619      	mov	r1, r3
 800f180:	a309      	add	r3, pc, #36	@ (adr r3, 800f1a8 <can1_ams_s09_temperatures_s09t01_encode+0x48>)
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	f7f1 fb05 	bl	8000794 <__aeabi_ddiv>
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	4610      	mov	r0, r2
 800f190:	4619      	mov	r1, r3
 800f192:	f7f1 fc6f 	bl	8000a74 <__aeabi_d2iz>
 800f196:	4603      	mov	r3, r0
 800f198:	b25b      	sxtb	r3, r3
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	f3af 8000 	nop.w
 800f1a8:	9999999a 	.word	0x9999999a
 800f1ac:	3fd99999 	.word	0x3fd99999
 800f1b0:	40240000 	.word	0x40240000
 800f1b4:	00000000 	.word	0x00000000

0800f1b8 <can1_ams_s09_temperatures_s09t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s09_temperatures_s09t02_encode(double value)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f1c2:	f04f 0200 	mov.w	r2, #0
 800f1c6:	4b10      	ldr	r3, [pc, #64]	@ (800f208 <can1_ams_s09_temperatures_s09t02_encode+0x50>)
 800f1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1cc:	f7f1 f802 	bl	80001d4 <__adddf3>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	4610      	mov	r0, r2
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	a309      	add	r3, pc, #36	@ (adr r3, 800f200 <can1_ams_s09_temperatures_s09t02_encode+0x48>)
 800f1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1de:	f7f1 fad9 	bl	8000794 <__aeabi_ddiv>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	f7f1 fc43 	bl	8000a74 <__aeabi_d2iz>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	b25b      	sxtb	r3, r3
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	f3af 8000 	nop.w
 800f200:	9999999a 	.word	0x9999999a
 800f204:	3fd99999 	.word	0x3fd99999
 800f208:	40240000 	.word	0x40240000
 800f20c:	00000000 	.word	0x00000000

0800f210 <can1_ams_s09_temperatures_s09t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s09_temperatures_s09t03_encode(double value)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f21a:	f04f 0200 	mov.w	r2, #0
 800f21e:	4b10      	ldr	r3, [pc, #64]	@ (800f260 <can1_ams_s09_temperatures_s09t03_encode+0x50>)
 800f220:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f224:	f7f0 ffd6 	bl	80001d4 <__adddf3>
 800f228:	4602      	mov	r2, r0
 800f22a:	460b      	mov	r3, r1
 800f22c:	4610      	mov	r0, r2
 800f22e:	4619      	mov	r1, r3
 800f230:	a309      	add	r3, pc, #36	@ (adr r3, 800f258 <can1_ams_s09_temperatures_s09t03_encode+0x48>)
 800f232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f236:	f7f1 faad 	bl	8000794 <__aeabi_ddiv>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	4610      	mov	r0, r2
 800f240:	4619      	mov	r1, r3
 800f242:	f7f1 fc17 	bl	8000a74 <__aeabi_d2iz>
 800f246:	4603      	mov	r3, r0
 800f248:	b25b      	sxtb	r3, r3
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	f3af 8000 	nop.w
 800f258:	9999999a 	.word	0x9999999a
 800f25c:	3fd99999 	.word	0x3fd99999
 800f260:	40240000 	.word	0x40240000
 800f264:	00000000 	.word	0x00000000

0800f268 <can1_ams_s09_temperatures_s09t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s09_temperatures_s09t04_encode(double value)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f272:	f04f 0200 	mov.w	r2, #0
 800f276:	4b10      	ldr	r3, [pc, #64]	@ (800f2b8 <can1_ams_s09_temperatures_s09t04_encode+0x50>)
 800f278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f27c:	f7f0 ffaa 	bl	80001d4 <__adddf3>
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	4610      	mov	r0, r2
 800f286:	4619      	mov	r1, r3
 800f288:	a309      	add	r3, pc, #36	@ (adr r3, 800f2b0 <can1_ams_s09_temperatures_s09t04_encode+0x48>)
 800f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28e:	f7f1 fa81 	bl	8000794 <__aeabi_ddiv>
 800f292:	4602      	mov	r2, r0
 800f294:	460b      	mov	r3, r1
 800f296:	4610      	mov	r0, r2
 800f298:	4619      	mov	r1, r3
 800f29a:	f7f1 fbeb 	bl	8000a74 <__aeabi_d2iz>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	b25b      	sxtb	r3, r3
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3708      	adds	r7, #8
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	f3af 8000 	nop.w
 800f2b0:	9999999a 	.word	0x9999999a
 800f2b4:	3fd99999 	.word	0x3fd99999
 800f2b8:	40240000 	.word	0x40240000
 800f2bc:	00000000 	.word	0x00000000

0800f2c0 <can1_ams_s09_temperatures_s09t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s09_temperatures_s09t05_encode(double value)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f2ca:	f04f 0200 	mov.w	r2, #0
 800f2ce:	4b10      	ldr	r3, [pc, #64]	@ (800f310 <can1_ams_s09_temperatures_s09t05_encode+0x50>)
 800f2d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2d4:	f7f0 ff7e 	bl	80001d4 <__adddf3>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	460b      	mov	r3, r1
 800f2dc:	4610      	mov	r0, r2
 800f2de:	4619      	mov	r1, r3
 800f2e0:	a309      	add	r3, pc, #36	@ (adr r3, 800f308 <can1_ams_s09_temperatures_s09t05_encode+0x48>)
 800f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e6:	f7f1 fa55 	bl	8000794 <__aeabi_ddiv>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	4610      	mov	r0, r2
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	f7f1 fbbf 	bl	8000a74 <__aeabi_d2iz>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	b25b      	sxtb	r3, r3
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	f3af 8000 	nop.w
 800f308:	9999999a 	.word	0x9999999a
 800f30c:	3fd99999 	.word	0x3fd99999
 800f310:	40240000 	.word	0x40240000

0800f314 <can1_ams_s10_temperatures_pack>:

int can1_ams_s10_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s10_temperatures_t *src_p,
    size_t size)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
    uint8_t s10t02;
    uint8_t s10t03;
    uint8_t s10t04;
    uint8_t s10t05;

    if (size < 5u) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b04      	cmp	r3, #4
 800f324:	d802      	bhi.n	800f32c <can1_ams_s10_temperatures_pack+0x18>
        return (-EINVAL);
 800f326:	f06f 0315 	mvn.w	r3, #21
 800f32a:	e067      	b.n	800f3fc <can1_ams_s10_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800f32c:	2205      	movs	r2, #5
 800f32e:	2100      	movs	r1, #0
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f001 f9a9 	bl	8010688 <memset>

    s10t01 = (uint8_t)src_p->s10t01;
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	f993 3000 	ldrsb.w	r3, [r3]
 800f33c:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s10t01, 0u, 0xffu);
 800f33e:	7dfb      	ldrb	r3, [r7, #23]
 800f340:	22ff      	movs	r2, #255	@ 0xff
 800f342:	2100      	movs	r1, #0
 800f344:	4618      	mov	r0, r3
 800f346:	f7fa f859 	bl	80093fc <pack_left_shift_u8>
 800f34a:	4603      	mov	r3, r0
 800f34c:	461a      	mov	r2, r3
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	4313      	orrs	r3, r2
 800f354:	b2da      	uxtb	r2, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	701a      	strb	r2, [r3, #0]
    s10t02 = (uint8_t)src_p->s10t02;
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f360:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s10t02, 0u, 0xffu);
 800f362:	7dbb      	ldrb	r3, [r7, #22]
 800f364:	22ff      	movs	r2, #255	@ 0xff
 800f366:	2100      	movs	r1, #0
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fa f847 	bl	80093fc <pack_left_shift_u8>
 800f36e:	4603      	mov	r3, r0
 800f370:	4619      	mov	r1, r3
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3301      	adds	r3, #1
 800f376:	781a      	ldrb	r2, [r3, #0]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	3301      	adds	r3, #1
 800f37c:	430a      	orrs	r2, r1
 800f37e:	b2d2      	uxtb	r2, r2
 800f380:	701a      	strb	r2, [r3, #0]
    s10t03 = (uint8_t)src_p->s10t03;
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f388:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s10t03, 0u, 0xffu);
 800f38a:	7d7b      	ldrb	r3, [r7, #21]
 800f38c:	22ff      	movs	r2, #255	@ 0xff
 800f38e:	2100      	movs	r1, #0
 800f390:	4618      	mov	r0, r3
 800f392:	f7fa f833 	bl	80093fc <pack_left_shift_u8>
 800f396:	4603      	mov	r3, r0
 800f398:	4619      	mov	r1, r3
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3302      	adds	r3, #2
 800f39e:	781a      	ldrb	r2, [r3, #0]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	3302      	adds	r3, #2
 800f3a4:	430a      	orrs	r2, r1
 800f3a6:	b2d2      	uxtb	r2, r2
 800f3a8:	701a      	strb	r2, [r3, #0]
    s10t04 = (uint8_t)src_p->s10t04;
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f3b0:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s10t04, 0u, 0xffu);
 800f3b2:	7d3b      	ldrb	r3, [r7, #20]
 800f3b4:	22ff      	movs	r2, #255	@ 0xff
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fa f81f 	bl	80093fc <pack_left_shift_u8>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	3303      	adds	r3, #3
 800f3c6:	781a      	ldrb	r2, [r3, #0]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	3303      	adds	r3, #3
 800f3cc:	430a      	orrs	r2, r1
 800f3ce:	b2d2      	uxtb	r2, r2
 800f3d0:	701a      	strb	r2, [r3, #0]
    s10t05 = (uint8_t)src_p->s10t05;
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f3d8:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s10t05, 0u, 0xffu);
 800f3da:	7cfb      	ldrb	r3, [r7, #19]
 800f3dc:	22ff      	movs	r2, #255	@ 0xff
 800f3de:	2100      	movs	r1, #0
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fa f80b 	bl	80093fc <pack_left_shift_u8>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	781a      	ldrb	r2, [r3, #0]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	430a      	orrs	r2, r1
 800f3f6:	b2d2      	uxtb	r2, r2
 800f3f8:	701a      	strb	r2, [r3, #0]

    return (5);
 800f3fa:	2305      	movs	r3, #5
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3718      	adds	r7, #24
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	0000      	movs	r0, r0
	...

0800f408 <can1_ams_s10_temperatures_s10t01_encode>:

    return 0;
}

int8_t can1_ams_s10_temperatures_s10t01_encode(double value)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f412:	f04f 0200 	mov.w	r2, #0
 800f416:	4b10      	ldr	r3, [pc, #64]	@ (800f458 <can1_ams_s10_temperatures_s10t01_encode+0x50>)
 800f418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f41c:	f7f0 feda 	bl	80001d4 <__adddf3>
 800f420:	4602      	mov	r2, r0
 800f422:	460b      	mov	r3, r1
 800f424:	4610      	mov	r0, r2
 800f426:	4619      	mov	r1, r3
 800f428:	a309      	add	r3, pc, #36	@ (adr r3, 800f450 <can1_ams_s10_temperatures_s10t01_encode+0x48>)
 800f42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42e:	f7f1 f9b1 	bl	8000794 <__aeabi_ddiv>
 800f432:	4602      	mov	r2, r0
 800f434:	460b      	mov	r3, r1
 800f436:	4610      	mov	r0, r2
 800f438:	4619      	mov	r1, r3
 800f43a:	f7f1 fb1b 	bl	8000a74 <__aeabi_d2iz>
 800f43e:	4603      	mov	r3, r0
 800f440:	b25b      	sxtb	r3, r3
}
 800f442:	4618      	mov	r0, r3
 800f444:	3708      	adds	r7, #8
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	f3af 8000 	nop.w
 800f450:	9999999a 	.word	0x9999999a
 800f454:	3fd99999 	.word	0x3fd99999
 800f458:	40240000 	.word	0x40240000
 800f45c:	00000000 	.word	0x00000000

0800f460 <can1_ams_s10_temperatures_s10t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s10_temperatures_s10t02_encode(double value)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f46a:	f04f 0200 	mov.w	r2, #0
 800f46e:	4b10      	ldr	r3, [pc, #64]	@ (800f4b0 <can1_ams_s10_temperatures_s10t02_encode+0x50>)
 800f470:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f474:	f7f0 feae 	bl	80001d4 <__adddf3>
 800f478:	4602      	mov	r2, r0
 800f47a:	460b      	mov	r3, r1
 800f47c:	4610      	mov	r0, r2
 800f47e:	4619      	mov	r1, r3
 800f480:	a309      	add	r3, pc, #36	@ (adr r3, 800f4a8 <can1_ams_s10_temperatures_s10t02_encode+0x48>)
 800f482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f486:	f7f1 f985 	bl	8000794 <__aeabi_ddiv>
 800f48a:	4602      	mov	r2, r0
 800f48c:	460b      	mov	r3, r1
 800f48e:	4610      	mov	r0, r2
 800f490:	4619      	mov	r1, r3
 800f492:	f7f1 faef 	bl	8000a74 <__aeabi_d2iz>
 800f496:	4603      	mov	r3, r0
 800f498:	b25b      	sxtb	r3, r3
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3708      	adds	r7, #8
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	f3af 8000 	nop.w
 800f4a8:	9999999a 	.word	0x9999999a
 800f4ac:	3fd99999 	.word	0x3fd99999
 800f4b0:	40240000 	.word	0x40240000
 800f4b4:	00000000 	.word	0x00000000

0800f4b8 <can1_ams_s10_temperatures_s10t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s10_temperatures_s10t03_encode(double value)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f4c2:	f04f 0200 	mov.w	r2, #0
 800f4c6:	4b10      	ldr	r3, [pc, #64]	@ (800f508 <can1_ams_s10_temperatures_s10t03_encode+0x50>)
 800f4c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4cc:	f7f0 fe82 	bl	80001d4 <__adddf3>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	4610      	mov	r0, r2
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	a309      	add	r3, pc, #36	@ (adr r3, 800f500 <can1_ams_s10_temperatures_s10t03_encode+0x48>)
 800f4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4de:	f7f1 f959 	bl	8000794 <__aeabi_ddiv>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	4610      	mov	r0, r2
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	f7f1 fac3 	bl	8000a74 <__aeabi_d2iz>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	b25b      	sxtb	r3, r3
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	f3af 8000 	nop.w
 800f500:	9999999a 	.word	0x9999999a
 800f504:	3fd99999 	.word	0x3fd99999
 800f508:	40240000 	.word	0x40240000
 800f50c:	00000000 	.word	0x00000000

0800f510 <can1_ams_s10_temperatures_s10t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s10_temperatures_s10t04_encode(double value)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f51a:	f04f 0200 	mov.w	r2, #0
 800f51e:	4b10      	ldr	r3, [pc, #64]	@ (800f560 <can1_ams_s10_temperatures_s10t04_encode+0x50>)
 800f520:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f524:	f7f0 fe56 	bl	80001d4 <__adddf3>
 800f528:	4602      	mov	r2, r0
 800f52a:	460b      	mov	r3, r1
 800f52c:	4610      	mov	r0, r2
 800f52e:	4619      	mov	r1, r3
 800f530:	a309      	add	r3, pc, #36	@ (adr r3, 800f558 <can1_ams_s10_temperatures_s10t04_encode+0x48>)
 800f532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f536:	f7f1 f92d 	bl	8000794 <__aeabi_ddiv>
 800f53a:	4602      	mov	r2, r0
 800f53c:	460b      	mov	r3, r1
 800f53e:	4610      	mov	r0, r2
 800f540:	4619      	mov	r1, r3
 800f542:	f7f1 fa97 	bl	8000a74 <__aeabi_d2iz>
 800f546:	4603      	mov	r3, r0
 800f548:	b25b      	sxtb	r3, r3
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	f3af 8000 	nop.w
 800f558:	9999999a 	.word	0x9999999a
 800f55c:	3fd99999 	.word	0x3fd99999
 800f560:	40240000 	.word	0x40240000
 800f564:	00000000 	.word	0x00000000

0800f568 <can1_ams_s10_temperatures_s10t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s10_temperatures_s10t05_encode(double value)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f572:	f04f 0200 	mov.w	r2, #0
 800f576:	4b10      	ldr	r3, [pc, #64]	@ (800f5b8 <can1_ams_s10_temperatures_s10t05_encode+0x50>)
 800f578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f57c:	f7f0 fe2a 	bl	80001d4 <__adddf3>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4610      	mov	r0, r2
 800f586:	4619      	mov	r1, r3
 800f588:	a309      	add	r3, pc, #36	@ (adr r3, 800f5b0 <can1_ams_s10_temperatures_s10t05_encode+0x48>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f1 f901 	bl	8000794 <__aeabi_ddiv>
 800f592:	4602      	mov	r2, r0
 800f594:	460b      	mov	r3, r1
 800f596:	4610      	mov	r0, r2
 800f598:	4619      	mov	r1, r3
 800f59a:	f7f1 fa6b 	bl	8000a74 <__aeabi_d2iz>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	b25b      	sxtb	r3, r3
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	f3af 8000 	nop.w
 800f5b0:	9999999a 	.word	0x9999999a
 800f5b4:	3fd99999 	.word	0x3fd99999
 800f5b8:	40240000 	.word	0x40240000

0800f5bc <can1_ams_s11_temperatures_pack>:

int can1_ams_s11_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s11_temperatures_t *src_p,
    size_t size)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
    uint8_t s11t02;
    uint8_t s11t03;
    uint8_t s11t04;
    uint8_t s11t05;

    if (size < 5u) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b04      	cmp	r3, #4
 800f5cc:	d802      	bhi.n	800f5d4 <can1_ams_s11_temperatures_pack+0x18>
        return (-EINVAL);
 800f5ce:	f06f 0315 	mvn.w	r3, #21
 800f5d2:	e067      	b.n	800f6a4 <can1_ams_s11_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800f5d4:	2205      	movs	r2, #5
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f001 f855 	bl	8010688 <memset>

    s11t01 = (uint8_t)src_p->s11t01;
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	f993 3000 	ldrsb.w	r3, [r3]
 800f5e4:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s11t01, 0u, 0xffu);
 800f5e6:	7dfb      	ldrb	r3, [r7, #23]
 800f5e8:	22ff      	movs	r2, #255	@ 0xff
 800f5ea:	2100      	movs	r1, #0
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7f9 ff05 	bl	80093fc <pack_left_shift_u8>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	701a      	strb	r2, [r3, #0]
    s11t02 = (uint8_t)src_p->s11t02;
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f608:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s11t02, 0u, 0xffu);
 800f60a:	7dbb      	ldrb	r3, [r7, #22]
 800f60c:	22ff      	movs	r2, #255	@ 0xff
 800f60e:	2100      	movs	r1, #0
 800f610:	4618      	mov	r0, r3
 800f612:	f7f9 fef3 	bl	80093fc <pack_left_shift_u8>
 800f616:	4603      	mov	r3, r0
 800f618:	4619      	mov	r1, r3
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	3301      	adds	r3, #1
 800f61e:	781a      	ldrb	r2, [r3, #0]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	3301      	adds	r3, #1
 800f624:	430a      	orrs	r2, r1
 800f626:	b2d2      	uxtb	r2, r2
 800f628:	701a      	strb	r2, [r3, #0]
    s11t03 = (uint8_t)src_p->s11t03;
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f630:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s11t03, 0u, 0xffu);
 800f632:	7d7b      	ldrb	r3, [r7, #21]
 800f634:	22ff      	movs	r2, #255	@ 0xff
 800f636:	2100      	movs	r1, #0
 800f638:	4618      	mov	r0, r3
 800f63a:	f7f9 fedf 	bl	80093fc <pack_left_shift_u8>
 800f63e:	4603      	mov	r3, r0
 800f640:	4619      	mov	r1, r3
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	3302      	adds	r3, #2
 800f646:	781a      	ldrb	r2, [r3, #0]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	3302      	adds	r3, #2
 800f64c:	430a      	orrs	r2, r1
 800f64e:	b2d2      	uxtb	r2, r2
 800f650:	701a      	strb	r2, [r3, #0]
    s11t04 = (uint8_t)src_p->s11t04;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f658:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s11t04, 0u, 0xffu);
 800f65a:	7d3b      	ldrb	r3, [r7, #20]
 800f65c:	22ff      	movs	r2, #255	@ 0xff
 800f65e:	2100      	movs	r1, #0
 800f660:	4618      	mov	r0, r3
 800f662:	f7f9 fecb 	bl	80093fc <pack_left_shift_u8>
 800f666:	4603      	mov	r3, r0
 800f668:	4619      	mov	r1, r3
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	3303      	adds	r3, #3
 800f66e:	781a      	ldrb	r2, [r3, #0]
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	3303      	adds	r3, #3
 800f674:	430a      	orrs	r2, r1
 800f676:	b2d2      	uxtb	r2, r2
 800f678:	701a      	strb	r2, [r3, #0]
    s11t05 = (uint8_t)src_p->s11t05;
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f680:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s11t05, 0u, 0xffu);
 800f682:	7cfb      	ldrb	r3, [r7, #19]
 800f684:	22ff      	movs	r2, #255	@ 0xff
 800f686:	2100      	movs	r1, #0
 800f688:	4618      	mov	r0, r3
 800f68a:	f7f9 feb7 	bl	80093fc <pack_left_shift_u8>
 800f68e:	4603      	mov	r3, r0
 800f690:	4619      	mov	r1, r3
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	3304      	adds	r3, #4
 800f696:	781a      	ldrb	r2, [r3, #0]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	3304      	adds	r3, #4
 800f69c:	430a      	orrs	r2, r1
 800f69e:	b2d2      	uxtb	r2, r2
 800f6a0:	701a      	strb	r2, [r3, #0]

    return (5);
 800f6a2:	2305      	movs	r3, #5
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	0000      	movs	r0, r0
	...

0800f6b0 <can1_ams_s11_temperatures_s11t01_encode>:

    return 0;
}

int8_t can1_ams_s11_temperatures_s11t01_encode(double value)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f6ba:	f04f 0200 	mov.w	r2, #0
 800f6be:	4b10      	ldr	r3, [pc, #64]	@ (800f700 <can1_ams_s11_temperatures_s11t01_encode+0x50>)
 800f6c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f6c4:	f7f0 fd86 	bl	80001d4 <__adddf3>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	a309      	add	r3, pc, #36	@ (adr r3, 800f6f8 <can1_ams_s11_temperatures_s11t01_encode+0x48>)
 800f6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d6:	f7f1 f85d 	bl	8000794 <__aeabi_ddiv>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	4610      	mov	r0, r2
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	f7f1 f9c7 	bl	8000a74 <__aeabi_d2iz>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	b25b      	sxtb	r3, r3
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	f3af 8000 	nop.w
 800f6f8:	9999999a 	.word	0x9999999a
 800f6fc:	3fd99999 	.word	0x3fd99999
 800f700:	40240000 	.word	0x40240000
 800f704:	00000000 	.word	0x00000000

0800f708 <can1_ams_s11_temperatures_s11t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s11_temperatures_s11t02_encode(double value)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f712:	f04f 0200 	mov.w	r2, #0
 800f716:	4b10      	ldr	r3, [pc, #64]	@ (800f758 <can1_ams_s11_temperatures_s11t02_encode+0x50>)
 800f718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f71c:	f7f0 fd5a 	bl	80001d4 <__adddf3>
 800f720:	4602      	mov	r2, r0
 800f722:	460b      	mov	r3, r1
 800f724:	4610      	mov	r0, r2
 800f726:	4619      	mov	r1, r3
 800f728:	a309      	add	r3, pc, #36	@ (adr r3, 800f750 <can1_ams_s11_temperatures_s11t02_encode+0x48>)
 800f72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72e:	f7f1 f831 	bl	8000794 <__aeabi_ddiv>
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	4610      	mov	r0, r2
 800f738:	4619      	mov	r1, r3
 800f73a:	f7f1 f99b 	bl	8000a74 <__aeabi_d2iz>
 800f73e:	4603      	mov	r3, r0
 800f740:	b25b      	sxtb	r3, r3
}
 800f742:	4618      	mov	r0, r3
 800f744:	3708      	adds	r7, #8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	f3af 8000 	nop.w
 800f750:	9999999a 	.word	0x9999999a
 800f754:	3fd99999 	.word	0x3fd99999
 800f758:	40240000 	.word	0x40240000
 800f75c:	00000000 	.word	0x00000000

0800f760 <can1_ams_s11_temperatures_s11t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s11_temperatures_s11t03_encode(double value)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f76a:	f04f 0200 	mov.w	r2, #0
 800f76e:	4b10      	ldr	r3, [pc, #64]	@ (800f7b0 <can1_ams_s11_temperatures_s11t03_encode+0x50>)
 800f770:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f774:	f7f0 fd2e 	bl	80001d4 <__adddf3>
 800f778:	4602      	mov	r2, r0
 800f77a:	460b      	mov	r3, r1
 800f77c:	4610      	mov	r0, r2
 800f77e:	4619      	mov	r1, r3
 800f780:	a309      	add	r3, pc, #36	@ (adr r3, 800f7a8 <can1_ams_s11_temperatures_s11t03_encode+0x48>)
 800f782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f786:	f7f1 f805 	bl	8000794 <__aeabi_ddiv>
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	4610      	mov	r0, r2
 800f790:	4619      	mov	r1, r3
 800f792:	f7f1 f96f 	bl	8000a74 <__aeabi_d2iz>
 800f796:	4603      	mov	r3, r0
 800f798:	b25b      	sxtb	r3, r3
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	f3af 8000 	nop.w
 800f7a8:	9999999a 	.word	0x9999999a
 800f7ac:	3fd99999 	.word	0x3fd99999
 800f7b0:	40240000 	.word	0x40240000
 800f7b4:	00000000 	.word	0x00000000

0800f7b8 <can1_ams_s11_temperatures_s11t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s11_temperatures_s11t04_encode(double value)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f7c2:	f04f 0200 	mov.w	r2, #0
 800f7c6:	4b10      	ldr	r3, [pc, #64]	@ (800f808 <can1_ams_s11_temperatures_s11t04_encode+0x50>)
 800f7c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7cc:	f7f0 fd02 	bl	80001d4 <__adddf3>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	a309      	add	r3, pc, #36	@ (adr r3, 800f800 <can1_ams_s11_temperatures_s11t04_encode+0x48>)
 800f7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7de:	f7f0 ffd9 	bl	8000794 <__aeabi_ddiv>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	4610      	mov	r0, r2
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	f7f1 f943 	bl	8000a74 <__aeabi_d2iz>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	b25b      	sxtb	r3, r3
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	f3af 8000 	nop.w
 800f800:	9999999a 	.word	0x9999999a
 800f804:	3fd99999 	.word	0x3fd99999
 800f808:	40240000 	.word	0x40240000
 800f80c:	00000000 	.word	0x00000000

0800f810 <can1_ams_s11_temperatures_s11t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s11_temperatures_s11t05_encode(double value)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f81a:	f04f 0200 	mov.w	r2, #0
 800f81e:	4b10      	ldr	r3, [pc, #64]	@ (800f860 <can1_ams_s11_temperatures_s11t05_encode+0x50>)
 800f820:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f824:	f7f0 fcd6 	bl	80001d4 <__adddf3>
 800f828:	4602      	mov	r2, r0
 800f82a:	460b      	mov	r3, r1
 800f82c:	4610      	mov	r0, r2
 800f82e:	4619      	mov	r1, r3
 800f830:	a309      	add	r3, pc, #36	@ (adr r3, 800f858 <can1_ams_s11_temperatures_s11t05_encode+0x48>)
 800f832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f836:	f7f0 ffad 	bl	8000794 <__aeabi_ddiv>
 800f83a:	4602      	mov	r2, r0
 800f83c:	460b      	mov	r3, r1
 800f83e:	4610      	mov	r0, r2
 800f840:	4619      	mov	r1, r3
 800f842:	f7f1 f917 	bl	8000a74 <__aeabi_d2iz>
 800f846:	4603      	mov	r3, r0
 800f848:	b25b      	sxtb	r3, r3
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	f3af 8000 	nop.w
 800f858:	9999999a 	.word	0x9999999a
 800f85c:	3fd99999 	.word	0x3fd99999
 800f860:	40240000 	.word	0x40240000

0800f864 <can1_ams_s12_temperatures_pack>:

int can1_ams_s12_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_s12_temperatures_t *src_p,
    size_t size)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
    uint8_t s12t02;
    uint8_t s12t03;
    uint8_t s12t04;
    uint8_t s12t05;

    if (size < 5u) {
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2b04      	cmp	r3, #4
 800f874:	d802      	bhi.n	800f87c <can1_ams_s12_temperatures_pack+0x18>
        return (-EINVAL);
 800f876:	f06f 0315 	mvn.w	r3, #21
 800f87a:	e067      	b.n	800f94c <can1_ams_s12_temperatures_pack+0xe8>
    }

    memset(&dst_p[0], 0, 5);
 800f87c:	2205      	movs	r2, #5
 800f87e:	2100      	movs	r1, #0
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f000 ff01 	bl	8010688 <memset>

    s12t01 = (uint8_t)src_p->s12t01;
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	f993 3000 	ldrsb.w	r3, [r3]
 800f88c:	75fb      	strb	r3, [r7, #23]
    dst_p[0] |= pack_left_shift_u8(s12t01, 0u, 0xffu);
 800f88e:	7dfb      	ldrb	r3, [r7, #23]
 800f890:	22ff      	movs	r2, #255	@ 0xff
 800f892:	2100      	movs	r1, #0
 800f894:	4618      	mov	r0, r3
 800f896:	f7f9 fdb1 	bl	80093fc <pack_left_shift_u8>
 800f89a:	4603      	mov	r3, r0
 800f89c:	461a      	mov	r2, r3
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	701a      	strb	r2, [r3, #0]
    s12t02 = (uint8_t)src_p->s12t02;
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f8b0:	75bb      	strb	r3, [r7, #22]
    dst_p[1] |= pack_left_shift_u8(s12t02, 0u, 0xffu);
 800f8b2:	7dbb      	ldrb	r3, [r7, #22]
 800f8b4:	22ff      	movs	r2, #255	@ 0xff
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7f9 fd9f 	bl	80093fc <pack_left_shift_u8>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	781a      	ldrb	r2, [r3, #0]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	430a      	orrs	r2, r1
 800f8ce:	b2d2      	uxtb	r2, r2
 800f8d0:	701a      	strb	r2, [r3, #0]
    s12t03 = (uint8_t)src_p->s12t03;
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f8d8:	757b      	strb	r3, [r7, #21]
    dst_p[2] |= pack_left_shift_u8(s12t03, 0u, 0xffu);
 800f8da:	7d7b      	ldrb	r3, [r7, #21]
 800f8dc:	22ff      	movs	r2, #255	@ 0xff
 800f8de:	2100      	movs	r1, #0
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7f9 fd8b 	bl	80093fc <pack_left_shift_u8>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	3302      	adds	r3, #2
 800f8ee:	781a      	ldrb	r2, [r3, #0]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	3302      	adds	r3, #2
 800f8f4:	430a      	orrs	r2, r1
 800f8f6:	b2d2      	uxtb	r2, r2
 800f8f8:	701a      	strb	r2, [r3, #0]
    s12t04 = (uint8_t)src_p->s12t04;
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f900:	753b      	strb	r3, [r7, #20]
    dst_p[3] |= pack_left_shift_u8(s12t04, 0u, 0xffu);
 800f902:	7d3b      	ldrb	r3, [r7, #20]
 800f904:	22ff      	movs	r2, #255	@ 0xff
 800f906:	2100      	movs	r1, #0
 800f908:	4618      	mov	r0, r3
 800f90a:	f7f9 fd77 	bl	80093fc <pack_left_shift_u8>
 800f90e:	4603      	mov	r3, r0
 800f910:	4619      	mov	r1, r3
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3303      	adds	r3, #3
 800f916:	781a      	ldrb	r2, [r3, #0]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	3303      	adds	r3, #3
 800f91c:	430a      	orrs	r2, r1
 800f91e:	b2d2      	uxtb	r2, r2
 800f920:	701a      	strb	r2, [r3, #0]
    s12t05 = (uint8_t)src_p->s12t05;
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f928:	74fb      	strb	r3, [r7, #19]
    dst_p[4] |= pack_left_shift_u8(s12t05, 0u, 0xffu);
 800f92a:	7cfb      	ldrb	r3, [r7, #19]
 800f92c:	22ff      	movs	r2, #255	@ 0xff
 800f92e:	2100      	movs	r1, #0
 800f930:	4618      	mov	r0, r3
 800f932:	f7f9 fd63 	bl	80093fc <pack_left_shift_u8>
 800f936:	4603      	mov	r3, r0
 800f938:	4619      	mov	r1, r3
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3304      	adds	r3, #4
 800f93e:	781a      	ldrb	r2, [r3, #0]
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	3304      	adds	r3, #4
 800f944:	430a      	orrs	r2, r1
 800f946:	b2d2      	uxtb	r2, r2
 800f948:	701a      	strb	r2, [r3, #0]

    return (5);
 800f94a:	2305      	movs	r3, #5
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	0000      	movs	r0, r0
	...

0800f958 <can1_ams_s12_temperatures_s12t01_encode>:

    return 0;
}

int8_t can1_ams_s12_temperatures_s12t01_encode(double value)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f962:	f04f 0200 	mov.w	r2, #0
 800f966:	4b10      	ldr	r3, [pc, #64]	@ (800f9a8 <can1_ams_s12_temperatures_s12t01_encode+0x50>)
 800f968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f96c:	f7f0 fc32 	bl	80001d4 <__adddf3>
 800f970:	4602      	mov	r2, r0
 800f972:	460b      	mov	r3, r1
 800f974:	4610      	mov	r0, r2
 800f976:	4619      	mov	r1, r3
 800f978:	a309      	add	r3, pc, #36	@ (adr r3, 800f9a0 <can1_ams_s12_temperatures_s12t01_encode+0x48>)
 800f97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97e:	f7f0 ff09 	bl	8000794 <__aeabi_ddiv>
 800f982:	4602      	mov	r2, r0
 800f984:	460b      	mov	r3, r1
 800f986:	4610      	mov	r0, r2
 800f988:	4619      	mov	r1, r3
 800f98a:	f7f1 f873 	bl	8000a74 <__aeabi_d2iz>
 800f98e:	4603      	mov	r3, r0
 800f990:	b25b      	sxtb	r3, r3
}
 800f992:	4618      	mov	r0, r3
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	f3af 8000 	nop.w
 800f9a0:	9999999a 	.word	0x9999999a
 800f9a4:	3fd99999 	.word	0x3fd99999
 800f9a8:	40240000 	.word	0x40240000
 800f9ac:	00000000 	.word	0x00000000

0800f9b0 <can1_ams_s12_temperatures_s12t02_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s12_temperatures_s12t02_encode(double value)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800f9ba:	f04f 0200 	mov.w	r2, #0
 800f9be:	4b10      	ldr	r3, [pc, #64]	@ (800fa00 <can1_ams_s12_temperatures_s12t02_encode+0x50>)
 800f9c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9c4:	f7f0 fc06 	bl	80001d4 <__adddf3>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	a309      	add	r3, pc, #36	@ (adr r3, 800f9f8 <can1_ams_s12_temperatures_s12t02_encode+0x48>)
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	f7f0 fedd 	bl	8000794 <__aeabi_ddiv>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	460b      	mov	r3, r1
 800f9de:	4610      	mov	r0, r2
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	f7f1 f847 	bl	8000a74 <__aeabi_d2iz>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	b25b      	sxtb	r3, r3
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	f3af 8000 	nop.w
 800f9f8:	9999999a 	.word	0x9999999a
 800f9fc:	3fd99999 	.word	0x3fd99999
 800fa00:	40240000 	.word	0x40240000
 800fa04:	00000000 	.word	0x00000000

0800fa08 <can1_ams_s12_temperatures_s12t03_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s12_temperatures_s12t03_encode(double value)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800fa12:	f04f 0200 	mov.w	r2, #0
 800fa16:	4b10      	ldr	r3, [pc, #64]	@ (800fa58 <can1_ams_s12_temperatures_s12t03_encode+0x50>)
 800fa18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa1c:	f7f0 fbda 	bl	80001d4 <__adddf3>
 800fa20:	4602      	mov	r2, r0
 800fa22:	460b      	mov	r3, r1
 800fa24:	4610      	mov	r0, r2
 800fa26:	4619      	mov	r1, r3
 800fa28:	a309      	add	r3, pc, #36	@ (adr r3, 800fa50 <can1_ams_s12_temperatures_s12t03_encode+0x48>)
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	f7f0 feb1 	bl	8000794 <__aeabi_ddiv>
 800fa32:	4602      	mov	r2, r0
 800fa34:	460b      	mov	r3, r1
 800fa36:	4610      	mov	r0, r2
 800fa38:	4619      	mov	r1, r3
 800fa3a:	f7f1 f81b 	bl	8000a74 <__aeabi_d2iz>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	b25b      	sxtb	r3, r3
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	f3af 8000 	nop.w
 800fa50:	9999999a 	.word	0x9999999a
 800fa54:	3fd99999 	.word	0x3fd99999
 800fa58:	40240000 	.word	0x40240000
 800fa5c:	00000000 	.word	0x00000000

0800fa60 <can1_ams_s12_temperatures_s12t04_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s12_temperatures_s12t04_encode(double value)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800fa6a:	f04f 0200 	mov.w	r2, #0
 800fa6e:	4b10      	ldr	r3, [pc, #64]	@ (800fab0 <can1_ams_s12_temperatures_s12t04_encode+0x50>)
 800fa70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa74:	f7f0 fbae 	bl	80001d4 <__adddf3>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	4610      	mov	r0, r2
 800fa7e:	4619      	mov	r1, r3
 800fa80:	a309      	add	r3, pc, #36	@ (adr r3, 800faa8 <can1_ams_s12_temperatures_s12t04_encode+0x48>)
 800fa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa86:	f7f0 fe85 	bl	8000794 <__aeabi_ddiv>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	4610      	mov	r0, r2
 800fa90:	4619      	mov	r1, r3
 800fa92:	f7f0 ffef 	bl	8000a74 <__aeabi_d2iz>
 800fa96:	4603      	mov	r3, r0
 800fa98:	b25b      	sxtb	r3, r3
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	f3af 8000 	nop.w
 800faa8:	9999999a 	.word	0x9999999a
 800faac:	3fd99999 	.word	0x3fd99999
 800fab0:	40240000 	.word	0x40240000
 800fab4:	00000000 	.word	0x00000000

0800fab8 <can1_ams_s12_temperatures_s12t05_encode>:
{
    return (value >= 0);
}

int8_t can1_ams_s12_temperatures_s12t05_encode(double value)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	ed87 0b00 	vstr	d0, [r7]
    return (int8_t)((value - -10.0) / 0.4);
 800fac2:	f04f 0200 	mov.w	r2, #0
 800fac6:	4b10      	ldr	r3, [pc, #64]	@ (800fb08 <can1_ams_s12_temperatures_s12t05_encode+0x50>)
 800fac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800facc:	f7f0 fb82 	bl	80001d4 <__adddf3>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4610      	mov	r0, r2
 800fad6:	4619      	mov	r1, r3
 800fad8:	a309      	add	r3, pc, #36	@ (adr r3, 800fb00 <can1_ams_s12_temperatures_s12t05_encode+0x48>)
 800fada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fade:	f7f0 fe59 	bl	8000794 <__aeabi_ddiv>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
 800fae6:	4610      	mov	r0, r2
 800fae8:	4619      	mov	r1, r3
 800faea:	f7f0 ffc3 	bl	8000a74 <__aeabi_d2iz>
 800faee:	4603      	mov	r3, r0
 800faf0:	b25b      	sxtb	r3, r3
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	f3af 8000 	nop.w
 800fb00:	9999999a 	.word	0x9999999a
 800fb04:	3fd99999 	.word	0x3fd99999
 800fb08:	40240000 	.word	0x40240000

0800fb0c <can1_ams_status_2_pack>:

int can1_ams_status_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_status_2_t *src_p,
    size_t size)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2b07      	cmp	r3, #7
 800fb1c:	d802      	bhi.n	800fb24 <can1_ams_status_2_pack+0x18>
        return (-EINVAL);
 800fb1e:	f06f 0315 	mvn.w	r3, #21
 800fb22:	e0ad      	b.n	800fc80 <can1_ams_status_2_pack+0x174>
    }

    memset(&dst_p[0], 0, 8);
 800fb24:	2208      	movs	r2, #8
 800fb26:	2100      	movs	r1, #0
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 fdad 	bl	8010688 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->isospi_rx_error_rate, 0u, 0xffu);
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	22ff      	movs	r2, #255	@ 0xff
 800fb34:	2100      	movs	r1, #0
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7f9 fc60 	bl	80093fc <pack_left_shift_u8>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	461a      	mov	r2, r3
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	4313      	orrs	r3, r2
 800fb46:	b2da      	uxtb	r2, r3
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->max_ovp_counter, 0u, 0x3fu);
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	785b      	ldrb	r3, [r3, #1]
 800fb50:	223f      	movs	r2, #63	@ 0x3f
 800fb52:	2100      	movs	r1, #0
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7f9 fc51 	bl	80093fc <pack_left_shift_u8>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	3301      	adds	r3, #1
 800fb62:	781a      	ldrb	r2, [r3, #0]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	3301      	adds	r3, #1
 800fb68:	430a      	orrs	r2, r1
 800fb6a:	b2d2      	uxtb	r2, r2
 800fb6c:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->max_uvp_counter, 6u, 0xc0u);
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	789b      	ldrb	r3, [r3, #2]
 800fb72:	22c0      	movs	r2, #192	@ 0xc0
 800fb74:	2106      	movs	r1, #6
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7f9 fc40 	bl	80093fc <pack_left_shift_u8>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	4619      	mov	r1, r3
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	3301      	adds	r3, #1
 800fb84:	781a      	ldrb	r2, [r3, #0]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	430a      	orrs	r2, r1
 800fb8c:	b2d2      	uxtb	r2, r2
 800fb8e:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u8(src_p->max_uvp_counter, 2u, 0x0fu);
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	789b      	ldrb	r3, [r3, #2]
 800fb94:	220f      	movs	r2, #15
 800fb96:	2102      	movs	r1, #2
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7f9 fc46 	bl	800942a <pack_right_shift_u8>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	4619      	mov	r1, r3
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	3302      	adds	r3, #2
 800fba6:	781a      	ldrb	r2, [r3, #0]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	3302      	adds	r3, #2
 800fbac:	430a      	orrs	r2, r1
 800fbae:	b2d2      	uxtb	r2, r2
 800fbb0:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->max_otp_counter, 4u, 0xf0u);
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	78db      	ldrb	r3, [r3, #3]
 800fbb6:	22f0      	movs	r2, #240	@ 0xf0
 800fbb8:	2104      	movs	r1, #4
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7f9 fc1e 	bl	80093fc <pack_left_shift_u8>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	3302      	adds	r3, #2
 800fbc8:	781a      	ldrb	r2, [r3, #0]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3302      	adds	r3, #2
 800fbce:	430a      	orrs	r2, r1
 800fbd0:	b2d2      	uxtb	r2, r2
 800fbd2:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u8(src_p->max_otp_counter, 4u, 0x03u);
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	78db      	ldrb	r3, [r3, #3]
 800fbd8:	2203      	movs	r2, #3
 800fbda:	2104      	movs	r1, #4
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7f9 fc24 	bl	800942a <pack_right_shift_u8>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	3303      	adds	r3, #3
 800fbea:	781a      	ldrb	r2, [r3, #0]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3303      	adds	r3, #3
 800fbf0:	430a      	orrs	r2, r1
 800fbf2:	b2d2      	uxtb	r2, r2
 800fbf4:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->max_utp_counter, 2u, 0xfcu);
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	791b      	ldrb	r3, [r3, #4]
 800fbfa:	22fc      	movs	r2, #252	@ 0xfc
 800fbfc:	2102      	movs	r1, #2
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7f9 fbfc 	bl	80093fc <pack_left_shift_u8>
 800fc04:	4603      	mov	r3, r0
 800fc06:	4619      	mov	r1, r3
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	3303      	adds	r3, #3
 800fc0c:	781a      	ldrb	r2, [r3, #0]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	3303      	adds	r3, #3
 800fc12:	430a      	orrs	r2, r1
 800fc14:	b2d2      	uxtb	r2, r2
 800fc16:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->max_isospi_error_counter, 0u, 0x3fu);
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	795b      	ldrb	r3, [r3, #5]
 800fc1c:	223f      	movs	r2, #63	@ 0x3f
 800fc1e:	2100      	movs	r1, #0
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7f9 fbeb 	bl	80093fc <pack_left_shift_u8>
 800fc26:	4603      	mov	r3, r0
 800fc28:	4619      	mov	r1, r3
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	3304      	adds	r3, #4
 800fc2e:	781a      	ldrb	r2, [r3, #0]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	3304      	adds	r3, #4
 800fc34:	430a      	orrs	r2, r1
 800fc36:	b2d2      	uxtb	r2, r2
 800fc38:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->isospi_tx_error_rate, 6u, 0xc0u);
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	799b      	ldrb	r3, [r3, #6]
 800fc3e:	22c0      	movs	r2, #192	@ 0xc0
 800fc40:	2106      	movs	r1, #6
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7f9 fbda 	bl	80093fc <pack_left_shift_u8>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	3304      	adds	r3, #4
 800fc50:	781a      	ldrb	r2, [r3, #0]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	3304      	adds	r3, #4
 800fc56:	430a      	orrs	r2, r1
 800fc58:	b2d2      	uxtb	r2, r2
 800fc5a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u8(src_p->isospi_tx_error_rate, 2u, 0x3fu);
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	799b      	ldrb	r3, [r3, #6]
 800fc60:	223f      	movs	r2, #63	@ 0x3f
 800fc62:	2102      	movs	r1, #2
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7f9 fbe0 	bl	800942a <pack_right_shift_u8>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	3305      	adds	r3, #5
 800fc72:	781a      	ldrb	r2, [r3, #0]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3305      	adds	r3, #5
 800fc78:	430a      	orrs	r2, r1
 800fc7a:	b2d2      	uxtb	r2, r2
 800fc7c:	701a      	strb	r2, [r3, #0]

    return (8);
 800fc7e:	2308      	movs	r3, #8
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <can1_ams_status_2_isospi_rx_error_rate_encode>:

    return 0;
}

uint8_t can1_ams_status_2_isospi_rx_error_rate_encode(double value)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value / 0.5);
 800fc92:	f04f 0200 	mov.w	r2, #0
 800fc96:	4b08      	ldr	r3, [pc, #32]	@ (800fcb8 <can1_ams_status_2_isospi_rx_error_rate_encode+0x30>)
 800fc98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fc9c:	f7f0 fd7a 	bl	8000794 <__aeabi_ddiv>
 800fca0:	4602      	mov	r2, r0
 800fca2:	460b      	mov	r3, r1
 800fca4:	4610      	mov	r0, r2
 800fca6:	4619      	mov	r1, r3
 800fca8:	f7f0 ff0c 	bl	8000ac4 <__aeabi_d2uiz>
 800fcac:	4603      	mov	r3, r0
 800fcae:	b2db      	uxtb	r3, r3
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	3fe00000 	.word	0x3fe00000

0800fcbc <can1_ams_status_2_max_ovp_counter_encode>:
{
    return (value <= 200u);
}

uint8_t can1_ams_status_2_max_ovp_counter_encode(double value)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800fcc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fcca:	f7f0 fefb 	bl	8000ac4 <__aeabi_d2uiz>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	b2db      	uxtb	r3, r3
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <can1_ams_status_2_max_uvp_counter_encode>:
{
    return (value <= 63u);
}

uint8_t can1_ams_status_2_max_uvp_counter_encode(double value)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b082      	sub	sp, #8
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800fce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fce8:	f7f0 feec 	bl	8000ac4 <__aeabi_d2uiz>
 800fcec:	4603      	mov	r3, r0
 800fcee:	b2db      	uxtb	r3, r3
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <can1_ams_status_2_max_otp_counter_encode>:
{
    return (value <= 63u);
}

uint8_t can1_ams_status_2_max_otp_counter_encode(double value)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800fd02:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fd06:	f7f0 fedd 	bl	8000ac4 <__aeabi_d2uiz>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	b2db      	uxtb	r3, r3
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <can1_ams_status_2_max_utp_counter_encode>:
{
    return (value <= 63u);
}

uint8_t can1_ams_status_2_max_utp_counter_encode(double value)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b082      	sub	sp, #8
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800fd20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fd24:	f7f0 fece 	bl	8000ac4 <__aeabi_d2uiz>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	b2db      	uxtb	r3, r3
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <unpack_left_shift_u32>:

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	71fb      	strb	r3, [r7, #7]
 800fd3e:	460b      	mov	r3, r1
 800fd40:	71bb      	strb	r3, [r7, #6]
 800fd42:	4613      	mov	r3, r2
 800fd44:	717b      	strb	r3, [r7, #5]
    return (uint32_t)((uint32_t)(value & mask) << shift);
 800fd46:	79fa      	ldrb	r2, [r7, #7]
 800fd48:	797b      	ldrb	r3, [r7, #5]
 800fd4a:	4013      	ands	r3, r2
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	461a      	mov	r2, r3
 800fd50:	79bb      	ldrb	r3, [r7, #6]
 800fd52:	fa02 f303 	lsl.w	r3, r2, r3
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	370c      	adds	r7, #12
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr

0800fd62 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800fd62:	b480      	push	{r7}
 800fd64:	b083      	sub	sp, #12
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	4603      	mov	r3, r0
 800fd6a:	71fb      	strb	r3, [r7, #7]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	71bb      	strb	r3, [r7, #6]
 800fd70:	4613      	mov	r3, r2
 800fd72:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800fd74:	79fa      	ldrb	r2, [r7, #7]
 800fd76:	797b      	ldrb	r3, [r7, #5]
 800fd78:	4013      	ands	r3, r2
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	79bb      	ldrb	r3, [r7, #6]
 800fd80:	fa42 f303 	asr.w	r3, r2, r3
 800fd84:	b2db      	uxtb	r3, r3
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	370c      	adds	r7, #12
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr

0800fd92 <unpack_right_shift_u32>:

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800fd92:	b480      	push	{r7}
 800fd94:	b083      	sub	sp, #12
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	4603      	mov	r3, r0
 800fd9a:	71fb      	strb	r3, [r7, #7]
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	71bb      	strb	r3, [r7, #6]
 800fda0:	4613      	mov	r3, r2
 800fda2:	717b      	strb	r3, [r7, #5]
    return (uint32_t)((uint32_t)(value & mask) >> shift);
 800fda4:	79fa      	ldrb	r2, [r7, #7]
 800fda6:	797b      	ldrb	r3, [r7, #5]
 800fda8:	4013      	ands	r3, r2
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	461a      	mov	r2, r3
 800fdae:	79bb      	ldrb	r3, [r7, #6]
 800fdb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	370c      	adds	r7, #12
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <can2_ivt_msg_result_wh_unpack>:

int can2_ivt_msg_result_wh_unpack(
    struct can2_ivt_msg_result_wh_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b086      	sub	sp, #24
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_wh;

    if (size < 6u) {
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2b05      	cmp	r3, #5
 800fdd0:	d802      	bhi.n	800fdd8 <can2_ivt_msg_result_wh_unpack+0x18>
        return (-EINVAL);
 800fdd2:	f06f 0315 	mvn.w	r3, #21
 800fdd6:	e077      	b.n	800fec8 <can2_ivt_msg_result_wh_unpack+0x108>
    }

    dst_p->ivt_id_result_wh = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	22ff      	movs	r2, #255	@ 0xff
 800fdde:	2100      	movs	r1, #0
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7ff ffbe 	bl	800fd62 <unpack_right_shift_u8>
 800fde6:	4603      	mov	r3, r0
 800fde8:	461a      	mov	r2, r3
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_wh_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	2280      	movs	r2, #128	@ 0x80
 800fdf6:	2107      	movs	r1, #7
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff ffb2 	bl	800fd62 <unpack_right_shift_u8>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	461a      	mov	r2, r3
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_wh_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2240      	movs	r2, #64	@ 0x40
 800fe0e:	2106      	movs	r1, #6
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff ffa6 	bl	800fd62 <unpack_right_shift_u8>
 800fe16:	4603      	mov	r3, r0
 800fe18:	461a      	mov	r2, r3
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_wh_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	3301      	adds	r3, #1
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	2220      	movs	r2, #32
 800fe26:	2105      	movs	r1, #5
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7ff ff9a 	bl	800fd62 <unpack_right_shift_u8>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	461a      	mov	r2, r3
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_wh_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	2210      	movs	r2, #16
 800fe3e:	2104      	movs	r1, #4
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7ff ff8e 	bl	800fd62 <unpack_right_shift_u8>
 800fe46:	4603      	mov	r3, r0
 800fe48:	461a      	mov	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_wh = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	3301      	adds	r3, #1
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	220f      	movs	r2, #15
 800fe56:	2100      	movs	r1, #0
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff ff82 	bl	800fd62 <unpack_right_shift_u8>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	461a      	mov	r2, r3
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	715a      	strb	r2, [r3, #5]
    ivt_result_wh = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	3302      	adds	r3, #2
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	22ff      	movs	r2, #255	@ 0xff
 800fe6e:	2118      	movs	r1, #24
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7ff ff5f 	bl	800fd34 <unpack_left_shift_u32>
 800fe76:	6178      	str	r0, [r7, #20]
    ivt_result_wh |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	3303      	adds	r3, #3
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	22ff      	movs	r2, #255	@ 0xff
 800fe80:	2110      	movs	r1, #16
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7ff ff56 	bl	800fd34 <unpack_left_shift_u32>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	617b      	str	r3, [r7, #20]
    ivt_result_wh |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	3304      	adds	r3, #4
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	22ff      	movs	r2, #255	@ 0xff
 800fe98:	2108      	movs	r1, #8
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7ff ff4a 	bl	800fd34 <unpack_left_shift_u32>
 800fea0:	4602      	mov	r2, r0
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	4313      	orrs	r3, r2
 800fea6:	617b      	str	r3, [r7, #20]
    ivt_result_wh |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	3305      	adds	r3, #5
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	22ff      	movs	r2, #255	@ 0xff
 800feb0:	2100      	movs	r1, #0
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7ff ff6d 	bl	800fd92 <unpack_right_shift_u32>
 800feb8:	4602      	mov	r2, r0
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	4313      	orrs	r3, r2
 800febe:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_wh = (int32_t)ivt_result_wh;
 800fec0:	697a      	ldr	r2, [r7, #20]
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	609a      	str	r2, [r3, #8]

    return (0);
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3718      	adds	r7, #24
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <can2_ivt_msg_result_as_unpack>:

int can2_ivt_msg_result_as_unpack(
    struct can2_ivt_msg_result_as_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_as;

    if (size < 6u) {
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2b05      	cmp	r3, #5
 800fee0:	d802      	bhi.n	800fee8 <can2_ivt_msg_result_as_unpack+0x18>
        return (-EINVAL);
 800fee2:	f06f 0315 	mvn.w	r3, #21
 800fee6:	e077      	b.n	800ffd8 <can2_ivt_msg_result_as_unpack+0x108>
    }

    dst_p->ivt_id_result_as = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	22ff      	movs	r2, #255	@ 0xff
 800feee:	2100      	movs	r1, #0
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7ff ff36 	bl	800fd62 <unpack_right_shift_u8>
 800fef6:	4603      	mov	r3, r0
 800fef8:	461a      	mov	r2, r3
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_as_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	3301      	adds	r3, #1
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	2280      	movs	r2, #128	@ 0x80
 800ff06:	2107      	movs	r1, #7
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff ff2a 	bl	800fd62 <unpack_right_shift_u8>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	461a      	mov	r2, r3
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_as_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	2240      	movs	r2, #64	@ 0x40
 800ff1e:	2106      	movs	r1, #6
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7ff ff1e 	bl	800fd62 <unpack_right_shift_u8>
 800ff26:	4603      	mov	r3, r0
 800ff28:	461a      	mov	r2, r3
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_as_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	3301      	adds	r3, #1
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	2220      	movs	r2, #32
 800ff36:	2105      	movs	r1, #5
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7ff ff12 	bl	800fd62 <unpack_right_shift_u8>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	461a      	mov	r2, r3
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_as_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	2210      	movs	r2, #16
 800ff4e:	2104      	movs	r1, #4
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7ff ff06 	bl	800fd62 <unpack_right_shift_u8>
 800ff56:	4603      	mov	r3, r0
 800ff58:	461a      	mov	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_as = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	3301      	adds	r3, #1
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	220f      	movs	r2, #15
 800ff66:	2100      	movs	r1, #0
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7ff fefa 	bl	800fd62 <unpack_right_shift_u8>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	461a      	mov	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	715a      	strb	r2, [r3, #5]
    ivt_result_as = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	3302      	adds	r3, #2
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	22ff      	movs	r2, #255	@ 0xff
 800ff7e:	2118      	movs	r1, #24
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7ff fed7 	bl	800fd34 <unpack_left_shift_u32>
 800ff86:	6178      	str	r0, [r7, #20]
    ivt_result_as |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	3303      	adds	r3, #3
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	22ff      	movs	r2, #255	@ 0xff
 800ff90:	2110      	movs	r1, #16
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7ff fece 	bl	800fd34 <unpack_left_shift_u32>
 800ff98:	4602      	mov	r2, r0
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	617b      	str	r3, [r7, #20]
    ivt_result_as |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	22ff      	movs	r2, #255	@ 0xff
 800ffa8:	2108      	movs	r1, #8
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7ff fec2 	bl	800fd34 <unpack_left_shift_u32>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	617b      	str	r3, [r7, #20]
    ivt_result_as |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	3305      	adds	r3, #5
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	22ff      	movs	r2, #255	@ 0xff
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff fee5 	bl	800fd92 <unpack_right_shift_u32>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	4313      	orrs	r3, r2
 800ffce:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_as = (int32_t)ivt_result_as;
 800ffd0:	697a      	ldr	r2, [r7, #20]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	609a      	str	r2, [r3, #8]

    return (0);
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <can2_ivt_msg_result_w_unpack>:

int can2_ivt_msg_result_w_unpack(
    struct can2_ivt_msg_result_w_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_w;

    if (size < 6u) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b05      	cmp	r3, #5
 800fff0:	d802      	bhi.n	800fff8 <can2_ivt_msg_result_w_unpack+0x18>
        return (-EINVAL);
 800fff2:	f06f 0315 	mvn.w	r3, #21
 800fff6:	e077      	b.n	80100e8 <can2_ivt_msg_result_w_unpack+0x108>
    }

    dst_p->ivt_id_result_w = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	22ff      	movs	r2, #255	@ 0xff
 800fffe:	2100      	movs	r1, #0
 8010000:	4618      	mov	r0, r3
 8010002:	f7ff feae 	bl	800fd62 <unpack_right_shift_u8>
 8010006:	4603      	mov	r3, r0
 8010008:	461a      	mov	r2, r3
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_w_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	3301      	adds	r3, #1
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	2280      	movs	r2, #128	@ 0x80
 8010016:	2107      	movs	r1, #7
 8010018:	4618      	mov	r0, r3
 801001a:	f7ff fea2 	bl	800fd62 <unpack_right_shift_u8>
 801001e:	4603      	mov	r3, r0
 8010020:	461a      	mov	r2, r3
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_w_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	3301      	adds	r3, #1
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	2240      	movs	r2, #64	@ 0x40
 801002e:	2106      	movs	r1, #6
 8010030:	4618      	mov	r0, r3
 8010032:	f7ff fe96 	bl	800fd62 <unpack_right_shift_u8>
 8010036:	4603      	mov	r3, r0
 8010038:	461a      	mov	r2, r3
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_w_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	3301      	adds	r3, #1
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	2220      	movs	r2, #32
 8010046:	2105      	movs	r1, #5
 8010048:	4618      	mov	r0, r3
 801004a:	f7ff fe8a 	bl	800fd62 <unpack_right_shift_u8>
 801004e:	4603      	mov	r3, r0
 8010050:	461a      	mov	r2, r3
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_w_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	3301      	adds	r3, #1
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	2210      	movs	r2, #16
 801005e:	2104      	movs	r1, #4
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fe7e 	bl	800fd62 <unpack_right_shift_u8>
 8010066:	4603      	mov	r3, r0
 8010068:	461a      	mov	r2, r3
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_w = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	3301      	adds	r3, #1
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	220f      	movs	r2, #15
 8010076:	2100      	movs	r1, #0
 8010078:	4618      	mov	r0, r3
 801007a:	f7ff fe72 	bl	800fd62 <unpack_right_shift_u8>
 801007e:	4603      	mov	r3, r0
 8010080:	461a      	mov	r2, r3
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	715a      	strb	r2, [r3, #5]
    ivt_result_w = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	3302      	adds	r3, #2
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	22ff      	movs	r2, #255	@ 0xff
 801008e:	2118      	movs	r1, #24
 8010090:	4618      	mov	r0, r3
 8010092:	f7ff fe4f 	bl	800fd34 <unpack_left_shift_u32>
 8010096:	6178      	str	r0, [r7, #20]
    ivt_result_w |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	3303      	adds	r3, #3
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	22ff      	movs	r2, #255	@ 0xff
 80100a0:	2110      	movs	r1, #16
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff fe46 	bl	800fd34 <unpack_left_shift_u32>
 80100a8:	4602      	mov	r2, r0
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	617b      	str	r3, [r7, #20]
    ivt_result_w |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	3304      	adds	r3, #4
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	22ff      	movs	r2, #255	@ 0xff
 80100b8:	2108      	movs	r1, #8
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff fe3a 	bl	800fd34 <unpack_left_shift_u32>
 80100c0:	4602      	mov	r2, r0
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	4313      	orrs	r3, r2
 80100c6:	617b      	str	r3, [r7, #20]
    ivt_result_w |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	3305      	adds	r3, #5
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	22ff      	movs	r2, #255	@ 0xff
 80100d0:	2100      	movs	r1, #0
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fe5d 	bl	800fd92 <unpack_right_shift_u32>
 80100d8:	4602      	mov	r2, r0
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	4313      	orrs	r3, r2
 80100de:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_w = (int32_t)ivt_result_w;
 80100e0:	697a      	ldr	r2, [r7, #20]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	609a      	str	r2, [r3, #8]

    return (0);
 80100e6:	2300      	movs	r3, #0
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3718      	adds	r7, #24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <can2_ivt_msg_result_t_unpack>:

int can2_ivt_msg_result_t_unpack(
    struct can2_ivt_msg_result_t_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_t;

    if (size < 6u) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b05      	cmp	r3, #5
 8010100:	d802      	bhi.n	8010108 <can2_ivt_msg_result_t_unpack+0x18>
        return (-EINVAL);
 8010102:	f06f 0315 	mvn.w	r3, #21
 8010106:	e077      	b.n	80101f8 <can2_ivt_msg_result_t_unpack+0x108>
    }

    dst_p->ivt_id_result_t = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	22ff      	movs	r2, #255	@ 0xff
 801010e:	2100      	movs	r1, #0
 8010110:	4618      	mov	r0, r3
 8010112:	f7ff fe26 	bl	800fd62 <unpack_right_shift_u8>
 8010116:	4603      	mov	r3, r0
 8010118:	461a      	mov	r2, r3
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_t_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	3301      	adds	r3, #1
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	2280      	movs	r2, #128	@ 0x80
 8010126:	2107      	movs	r1, #7
 8010128:	4618      	mov	r0, r3
 801012a:	f7ff fe1a 	bl	800fd62 <unpack_right_shift_u8>
 801012e:	4603      	mov	r3, r0
 8010130:	461a      	mov	r2, r3
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_t_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	3301      	adds	r3, #1
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2240      	movs	r2, #64	@ 0x40
 801013e:	2106      	movs	r1, #6
 8010140:	4618      	mov	r0, r3
 8010142:	f7ff fe0e 	bl	800fd62 <unpack_right_shift_u8>
 8010146:	4603      	mov	r3, r0
 8010148:	461a      	mov	r2, r3
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_t_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	3301      	adds	r3, #1
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	2220      	movs	r2, #32
 8010156:	2105      	movs	r1, #5
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff fe02 	bl	800fd62 <unpack_right_shift_u8>
 801015e:	4603      	mov	r3, r0
 8010160:	461a      	mov	r2, r3
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_t_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	3301      	adds	r3, #1
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	2210      	movs	r2, #16
 801016e:	2104      	movs	r1, #4
 8010170:	4618      	mov	r0, r3
 8010172:	f7ff fdf6 	bl	800fd62 <unpack_right_shift_u8>
 8010176:	4603      	mov	r3, r0
 8010178:	461a      	mov	r2, r3
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_t = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	3301      	adds	r3, #1
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	220f      	movs	r2, #15
 8010186:	2100      	movs	r1, #0
 8010188:	4618      	mov	r0, r3
 801018a:	f7ff fdea 	bl	800fd62 <unpack_right_shift_u8>
 801018e:	4603      	mov	r3, r0
 8010190:	461a      	mov	r2, r3
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	715a      	strb	r2, [r3, #5]
    ivt_result_t = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	3302      	adds	r3, #2
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	22ff      	movs	r2, #255	@ 0xff
 801019e:	2118      	movs	r1, #24
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7ff fdc7 	bl	800fd34 <unpack_left_shift_u32>
 80101a6:	6178      	str	r0, [r7, #20]
    ivt_result_t |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	3303      	adds	r3, #3
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	22ff      	movs	r2, #255	@ 0xff
 80101b0:	2110      	movs	r1, #16
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7ff fdbe 	bl	800fd34 <unpack_left_shift_u32>
 80101b8:	4602      	mov	r2, r0
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	4313      	orrs	r3, r2
 80101be:	617b      	str	r3, [r7, #20]
    ivt_result_t |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	3304      	adds	r3, #4
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	22ff      	movs	r2, #255	@ 0xff
 80101c8:	2108      	movs	r1, #8
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7ff fdb2 	bl	800fd34 <unpack_left_shift_u32>
 80101d0:	4602      	mov	r2, r0
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	4313      	orrs	r3, r2
 80101d6:	617b      	str	r3, [r7, #20]
    ivt_result_t |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	3305      	adds	r3, #5
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	22ff      	movs	r2, #255	@ 0xff
 80101e0:	2100      	movs	r1, #0
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7ff fdd5 	bl	800fd92 <unpack_right_shift_u32>
 80101e8:	4602      	mov	r2, r0
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	4313      	orrs	r3, r2
 80101ee:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_t = (int32_t)ivt_result_t;
 80101f0:	697a      	ldr	r2, [r7, #20]
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	609a      	str	r2, [r3, #8]

    return (0);
 80101f6:	2300      	movs	r3, #0
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3718      	adds	r7, #24
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b086      	sub	sp, #24
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u3;

    if (size < 6u) {
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2b05      	cmp	r3, #5
 8010210:	d802      	bhi.n	8010218 <can2_ivt_msg_result_u3_unpack+0x18>
        return (-EINVAL);
 8010212:	f06f 0315 	mvn.w	r3, #21
 8010216:	e077      	b.n	8010308 <can2_ivt_msg_result_u3_unpack+0x108>
    }

    dst_p->ivt_id_result_u3 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	22ff      	movs	r2, #255	@ 0xff
 801021e:	2100      	movs	r1, #0
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff fd9e 	bl	800fd62 <unpack_right_shift_u8>
 8010226:	4603      	mov	r3, r0
 8010228:	461a      	mov	r2, r3
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u3_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	3301      	adds	r3, #1
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	2280      	movs	r2, #128	@ 0x80
 8010236:	2107      	movs	r1, #7
 8010238:	4618      	mov	r0, r3
 801023a:	f7ff fd92 	bl	800fd62 <unpack_right_shift_u8>
 801023e:	4603      	mov	r3, r0
 8010240:	461a      	mov	r2, r3
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u3_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	3301      	adds	r3, #1
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	2240      	movs	r2, #64	@ 0x40
 801024e:	2106      	movs	r1, #6
 8010250:	4618      	mov	r0, r3
 8010252:	f7ff fd86 	bl	800fd62 <unpack_right_shift_u8>
 8010256:	4603      	mov	r3, r0
 8010258:	461a      	mov	r2, r3
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u3_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	3301      	adds	r3, #1
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	2220      	movs	r2, #32
 8010266:	2105      	movs	r1, #5
 8010268:	4618      	mov	r0, r3
 801026a:	f7ff fd7a 	bl	800fd62 <unpack_right_shift_u8>
 801026e:	4603      	mov	r3, r0
 8010270:	461a      	mov	r2, r3
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u3_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	3301      	adds	r3, #1
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	2210      	movs	r2, #16
 801027e:	2104      	movs	r1, #4
 8010280:	4618      	mov	r0, r3
 8010282:	f7ff fd6e 	bl	800fd62 <unpack_right_shift_u8>
 8010286:	4603      	mov	r3, r0
 8010288:	461a      	mov	r2, r3
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u3 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	3301      	adds	r3, #1
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	220f      	movs	r2, #15
 8010296:	2100      	movs	r1, #0
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff fd62 	bl	800fd62 <unpack_right_shift_u8>
 801029e:	4603      	mov	r3, r0
 80102a0:	461a      	mov	r2, r3
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	715a      	strb	r2, [r3, #5]
    ivt_result_u3 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	3302      	adds	r3, #2
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	22ff      	movs	r2, #255	@ 0xff
 80102ae:	2118      	movs	r1, #24
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7ff fd3f 	bl	800fd34 <unpack_left_shift_u32>
 80102b6:	6178      	str	r0, [r7, #20]
    ivt_result_u3 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	3303      	adds	r3, #3
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	22ff      	movs	r2, #255	@ 0xff
 80102c0:	2110      	movs	r1, #16
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7ff fd36 	bl	800fd34 <unpack_left_shift_u32>
 80102c8:	4602      	mov	r2, r0
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	617b      	str	r3, [r7, #20]
    ivt_result_u3 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	3304      	adds	r3, #4
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	22ff      	movs	r2, #255	@ 0xff
 80102d8:	2108      	movs	r1, #8
 80102da:	4618      	mov	r0, r3
 80102dc:	f7ff fd2a 	bl	800fd34 <unpack_left_shift_u32>
 80102e0:	4602      	mov	r2, r0
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	4313      	orrs	r3, r2
 80102e6:	617b      	str	r3, [r7, #20]
    ivt_result_u3 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	3305      	adds	r3, #5
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	22ff      	movs	r2, #255	@ 0xff
 80102f0:	2100      	movs	r1, #0
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7ff fd4d 	bl	800fd92 <unpack_right_shift_u32>
 80102f8:	4602      	mov	r2, r0
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u3 = (int32_t)ivt_result_u3;
 8010300:	697a      	ldr	r2, [r7, #20]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	609a      	str	r2, [r3, #8]

    return (0);
 8010306:	2300      	movs	r3, #0
}
 8010308:	4618      	mov	r0, r3
 801030a:	3718      	adds	r7, #24
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <can2_ivt_msg_result_u2_unpack>:

int can2_ivt_msg_result_u2_unpack(
    struct can2_ivt_msg_result_u2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u2;

    if (size < 6u) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b05      	cmp	r3, #5
 8010320:	d802      	bhi.n	8010328 <can2_ivt_msg_result_u2_unpack+0x18>
        return (-EINVAL);
 8010322:	f06f 0315 	mvn.w	r3, #21
 8010326:	e077      	b.n	8010418 <can2_ivt_msg_result_u2_unpack+0x108>
    }

    dst_p->ivt_id_result_u2 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	22ff      	movs	r2, #255	@ 0xff
 801032e:	2100      	movs	r1, #0
 8010330:	4618      	mov	r0, r3
 8010332:	f7ff fd16 	bl	800fd62 <unpack_right_shift_u8>
 8010336:	4603      	mov	r3, r0
 8010338:	461a      	mov	r2, r3
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u2_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	3301      	adds	r3, #1
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	2280      	movs	r2, #128	@ 0x80
 8010346:	2107      	movs	r1, #7
 8010348:	4618      	mov	r0, r3
 801034a:	f7ff fd0a 	bl	800fd62 <unpack_right_shift_u8>
 801034e:	4603      	mov	r3, r0
 8010350:	461a      	mov	r2, r3
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u2_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	3301      	adds	r3, #1
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2240      	movs	r2, #64	@ 0x40
 801035e:	2106      	movs	r1, #6
 8010360:	4618      	mov	r0, r3
 8010362:	f7ff fcfe 	bl	800fd62 <unpack_right_shift_u8>
 8010366:	4603      	mov	r3, r0
 8010368:	461a      	mov	r2, r3
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u2_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	3301      	adds	r3, #1
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2220      	movs	r2, #32
 8010376:	2105      	movs	r1, #5
 8010378:	4618      	mov	r0, r3
 801037a:	f7ff fcf2 	bl	800fd62 <unpack_right_shift_u8>
 801037e:	4603      	mov	r3, r0
 8010380:	461a      	mov	r2, r3
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u2_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	3301      	adds	r3, #1
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	2210      	movs	r2, #16
 801038e:	2104      	movs	r1, #4
 8010390:	4618      	mov	r0, r3
 8010392:	f7ff fce6 	bl	800fd62 <unpack_right_shift_u8>
 8010396:	4603      	mov	r3, r0
 8010398:	461a      	mov	r2, r3
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u2 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	3301      	adds	r3, #1
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	220f      	movs	r2, #15
 80103a6:	2100      	movs	r1, #0
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff fcda 	bl	800fd62 <unpack_right_shift_u8>
 80103ae:	4603      	mov	r3, r0
 80103b0:	461a      	mov	r2, r3
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	715a      	strb	r2, [r3, #5]
    ivt_result_u2 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	3302      	adds	r3, #2
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	22ff      	movs	r2, #255	@ 0xff
 80103be:	2118      	movs	r1, #24
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7ff fcb7 	bl	800fd34 <unpack_left_shift_u32>
 80103c6:	6178      	str	r0, [r7, #20]
    ivt_result_u2 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	3303      	adds	r3, #3
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	22ff      	movs	r2, #255	@ 0xff
 80103d0:	2110      	movs	r1, #16
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7ff fcae 	bl	800fd34 <unpack_left_shift_u32>
 80103d8:	4602      	mov	r2, r0
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	4313      	orrs	r3, r2
 80103de:	617b      	str	r3, [r7, #20]
    ivt_result_u2 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	3304      	adds	r3, #4
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	22ff      	movs	r2, #255	@ 0xff
 80103e8:	2108      	movs	r1, #8
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7ff fca2 	bl	800fd34 <unpack_left_shift_u32>
 80103f0:	4602      	mov	r2, r0
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	4313      	orrs	r3, r2
 80103f6:	617b      	str	r3, [r7, #20]
    ivt_result_u2 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	3305      	adds	r3, #5
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	22ff      	movs	r2, #255	@ 0xff
 8010400:	2100      	movs	r1, #0
 8010402:	4618      	mov	r0, r3
 8010404:	f7ff fcc5 	bl	800fd92 <unpack_right_shift_u32>
 8010408:	4602      	mov	r2, r0
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	4313      	orrs	r3, r2
 801040e:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u2 = (int32_t)ivt_result_u2;
 8010410:	697a      	ldr	r2, [r7, #20]
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	609a      	str	r2, [r3, #8]

    return (0);
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3718      	adds	r7, #24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <can2_ivt_msg_result_u2_ivt_result_u2_decode>:
{
    return (int32_t)(value);
}

double can2_ivt_msg_result_u2_ivt_result_u2_decode(int32_t value)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
    return ((double)value);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7f0 f81f 	bl	800046c <__aeabi_i2d>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	ec43 2b17 	vmov	d7, r2, r3
}
 8010436:	eeb0 0a47 	vmov.f32	s0, s14
 801043a:	eef0 0a67 	vmov.f32	s1, s15
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b086      	sub	sp, #24
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u1;

    if (size < 6u) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b05      	cmp	r3, #5
 8010454:	d802      	bhi.n	801045c <can2_ivt_msg_result_u1_unpack+0x18>
        return (-EINVAL);
 8010456:	f06f 0315 	mvn.w	r3, #21
 801045a:	e077      	b.n	801054c <can2_ivt_msg_result_u1_unpack+0x108>
    }

    dst_p->ivt_id_result_u1 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	22ff      	movs	r2, #255	@ 0xff
 8010462:	2100      	movs	r1, #0
 8010464:	4618      	mov	r0, r3
 8010466:	f7ff fc7c 	bl	800fd62 <unpack_right_shift_u8>
 801046a:	4603      	mov	r3, r0
 801046c:	461a      	mov	r2, r3
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u1_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	3301      	adds	r3, #1
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	2280      	movs	r2, #128	@ 0x80
 801047a:	2107      	movs	r1, #7
 801047c:	4618      	mov	r0, r3
 801047e:	f7ff fc70 	bl	800fd62 <unpack_right_shift_u8>
 8010482:	4603      	mov	r3, r0
 8010484:	461a      	mov	r2, r3
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u1_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	3301      	adds	r3, #1
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	2240      	movs	r2, #64	@ 0x40
 8010492:	2106      	movs	r1, #6
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff fc64 	bl	800fd62 <unpack_right_shift_u8>
 801049a:	4603      	mov	r3, r0
 801049c:	461a      	mov	r2, r3
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u1_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	3301      	adds	r3, #1
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	2220      	movs	r2, #32
 80104aa:	2105      	movs	r1, #5
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7ff fc58 	bl	800fd62 <unpack_right_shift_u8>
 80104b2:	4603      	mov	r3, r0
 80104b4:	461a      	mov	r2, r3
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u1_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	3301      	adds	r3, #1
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	2210      	movs	r2, #16
 80104c2:	2104      	movs	r1, #4
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7ff fc4c 	bl	800fd62 <unpack_right_shift_u8>
 80104ca:	4603      	mov	r3, r0
 80104cc:	461a      	mov	r2, r3
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u1 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	3301      	adds	r3, #1
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	220f      	movs	r2, #15
 80104da:	2100      	movs	r1, #0
 80104dc:	4618      	mov	r0, r3
 80104de:	f7ff fc40 	bl	800fd62 <unpack_right_shift_u8>
 80104e2:	4603      	mov	r3, r0
 80104e4:	461a      	mov	r2, r3
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	715a      	strb	r2, [r3, #5]
    ivt_result_u1 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	3302      	adds	r3, #2
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	22ff      	movs	r2, #255	@ 0xff
 80104f2:	2118      	movs	r1, #24
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff fc1d 	bl	800fd34 <unpack_left_shift_u32>
 80104fa:	6178      	str	r0, [r7, #20]
    ivt_result_u1 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	3303      	adds	r3, #3
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	22ff      	movs	r2, #255	@ 0xff
 8010504:	2110      	movs	r1, #16
 8010506:	4618      	mov	r0, r3
 8010508:	f7ff fc14 	bl	800fd34 <unpack_left_shift_u32>
 801050c:	4602      	mov	r2, r0
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	4313      	orrs	r3, r2
 8010512:	617b      	str	r3, [r7, #20]
    ivt_result_u1 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	3304      	adds	r3, #4
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	22ff      	movs	r2, #255	@ 0xff
 801051c:	2108      	movs	r1, #8
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff fc08 	bl	800fd34 <unpack_left_shift_u32>
 8010524:	4602      	mov	r2, r0
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	4313      	orrs	r3, r2
 801052a:	617b      	str	r3, [r7, #20]
    ivt_result_u1 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	3305      	adds	r3, #5
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	22ff      	movs	r2, #255	@ 0xff
 8010534:	2100      	movs	r1, #0
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff fc2b 	bl	800fd92 <unpack_right_shift_u32>
 801053c:	4602      	mov	r2, r0
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	4313      	orrs	r3, r2
 8010542:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u1 = (int32_t)ivt_result_u1;
 8010544:	697a      	ldr	r2, [r7, #20]
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	609a      	str	r2, [r3, #8]

    return (0);
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3718      	adds	r7, #24
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <can2_ivt_msg_result_u1_ivt_result_u1_decode>:
{
    return (int32_t)(value);
}

double can2_ivt_msg_result_u1_ivt_result_u1_decode(int32_t value)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
    return ((double)value);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7ef ff85 	bl	800046c <__aeabi_i2d>
 8010562:	4602      	mov	r2, r0
 8010564:	460b      	mov	r3, r1
 8010566:	ec43 2b17 	vmov	d7, r2, r3
}
 801056a:	eeb0 0a47 	vmov.f32	s0, s14
 801056e:	eef0 0a67 	vmov.f32	s1, s15
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b086      	sub	sp, #24
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_i;

    if (size < 6u) {
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b05      	cmp	r3, #5
 8010588:	d802      	bhi.n	8010590 <can2_ivt_msg_result_i_unpack+0x18>
        return (-EINVAL);
 801058a:	f06f 0315 	mvn.w	r3, #21
 801058e:	e077      	b.n	8010680 <can2_ivt_msg_result_i_unpack+0x108>
    }

    dst_p->ivt_id_result_i = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	22ff      	movs	r2, #255	@ 0xff
 8010596:	2100      	movs	r1, #0
 8010598:	4618      	mov	r0, r3
 801059a:	f7ff fbe2 	bl	800fd62 <unpack_right_shift_u8>
 801059e:	4603      	mov	r3, r0
 80105a0:	461a      	mov	r2, r3
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_i_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	3301      	adds	r3, #1
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	2280      	movs	r2, #128	@ 0x80
 80105ae:	2107      	movs	r1, #7
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7ff fbd6 	bl	800fd62 <unpack_right_shift_u8>
 80105b6:	4603      	mov	r3, r0
 80105b8:	461a      	mov	r2, r3
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_i_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	3301      	adds	r3, #1
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	2240      	movs	r2, #64	@ 0x40
 80105c6:	2106      	movs	r1, #6
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff fbca 	bl	800fd62 <unpack_right_shift_u8>
 80105ce:	4603      	mov	r3, r0
 80105d0:	461a      	mov	r2, r3
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_i_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	3301      	adds	r3, #1
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2220      	movs	r2, #32
 80105de:	2105      	movs	r1, #5
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff fbbe 	bl	800fd62 <unpack_right_shift_u8>
 80105e6:	4603      	mov	r3, r0
 80105e8:	461a      	mov	r2, r3
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_i_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	3301      	adds	r3, #1
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	2210      	movs	r2, #16
 80105f6:	2104      	movs	r1, #4
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7ff fbb2 	bl	800fd62 <unpack_right_shift_u8>
 80105fe:	4603      	mov	r3, r0
 8010600:	461a      	mov	r2, r3
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_i = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	3301      	adds	r3, #1
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	220f      	movs	r2, #15
 801060e:	2100      	movs	r1, #0
 8010610:	4618      	mov	r0, r3
 8010612:	f7ff fba6 	bl	800fd62 <unpack_right_shift_u8>
 8010616:	4603      	mov	r3, r0
 8010618:	461a      	mov	r2, r3
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	715a      	strb	r2, [r3, #5]
    ivt_result_i = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	3302      	adds	r3, #2
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	22ff      	movs	r2, #255	@ 0xff
 8010626:	2118      	movs	r1, #24
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff fb83 	bl	800fd34 <unpack_left_shift_u32>
 801062e:	6178      	str	r0, [r7, #20]
    ivt_result_i |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	3303      	adds	r3, #3
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	22ff      	movs	r2, #255	@ 0xff
 8010638:	2110      	movs	r1, #16
 801063a:	4618      	mov	r0, r3
 801063c:	f7ff fb7a 	bl	800fd34 <unpack_left_shift_u32>
 8010640:	4602      	mov	r2, r0
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	4313      	orrs	r3, r2
 8010646:	617b      	str	r3, [r7, #20]
    ivt_result_i |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	3304      	adds	r3, #4
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	22ff      	movs	r2, #255	@ 0xff
 8010650:	2108      	movs	r1, #8
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff fb6e 	bl	800fd34 <unpack_left_shift_u32>
 8010658:	4602      	mov	r2, r0
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	4313      	orrs	r3, r2
 801065e:	617b      	str	r3, [r7, #20]
    ivt_result_i |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	3305      	adds	r3, #5
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	22ff      	movs	r2, #255	@ 0xff
 8010668:	2100      	movs	r1, #0
 801066a:	4618      	mov	r0, r3
 801066c:	f7ff fb91 	bl	800fd92 <unpack_right_shift_u32>
 8010670:	4602      	mov	r2, r0
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	4313      	orrs	r3, r2
 8010676:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_i = (int32_t)ivt_result_i;
 8010678:	697a      	ldr	r2, [r7, #20]
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	609a      	str	r2, [r3, #8]

    return (0);
 801067e:	2300      	movs	r3, #0
}
 8010680:	4618      	mov	r0, r3
 8010682:	3718      	adds	r7, #24
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <memset>:
 8010688:	4402      	add	r2, r0
 801068a:	4603      	mov	r3, r0
 801068c:	4293      	cmp	r3, r2
 801068e:	d100      	bne.n	8010692 <memset+0xa>
 8010690:	4770      	bx	lr
 8010692:	f803 1b01 	strb.w	r1, [r3], #1
 8010696:	e7f9      	b.n	801068c <memset+0x4>

08010698 <__libc_init_array>:
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	4d0d      	ldr	r5, [pc, #52]	@ (80106d0 <__libc_init_array+0x38>)
 801069c:	4c0d      	ldr	r4, [pc, #52]	@ (80106d4 <__libc_init_array+0x3c>)
 801069e:	1b64      	subs	r4, r4, r5
 80106a0:	10a4      	asrs	r4, r4, #2
 80106a2:	2600      	movs	r6, #0
 80106a4:	42a6      	cmp	r6, r4
 80106a6:	d109      	bne.n	80106bc <__libc_init_array+0x24>
 80106a8:	4d0b      	ldr	r5, [pc, #44]	@ (80106d8 <__libc_init_array+0x40>)
 80106aa:	4c0c      	ldr	r4, [pc, #48]	@ (80106dc <__libc_init_array+0x44>)
 80106ac:	f000 f818 	bl	80106e0 <_init>
 80106b0:	1b64      	subs	r4, r4, r5
 80106b2:	10a4      	asrs	r4, r4, #2
 80106b4:	2600      	movs	r6, #0
 80106b6:	42a6      	cmp	r6, r4
 80106b8:	d105      	bne.n	80106c6 <__libc_init_array+0x2e>
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80106c0:	4798      	blx	r3
 80106c2:	3601      	adds	r6, #1
 80106c4:	e7ee      	b.n	80106a4 <__libc_init_array+0xc>
 80106c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80106ca:	4798      	blx	r3
 80106cc:	3601      	adds	r6, #1
 80106ce:	e7f2      	b.n	80106b6 <__libc_init_array+0x1e>
 80106d0:	080109dc 	.word	0x080109dc
 80106d4:	080109dc 	.word	0x080109dc
 80106d8:	080109dc 	.word	0x080109dc
 80106dc:	080109e0 	.word	0x080109e0

080106e0 <_init>:
 80106e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e2:	bf00      	nop
 80106e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106e6:	bc08      	pop	{r3}
 80106e8:	469e      	mov	lr, r3
 80106ea:	4770      	bx	lr

080106ec <_fini>:
 80106ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ee:	bf00      	nop
 80106f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106f2:	bc08      	pop	{r3}
 80106f4:	469e      	mov	lr, r3
 80106f6:	4770      	bx	lr
