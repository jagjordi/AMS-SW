
AMS-SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800aa68  0800aa68  0000ba68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac78  0800ac78  0000c024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ac78  0800ac78  0000bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac80  0800ac80  0000c024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac80  0800ac80  0000bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac84  0800ac84  0000bc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800ac88  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c024  2**0
                  CONTENTS
 10 .bss          000004a8  20000028  20000028  0000c028  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200004d0  200004d0  0000c028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039bf6  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191f  00000000  00000000  00045c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00007eb8  00000000  00000000  00047570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000600a  00000000  00000000  0004f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024153  00000000  00000000  00055432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000345b6  00000000  00000000  00079585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b0ee  00000000  00000000  000adb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b8c29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00024950  00000000  00000000  001b8c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001dd5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aa50 	.word	0x0800aa50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	0800aa50 	.word	0x0800aa50

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b988 	b.w	8000ccc <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	468e      	mov	lr, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	4688      	mov	r8, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d962      	bls.n	8000ab0 <__udivmoddi4+0xdc>
 80009ea:	fab2 f682 	clz	r6, r2
 80009ee:	b14e      	cbz	r6, 8000a04 <__udivmoddi4+0x30>
 80009f0:	f1c6 0320 	rsb	r3, r6, #32
 80009f4:	fa01 f806 	lsl.w	r8, r1, r6
 80009f8:	fa20 f303 	lsr.w	r3, r0, r3
 80009fc:	40b7      	lsls	r7, r6
 80009fe:	ea43 0808 	orr.w	r8, r3, r8
 8000a02:	40b4      	lsls	r4, r6
 8000a04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a08:	fa1f fc87 	uxth.w	ip, r7
 8000a0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a10:	0c23      	lsrs	r3, r4, #16
 8000a12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d909      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a28:	f080 80ea 	bcs.w	8000c00 <__udivmoddi4+0x22c>
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f240 80e7 	bls.w	8000c00 <__udivmoddi4+0x22c>
 8000a32:	3902      	subs	r1, #2
 8000a34:	443b      	add	r3, r7
 8000a36:	1a9a      	subs	r2, r3, r2
 8000a38:	b2a3      	uxth	r3, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a4a:	459c      	cmp	ip, r3
 8000a4c:	d909      	bls.n	8000a62 <__udivmoddi4+0x8e>
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a54:	f080 80d6 	bcs.w	8000c04 <__udivmoddi4+0x230>
 8000a58:	459c      	cmp	ip, r3
 8000a5a:	f240 80d3 	bls.w	8000c04 <__udivmoddi4+0x230>
 8000a5e:	443b      	add	r3, r7
 8000a60:	3802      	subs	r0, #2
 8000a62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a66:	eba3 030c 	sub.w	r3, r3, ip
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11d      	cbz	r5, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40f3      	lsrs	r3, r6
 8000a70:	2200      	movs	r2, #0
 8000a72:	e9c5 3200 	strd	r3, r2, [r5]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d905      	bls.n	8000a8a <__udivmoddi4+0xb6>
 8000a7e:	b10d      	cbz	r5, 8000a84 <__udivmoddi4+0xb0>
 8000a80:	e9c5 0100 	strd	r0, r1, [r5]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	e7f5      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000a8a:	fab3 f183 	clz	r1, r3
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d146      	bne.n	8000b20 <__udivmoddi4+0x14c>
 8000a92:	4573      	cmp	r3, lr
 8000a94:	d302      	bcc.n	8000a9c <__udivmoddi4+0xc8>
 8000a96:	4282      	cmp	r2, r0
 8000a98:	f200 8105 	bhi.w	8000ca6 <__udivmoddi4+0x2d2>
 8000a9c:	1a84      	subs	r4, r0, r2
 8000a9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d0e5      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000aaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000aae:	e7e2      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	f000 8090 	beq.w	8000bd6 <__udivmoddi4+0x202>
 8000ab6:	fab2 f682 	clz	r6, r2
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f040 80a4 	bne.w	8000c08 <__udivmoddi4+0x234>
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	0c03      	lsrs	r3, r0, #16
 8000ac4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	b2bc      	uxth	r4, r7
 8000acc:	2101      	movs	r1, #1
 8000ace:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ad2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ada:	fb04 f20c 	mul.w	r2, r4, ip
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d907      	bls.n	8000af2 <__udivmoddi4+0x11e>
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x11c>
 8000aea:	429a      	cmp	r2, r3
 8000aec:	f200 80e0 	bhi.w	8000cb0 <__udivmoddi4+0x2dc>
 8000af0:	46c4      	mov	ip, r8
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000af8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000afc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b00:	fb02 f404 	mul.w	r4, r2, r4
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x144>
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x142>
 8000b10:	429c      	cmp	r4, r3
 8000b12:	f200 80ca 	bhi.w	8000caa <__udivmoddi4+0x2d6>
 8000b16:	4602      	mov	r2, r0
 8000b18:	1b1b      	subs	r3, r3, r4
 8000b1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b20:	f1c1 0620 	rsb	r6, r1, #32
 8000b24:	408b      	lsls	r3, r1
 8000b26:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2a:	431f      	orrs	r7, r3
 8000b2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b30:	fa20 f306 	lsr.w	r3, r0, r6
 8000b34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b3c:	4323      	orrs	r3, r4
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	fa1f fc87 	uxth.w	ip, r7
 8000b46:	fbbe f0f9 	udiv	r0, lr, r9
 8000b4a:	0c1c      	lsrs	r4, r3, #16
 8000b4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b5e:	d909      	bls.n	8000b74 <__udivmoddi4+0x1a0>
 8000b60:	193c      	adds	r4, r7, r4
 8000b62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b66:	f080 809c 	bcs.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f240 8099 	bls.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b70:	3802      	subs	r0, #2
 8000b72:	443c      	add	r4, r7
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	fa1f fe83 	uxth.w	lr, r3
 8000b7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b80:	fb09 4413 	mls	r4, r9, r3, r4
 8000b84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x1ce>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b96:	f080 8082 	bcs.w	8000c9e <__udivmoddi4+0x2ca>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	d97f      	bls.n	8000c9e <__udivmoddi4+0x2ca>
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ba6:	eba4 040c 	sub.w	r4, r4, ip
 8000baa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bae:	4564      	cmp	r4, ip
 8000bb0:	4673      	mov	r3, lr
 8000bb2:	46e1      	mov	r9, ip
 8000bb4:	d362      	bcc.n	8000c7c <__udivmoddi4+0x2a8>
 8000bb6:	d05f      	beq.n	8000c78 <__udivmoddi4+0x2a4>
 8000bb8:	b15d      	cbz	r5, 8000bd2 <__udivmoddi4+0x1fe>
 8000bba:	ebb8 0203 	subs.w	r2, r8, r3
 8000bbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000bc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bca:	431e      	orrs	r6, r3
 8000bcc:	40cc      	lsrs	r4, r1
 8000bce:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	e74f      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000bd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bda:	0c01      	lsrs	r1, r0, #16
 8000bdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000be0:	b280      	uxth	r0, r0
 8000be2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000be6:	463b      	mov	r3, r7
 8000be8:	4638      	mov	r0, r7
 8000bea:	463c      	mov	r4, r7
 8000bec:	46b8      	mov	r8, r7
 8000bee:	46be      	mov	lr, r7
 8000bf0:	2620      	movs	r6, #32
 8000bf2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bf6:	eba2 0208 	sub.w	r2, r2, r8
 8000bfa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bfe:	e766      	b.n	8000ace <__udivmoddi4+0xfa>
 8000c00:	4601      	mov	r1, r0
 8000c02:	e718      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c04:	4610      	mov	r0, r2
 8000c06:	e72c      	b.n	8000a62 <__udivmoddi4+0x8e>
 8000c08:	f1c6 0220 	rsb	r2, r6, #32
 8000c0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	40b1      	lsls	r1, r6
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb08 f904 	mul.w	r9, r8, r4
 8000c32:	40b0      	lsls	r0, r6
 8000c34:	4589      	cmp	r9, r1
 8000c36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c3a:	b280      	uxth	r0, r0
 8000c3c:	d93e      	bls.n	8000cbc <__udivmoddi4+0x2e8>
 8000c3e:	1879      	adds	r1, r7, r1
 8000c40:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c44:	d201      	bcs.n	8000c4a <__udivmoddi4+0x276>
 8000c46:	4589      	cmp	r9, r1
 8000c48:	d81f      	bhi.n	8000c8a <__udivmoddi4+0x2b6>
 8000c4a:	eba1 0109 	sub.w	r1, r1, r9
 8000c4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c52:	fb09 f804 	mul.w	r8, r9, r4
 8000c56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c5a:	b292      	uxth	r2, r2
 8000c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d229      	bcs.n	8000cb8 <__udivmoddi4+0x2e4>
 8000c64:	18ba      	adds	r2, r7, r2
 8000c66:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c6a:	d2c4      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c6c:	4542      	cmp	r2, r8
 8000c6e:	d2c2      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c70:	f1a9 0102 	sub.w	r1, r9, #2
 8000c74:	443a      	add	r2, r7
 8000c76:	e7be      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000c78:	45f0      	cmp	r8, lr
 8000c7a:	d29d      	bcs.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c84:	3801      	subs	r0, #1
 8000c86:	46e1      	mov	r9, ip
 8000c88:	e796      	b.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c8a:	eba7 0909 	sub.w	r9, r7, r9
 8000c8e:	4449      	add	r1, r9
 8000c90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c98:	fb09 f804 	mul.w	r8, r9, r4
 8000c9c:	e7db      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c9e:	4673      	mov	r3, lr
 8000ca0:	e77f      	b.n	8000ba2 <__udivmoddi4+0x1ce>
 8000ca2:	4650      	mov	r0, sl
 8000ca4:	e766      	b.n	8000b74 <__udivmoddi4+0x1a0>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e6fd      	b.n	8000aa6 <__udivmoddi4+0xd2>
 8000caa:	443b      	add	r3, r7
 8000cac:	3a02      	subs	r2, #2
 8000cae:	e733      	b.n	8000b18 <__udivmoddi4+0x144>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	443b      	add	r3, r7
 8000cb6:	e71c      	b.n	8000af2 <__udivmoddi4+0x11e>
 8000cb8:	4649      	mov	r1, r9
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000cbc:	eba1 0109 	sub.w	r1, r1, r9
 8000cc0:	46c4      	mov	ip, r8
 8000cc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc6:	fb09 f804 	mul.w	r8, r9, r4
 8000cca:	e7c4      	b.n	8000c56 <__udivmoddi4+0x282>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <pec15_calc>:
 * @param len Length of the data buffer.
 * @param data Pointer to the data buffer.
 * @return Calculated PEC15 checksum.
 */
uint16_t pec15_calc(uint8_t len, uint8_t *data)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;
  remainder = 16;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	737b      	strb	r3, [r7, #13]
 8000ce4:	e019      	b.n	8000d1a <pec15_calc+0x4a>
    {
      addr = ((remainder >> 7) ^ data[i]) & 0xff;
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	09db      	lsrs	r3, r3, #7
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	7b7a      	ldrb	r2, [r7, #13]
 8000cee:	6839      	ldr	r1, [r7, #0]
 8000cf0:	440a      	add	r2, r1
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	4053      	eors	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	817b      	strh	r3, [r7, #10]
      remainder = (remainder << 8) ^ crc15Table[addr];
 8000cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	897b      	ldrh	r3, [r7, #10]
 8000d06:	490b      	ldr	r1, [pc, #44]	@ (8000d34 <pec15_calc+0x64>)
 8000d08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	4053      	eors	r3, r2
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++)
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	3301      	adds	r3, #1
 8000d18:	737b      	strb	r3, [r7, #13]
 8000d1a:	7b7a      	ldrb	r2, [r7, #13]
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3e1      	bcc.n	8000ce6 <pec15_calc+0x16>
    }
  return (remainder * 2);
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	b29b      	uxth	r3, r3
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	0800aa68 	.word	0x0800aa68

08000d38 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f003 f91d 	bl	8003f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f002 fe09 	bl	8003958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f002 ff13 	bl	8003b70 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d4a:	f002 fe6f 	bl	8003a2c <MX_CAN1_Init>
  MX_SPI1_Init();
 8000d4e:	f002 fed9 	bl	8003b04 <MX_SPI1_Init>
  MX_CAN2_Init();
 8000d52:	f002 fea1 	bl	8003a98 <MX_CAN2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    tick = HAL_GetTick();
 8000d56:	f003 f977 	bl	8004048 <HAL_GetTick>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a8a      	ldr	r2, [pc, #552]	@ (8000f88 <main+0x250>)
 8000d5e:	6013      	str	r3, [r2, #0]
    // Start LTC voltage conversions
    command = MAKEBROADCASTCMD(ADCV(MD_NORMAL, DCP_NOT_PERMITTED, CH_ALL_CELLS));
 8000d60:	4b8a      	ldr	r3, [pc, #552]	@ (8000f8c <main+0x254>)
 8000d62:	2263      	movs	r2, #99	@ 0x63
 8000d64:	801a      	strh	r2, [r3, #0]
    spiTxData[0] = command >> 8;
 8000d66:	4b89      	ldr	r3, [pc, #548]	@ (8000f8c <main+0x254>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b87      	ldr	r3, [pc, #540]	@ (8000f90 <main+0x258>)
 8000d72:	701a      	strb	r2, [r3, #0]
    spiTxData[1] = command & 0xFF;
 8000d74:	4b85      	ldr	r3, [pc, #532]	@ (8000f8c <main+0x254>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b85      	ldr	r3, [pc, #532]	@ (8000f90 <main+0x258>)
 8000d7c:	705a      	strb	r2, [r3, #1]
    pec = pec15_calc(2, spiTxData);
 8000d7e:	4984      	ldr	r1, [pc, #528]	@ (8000f90 <main+0x258>)
 8000d80:	2002      	movs	r0, #2
 8000d82:	f7ff ffa5 	bl	8000cd0 <pec15_calc>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b82      	ldr	r3, [pc, #520]	@ (8000f94 <main+0x25c>)
 8000d8c:	801a      	strh	r2, [r3, #0]
    spiTxData[2] = pec >> 8;
 8000d8e:	4b81      	ldr	r3, [pc, #516]	@ (8000f94 <main+0x25c>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b7d      	ldr	r3, [pc, #500]	@ (8000f90 <main+0x258>)
 8000d9a:	709a      	strb	r2, [r3, #2]
    spiTxData[3] = pec & 0xFF;
 8000d9c:	4b7d      	ldr	r3, [pc, #500]	@ (8000f94 <main+0x25c>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b7b      	ldr	r3, [pc, #492]	@ (8000f90 <main+0x258>)
 8000da4:	70da      	strb	r2, [r3, #3]
    HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	487b      	ldr	r0, [pc, #492]	@ (8000f98 <main+0x260>)
 8000dac:	f003 ff14 	bl	8004bd8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, spiTxData, 4, HAL_MAX_DELAY);
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	2204      	movs	r2, #4
 8000db6:	4976      	ldr	r1, [pc, #472]	@ (8000f90 <main+0x258>)
 8000db8:	4878      	ldr	r0, [pc, #480]	@ (8000f9c <main+0x264>)
 8000dba:	f004 fbd4 	bl	8005566 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	4875      	ldr	r0, [pc, #468]	@ (8000f98 <main+0x260>)
 8000dc4:	f003 ff08 	bl	8004bd8 <HAL_GPIO_WritePin>

    HAL_Delay(10); // Wait for conversions to complete
 8000dc8:	200a      	movs	r0, #10
 8000dca:	f003 f949 	bl	8004060 <HAL_Delay>
    for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	e18a      	b.n	80010ea <main+0x3b2>
    {
      for (uint8_t j = 0; j < 4; j++) // foreach register (4 registers per slave)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73bb      	strb	r3, [r7, #14]
 8000dd8:	e180      	b.n	80010dc <main+0x3a4>
      {
        switch (j)
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d84b      	bhi.n	8000e78 <main+0x140>
 8000de0:	a201      	add	r2, pc, #4	@ (adr r2, 8000de8 <main+0xb0>)
 8000de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000df9 	.word	0x08000df9
 8000dec:	08000e19 	.word	0x08000e19
 8000df0:	08000e39 	.word	0x08000e39
 8000df4:	08000e59 	.word	0x08000e59
        {
        case 0: // Cell voltages
          command = MAKEADDRCMD(i, RDCVA);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b5e      	ldr	r3, [pc, #376]	@ (8000f8c <main+0x254>)
 8000e14:	801a      	strh	r2, [r3, #0]
          break;
 8000e16:	e02f      	b.n	8000e78 <main+0x140>
        case 1: // Cell voltages
          command = MAKEADDRCMD(i, RDCVB);
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2a:	f043 0306 	orr.w	r3, r3, #6
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b56      	ldr	r3, [pc, #344]	@ (8000f8c <main+0x254>)
 8000e34:	801a      	strh	r2, [r3, #0]
          break;
 8000e36:	e01f      	b.n	8000e78 <main+0x140>
        case 2: // Cell voltages
          command = MAKEADDRCMD(i, RDCVC);
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b4e      	ldr	r3, [pc, #312]	@ (8000f8c <main+0x254>)
 8000e54:	801a      	strh	r2, [r3, #0]
          break;
 8000e56:	e00f      	b.n	8000e78 <main+0x140>
        case 3: // Cell voltages
          command = MAKEADDRCMD(i, RDCVD);
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6a:	f043 030a 	orr.w	r3, r3, #10
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b46      	ldr	r3, [pc, #280]	@ (8000f8c <main+0x254>)
 8000e74:	801a      	strh	r2, [r3, #0]
          break;
 8000e76:	bf00      	nop
        }
        spiTxData[0] = command >> 8;
 8000e78:	4b44      	ldr	r3, [pc, #272]	@ (8000f8c <main+0x254>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b43      	ldr	r3, [pc, #268]	@ (8000f90 <main+0x258>)
 8000e84:	701a      	strb	r2, [r3, #0]
        spiTxData[1] = command & 0xFF;
 8000e86:	4b41      	ldr	r3, [pc, #260]	@ (8000f8c <main+0x254>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b40      	ldr	r3, [pc, #256]	@ (8000f90 <main+0x258>)
 8000e8e:	705a      	strb	r2, [r3, #1]
        pec = pec15_calc(2, spiTxData);
 8000e90:	493f      	ldr	r1, [pc, #252]	@ (8000f90 <main+0x258>)
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff ff1c 	bl	8000cd0 <pec15_calc>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f94 <main+0x25c>)
 8000e9e:	801a      	strh	r2, [r3, #0]
        spiTxData[2] = pec >> 8;
 8000ea0:	4b3c      	ldr	r3, [pc, #240]	@ (8000f94 <main+0x25c>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b39      	ldr	r3, [pc, #228]	@ (8000f90 <main+0x258>)
 8000eac:	709a      	strb	r2, [r3, #2]
        spiTxData[3] = pec & 0xFF;
 8000eae:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <main+0x25c>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b36      	ldr	r3, [pc, #216]	@ (8000f90 <main+0x258>)
 8000eb6:	70da      	strb	r2, [r3, #3]
        HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4836      	ldr	r0, [pc, #216]	@ (8000f98 <main+0x260>)
 8000ebe:	f003 fe8b 	bl	8004bd8 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, spiTxData, spiRxData, 4+8, HAL_MAX_DELAY);
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	230c      	movs	r3, #12
 8000eca:	4a35      	ldr	r2, [pc, #212]	@ (8000fa0 <main+0x268>)
 8000ecc:	4930      	ldr	r1, [pc, #192]	@ (8000f90 <main+0x258>)
 8000ece:	4833      	ldr	r0, [pc, #204]	@ (8000f9c <main+0x264>)
 8000ed0:	f004 fc8d 	bl	80057ee <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	482f      	ldr	r0, [pc, #188]	@ (8000f98 <main+0x260>)
 8000eda:	f003 fe7d 	bl	8004bd8 <HAL_GPIO_WritePin>
        // check PEC
        pec = (0xFF00 & (spiRxData[6] << 8)) | (0xFF & spiRxData[7]);
 8000ede:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <main+0x268>)
 8000ee0:	799b      	ldrb	r3, [r3, #6]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <main+0x268>)
 8000eea:	79db      	ldrb	r3, [r3, #7]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <main+0x25c>)
 8000ef6:	801a      	strh	r2, [r3, #0]
        if (pec != pec15_calc(6, spiRxData))
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <main+0x25c>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	461c      	mov	r4, r3
 8000efe:	4928      	ldr	r1, [pc, #160]	@ (8000fa0 <main+0x268>)
 8000f00:	2006      	movs	r0, #6
 8000f02:	f7ff fee5 	bl	8000cd0 <pec15_calc>
 8000f06:	4603      	mov	r3, r0
 8000f08:	429c      	cmp	r4, r3
 8000f0a:	d023      	beq.n	8000f54 <main+0x21c>
        {
          spiErrorCounter[i]++;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	4a25      	ldr	r2, [pc, #148]	@ (8000fa4 <main+0x26c>)
 8000f10:	5cd2      	ldrb	r2, [r2, r3]
 8000f12:	3201      	adds	r2, #1
 8000f14:	b2d1      	uxtb	r1, r2
 8000f16:	4a23      	ldr	r2, [pc, #140]	@ (8000fa4 <main+0x26c>)
 8000f18:	54d1      	strb	r1, [r2, r3]
          if (spiErrorCounter[i] >= SPI_ERROR_COUNT_THRESHOLD)
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <main+0x26c>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d902      	bls.n	8000f2a <main+0x1f2>
          {
            spiError = 1; // Set SPI error
 8000f24:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <main+0x270>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
          }
          for (uint8_t k = 0; k < 4; k++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	737b      	strb	r3, [r7, #13]
 8000f2e:	e00d      	b.n	8000f4c <main+0x214>
          {
            rawVoltages[cellBaseNum[i] + k] = 0xFFFF; // Set to invalid value]
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	4a1e      	ldr	r2, [pc, #120]	@ (8000fac <main+0x274>)
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
 8000f36:	461a      	mov	r2, r3
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb0 <main+0x278>)
 8000f3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          for (uint8_t k = 0; k < 4; k++)
 8000f46:	7b7b      	ldrb	r3, [r7, #13]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	737b      	strb	r3, [r7, #13]
 8000f4c:	7b7b      	ldrb	r3, [r7, #13]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d9ee      	bls.n	8000f30 <main+0x1f8>
 8000f52:	e0c0      	b.n	80010d6 <main+0x39e>
          }
        }
        else
        {
          spiErrorCounter[i] = 0; // Reset error counter
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	4a13      	ldr	r2, [pc, #76]	@ (8000fa4 <main+0x26c>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	54d1      	strb	r1, [r2, r3]

          // check how many cells we should read from this register
          if (j == 4) // Last register
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d10c      	bne.n	8000f7c <main+0x244>
          {
            if (nrOfCells[i] == 10) // Last register and 10 cells
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <main+0x27c>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	2b0a      	cmp	r3, #10
 8000f6a:	d103      	bne.n	8000f74 <main+0x23c>
            {
              voltagesPerRegister = 2;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <main+0x280>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e006      	b.n	8000f82 <main+0x24a>
            }
            else // Last register and 11 cells
            {
              voltagesPerRegister = 3;
 8000f74:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <main+0x280>)
 8000f76:	2203      	movs	r2, #3
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e002      	b.n	8000f82 <main+0x24a>
            }
          }
          else // Not last register
          {
            voltagesPerRegister = 4;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <main+0x280>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	701a      	strb	r2, [r3, #0]
          }

          for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach cell (in a register)
 8000f82:	2300      	movs	r3, #0
 8000f84:	733b      	strb	r3, [r7, #12]
 8000f86:	e0a0      	b.n	80010ca <main+0x392>
 8000f88:	200004c0 	.word	0x200004c0
 8000f8c:	200004ba 	.word	0x200004ba
 8000f90:	200004a8 	.word	0x200004a8
 8000f94:	200004bc 	.word	0x200004bc
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	20000094 	.word	0x20000094
 8000fa0:	200004b0 	.word	0x200004b0
 8000fa4:	20000498 	.word	0x20000498
 8000fa8:	200004a4 	.word	0x200004a4
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	2000029c 	.word	0x2000029c
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	200004b8 	.word	0x200004b8
          {
            rawVoltage = (spiRxData[2*k+1] << 8) | spiRxData[2*k];
 8000fbc:	7b3b      	ldrb	r3, [r7, #12]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a6a      	ldr	r2, [pc, #424]	@ (800116c <main+0x434>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4966      	ldr	r1, [pc, #408]	@ (800116c <main+0x434>)
 8000fd2:	5ccb      	ldrb	r3, [r1, r3]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b64      	ldr	r3, [pc, #400]	@ (8001170 <main+0x438>)
 8000fde:	801a      	strh	r2, [r3, #0]
            rawVoltages[cellBaseNum[i] + j*4 + k] = rawVoltage;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4a64      	ldr	r2, [pc, #400]	@ (8001174 <main+0x43c>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	441a      	add	r2, r3
 8000fee:	7b3b      	ldrb	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8001170 <main+0x438>)
 8000ff4:	8811      	ldrh	r1, [r2, #0]
 8000ff6:	4a60      	ldr	r2, [pc, #384]	@ (8001178 <main+0x440>)
 8000ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

            // Check for OVP and UVP
            if (rawVoltage > OVP)
 8000ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8001170 <main+0x438>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001004:	4293      	cmp	r3, r2
 8001006:	d91f      	bls.n	8001048 <main+0x310>
            {
              ovpCounter[cellBaseNum[i] + j*4 + k]++;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	4a5a      	ldr	r2, [pc, #360]	@ (8001174 <main+0x43c>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	461a      	mov	r2, r3
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	441a      	add	r2, r3
 8001016:	7b3b      	ldrb	r3, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	4a58      	ldr	r2, [pc, #352]	@ (800117c <main+0x444>)
 800101c:	5cd2      	ldrb	r2, [r2, r3]
 800101e:	3201      	adds	r2, #1
 8001020:	b2d1      	uxtb	r1, r2
 8001022:	4a56      	ldr	r2, [pc, #344]	@ (800117c <main+0x444>)
 8001024:	54d1      	strb	r1, [r2, r3]
              if (ovpCounter[cellBaseNum[i] + j * 4 + k] >= OVP_COUNT_THRESHOLD)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	4a52      	ldr	r2, [pc, #328]	@ (8001174 <main+0x43c>)
 800102a:	5cd3      	ldrb	r3, [r2, r3]
 800102c:	461a      	mov	r2, r3
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	441a      	add	r2, r3
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	4a50      	ldr	r2, [pc, #320]	@ (800117c <main+0x444>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	2b09      	cmp	r3, #9
 800103e:	d90f      	bls.n	8001060 <main+0x328>
              {
                ovpError = 1; // Set OVP error
 8001040:	4b4f      	ldr	r3, [pc, #316]	@ (8001180 <main+0x448>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e00b      	b.n	8001060 <main+0x328>
              }
            }
            else
            {
              ovpCounter[cellBaseNum[i] + j*4 + k] = 0; // Reset counter
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	4a4a      	ldr	r2, [pc, #296]	@ (8001174 <main+0x43c>)
 800104c:	5cd3      	ldrb	r3, [r2, r3]
 800104e:	461a      	mov	r2, r3
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	441a      	add	r2, r3
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	4a48      	ldr	r2, [pc, #288]	@ (800117c <main+0x444>)
 800105c:	2100      	movs	r1, #0
 800105e:	54d1      	strb	r1, [r2, r3]
            }

            if (rawVoltage < UVP)
 8001060:	4b43      	ldr	r3, [pc, #268]	@ (8001170 <main+0x438>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001068:	4293      	cmp	r3, r2
 800106a:	d81f      	bhi.n	80010ac <main+0x374>
            {
              uvpCounter[cellBaseNum[i] + j*4 + k]++;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4a41      	ldr	r2, [pc, #260]	@ (8001174 <main+0x43c>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	461a      	mov	r2, r3
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	441a      	add	r2, r3
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	4a41      	ldr	r2, [pc, #260]	@ (8001184 <main+0x44c>)
 8001080:	5cd2      	ldrb	r2, [r2, r3]
 8001082:	3201      	adds	r2, #1
 8001084:	b2d1      	uxtb	r1, r2
 8001086:	4a3f      	ldr	r2, [pc, #252]	@ (8001184 <main+0x44c>)
 8001088:	54d1      	strb	r1, [r2, r3]
              if (uvpCounter[cellBaseNum[i] + j * 4 + k] >= UVP_COUNT_THRESHOLD)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	4a39      	ldr	r2, [pc, #228]	@ (8001174 <main+0x43c>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	461a      	mov	r2, r3
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	441a      	add	r2, r3
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	4a39      	ldr	r2, [pc, #228]	@ (8001184 <main+0x44c>)
 800109e:	5cd3      	ldrb	r3, [r2, r3]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	d90f      	bls.n	80010c4 <main+0x38c>
              {
                uvpError = 1; // Set UVP error
 80010a4:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <main+0x450>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e00b      	b.n	80010c4 <main+0x38c>
              }
            }
            else
            {
              uvpCounter[cellBaseNum[i] + j*4 + k] = 0; // Reset counter
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	4a31      	ldr	r2, [pc, #196]	@ (8001174 <main+0x43c>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	461a      	mov	r2, r3
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	441a      	add	r2, r3
 80010ba:	7b3b      	ldrb	r3, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	4a31      	ldr	r2, [pc, #196]	@ (8001184 <main+0x44c>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	54d1      	strb	r1, [r2, r3]
          for (uint8_t k = 0; k < voltagesPerRegister; k++) // foreach cell (in a register)
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	733b      	strb	r3, [r7, #12]
 80010ca:	4b30      	ldr	r3, [pc, #192]	@ (800118c <main+0x454>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	7b3a      	ldrb	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f4ff af73 	bcc.w	8000fbc <main+0x284>
      for (uint8_t j = 0; j < 4; j++) // foreach register (4 registers per slave)
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	3301      	adds	r3, #1
 80010da:	73bb      	strb	r3, [r7, #14]
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	f67f ae7b 	bls.w	8000dda <main+0xa2>
    for (uint8_t i = 0; i < 12; i++) // foreach slave (12)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	3301      	adds	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b0b      	cmp	r3, #11
 80010ee:	f67f ae71 	bls.w	8000dd4 <main+0x9c>


    }

    // Send AMS voltages
    if (cellOrTemp)
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <main+0x458>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f002 82e7 	beq.w	80036ca <main+0x2992>
    {
      switch (amsTxMessageCounter)
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <main+0x45c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b17      	cmp	r3, #23
 8001102:	f202 82e2 	bhi.w	80036ca <main+0x2992>
 8001106:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <main+0x3d4>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	08001199 	.word	0x08001199
 8001110:	08001335 	.word	0x08001335
 8001114:	080014b9 	.word	0x080014b9
 8001118:	08001655 	.word	0x08001655
 800111c:	080017a1 	.word	0x080017a1
 8001120:	0800193d 	.word	0x0800193d
 8001124:	08001ac1 	.word	0x08001ac1
 8001128:	08001c69 	.word	0x08001c69
 800112c:	08001db9 	.word	0x08001db9
 8001130:	08001f61 	.word	0x08001f61
 8001134:	080020f1 	.word	0x080020f1
 8001138:	08002299 	.word	0x08002299
 800113c:	080023e9 	.word	0x080023e9
 8001140:	08002591 	.word	0x08002591
 8001144:	08002721 	.word	0x08002721
 8001148:	080028c9 	.word	0x080028c9
 800114c:	08002a19 	.word	0x08002a19
 8001150:	08002bc1 	.word	0x08002bc1
 8001154:	08002d51 	.word	0x08002d51
 8001158:	08002ef7 	.word	0x08002ef7
 800115c:	08003049 	.word	0x08003049
 8001160:	080031ef 	.word	0x080031ef
 8001164:	08003379 	.word	0x08003379
 8001168:	0800351f 	.word	0x0800351f
 800116c:	200004b0 	.word	0x200004b0
 8001170:	200004be 	.word	0x200004be
 8001174:	2000000c 	.word	0x2000000c
 8001178:	2000029c 	.word	0x2000029c
 800117c:	20000398 	.word	0x20000398
 8001180:	20000416 	.word	0x20000416
 8001184:	20000418 	.word	0x20000418
 8001188:	20000496 	.word	0x20000496
 800118c:	200004b8 	.word	0x200004b8
 8001190:	200004a6 	.word	0x200004a6
 8001194:	200004a5 	.word	0x200004a5
      {
      case 0:
        can1_ams_s01_voltages_1.s01v01 = can1_ams_s01_voltages_1_s01v01_encode((float)rawVoltages[0] / 10000.0);
 8001198:	4bc1      	ldr	r3, [pc, #772]	@ (80014a0 <main+0x768>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a4:	ee17 0a90 	vmov	r0, s15
 80011a8:	f7ff f972 	bl	8000490 <__aeabi_f2d>
 80011ac:	a3ba      	add	r3, pc, #744	@ (adr r3, 8001498 <main+0x760>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f7ff faef 	bl	8000794 <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	ec43 2b17 	vmov	d7, r2, r3
 80011be:	eeb0 0a47 	vmov.f32	s0, s14
 80011c2:	eef0 0a67 	vmov.f32	s1, s15
 80011c6:	f004 ff73 	bl	80060b0 <can1_ams_s01_voltages_1_s01v01_encode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4bb5      	ldr	r3, [pc, #724]	@ (80014a4 <main+0x76c>)
 80011d0:	701a      	strb	r2, [r3, #0]
        can1_ams_s01_voltages_1.s01v02 = can1_ams_s01_voltages_1_s01v02_encode((float)rawVoltages[1] / 10000.0);
 80011d2:	4bb3      	ldr	r3, [pc, #716]	@ (80014a0 <main+0x768>)
 80011d4:	885b      	ldrh	r3, [r3, #2]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011de:	ee17 0a90 	vmov	r0, s15
 80011e2:	f7ff f955 	bl	8000490 <__aeabi_f2d>
 80011e6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001498 <main+0x760>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fad2 	bl	8000794 <__aeabi_ddiv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	ec43 2b17 	vmov	d7, r2, r3
 80011f8:	eeb0 0a47 	vmov.f32	s0, s14
 80011fc:	eef0 0a67 	vmov.f32	s1, s15
 8001200:	f004 ff82 	bl	8006108 <can1_ams_s01_voltages_1_s01v02_encode>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4ba6      	ldr	r3, [pc, #664]	@ (80014a4 <main+0x76c>)
 800120a:	705a      	strb	r2, [r3, #1]
        can1_ams_s01_voltages_1.s01v03 = can1_ams_s01_voltages_1_s01v03_encode((float)rawVoltages[2] / 10000.0);
 800120c:	4ba4      	ldr	r3, [pc, #656]	@ (80014a0 <main+0x768>)
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001218:	ee17 0a90 	vmov	r0, s15
 800121c:	f7ff f938 	bl	8000490 <__aeabi_f2d>
 8001220:	a39d      	add	r3, pc, #628	@ (adr r3, 8001498 <main+0x760>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fab5 	bl	8000794 <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	ec43 2b17 	vmov	d7, r2, r3
 8001232:	eeb0 0a47 	vmov.f32	s0, s14
 8001236:	eef0 0a67 	vmov.f32	s1, s15
 800123a:	f004 ff91 	bl	8006160 <can1_ams_s01_voltages_1_s01v03_encode>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	4b98      	ldr	r3, [pc, #608]	@ (80014a4 <main+0x76c>)
 8001244:	709a      	strb	r2, [r3, #2]
        can1_ams_s01_voltages_1.s01v04 = can1_ams_s01_voltages_1_s01v04_encode((float)rawVoltages[3] / 10000.0);
 8001246:	4b96      	ldr	r3, [pc, #600]	@ (80014a0 <main+0x768>)
 8001248:	88db      	ldrh	r3, [r3, #6]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001252:	ee17 0a90 	vmov	r0, s15
 8001256:	f7ff f91b 	bl	8000490 <__aeabi_f2d>
 800125a:	a38f      	add	r3, pc, #572	@ (adr r3, 8001498 <main+0x760>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fa98 	bl	8000794 <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	ec43 2b17 	vmov	d7, r2, r3
 800126c:	eeb0 0a47 	vmov.f32	s0, s14
 8001270:	eef0 0a67 	vmov.f32	s1, s15
 8001274:	f004 ffa0 	bl	80061b8 <can1_ams_s01_voltages_1_s01v04_encode>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b89      	ldr	r3, [pc, #548]	@ (80014a4 <main+0x76c>)
 800127e:	70da      	strb	r2, [r3, #3]
        can1_ams_s01_voltages_1.s01v05 = can1_ams_s01_voltages_1_s01v05_encode((float)rawVoltages[4] / 10000.0);
 8001280:	4b87      	ldr	r3, [pc, #540]	@ (80014a0 <main+0x768>)
 8001282:	891b      	ldrh	r3, [r3, #8]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128c:	ee17 0a90 	vmov	r0, s15
 8001290:	f7ff f8fe 	bl	8000490 <__aeabi_f2d>
 8001294:	a380      	add	r3, pc, #512	@ (adr r3, 8001498 <main+0x760>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff fa7b 	bl	8000794 <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	ec43 2b17 	vmov	d7, r2, r3
 80012a6:	eeb0 0a47 	vmov.f32	s0, s14
 80012aa:	eef0 0a67 	vmov.f32	s1, s15
 80012ae:	f004 ffaf 	bl	8006210 <can1_ams_s01_voltages_1_s01v05_encode>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b7b      	ldr	r3, [pc, #492]	@ (80014a4 <main+0x76c>)
 80012b8:	711a      	strb	r2, [r3, #4]
        can1_ams_s01_voltages_1.s01v06 = can1_ams_s01_voltages_1_s01v06_encode((float)rawVoltages[5] / 10000.0);
 80012ba:	4b79      	ldr	r3, [pc, #484]	@ (80014a0 <main+0x768>)
 80012bc:	895b      	ldrh	r3, [r3, #10]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c6:	ee17 0a90 	vmov	r0, s15
 80012ca:	f7ff f8e1 	bl	8000490 <__aeabi_f2d>
 80012ce:	a372      	add	r3, pc, #456	@ (adr r3, 8001498 <main+0x760>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff fa5e 	bl	8000794 <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ec43 2b17 	vmov	d7, r2, r3
 80012e0:	eeb0 0a47 	vmov.f32	s0, s14
 80012e4:	eef0 0a67 	vmov.f32	s1, s15
 80012e8:	f004 ffbe 	bl	8006268 <can1_ams_s01_voltages_1_s01v06_encode>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b6c      	ldr	r3, [pc, #432]	@ (80014a4 <main+0x76c>)
 80012f2:	715a      	strb	r2, [r3, #5]

        can1_ams_s01_voltages_1_pack(txData, &can1_ams_s01_voltages_1, CAN1_AMS_S01_VOLTAGES_1_LENGTH);
 80012f4:	2206      	movs	r2, #6
 80012f6:	496b      	ldr	r1, [pc, #428]	@ (80014a4 <main+0x76c>)
 80012f8:	486b      	ldr	r0, [pc, #428]	@ (80014a8 <main+0x770>)
 80012fa:	f004 fe5c 	bl	8005fb6 <can1_ams_s01_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S01_VOLTAGES_1_FRAME_ID;
 80012fe:	4b6b      	ldr	r3, [pc, #428]	@ (80014ac <main+0x774>)
 8001300:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001304:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S01_VOLTAGES_1_LENGTH;
 8001306:	4b69      	ldr	r3, [pc, #420]	@ (80014ac <main+0x774>)
 8001308:	2206      	movs	r2, #6
 800130a:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 800130c:	4b67      	ldr	r3, [pc, #412]	@ (80014ac <main+0x774>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8001312:	4b66      	ldr	r3, [pc, #408]	@ (80014ac <main+0x774>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8001318:	2300      	movs	r3, #0
 800131a:	4a63      	ldr	r2, [pc, #396]	@ (80014a8 <main+0x770>)
 800131c:	4963      	ldr	r1, [pc, #396]	@ (80014ac <main+0x774>)
 800131e:	4864      	ldr	r0, [pc, #400]	@ (80014b0 <main+0x778>)
 8001320:	f002 ffbd 	bl	800429e <HAL_CAN_AddTxMessage>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	f002 818f 	beq.w	800364a <main+0x2912>
          Error_Handler();
 800132c:	f002 fca2 	bl	8003c74 <Error_Handler>
        break;
 8001330:	f002 b98b 	b.w	800364a <main+0x2912>

      case 1:
        can1_ams_s01_voltages_2.s01v07 = can1_ams_s01_voltages_2_s01v07_encode((float) rawVoltages[6] / 10000.0);
 8001334:	4b5a      	ldr	r3, [pc, #360]	@ (80014a0 <main+0x768>)
 8001336:	899b      	ldrh	r3, [r3, #12]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001340:	ee17 0a90 	vmov	r0, s15
 8001344:	f7ff f8a4 	bl	8000490 <__aeabi_f2d>
 8001348:	a353      	add	r3, pc, #332	@ (adr r3, 8001498 <main+0x760>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff fa21 	bl	8000794 <__aeabi_ddiv>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	ec43 2b17 	vmov	d7, r2, r3
 800135a:	eeb0 0a47 	vmov.f32	s0, s14
 800135e:	eef0 0a67 	vmov.f32	s1, s15
 8001362:	f005 f815 	bl	8006390 <can1_ams_s01_voltages_2_s01v07_encode>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b52      	ldr	r3, [pc, #328]	@ (80014b4 <main+0x77c>)
 800136c:	701a      	strb	r2, [r3, #0]
        can1_ams_s01_voltages_2.s01v08 = can1_ams_s01_voltages_2_s01v08_encode((float) rawVoltages[7] / 10000.0);
 800136e:	4b4c      	ldr	r3, [pc, #304]	@ (80014a0 <main+0x768>)
 8001370:	89db      	ldrh	r3, [r3, #14]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800137a:	ee17 0a90 	vmov	r0, s15
 800137e:	f7ff f887 	bl	8000490 <__aeabi_f2d>
 8001382:	a345      	add	r3, pc, #276	@ (adr r3, 8001498 <main+0x760>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff fa04 	bl	8000794 <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	ec43 2b17 	vmov	d7, r2, r3
 8001394:	eeb0 0a47 	vmov.f32	s0, s14
 8001398:	eef0 0a67 	vmov.f32	s1, s15
 800139c:	f005 f824 	bl	80063e8 <can1_ams_s01_voltages_2_s01v08_encode>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b43      	ldr	r3, [pc, #268]	@ (80014b4 <main+0x77c>)
 80013a6:	705a      	strb	r2, [r3, #1]
        can1_ams_s01_voltages_2.s01v09 = can1_ams_s01_voltages_2_s01v09_encode((float) rawVoltages[8] / 10000.0);
 80013a8:	4b3d      	ldr	r3, [pc, #244]	@ (80014a0 <main+0x768>)
 80013aa:	8a1b      	ldrh	r3, [r3, #16]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013b4:	ee17 0a90 	vmov	r0, s15
 80013b8:	f7ff f86a 	bl	8000490 <__aeabi_f2d>
 80013bc:	a336      	add	r3, pc, #216	@ (adr r3, 8001498 <main+0x760>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f9e7 	bl	8000794 <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	ec43 2b17 	vmov	d7, r2, r3
 80013ce:	eeb0 0a47 	vmov.f32	s0, s14
 80013d2:	eef0 0a67 	vmov.f32	s1, s15
 80013d6:	f005 f833 	bl	8006440 <can1_ams_s01_voltages_2_s01v09_encode>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <main+0x77c>)
 80013e0:	709a      	strb	r2, [r3, #2]
        can1_ams_s01_voltages_2.s01v10 = can1_ams_s01_voltages_2_s01v10_encode((float) rawVoltages[9] / 10000.0);
 80013e2:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <main+0x768>)
 80013e4:	8a5b      	ldrh	r3, [r3, #18]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ee:	ee17 0a90 	vmov	r0, s15
 80013f2:	f7ff f84d 	bl	8000490 <__aeabi_f2d>
 80013f6:	a328      	add	r3, pc, #160	@ (adr r3, 8001498 <main+0x760>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f9ca 	bl	8000794 <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	ec43 2b17 	vmov	d7, r2, r3
 8001408:	eeb0 0a47 	vmov.f32	s0, s14
 800140c:	eef0 0a67 	vmov.f32	s1, s15
 8001410:	f005 f842 	bl	8006498 <can1_ams_s01_voltages_2_s01v10_encode>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <main+0x77c>)
 800141a:	70da      	strb	r2, [r3, #3]
        can1_ams_s01_voltages_2.s01v11 = can1_ams_s01_voltages_2_s01v11_encode((float) rawVoltages[10] / 10000.0);
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <main+0x768>)
 800141e:	8a9b      	ldrh	r3, [r3, #20]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	ee17 0a90 	vmov	r0, s15
 800142c:	f7ff f830 	bl	8000490 <__aeabi_f2d>
 8001430:	a319      	add	r3, pc, #100	@ (adr r3, 8001498 <main+0x760>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f9ad 	bl	8000794 <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	ec43 2b17 	vmov	d7, r2, r3
 8001442:	eeb0 0a47 	vmov.f32	s0, s14
 8001446:	eef0 0a67 	vmov.f32	s1, s15
 800144a:	f005 f851 	bl	80064f0 <can1_ams_s01_voltages_2_s01v11_encode>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <main+0x77c>)
 8001454:	711a      	strb	r2, [r3, #4]

        can1_ams_s01_voltages_2_pack(txData, &can1_ams_s01_voltages_2, CAN1_AMS_S01_VOLTAGES_2_LENGTH);
 8001456:	2205      	movs	r2, #5
 8001458:	4916      	ldr	r1, [pc, #88]	@ (80014b4 <main+0x77c>)
 800145a:	4813      	ldr	r0, [pc, #76]	@ (80014a8 <main+0x770>)
 800145c:	f004 ff2e 	bl	80062bc <can1_ams_s01_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S01_VOLTAGES_2_FRAME_ID;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <main+0x774>)
 8001462:	f240 2259 	movw	r2, #601	@ 0x259
 8001466:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S01_VOLTAGES_2_LENGTH;
 8001468:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <main+0x774>)
 800146a:	2205      	movs	r2, #5
 800146c:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <main+0x774>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8001474:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <main+0x774>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800147a:	2300      	movs	r3, #0
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <main+0x770>)
 800147e:	490b      	ldr	r1, [pc, #44]	@ (80014ac <main+0x774>)
 8001480:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <main+0x778>)
 8001482:	f002 ff0c 	bl	800429e <HAL_CAN_AddTxMessage>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f002 80e0 	beq.w	800364e <main+0x2916>
          Error_Handler();
 800148e:	f002 fbf1 	bl	8003c74 <Error_Handler>
        break;
 8001492:	f002 b8dc 	b.w	800364e <main+0x2916>
 8001496:	bf00      	nop
 8001498:	00000000 	.word	0x00000000
 800149c:	40c38800 	.word	0x40c38800
 80014a0:	2000029c 	.word	0x2000029c
 80014a4:	20000168 	.word	0x20000168
 80014a8:	20000120 	.word	0x20000120
 80014ac:	200000ec 	.word	0x200000ec
 80014b0:	20000044 	.word	0x20000044
 80014b4:	20000170 	.word	0x20000170

      case 2:
        can1_ams_s02_voltages_1.s02v01 = can1_ams_s02_voltages_1_s02v01_encode((float) rawVoltages[11] / 10000.0);
 80014b8:	4bb3      	ldr	r3, [pc, #716]	@ (8001788 <main+0xa50>)
 80014ba:	8adb      	ldrh	r3, [r3, #22]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c4:	ee17 0a90 	vmov	r0, s15
 80014c8:	f7fe ffe2 	bl	8000490 <__aeabi_f2d>
 80014cc:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001780 <main+0xa48>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f95f 	bl	8000794 <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	ec43 2b17 	vmov	d7, r2, r3
 80014de:	eeb0 0a47 	vmov.f32	s0, s14
 80014e2:	eef0 0a67 	vmov.f32	s1, s15
 80014e6:	f005 f8a7 	bl	8006638 <can1_ams_s02_voltages_1_s02v01_encode>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4ba7      	ldr	r3, [pc, #668]	@ (800178c <main+0xa54>)
 80014f0:	701a      	strb	r2, [r3, #0]
        can1_ams_s02_voltages_1.s02v02 = can1_ams_s02_voltages_1_s02v02_encode((float) rawVoltages[12] / 10000.0);
 80014f2:	4ba5      	ldr	r3, [pc, #660]	@ (8001788 <main+0xa50>)
 80014f4:	8b1b      	ldrh	r3, [r3, #24]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fe:	ee17 0a90 	vmov	r0, s15
 8001502:	f7fe ffc5 	bl	8000490 <__aeabi_f2d>
 8001506:	a39e      	add	r3, pc, #632	@ (adr r3, 8001780 <main+0xa48>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f942 	bl	8000794 <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	ec43 2b17 	vmov	d7, r2, r3
 8001518:	eeb0 0a47 	vmov.f32	s0, s14
 800151c:	eef0 0a67 	vmov.f32	s1, s15
 8001520:	f005 f8b6 	bl	8006690 <can1_ams_s02_voltages_1_s02v02_encode>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b98      	ldr	r3, [pc, #608]	@ (800178c <main+0xa54>)
 800152a:	705a      	strb	r2, [r3, #1]
        can1_ams_s02_voltages_1.s02v03 = can1_ams_s02_voltages_1_s02v03_encode((float) rawVoltages[13] / 10000.0);
 800152c:	4b96      	ldr	r3, [pc, #600]	@ (8001788 <main+0xa50>)
 800152e:	8b5b      	ldrh	r3, [r3, #26]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001538:	ee17 0a90 	vmov	r0, s15
 800153c:	f7fe ffa8 	bl	8000490 <__aeabi_f2d>
 8001540:	a38f      	add	r3, pc, #572	@ (adr r3, 8001780 <main+0xa48>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f925 	bl	8000794 <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	ec43 2b17 	vmov	d7, r2, r3
 8001552:	eeb0 0a47 	vmov.f32	s0, s14
 8001556:	eef0 0a67 	vmov.f32	s1, s15
 800155a:	f005 f8c5 	bl	80066e8 <can1_ams_s02_voltages_1_s02v03_encode>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b8a      	ldr	r3, [pc, #552]	@ (800178c <main+0xa54>)
 8001564:	709a      	strb	r2, [r3, #2]
        can1_ams_s02_voltages_1.s02v04 = can1_ams_s02_voltages_1_s02v04_encode((float) rawVoltages[14] / 10000.0);
 8001566:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <main+0xa50>)
 8001568:	8b9b      	ldrh	r3, [r3, #28]
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001572:	ee17 0a90 	vmov	r0, s15
 8001576:	f7fe ff8b 	bl	8000490 <__aeabi_f2d>
 800157a:	a381      	add	r3, pc, #516	@ (adr r3, 8001780 <main+0xa48>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f908 	bl	8000794 <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	ec43 2b17 	vmov	d7, r2, r3
 800158c:	eeb0 0a47 	vmov.f32	s0, s14
 8001590:	eef0 0a67 	vmov.f32	s1, s15
 8001594:	f005 f8d4 	bl	8006740 <can1_ams_s02_voltages_1_s02v04_encode>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b7b      	ldr	r3, [pc, #492]	@ (800178c <main+0xa54>)
 800159e:	70da      	strb	r2, [r3, #3]
        can1_ams_s02_voltages_1.s02v05 = can1_ams_s02_voltages_1_s02v05_encode((float) rawVoltages[15] / 10000.0);
 80015a0:	4b79      	ldr	r3, [pc, #484]	@ (8001788 <main+0xa50>)
 80015a2:	8bdb      	ldrh	r3, [r3, #30]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ac:	ee17 0a90 	vmov	r0, s15
 80015b0:	f7fe ff6e 	bl	8000490 <__aeabi_f2d>
 80015b4:	a372      	add	r3, pc, #456	@ (adr r3, 8001780 <main+0xa48>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f8eb 	bl	8000794 <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	ec43 2b17 	vmov	d7, r2, r3
 80015c6:	eeb0 0a47 	vmov.f32	s0, s14
 80015ca:	eef0 0a67 	vmov.f32	s1, s15
 80015ce:	f005 f8e3 	bl	8006798 <can1_ams_s02_voltages_1_s02v05_encode>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b6d      	ldr	r3, [pc, #436]	@ (800178c <main+0xa54>)
 80015d8:	711a      	strb	r2, [r3, #4]
        can1_ams_s02_voltages_1.s02v06 = can1_ams_s02_voltages_1_s02v06_encode((float) rawVoltages[16] / 10000.0);
 80015da:	4b6b      	ldr	r3, [pc, #428]	@ (8001788 <main+0xa50>)
 80015dc:	8c1b      	ldrh	r3, [r3, #32]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e6:	ee17 0a90 	vmov	r0, s15
 80015ea:	f7fe ff51 	bl	8000490 <__aeabi_f2d>
 80015ee:	a364      	add	r3, pc, #400	@ (adr r3, 8001780 <main+0xa48>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7ff f8ce 	bl	8000794 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	ec43 2b17 	vmov	d7, r2, r3
 8001600:	eeb0 0a47 	vmov.f32	s0, s14
 8001604:	eef0 0a67 	vmov.f32	s1, s15
 8001608:	f005 f8f2 	bl	80067f0 <can1_ams_s02_voltages_1_s02v06_encode>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b5e      	ldr	r3, [pc, #376]	@ (800178c <main+0xa54>)
 8001612:	715a      	strb	r2, [r3, #5]

        can1_ams_s02_voltages_1_pack(txData, &can1_ams_s02_voltages_1, CAN1_AMS_S02_VOLTAGES_1_LENGTH);
 8001614:	2206      	movs	r2, #6
 8001616:	495d      	ldr	r1, [pc, #372]	@ (800178c <main+0xa54>)
 8001618:	485d      	ldr	r0, [pc, #372]	@ (8001790 <main+0xa58>)
 800161a:	f004 ff93 	bl	8006544 <can1_ams_s02_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S02_VOLTAGES_1_FRAME_ID;
 800161e:	4b5d      	ldr	r3, [pc, #372]	@ (8001794 <main+0xa5c>)
 8001620:	f240 225a 	movw	r2, #602	@ 0x25a
 8001624:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S02_VOLTAGES_1_LENGTH;
 8001626:	4b5b      	ldr	r3, [pc, #364]	@ (8001794 <main+0xa5c>)
 8001628:	2206      	movs	r2, #6
 800162a:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 800162c:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <main+0xa5c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8001632:	4b58      	ldr	r3, [pc, #352]	@ (8001794 <main+0xa5c>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8001638:	2300      	movs	r3, #0
 800163a:	4a55      	ldr	r2, [pc, #340]	@ (8001790 <main+0xa58>)
 800163c:	4955      	ldr	r1, [pc, #340]	@ (8001794 <main+0xa5c>)
 800163e:	4856      	ldr	r0, [pc, #344]	@ (8001798 <main+0xa60>)
 8001640:	f002 fe2d 	bl	800429e <HAL_CAN_AddTxMessage>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	f002 8003 	beq.w	8003652 <main+0x291a>
          Error_Handler();
 800164c:	f002 fb12 	bl	8003c74 <Error_Handler>
        break;
 8001650:	f001 bfff 	b.w	8003652 <main+0x291a>

      case 3:
        can1_ams_s02_voltages_2.s02v07 = can1_ams_s02_voltages_2_s02v07_encode((float) rawVoltages[17] / 10000.0);
 8001654:	4b4c      	ldr	r3, [pc, #304]	@ (8001788 <main+0xa50>)
 8001656:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001660:	ee17 0a90 	vmov	r0, s15
 8001664:	f7fe ff14 	bl	8000490 <__aeabi_f2d>
 8001668:	a345      	add	r3, pc, #276	@ (adr r3, 8001780 <main+0xa48>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7ff f891 	bl	8000794 <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ec43 2b17 	vmov	d7, r2, r3
 800167a:	eeb0 0a47 	vmov.f32	s0, s14
 800167e:	eef0 0a67 	vmov.f32	s1, s15
 8001682:	f005 f949 	bl	8006918 <can1_ams_s02_voltages_2_s02v07_encode>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b44      	ldr	r3, [pc, #272]	@ (800179c <main+0xa64>)
 800168c:	701a      	strb	r2, [r3, #0]
        can1_ams_s02_voltages_2.s02v08 = can1_ams_s02_voltages_2_s02v08_encode((float) rawVoltages[18] / 10000.0);
 800168e:	4b3e      	ldr	r3, [pc, #248]	@ (8001788 <main+0xa50>)
 8001690:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800169a:	ee17 0a90 	vmov	r0, s15
 800169e:	f7fe fef7 	bl	8000490 <__aeabi_f2d>
 80016a2:	a337      	add	r3, pc, #220	@ (adr r3, 8001780 <main+0xa48>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff f874 	bl	8000794 <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f005 f958 	bl	8006970 <can1_ams_s02_voltages_2_s02v08_encode>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b35      	ldr	r3, [pc, #212]	@ (800179c <main+0xa64>)
 80016c6:	705a      	strb	r2, [r3, #1]
        can1_ams_s02_voltages_2.s02v09 = can1_ams_s02_voltages_2_s02v09_encode((float) rawVoltages[19] / 10000.0);
 80016c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <main+0xa50>)
 80016ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d4:	ee17 0a90 	vmov	r0, s15
 80016d8:	f7fe feda 	bl	8000490 <__aeabi_f2d>
 80016dc:	a328      	add	r3, pc, #160	@ (adr r3, 8001780 <main+0xa48>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f857 	bl	8000794 <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	ec43 2b17 	vmov	d7, r2, r3
 80016ee:	eeb0 0a47 	vmov.f32	s0, s14
 80016f2:	eef0 0a67 	vmov.f32	s1, s15
 80016f6:	f005 f967 	bl	80069c8 <can1_ams_s02_voltages_2_s02v09_encode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <main+0xa64>)
 8001700:	709a      	strb	r2, [r3, #2]
        can1_ams_s02_voltages_2.s02v10 = can1_ams_s02_voltages_2_s02v10_encode((float) rawVoltages[20] / 10000.0);
 8001702:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <main+0xa50>)
 8001704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170e:	ee17 0a90 	vmov	r0, s15
 8001712:	f7fe febd 	bl	8000490 <__aeabi_f2d>
 8001716:	a31a      	add	r3, pc, #104	@ (adr r3, 8001780 <main+0xa48>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7ff f83a 	bl	8000794 <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	ec43 2b17 	vmov	d7, r2, r3
 8001728:	eeb0 0a47 	vmov.f32	s0, s14
 800172c:	eef0 0a67 	vmov.f32	s1, s15
 8001730:	f005 f976 	bl	8006a20 <can1_ams_s02_voltages_2_s02v10_encode>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <main+0xa64>)
 800173a:	70da      	strb	r2, [r3, #3]

        can1_ams_s02_voltages_2_pack(txData, &can1_ams_s02_voltages_2, CAN1_AMS_S02_VOLTAGES_2_LENGTH);
 800173c:	2205      	movs	r2, #5
 800173e:	4917      	ldr	r1, [pc, #92]	@ (800179c <main+0xa64>)
 8001740:	4813      	ldr	r0, [pc, #76]	@ (8001790 <main+0xa58>)
 8001742:	f005 f87f 	bl	8006844 <can1_ams_s02_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S02_VOLTAGES_2_FRAME_ID;
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <main+0xa5c>)
 8001748:	f240 225b 	movw	r2, #603	@ 0x25b
 800174c:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S02_VOLTAGES_2_LENGTH;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <main+0xa5c>)
 8001750:	2205      	movs	r2, #5
 8001752:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <main+0xa5c>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <main+0xa5c>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8001760:	2300      	movs	r3, #0
 8001762:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <main+0xa58>)
 8001764:	490b      	ldr	r1, [pc, #44]	@ (8001794 <main+0xa5c>)
 8001766:	480c      	ldr	r0, [pc, #48]	@ (8001798 <main+0xa60>)
 8001768:	f002 fd99 	bl	800429e <HAL_CAN_AddTxMessage>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f001 8771 	beq.w	8003656 <main+0x291e>
          Error_Handler();
 8001774:	f002 fa7e 	bl	8003c74 <Error_Handler>
        break;
 8001778:	f001 bf6d 	b.w	8003656 <main+0x291e>
 800177c:	f3af 8000 	nop.w
 8001780:	00000000 	.word	0x00000000
 8001784:	40c38800 	.word	0x40c38800
 8001788:	2000029c 	.word	0x2000029c
 800178c:	20000178 	.word	0x20000178
 8001790:	20000120 	.word	0x20000120
 8001794:	200000ec 	.word	0x200000ec
 8001798:	20000044 	.word	0x20000044
 800179c:	20000180 	.word	0x20000180

      case 4:
        can1_ams_s03_voltages_1.s03v01 = can1_ams_s03_voltages_1_s03v01_encode((float) rawVoltages[21] / 10000.0);
 80017a0:	4bc1      	ldr	r3, [pc, #772]	@ (8001aa8 <main+0xd70>)
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ac:	ee17 0a90 	vmov	r0, s15
 80017b0:	f7fe fe6e 	bl	8000490 <__aeabi_f2d>
 80017b4:	a3ba      	add	r3, pc, #744	@ (adr r3, 8001aa0 <main+0xd68>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe ffeb 	bl	8000794 <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	ec43 2b17 	vmov	d7, r2, r3
 80017c6:	eeb0 0a47 	vmov.f32	s0, s14
 80017ca:	eef0 0a67 	vmov.f32	s1, s15
 80017ce:	f005 f9cb 	bl	8006b68 <can1_ams_s03_voltages_1_s03v01_encode>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4bb5      	ldr	r3, [pc, #724]	@ (8001aac <main+0xd74>)
 80017d8:	701a      	strb	r2, [r3, #0]
        can1_ams_s03_voltages_1.s03v02 = can1_ams_s03_voltages_1_s03v02_encode((float) rawVoltages[22] / 10000.0);
 80017da:	4bb3      	ldr	r3, [pc, #716]	@ (8001aa8 <main+0xd70>)
 80017dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e6:	ee17 0a90 	vmov	r0, s15
 80017ea:	f7fe fe51 	bl	8000490 <__aeabi_f2d>
 80017ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001aa0 <main+0xd68>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe ffce 	bl	8000794 <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	ec43 2b17 	vmov	d7, r2, r3
 8001800:	eeb0 0a47 	vmov.f32	s0, s14
 8001804:	eef0 0a67 	vmov.f32	s1, s15
 8001808:	f005 f9da 	bl	8006bc0 <can1_ams_s03_voltages_1_s03v02_encode>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	4ba6      	ldr	r3, [pc, #664]	@ (8001aac <main+0xd74>)
 8001812:	705a      	strb	r2, [r3, #1]
        can1_ams_s03_voltages_1.s03v03 = can1_ams_s03_voltages_1_s03v03_encode((float) rawVoltages[23] / 10000.0);
 8001814:	4ba4      	ldr	r3, [pc, #656]	@ (8001aa8 <main+0xd70>)
 8001816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001820:	ee17 0a90 	vmov	r0, s15
 8001824:	f7fe fe34 	bl	8000490 <__aeabi_f2d>
 8001828:	a39d      	add	r3, pc, #628	@ (adr r3, 8001aa0 <main+0xd68>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe ffb1 	bl	8000794 <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b17 	vmov	d7, r2, r3
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	f005 f9e9 	bl	8006c18 <can1_ams_s03_voltages_1_s03v03_encode>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b98      	ldr	r3, [pc, #608]	@ (8001aac <main+0xd74>)
 800184c:	709a      	strb	r2, [r3, #2]
        can1_ams_s03_voltages_1.s03v04 = can1_ams_s03_voltages_1_s03v04_encode((float) rawVoltages[24] / 10000.0);
 800184e:	4b96      	ldr	r3, [pc, #600]	@ (8001aa8 <main+0xd70>)
 8001850:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185a:	ee17 0a90 	vmov	r0, s15
 800185e:	f7fe fe17 	bl	8000490 <__aeabi_f2d>
 8001862:	a38f      	add	r3, pc, #572	@ (adr r3, 8001aa0 <main+0xd68>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe ff94 	bl	8000794 <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	ec43 2b17 	vmov	d7, r2, r3
 8001874:	eeb0 0a47 	vmov.f32	s0, s14
 8001878:	eef0 0a67 	vmov.f32	s1, s15
 800187c:	f005 f9f8 	bl	8006c70 <can1_ams_s03_voltages_1_s03v04_encode>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	4b89      	ldr	r3, [pc, #548]	@ (8001aac <main+0xd74>)
 8001886:	70da      	strb	r2, [r3, #3]
        can1_ams_s03_voltages_1.s03v05 = can1_ams_s03_voltages_1_s03v05_encode((float) rawVoltages[25] / 10000.0);
 8001888:	4b87      	ldr	r3, [pc, #540]	@ (8001aa8 <main+0xd70>)
 800188a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001894:	ee17 0a90 	vmov	r0, s15
 8001898:	f7fe fdfa 	bl	8000490 <__aeabi_f2d>
 800189c:	a380      	add	r3, pc, #512	@ (adr r3, 8001aa0 <main+0xd68>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe ff77 	bl	8000794 <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ec43 2b17 	vmov	d7, r2, r3
 80018ae:	eeb0 0a47 	vmov.f32	s0, s14
 80018b2:	eef0 0a67 	vmov.f32	s1, s15
 80018b6:	f005 fa07 	bl	8006cc8 <can1_ams_s03_voltages_1_s03v05_encode>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4b7b      	ldr	r3, [pc, #492]	@ (8001aac <main+0xd74>)
 80018c0:	711a      	strb	r2, [r3, #4]
        can1_ams_s03_voltages_1.s03v06 = can1_ams_s03_voltages_1_s03v06_encode((float) rawVoltages[26] / 10000.0);
 80018c2:	4b79      	ldr	r3, [pc, #484]	@ (8001aa8 <main+0xd70>)
 80018c4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ce:	ee17 0a90 	vmov	r0, s15
 80018d2:	f7fe fddd 	bl	8000490 <__aeabi_f2d>
 80018d6:	a372      	add	r3, pc, #456	@ (adr r3, 8001aa0 <main+0xd68>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe ff5a 	bl	8000794 <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	ec43 2b17 	vmov	d7, r2, r3
 80018e8:	eeb0 0a47 	vmov.f32	s0, s14
 80018ec:	eef0 0a67 	vmov.f32	s1, s15
 80018f0:	f005 fa16 	bl	8006d20 <can1_ams_s03_voltages_1_s03v06_encode>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b6c      	ldr	r3, [pc, #432]	@ (8001aac <main+0xd74>)
 80018fa:	715a      	strb	r2, [r3, #5]

        can1_ams_s03_voltages_1_pack(txData, &can1_ams_s03_voltages_1, CAN1_AMS_S03_VOLTAGES_1_LENGTH);
 80018fc:	2206      	movs	r2, #6
 80018fe:	496b      	ldr	r1, [pc, #428]	@ (8001aac <main+0xd74>)
 8001900:	486b      	ldr	r0, [pc, #428]	@ (8001ab0 <main+0xd78>)
 8001902:	f005 f8b7 	bl	8006a74 <can1_ams_s03_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S03_VOLTAGES_1_FRAME_ID;
 8001906:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab4 <main+0xd7c>)
 8001908:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 800190c:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S03_VOLTAGES_1_LENGTH;
 800190e:	4b69      	ldr	r3, [pc, #420]	@ (8001ab4 <main+0xd7c>)
 8001910:	2206      	movs	r2, #6
 8001912:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8001914:	4b67      	ldr	r3, [pc, #412]	@ (8001ab4 <main+0xd7c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 800191a:	4b66      	ldr	r3, [pc, #408]	@ (8001ab4 <main+0xd7c>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8001920:	2300      	movs	r3, #0
 8001922:	4a63      	ldr	r2, [pc, #396]	@ (8001ab0 <main+0xd78>)
 8001924:	4963      	ldr	r1, [pc, #396]	@ (8001ab4 <main+0xd7c>)
 8001926:	4864      	ldr	r0, [pc, #400]	@ (8001ab8 <main+0xd80>)
 8001928:	f002 fcb9 	bl	800429e <HAL_CAN_AddTxMessage>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	f001 8693 	beq.w	800365a <main+0x2922>
          Error_Handler();
 8001934:	f002 f99e 	bl	8003c74 <Error_Handler>
        break;
 8001938:	f001 be8f 	b.w	800365a <main+0x2922>

      case 5:
        can1_ams_s03_voltages_2.s03v07 = can1_ams_s03_voltages_2_s03v07_encode((float) rawVoltages[27] / 10000.0);
 800193c:	4b5a      	ldr	r3, [pc, #360]	@ (8001aa8 <main+0xd70>)
 800193e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001948:	ee17 0a90 	vmov	r0, s15
 800194c:	f7fe fda0 	bl	8000490 <__aeabi_f2d>
 8001950:	a353      	add	r3, pc, #332	@ (adr r3, 8001aa0 <main+0xd68>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe ff1d 	bl	8000794 <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	ec43 2b17 	vmov	d7, r2, r3
 8001962:	eeb0 0a47 	vmov.f32	s0, s14
 8001966:	eef0 0a67 	vmov.f32	s1, s15
 800196a:	f005 fa6d 	bl	8006e48 <can1_ams_s03_voltages_2_s03v07_encode>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	4b52      	ldr	r3, [pc, #328]	@ (8001abc <main+0xd84>)
 8001974:	701a      	strb	r2, [r3, #0]
        can1_ams_s03_voltages_2.s03v08 = can1_ams_s03_voltages_2_s03v08_encode((float) rawVoltages[28] / 10000.0);
 8001976:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa8 <main+0xd70>)
 8001978:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001982:	ee17 0a90 	vmov	r0, s15
 8001986:	f7fe fd83 	bl	8000490 <__aeabi_f2d>
 800198a:	a345      	add	r3, pc, #276	@ (adr r3, 8001aa0 <main+0xd68>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe ff00 	bl	8000794 <__aeabi_ddiv>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	ec43 2b17 	vmov	d7, r2, r3
 800199c:	eeb0 0a47 	vmov.f32	s0, s14
 80019a0:	eef0 0a67 	vmov.f32	s1, s15
 80019a4:	f005 fa7c 	bl	8006ea0 <can1_ams_s03_voltages_2_s03v08_encode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b43      	ldr	r3, [pc, #268]	@ (8001abc <main+0xd84>)
 80019ae:	705a      	strb	r2, [r3, #1]
        can1_ams_s03_voltages_2.s03v09 = can1_ams_s03_voltages_2_s03v09_encode((float) rawVoltages[29] / 10000.0);
 80019b0:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa8 <main+0xd70>)
 80019b2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019bc:	ee17 0a90 	vmov	r0, s15
 80019c0:	f7fe fd66 	bl	8000490 <__aeabi_f2d>
 80019c4:	a336      	add	r3, pc, #216	@ (adr r3, 8001aa0 <main+0xd68>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fee3 	bl	8000794 <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ec43 2b17 	vmov	d7, r2, r3
 80019d6:	eeb0 0a47 	vmov.f32	s0, s14
 80019da:	eef0 0a67 	vmov.f32	s1, s15
 80019de:	f005 fa8b 	bl	8006ef8 <can1_ams_s03_voltages_2_s03v09_encode>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b35      	ldr	r3, [pc, #212]	@ (8001abc <main+0xd84>)
 80019e8:	709a      	strb	r2, [r3, #2]
        can1_ams_s03_voltages_2.s03v10 = can1_ams_s03_voltages_2_s03v10_encode((float) rawVoltages[30] / 10000.0);
 80019ea:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa8 <main+0xd70>)
 80019ec:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f6:	ee17 0a90 	vmov	r0, s15
 80019fa:	f7fe fd49 	bl	8000490 <__aeabi_f2d>
 80019fe:	a328      	add	r3, pc, #160	@ (adr r3, 8001aa0 <main+0xd68>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fec6 	bl	8000794 <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	ec43 2b17 	vmov	d7, r2, r3
 8001a10:	eeb0 0a47 	vmov.f32	s0, s14
 8001a14:	eef0 0a67 	vmov.f32	s1, s15
 8001a18:	f005 fa9a 	bl	8006f50 <can1_ams_s03_voltages_2_s03v10_encode>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <main+0xd84>)
 8001a22:	70da      	strb	r2, [r3, #3]
        can1_ams_s03_voltages_2.s03v11 = can1_ams_s03_voltages_2_s03v11_encode((float) rawVoltages[31] / 10000.0);
 8001a24:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <main+0xd70>)
 8001a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a30:	ee17 0a90 	vmov	r0, s15
 8001a34:	f7fe fd2c 	bl	8000490 <__aeabi_f2d>
 8001a38:	a319      	add	r3, pc, #100	@ (adr r3, 8001aa0 <main+0xd68>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fea9 	bl	8000794 <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	ec43 2b17 	vmov	d7, r2, r3
 8001a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a4e:	eef0 0a67 	vmov.f32	s1, s15
 8001a52:	f005 faa9 	bl	8006fa8 <can1_ams_s03_voltages_2_s03v11_encode>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <main+0xd84>)
 8001a5c:	711a      	strb	r2, [r3, #4]

        can1_ams_s03_voltages_2_pack(txData, &can1_ams_s03_voltages_2, CAN1_AMS_S03_VOLTAGES_2_LENGTH);
 8001a5e:	2205      	movs	r2, #5
 8001a60:	4916      	ldr	r1, [pc, #88]	@ (8001abc <main+0xd84>)
 8001a62:	4813      	ldr	r0, [pc, #76]	@ (8001ab0 <main+0xd78>)
 8001a64:	f005 f986 	bl	8006d74 <can1_ams_s03_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S03_VOLTAGES_2_FRAME_ID;
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <main+0xd7c>)
 8001a6a:	f240 225d 	movw	r2, #605	@ 0x25d
 8001a6e:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S03_VOLTAGES_2_LENGTH;
 8001a70:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <main+0xd7c>)
 8001a72:	2205      	movs	r2, #5
 8001a74:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <main+0xd7c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <main+0xd7c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8001a82:	2300      	movs	r3, #0
 8001a84:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <main+0xd78>)
 8001a86:	490b      	ldr	r1, [pc, #44]	@ (8001ab4 <main+0xd7c>)
 8001a88:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <main+0xd80>)
 8001a8a:	f002 fc08 	bl	800429e <HAL_CAN_AddTxMessage>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f001 85e4 	beq.w	800365e <main+0x2926>
          Error_Handler();
 8001a96:	f002 f8ed 	bl	8003c74 <Error_Handler>
        break;
 8001a9a:	f001 bde0 	b.w	800365e <main+0x2926>
 8001a9e:	bf00      	nop
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	40c38800 	.word	0x40c38800
 8001aa8:	2000029c 	.word	0x2000029c
 8001aac:	20000188 	.word	0x20000188
 8001ab0:	20000120 	.word	0x20000120
 8001ab4:	200000ec 	.word	0x200000ec
 8001ab8:	20000044 	.word	0x20000044
 8001abc:	20000190 	.word	0x20000190

      case 6:
        can1_ams_s04_voltages_1.s04v01 = can1_ams_s04_voltages_1_s04v01_encode((float) rawVoltages[32] / 10000.0);
 8001ac0:	4bb7      	ldr	r3, [pc, #732]	@ (8001da0 <main+0x1068>)
 8001ac2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ace:	ee17 0a90 	vmov	r0, s15
 8001ad2:	f7fe fcdd 	bl	8000490 <__aeabi_f2d>
 8001ad6:	a3b0      	add	r3, pc, #704	@ (adr r3, 8001d98 <main+0x1060>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fe5a 	bl	8000794 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	ec43 2b17 	vmov	d7, r2, r3
 8001ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aec:	eef0 0a67 	vmov.f32	s1, s15
 8001af0:	f005 fafe 	bl	80070f0 <can1_ams_s04_voltages_1_s04v01_encode>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4baa      	ldr	r3, [pc, #680]	@ (8001da4 <main+0x106c>)
 8001afa:	701a      	strb	r2, [r3, #0]
        can1_ams_s04_voltages_1.s04v02 = can1_ams_s04_voltages_1_s04v02_encode((float) rawVoltages[33] / 10000.0);
 8001afc:	4ba8      	ldr	r3, [pc, #672]	@ (8001da0 <main+0x1068>)
 8001afe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b0a:	ee17 0a90 	vmov	r0, s15
 8001b0e:	f7fe fcbf 	bl	8000490 <__aeabi_f2d>
 8001b12:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001d98 <main+0x1060>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fe3c 	bl	8000794 <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	ec43 2b17 	vmov	d7, r2, r3
 8001b24:	eeb0 0a47 	vmov.f32	s0, s14
 8001b28:	eef0 0a67 	vmov.f32	s1, s15
 8001b2c:	f005 fb0c 	bl	8007148 <can1_ams_s04_voltages_1_s04v02_encode>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b9b      	ldr	r3, [pc, #620]	@ (8001da4 <main+0x106c>)
 8001b36:	705a      	strb	r2, [r3, #1]
        can1_ams_s04_voltages_1.s04v03 = can1_ams_s04_voltages_1_s04v03_encode((float) rawVoltages[34] / 10000.0);
 8001b38:	4b99      	ldr	r3, [pc, #612]	@ (8001da0 <main+0x1068>)
 8001b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b46:	ee17 0a90 	vmov	r0, s15
 8001b4a:	f7fe fca1 	bl	8000490 <__aeabi_f2d>
 8001b4e:	a392      	add	r3, pc, #584	@ (adr r3, 8001d98 <main+0x1060>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fe1e 	bl	8000794 <__aeabi_ddiv>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	ec43 2b17 	vmov	d7, r2, r3
 8001b60:	eeb0 0a47 	vmov.f32	s0, s14
 8001b64:	eef0 0a67 	vmov.f32	s1, s15
 8001b68:	f005 fb1a 	bl	80071a0 <can1_ams_s04_voltages_1_s04v03_encode>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b8c      	ldr	r3, [pc, #560]	@ (8001da4 <main+0x106c>)
 8001b72:	709a      	strb	r2, [r3, #2]
        can1_ams_s04_voltages_1.s04v04 = can1_ams_s04_voltages_1_s04v04_encode((float) rawVoltages[35] / 10000.0);
 8001b74:	4b8a      	ldr	r3, [pc, #552]	@ (8001da0 <main+0x1068>)
 8001b76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b82:	ee17 0a90 	vmov	r0, s15
 8001b86:	f7fe fc83 	bl	8000490 <__aeabi_f2d>
 8001b8a:	a383      	add	r3, pc, #524	@ (adr r3, 8001d98 <main+0x1060>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fe00 	bl	8000794 <__aeabi_ddiv>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	ec43 2b17 	vmov	d7, r2, r3
 8001b9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba0:	eef0 0a67 	vmov.f32	s1, s15
 8001ba4:	f005 fb28 	bl	80071f8 <can1_ams_s04_voltages_1_s04v04_encode>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b7d      	ldr	r3, [pc, #500]	@ (8001da4 <main+0x106c>)
 8001bae:	70da      	strb	r2, [r3, #3]
        can1_ams_s04_voltages_1.s04v05 = can1_ams_s04_voltages_1_s04v05_encode((float) rawVoltages[36] / 10000.0);
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8001da0 <main+0x1068>)
 8001bb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbe:	ee17 0a90 	vmov	r0, s15
 8001bc2:	f7fe fc65 	bl	8000490 <__aeabi_f2d>
 8001bc6:	a374      	add	r3, pc, #464	@ (adr r3, 8001d98 <main+0x1060>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe fde2 	bl	8000794 <__aeabi_ddiv>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	ec43 2b17 	vmov	d7, r2, r3
 8001bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bdc:	eef0 0a67 	vmov.f32	s1, s15
 8001be0:	f005 fb36 	bl	8007250 <can1_ams_s04_voltages_1_s04v05_encode>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b6e      	ldr	r3, [pc, #440]	@ (8001da4 <main+0x106c>)
 8001bea:	711a      	strb	r2, [r3, #4]
        can1_ams_s04_voltages_1.s04v06 = can1_ams_s04_voltages_1_s04v06_encode((float) rawVoltages[37] / 10000.0);
 8001bec:	4b6c      	ldr	r3, [pc, #432]	@ (8001da0 <main+0x1068>)
 8001bee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfa:	ee17 0a90 	vmov	r0, s15
 8001bfe:	f7fe fc47 	bl	8000490 <__aeabi_f2d>
 8001c02:	a365      	add	r3, pc, #404	@ (adr r3, 8001d98 <main+0x1060>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fdc4 	bl	8000794 <__aeabi_ddiv>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	ec43 2b17 	vmov	d7, r2, r3
 8001c14:	eeb0 0a47 	vmov.f32	s0, s14
 8001c18:	eef0 0a67 	vmov.f32	s1, s15
 8001c1c:	f005 fb44 	bl	80072a8 <can1_ams_s04_voltages_1_s04v06_encode>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b5f      	ldr	r3, [pc, #380]	@ (8001da4 <main+0x106c>)
 8001c26:	715a      	strb	r2, [r3, #5]

        can1_ams_s04_voltages_1_pack(txData, &can1_ams_s04_voltages_1, CAN1_AMS_S04_VOLTAGES_1_LENGTH);
 8001c28:	2206      	movs	r2, #6
 8001c2a:	495e      	ldr	r1, [pc, #376]	@ (8001da4 <main+0x106c>)
 8001c2c:	485e      	ldr	r0, [pc, #376]	@ (8001da8 <main+0x1070>)
 8001c2e:	f005 f9e5 	bl	8006ffc <can1_ams_s04_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S04_VOLTAGES_1_FRAME_ID;
 8001c32:	4b5e      	ldr	r3, [pc, #376]	@ (8001dac <main+0x1074>)
 8001c34:	f240 225e 	movw	r2, #606	@ 0x25e
 8001c38:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S04_VOLTAGES_1_LENGTH;
 8001c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dac <main+0x1074>)
 8001c3c:	2206      	movs	r2, #6
 8001c3e:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8001c40:	4b5a      	ldr	r3, [pc, #360]	@ (8001dac <main+0x1074>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8001c46:	4b59      	ldr	r3, [pc, #356]	@ (8001dac <main+0x1074>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4a56      	ldr	r2, [pc, #344]	@ (8001da8 <main+0x1070>)
 8001c50:	4956      	ldr	r1, [pc, #344]	@ (8001dac <main+0x1074>)
 8001c52:	4857      	ldr	r0, [pc, #348]	@ (8001db0 <main+0x1078>)
 8001c54:	f002 fb23 	bl	800429e <HAL_CAN_AddTxMessage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f001 8501 	beq.w	8003662 <main+0x292a>
          Error_Handler();
 8001c60:	f002 f808 	bl	8003c74 <Error_Handler>
        break;
 8001c64:	f001 bcfd 	b.w	8003662 <main+0x292a>

      case 7:
        can1_ams_s04_voltages_2.s04v07 = can1_ams_s04_voltages_2_s04v07_encode((float) rawVoltages[38] / 10000.0);
 8001c68:	4b4d      	ldr	r3, [pc, #308]	@ (8001da0 <main+0x1068>)
 8001c6a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c76:	ee17 0a90 	vmov	r0, s15
 8001c7a:	f7fe fc09 	bl	8000490 <__aeabi_f2d>
 8001c7e:	a346      	add	r3, pc, #280	@ (adr r3, 8001d98 <main+0x1060>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe fd86 	bl	8000794 <__aeabi_ddiv>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	ec43 2b17 	vmov	d7, r2, r3
 8001c90:	eeb0 0a47 	vmov.f32	s0, s14
 8001c94:	eef0 0a67 	vmov.f32	s1, s15
 8001c98:	f005 fb9a 	bl	80073d0 <can1_ams_s04_voltages_2_s04v07_encode>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b44      	ldr	r3, [pc, #272]	@ (8001db4 <main+0x107c>)
 8001ca2:	701a      	strb	r2, [r3, #0]
        can1_ams_s04_voltages_2.s04v08 = can1_ams_s04_voltages_2_s04v08_encode((float) rawVoltages[39] / 10000.0);
 8001ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8001da0 <main+0x1068>)
 8001ca6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb2:	ee17 0a90 	vmov	r0, s15
 8001cb6:	f7fe fbeb 	bl	8000490 <__aeabi_f2d>
 8001cba:	a337      	add	r3, pc, #220	@ (adr r3, 8001d98 <main+0x1060>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fd68 	bl	8000794 <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	ec43 2b17 	vmov	d7, r2, r3
 8001ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd0:	eef0 0a67 	vmov.f32	s1, s15
 8001cd4:	f005 fba8 	bl	8007428 <can1_ams_s04_voltages_2_s04v08_encode>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b35      	ldr	r3, [pc, #212]	@ (8001db4 <main+0x107c>)
 8001cde:	705a      	strb	r2, [r3, #1]
        can1_ams_s04_voltages_2.s04v09 = can1_ams_s04_voltages_2_s04v09_encode((float) rawVoltages[40] / 10000.0);
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8001da0 <main+0x1068>)
 8001ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cee:	ee17 0a90 	vmov	r0, s15
 8001cf2:	f7fe fbcd 	bl	8000490 <__aeabi_f2d>
 8001cf6:	a328      	add	r3, pc, #160	@ (adr r3, 8001d98 <main+0x1060>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fd4a 	bl	8000794 <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	ec43 2b17 	vmov	d7, r2, r3
 8001d08:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0c:	eef0 0a67 	vmov.f32	s1, s15
 8001d10:	f005 fbb6 	bl	8007480 <can1_ams_s04_voltages_2_s04v09_encode>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <main+0x107c>)
 8001d1a:	709a      	strb	r2, [r3, #2]
        can1_ams_s04_voltages_2.s04v10 = can1_ams_s04_voltages_2_s04v10_encode((float) rawVoltages[41] / 10000.0);
 8001d1c:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <main+0x1068>)
 8001d1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2a:	ee17 0a90 	vmov	r0, s15
 8001d2e:	f7fe fbaf 	bl	8000490 <__aeabi_f2d>
 8001d32:	a319      	add	r3, pc, #100	@ (adr r3, 8001d98 <main+0x1060>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fd2c 	bl	8000794 <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	ec43 2b17 	vmov	d7, r2, r3
 8001d44:	eeb0 0a47 	vmov.f32	s0, s14
 8001d48:	eef0 0a67 	vmov.f32	s1, s15
 8001d4c:	f005 fbc4 	bl	80074d8 <can1_ams_s04_voltages_2_s04v10_encode>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <main+0x107c>)
 8001d56:	70da      	strb	r2, [r3, #3]

        can1_ams_s04_voltages_2_pack(txData, &can1_ams_s04_voltages_2, CAN1_AMS_S04_VOLTAGES_2_LENGTH);
 8001d58:	2205      	movs	r2, #5
 8001d5a:	4916      	ldr	r1, [pc, #88]	@ (8001db4 <main+0x107c>)
 8001d5c:	4812      	ldr	r0, [pc, #72]	@ (8001da8 <main+0x1070>)
 8001d5e:	f005 facd 	bl	80072fc <can1_ams_s04_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S04_VOLTAGES_2_FRAME_ID;
 8001d62:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <main+0x1074>)
 8001d64:	f240 225f 	movw	r2, #607	@ 0x25f
 8001d68:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S04_VOLTAGES_2_LENGTH;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <main+0x1074>)
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <main+0x1074>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <main+0x1074>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <main+0x1070>)
 8001d80:	490a      	ldr	r1, [pc, #40]	@ (8001dac <main+0x1074>)
 8001d82:	480b      	ldr	r0, [pc, #44]	@ (8001db0 <main+0x1078>)
 8001d84:	f002 fa8b 	bl	800429e <HAL_CAN_AddTxMessage>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f001 846b 	beq.w	8003666 <main+0x292e>
          Error_Handler();
 8001d90:	f001 ff70 	bl	8003c74 <Error_Handler>
        break;
 8001d94:	f001 bc67 	b.w	8003666 <main+0x292e>
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	40c38800 	.word	0x40c38800
 8001da0:	2000029c 	.word	0x2000029c
 8001da4:	20000198 	.word	0x20000198
 8001da8:	20000120 	.word	0x20000120
 8001dac:	200000ec 	.word	0x200000ec
 8001db0:	20000044 	.word	0x20000044
 8001db4:	200001a0 	.word	0x200001a0

      case 8:
        can1_ams_s05_voltages_1.s05v01 = can1_ams_s05_voltages_1_s05v01_encode((float) rawVoltages[42] / 10000.0);
 8001db8:	4bc7      	ldr	r3, [pc, #796]	@ (80020d8 <main+0x13a0>)
 8001dba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc6:	ee17 0a90 	vmov	r0, s15
 8001dca:	f7fe fb61 	bl	8000490 <__aeabi_f2d>
 8001dce:	a3c0      	add	r3, pc, #768	@ (adr r3, 80020d0 <main+0x1398>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fcde 	bl	8000794 <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	ec43 2b17 	vmov	d7, r2, r3
 8001de0:	eeb0 0a47 	vmov.f32	s0, s14
 8001de4:	eef0 0a67 	vmov.f32	s1, s15
 8001de8:	f005 fc1a 	bl	8007620 <can1_ams_s05_voltages_1_s05v01_encode>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4bba      	ldr	r3, [pc, #744]	@ (80020dc <main+0x13a4>)
 8001df2:	701a      	strb	r2, [r3, #0]
        can1_ams_s05_voltages_1.s05v02 = can1_ams_s05_voltages_1_s05v02_encode((float) rawVoltages[43] / 10000.0);
 8001df4:	4bb8      	ldr	r3, [pc, #736]	@ (80020d8 <main+0x13a0>)
 8001df6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e02:	ee17 0a90 	vmov	r0, s15
 8001e06:	f7fe fb43 	bl	8000490 <__aeabi_f2d>
 8001e0a:	a3b1      	add	r3, pc, #708	@ (adr r3, 80020d0 <main+0x1398>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fcc0 	bl	8000794 <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	ec43 2b17 	vmov	d7, r2, r3
 8001e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e20:	eef0 0a67 	vmov.f32	s1, s15
 8001e24:	f005 fc28 	bl	8007678 <can1_ams_s05_voltages_1_s05v02_encode>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4bab      	ldr	r3, [pc, #684]	@ (80020dc <main+0x13a4>)
 8001e2e:	705a      	strb	r2, [r3, #1]
        can1_ams_s05_voltages_1.s05v03 = can1_ams_s05_voltages_1_s05v03_encode((float) rawVoltages[44] / 10000.0);
 8001e30:	4ba9      	ldr	r3, [pc, #676]	@ (80020d8 <main+0x13a0>)
 8001e32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3e:	ee17 0a90 	vmov	r0, s15
 8001e42:	f7fe fb25 	bl	8000490 <__aeabi_f2d>
 8001e46:	a3a2      	add	r3, pc, #648	@ (adr r3, 80020d0 <main+0x1398>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fca2 	bl	8000794 <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	ec43 2b17 	vmov	d7, r2, r3
 8001e58:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5c:	eef0 0a67 	vmov.f32	s1, s15
 8001e60:	f005 fc36 	bl	80076d0 <can1_ams_s05_voltages_1_s05v03_encode>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b9c      	ldr	r3, [pc, #624]	@ (80020dc <main+0x13a4>)
 8001e6a:	709a      	strb	r2, [r3, #2]
        can1_ams_s05_voltages_1.s05v04 = can1_ams_s05_voltages_1_s05v04_encode((float) rawVoltages[45] / 10000.0);
 8001e6c:	4b9a      	ldr	r3, [pc, #616]	@ (80020d8 <main+0x13a0>)
 8001e6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7a:	ee17 0a90 	vmov	r0, s15
 8001e7e:	f7fe fb07 	bl	8000490 <__aeabi_f2d>
 8001e82:	a393      	add	r3, pc, #588	@ (adr r3, 80020d0 <main+0x1398>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fc84 	bl	8000794 <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	ec43 2b17 	vmov	d7, r2, r3
 8001e94:	eeb0 0a47 	vmov.f32	s0, s14
 8001e98:	eef0 0a67 	vmov.f32	s1, s15
 8001e9c:	f005 fc44 	bl	8007728 <can1_ams_s05_voltages_1_s05v04_encode>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b8d      	ldr	r3, [pc, #564]	@ (80020dc <main+0x13a4>)
 8001ea6:	70da      	strb	r2, [r3, #3]
        can1_ams_s05_voltages_1.s05v05 = can1_ams_s05_voltages_1_s05v05_encode((float) rawVoltages[46] / 10000.0);
 8001ea8:	4b8b      	ldr	r3, [pc, #556]	@ (80020d8 <main+0x13a0>)
 8001eaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb6:	ee17 0a90 	vmov	r0, s15
 8001eba:	f7fe fae9 	bl	8000490 <__aeabi_f2d>
 8001ebe:	a384      	add	r3, pc, #528	@ (adr r3, 80020d0 <main+0x1398>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fc66 	bl	8000794 <__aeabi_ddiv>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	ec43 2b17 	vmov	d7, r2, r3
 8001ed0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed4:	eef0 0a67 	vmov.f32	s1, s15
 8001ed8:	f005 fc52 	bl	8007780 <can1_ams_s05_voltages_1_s05v05_encode>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80020dc <main+0x13a4>)
 8001ee2:	711a      	strb	r2, [r3, #4]
        can1_ams_s05_voltages_1.s05v06 = can1_ams_s05_voltages_1_s05v06_encode((float) rawVoltages[47] / 10000.0);
 8001ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80020d8 <main+0x13a0>)
 8001ee6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef2:	ee17 0a90 	vmov	r0, s15
 8001ef6:	f7fe facb 	bl	8000490 <__aeabi_f2d>
 8001efa:	a375      	add	r3, pc, #468	@ (adr r3, 80020d0 <main+0x1398>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fc48 	bl	8000794 <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	ec43 2b17 	vmov	d7, r2, r3
 8001f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f10:	eef0 0a67 	vmov.f32	s1, s15
 8001f14:	f005 fc60 	bl	80077d8 <can1_ams_s05_voltages_1_s05v06_encode>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80020dc <main+0x13a4>)
 8001f1e:	715a      	strb	r2, [r3, #5]

        can1_ams_s05_voltages_1_pack(txData, &can1_ams_s05_voltages_1, CAN1_AMS_S05_VOLTAGES_1_LENGTH);
 8001f20:	2206      	movs	r2, #6
 8001f22:	496e      	ldr	r1, [pc, #440]	@ (80020dc <main+0x13a4>)
 8001f24:	486e      	ldr	r0, [pc, #440]	@ (80020e0 <main+0x13a8>)
 8001f26:	f005 fb01 	bl	800752c <can1_ams_s05_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S05_VOLTAGES_1_FRAME_ID;
 8001f2a:	4b6e      	ldr	r3, [pc, #440]	@ (80020e4 <main+0x13ac>)
 8001f2c:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8001f30:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S05_VOLTAGES_1_LENGTH;
 8001f32:	4b6c      	ldr	r3, [pc, #432]	@ (80020e4 <main+0x13ac>)
 8001f34:	2206      	movs	r2, #6
 8001f36:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8001f38:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <main+0x13ac>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8001f3e:	4b69      	ldr	r3, [pc, #420]	@ (80020e4 <main+0x13ac>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8001f44:	2300      	movs	r3, #0
 8001f46:	4a66      	ldr	r2, [pc, #408]	@ (80020e0 <main+0x13a8>)
 8001f48:	4966      	ldr	r1, [pc, #408]	@ (80020e4 <main+0x13ac>)
 8001f4a:	4867      	ldr	r0, [pc, #412]	@ (80020e8 <main+0x13b0>)
 8001f4c:	f002 f9a7 	bl	800429e <HAL_CAN_AddTxMessage>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f001 8389 	beq.w	800366a <main+0x2932>
          Error_Handler();
 8001f58:	f001 fe8c 	bl	8003c74 <Error_Handler>
        break;
 8001f5c:	f001 bb85 	b.w	800366a <main+0x2932>

      case 9:
        can1_ams_s05_voltages_2.s05v07 = can1_ams_s05_voltages_2_s05v07_encode((float) rawVoltages[48] / 10000.0);
 8001f60:	4b5d      	ldr	r3, [pc, #372]	@ (80020d8 <main+0x13a0>)
 8001f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6e:	ee17 0a90 	vmov	r0, s15
 8001f72:	f7fe fa8d 	bl	8000490 <__aeabi_f2d>
 8001f76:	a356      	add	r3, pc, #344	@ (adr r3, 80020d0 <main+0x1398>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fc0a 	bl	8000794 <__aeabi_ddiv>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	ec43 2b17 	vmov	d7, r2, r3
 8001f88:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8c:	eef0 0a67 	vmov.f32	s1, s15
 8001f90:	f005 fcb6 	bl	8007900 <can1_ams_s05_voltages_2_s05v07_encode>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b54      	ldr	r3, [pc, #336]	@ (80020ec <main+0x13b4>)
 8001f9a:	701a      	strb	r2, [r3, #0]
        can1_ams_s05_voltages_2.s05v08 = can1_ams_s05_voltages_2_s05v08_encode((float) rawVoltages[49] / 10000.0);
 8001f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80020d8 <main+0x13a0>)
 8001f9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001faa:	ee17 0a90 	vmov	r0, s15
 8001fae:	f7fe fa6f 	bl	8000490 <__aeabi_f2d>
 8001fb2:	a347      	add	r3, pc, #284	@ (adr r3, 80020d0 <main+0x1398>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe fbec 	bl	8000794 <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	ec43 2b17 	vmov	d7, r2, r3
 8001fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001fc8:	eef0 0a67 	vmov.f32	s1, s15
 8001fcc:	f005 fcc4 	bl	8007958 <can1_ams_s05_voltages_2_s05v08_encode>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b45      	ldr	r3, [pc, #276]	@ (80020ec <main+0x13b4>)
 8001fd6:	705a      	strb	r2, [r3, #1]
        can1_ams_s05_voltages_2.s05v09 = can1_ams_s05_voltages_2_s05v09_encode((float) rawVoltages[50] / 10000.0);
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <main+0x13a0>)
 8001fda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	ee17 0a90 	vmov	r0, s15
 8001fea:	f7fe fa51 	bl	8000490 <__aeabi_f2d>
 8001fee:	a338      	add	r3, pc, #224	@ (adr r3, 80020d0 <main+0x1398>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fbce 	bl	8000794 <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	ec43 2b17 	vmov	d7, r2, r3
 8002000:	eeb0 0a47 	vmov.f32	s0, s14
 8002004:	eef0 0a67 	vmov.f32	s1, s15
 8002008:	f005 fcd2 	bl	80079b0 <can1_ams_s05_voltages_2_s05v09_encode>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <main+0x13b4>)
 8002012:	709a      	strb	r2, [r3, #2]
        can1_ams_s05_voltages_2.s05v10 = can1_ams_s05_voltages_2_s05v10_encode((float) rawVoltages[51] / 10000.0);
 8002014:	4b30      	ldr	r3, [pc, #192]	@ (80020d8 <main+0x13a0>)
 8002016:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002022:	ee17 0a90 	vmov	r0, s15
 8002026:	f7fe fa33 	bl	8000490 <__aeabi_f2d>
 800202a:	a329      	add	r3, pc, #164	@ (adr r3, 80020d0 <main+0x1398>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fbb0 	bl	8000794 <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	ec43 2b17 	vmov	d7, r2, r3
 800203c:	eeb0 0a47 	vmov.f32	s0, s14
 8002040:	eef0 0a67 	vmov.f32	s1, s15
 8002044:	f005 fce0 	bl	8007a08 <can1_ams_s05_voltages_2_s05v10_encode>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	4b27      	ldr	r3, [pc, #156]	@ (80020ec <main+0x13b4>)
 800204e:	70da      	strb	r2, [r3, #3]
        can1_ams_s05_voltages_2.s05v11 = can1_ams_s05_voltages_2_s05v11_encode((float) rawVoltages[52] / 10000.0);
 8002050:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <main+0x13a0>)
 8002052:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205e:	ee17 0a90 	vmov	r0, s15
 8002062:	f7fe fa15 	bl	8000490 <__aeabi_f2d>
 8002066:	a31a      	add	r3, pc, #104	@ (adr r3, 80020d0 <main+0x1398>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fb92 	bl	8000794 <__aeabi_ddiv>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	ec43 2b17 	vmov	d7, r2, r3
 8002078:	eeb0 0a47 	vmov.f32	s0, s14
 800207c:	eef0 0a67 	vmov.f32	s1, s15
 8002080:	f005 fcee 	bl	8007a60 <can1_ams_s05_voltages_2_s05v11_encode>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <main+0x13b4>)
 800208a:	711a      	strb	r2, [r3, #4]

        can1_ams_s05_voltages_2_pack(txData, &can1_ams_s05_voltages_2, CAN1_AMS_S05_VOLTAGES_2_LENGTH);
 800208c:	2205      	movs	r2, #5
 800208e:	4917      	ldr	r1, [pc, #92]	@ (80020ec <main+0x13b4>)
 8002090:	4813      	ldr	r0, [pc, #76]	@ (80020e0 <main+0x13a8>)
 8002092:	f005 fbcb 	bl	800782c <can1_ams_s05_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S05_VOLTAGES_2_FRAME_ID;
 8002096:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <main+0x13ac>)
 8002098:	f240 2261 	movw	r2, #609	@ 0x261
 800209c:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S05_VOLTAGES_2_LENGTH;
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <main+0x13ac>)
 80020a0:	2205      	movs	r2, #5
 80020a2:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 80020a4:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <main+0x13ac>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <main+0x13ac>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80020b0:	2300      	movs	r3, #0
 80020b2:	4a0b      	ldr	r2, [pc, #44]	@ (80020e0 <main+0x13a8>)
 80020b4:	490b      	ldr	r1, [pc, #44]	@ (80020e4 <main+0x13ac>)
 80020b6:	480c      	ldr	r0, [pc, #48]	@ (80020e8 <main+0x13b0>)
 80020b8:	f002 f8f1 	bl	800429e <HAL_CAN_AddTxMessage>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f001 82d5 	beq.w	800366e <main+0x2936>
          Error_Handler();
 80020c4:	f001 fdd6 	bl	8003c74 <Error_Handler>
        break;
 80020c8:	f001 bad1 	b.w	800366e <main+0x2936>
 80020cc:	f3af 8000 	nop.w
 80020d0:	00000000 	.word	0x00000000
 80020d4:	40c38800 	.word	0x40c38800
 80020d8:	2000029c 	.word	0x2000029c
 80020dc:	200001a8 	.word	0x200001a8
 80020e0:	20000120 	.word	0x20000120
 80020e4:	200000ec 	.word	0x200000ec
 80020e8:	20000044 	.word	0x20000044
 80020ec:	200001b0 	.word	0x200001b0

      case 10:
        can1_ams_s06_voltages_1.s06v01 = can1_ams_s06_voltages_1_s06v01_encode((float) rawVoltages[53] / 10000.0);
 80020f0:	4bb7      	ldr	r3, [pc, #732]	@ (80023d0 <main+0x1698>)
 80020f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020fe:	ee17 0a90 	vmov	r0, s15
 8002102:	f7fe f9c5 	bl	8000490 <__aeabi_f2d>
 8002106:	a3b0      	add	r3, pc, #704	@ (adr r3, 80023c8 <main+0x1690>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe fb42 	bl	8000794 <__aeabi_ddiv>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	ec43 2b17 	vmov	d7, r2, r3
 8002118:	eeb0 0a47 	vmov.f32	s0, s14
 800211c:	eef0 0a67 	vmov.f32	s1, s15
 8002120:	f005 fd42 	bl	8007ba8 <can1_ams_s06_voltages_1_s06v01_encode>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	4baa      	ldr	r3, [pc, #680]	@ (80023d4 <main+0x169c>)
 800212a:	701a      	strb	r2, [r3, #0]
        can1_ams_s06_voltages_1.s06v02 = can1_ams_s06_voltages_1_s06v02_encode((float) rawVoltages[54] / 10000.0);
 800212c:	4ba8      	ldr	r3, [pc, #672]	@ (80023d0 <main+0x1698>)
 800212e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213a:	ee17 0a90 	vmov	r0, s15
 800213e:	f7fe f9a7 	bl	8000490 <__aeabi_f2d>
 8002142:	a3a1      	add	r3, pc, #644	@ (adr r3, 80023c8 <main+0x1690>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe fb24 	bl	8000794 <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	ec43 2b17 	vmov	d7, r2, r3
 8002154:	eeb0 0a47 	vmov.f32	s0, s14
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	f005 fd50 	bl	8007c00 <can1_ams_s06_voltages_1_s06v02_encode>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	4b9b      	ldr	r3, [pc, #620]	@ (80023d4 <main+0x169c>)
 8002166:	705a      	strb	r2, [r3, #1]
        can1_ams_s06_voltages_1.s06v03 = can1_ams_s06_voltages_1_s06v03_encode((float) rawVoltages[55] / 10000.0);
 8002168:	4b99      	ldr	r3, [pc, #612]	@ (80023d0 <main+0x1698>)
 800216a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002176:	ee17 0a90 	vmov	r0, s15
 800217a:	f7fe f989 	bl	8000490 <__aeabi_f2d>
 800217e:	a392      	add	r3, pc, #584	@ (adr r3, 80023c8 <main+0x1690>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fe fb06 	bl	8000794 <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	ec43 2b17 	vmov	d7, r2, r3
 8002190:	eeb0 0a47 	vmov.f32	s0, s14
 8002194:	eef0 0a67 	vmov.f32	s1, s15
 8002198:	f005 fd5e 	bl	8007c58 <can1_ams_s06_voltages_1_s06v03_encode>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b8c      	ldr	r3, [pc, #560]	@ (80023d4 <main+0x169c>)
 80021a2:	709a      	strb	r2, [r3, #2]
        can1_ams_s06_voltages_1.s06v04 = can1_ams_s06_voltages_1_s06v04_encode((float) rawVoltages[56] / 10000.0);
 80021a4:	4b8a      	ldr	r3, [pc, #552]	@ (80023d0 <main+0x1698>)
 80021a6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b2:	ee17 0a90 	vmov	r0, s15
 80021b6:	f7fe f96b 	bl	8000490 <__aeabi_f2d>
 80021ba:	a383      	add	r3, pc, #524	@ (adr r3, 80023c8 <main+0x1690>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe fae8 	bl	8000794 <__aeabi_ddiv>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	ec43 2b17 	vmov	d7, r2, r3
 80021cc:	eeb0 0a47 	vmov.f32	s0, s14
 80021d0:	eef0 0a67 	vmov.f32	s1, s15
 80021d4:	f005 fd6c 	bl	8007cb0 <can1_ams_s06_voltages_1_s06v04_encode>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	4b7d      	ldr	r3, [pc, #500]	@ (80023d4 <main+0x169c>)
 80021de:	70da      	strb	r2, [r3, #3]
        can1_ams_s06_voltages_1.s06v05 = can1_ams_s06_voltages_1_s06v05_encode((float) rawVoltages[57] / 10000.0);
 80021e0:	4b7b      	ldr	r3, [pc, #492]	@ (80023d0 <main+0x1698>)
 80021e2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	ee17 0a90 	vmov	r0, s15
 80021f2:	f7fe f94d 	bl	8000490 <__aeabi_f2d>
 80021f6:	a374      	add	r3, pc, #464	@ (adr r3, 80023c8 <main+0x1690>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe faca 	bl	8000794 <__aeabi_ddiv>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	ec43 2b17 	vmov	d7, r2, r3
 8002208:	eeb0 0a47 	vmov.f32	s0, s14
 800220c:	eef0 0a67 	vmov.f32	s1, s15
 8002210:	f005 fd7a 	bl	8007d08 <can1_ams_s06_voltages_1_s06v05_encode>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
 8002218:	4b6e      	ldr	r3, [pc, #440]	@ (80023d4 <main+0x169c>)
 800221a:	711a      	strb	r2, [r3, #4]
        can1_ams_s06_voltages_1.s06v06 = can1_ams_s06_voltages_1_s06v06_encode((float) rawVoltages[58] / 10000.0);
 800221c:	4b6c      	ldr	r3, [pc, #432]	@ (80023d0 <main+0x1698>)
 800221e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222a:	ee17 0a90 	vmov	r0, s15
 800222e:	f7fe f92f 	bl	8000490 <__aeabi_f2d>
 8002232:	a365      	add	r3, pc, #404	@ (adr r3, 80023c8 <main+0x1690>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f7fe faac 	bl	8000794 <__aeabi_ddiv>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	ec43 2b17 	vmov	d7, r2, r3
 8002244:	eeb0 0a47 	vmov.f32	s0, s14
 8002248:	eef0 0a67 	vmov.f32	s1, s15
 800224c:	f005 fd88 	bl	8007d60 <can1_ams_s06_voltages_1_s06v06_encode>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4b5f      	ldr	r3, [pc, #380]	@ (80023d4 <main+0x169c>)
 8002256:	715a      	strb	r2, [r3, #5]

        can1_ams_s06_voltages_1_pack(txData, &can1_ams_s06_voltages_1, CAN1_AMS_S06_VOLTAGES_1_LENGTH);
 8002258:	2206      	movs	r2, #6
 800225a:	495e      	ldr	r1, [pc, #376]	@ (80023d4 <main+0x169c>)
 800225c:	485e      	ldr	r0, [pc, #376]	@ (80023d8 <main+0x16a0>)
 800225e:	f005 fc29 	bl	8007ab4 <can1_ams_s06_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S06_VOLTAGES_1_FRAME_ID;
 8002262:	4b5e      	ldr	r3, [pc, #376]	@ (80023dc <main+0x16a4>)
 8002264:	f240 2262 	movw	r2, #610	@ 0x262
 8002268:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S06_VOLTAGES_1_LENGTH;
 800226a:	4b5c      	ldr	r3, [pc, #368]	@ (80023dc <main+0x16a4>)
 800226c:	2206      	movs	r2, #6
 800226e:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8002270:	4b5a      	ldr	r3, [pc, #360]	@ (80023dc <main+0x16a4>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8002276:	4b59      	ldr	r3, [pc, #356]	@ (80023dc <main+0x16a4>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800227c:	2300      	movs	r3, #0
 800227e:	4a56      	ldr	r2, [pc, #344]	@ (80023d8 <main+0x16a0>)
 8002280:	4956      	ldr	r1, [pc, #344]	@ (80023dc <main+0x16a4>)
 8002282:	4857      	ldr	r0, [pc, #348]	@ (80023e0 <main+0x16a8>)
 8002284:	f002 f80b 	bl	800429e <HAL_CAN_AddTxMessage>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	f001 81f1 	beq.w	8003672 <main+0x293a>
          Error_Handler();
 8002290:	f001 fcf0 	bl	8003c74 <Error_Handler>
        break;
 8002294:	f001 b9ed 	b.w	8003672 <main+0x293a>

      case 11:
        can1_ams_s06_voltages_2.s06v07 = can1_ams_s06_voltages_2_s06v07_encode((float) rawVoltages[59] / 10000.0);
 8002298:	4b4d      	ldr	r3, [pc, #308]	@ (80023d0 <main+0x1698>)
 800229a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a6:	ee17 0a90 	vmov	r0, s15
 80022aa:	f7fe f8f1 	bl	8000490 <__aeabi_f2d>
 80022ae:	a346      	add	r3, pc, #280	@ (adr r3, 80023c8 <main+0x1690>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fe fa6e 	bl	8000794 <__aeabi_ddiv>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	ec43 2b17 	vmov	d7, r2, r3
 80022c0:	eeb0 0a47 	vmov.f32	s0, s14
 80022c4:	eef0 0a67 	vmov.f32	s1, s15
 80022c8:	f005 fdde 	bl	8007e88 <can1_ams_s06_voltages_2_s06v07_encode>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b44      	ldr	r3, [pc, #272]	@ (80023e4 <main+0x16ac>)
 80022d2:	701a      	strb	r2, [r3, #0]
        can1_ams_s06_voltages_2.s06v08 = can1_ams_s06_voltages_2_s06v08_encode((float) rawVoltages[60] / 10000.0);
 80022d4:	4b3e      	ldr	r3, [pc, #248]	@ (80023d0 <main+0x1698>)
 80022d6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	ee17 0a90 	vmov	r0, s15
 80022e6:	f7fe f8d3 	bl	8000490 <__aeabi_f2d>
 80022ea:	a337      	add	r3, pc, #220	@ (adr r3, 80023c8 <main+0x1690>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe fa50 	bl	8000794 <__aeabi_ddiv>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	ec43 2b17 	vmov	d7, r2, r3
 80022fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002300:	eef0 0a67 	vmov.f32	s1, s15
 8002304:	f005 fdec 	bl	8007ee0 <can1_ams_s06_voltages_2_s06v08_encode>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <main+0x16ac>)
 800230e:	705a      	strb	r2, [r3, #1]
        can1_ams_s06_voltages_2.s06v09 = can1_ams_s06_voltages_2_s06v09_encode((float) rawVoltages[61] / 10000.0);
 8002310:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <main+0x1698>)
 8002312:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231e:	ee17 0a90 	vmov	r0, s15
 8002322:	f7fe f8b5 	bl	8000490 <__aeabi_f2d>
 8002326:	a328      	add	r3, pc, #160	@ (adr r3, 80023c8 <main+0x1690>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fe fa32 	bl	8000794 <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	ec43 2b17 	vmov	d7, r2, r3
 8002338:	eeb0 0a47 	vmov.f32	s0, s14
 800233c:	eef0 0a67 	vmov.f32	s1, s15
 8002340:	f005 fdfa 	bl	8007f38 <can1_ams_s06_voltages_2_s06v09_encode>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b26      	ldr	r3, [pc, #152]	@ (80023e4 <main+0x16ac>)
 800234a:	709a      	strb	r2, [r3, #2]
        can1_ams_s06_voltages_2.s06v10 = can1_ams_s06_voltages_2_s06v10_encode((float) rawVoltages[62] / 10000.0);
 800234c:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <main+0x1698>)
 800234e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235a:	ee17 0a90 	vmov	r0, s15
 800235e:	f7fe f897 	bl	8000490 <__aeabi_f2d>
 8002362:	a319      	add	r3, pc, #100	@ (adr r3, 80023c8 <main+0x1690>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe fa14 	bl	8000794 <__aeabi_ddiv>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	ec43 2b17 	vmov	d7, r2, r3
 8002374:	eeb0 0a47 	vmov.f32	s0, s14
 8002378:	eef0 0a67 	vmov.f32	s1, s15
 800237c:	f005 fe08 	bl	8007f90 <can1_ams_s06_voltages_2_s06v10_encode>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	4b17      	ldr	r3, [pc, #92]	@ (80023e4 <main+0x16ac>)
 8002386:	70da      	strb	r2, [r3, #3]

        can1_ams_s06_voltages_2_pack(txData, &can1_ams_s06_voltages_2, CAN1_AMS_S06_VOLTAGES_2_LENGTH);
 8002388:	2205      	movs	r2, #5
 800238a:	4916      	ldr	r1, [pc, #88]	@ (80023e4 <main+0x16ac>)
 800238c:	4812      	ldr	r0, [pc, #72]	@ (80023d8 <main+0x16a0>)
 800238e:	f005 fd11 	bl	8007db4 <can1_ams_s06_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S06_VOLTAGES_2_FRAME_ID;
 8002392:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <main+0x16a4>)
 8002394:	f240 2263 	movw	r2, #611	@ 0x263
 8002398:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S06_VOLTAGES_2_LENGTH;
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <main+0x16a4>)
 800239c:	2205      	movs	r2, #5
 800239e:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <main+0x16a4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <main+0x16a4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80023ac:	2300      	movs	r3, #0
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <main+0x16a0>)
 80023b0:	490a      	ldr	r1, [pc, #40]	@ (80023dc <main+0x16a4>)
 80023b2:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <main+0x16a8>)
 80023b4:	f001 ff73 	bl	800429e <HAL_CAN_AddTxMessage>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f001 815b 	beq.w	8003676 <main+0x293e>
          Error_Handler();
 80023c0:	f001 fc58 	bl	8003c74 <Error_Handler>
        break;
 80023c4:	f001 b957 	b.w	8003676 <main+0x293e>
 80023c8:	00000000 	.word	0x00000000
 80023cc:	40c38800 	.word	0x40c38800
 80023d0:	2000029c 	.word	0x2000029c
 80023d4:	200001b8 	.word	0x200001b8
 80023d8:	20000120 	.word	0x20000120
 80023dc:	200000ec 	.word	0x200000ec
 80023e0:	20000044 	.word	0x20000044
 80023e4:	200001c0 	.word	0x200001c0

      case 12:
        can1_ams_s07_voltages_1.s07v01 = can1_ams_s07_voltages_1_s07v01_encode((float) rawVoltages[63] / 10000.0);
 80023e8:	4bc7      	ldr	r3, [pc, #796]	@ (8002708 <main+0x19d0>)
 80023ea:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f6:	ee17 0a90 	vmov	r0, s15
 80023fa:	f7fe f849 	bl	8000490 <__aeabi_f2d>
 80023fe:	a3c0      	add	r3, pc, #768	@ (adr r3, 8002700 <main+0x19c8>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fe f9c6 	bl	8000794 <__aeabi_ddiv>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	ec43 2b17 	vmov	d7, r2, r3
 8002410:	eeb0 0a47 	vmov.f32	s0, s14
 8002414:	eef0 0a67 	vmov.f32	s1, s15
 8002418:	f005 fe5e 	bl	80080d8 <can1_ams_s07_voltages_1_s07v01_encode>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	4bba      	ldr	r3, [pc, #744]	@ (800270c <main+0x19d4>)
 8002422:	701a      	strb	r2, [r3, #0]
        can1_ams_s07_voltages_1.s07v02 = can1_ams_s07_voltages_1_s07v02_encode((float) rawVoltages[64] / 10000.0);
 8002424:	4bb8      	ldr	r3, [pc, #736]	@ (8002708 <main+0x19d0>)
 8002426:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002432:	ee17 0a90 	vmov	r0, s15
 8002436:	f7fe f82b 	bl	8000490 <__aeabi_f2d>
 800243a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002700 <main+0x19c8>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f9a8 	bl	8000794 <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	ec43 2b17 	vmov	d7, r2, r3
 800244c:	eeb0 0a47 	vmov.f32	s0, s14
 8002450:	eef0 0a67 	vmov.f32	s1, s15
 8002454:	f005 fe6c 	bl	8008130 <can1_ams_s07_voltages_1_s07v02_encode>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	4bab      	ldr	r3, [pc, #684]	@ (800270c <main+0x19d4>)
 800245e:	705a      	strb	r2, [r3, #1]
        can1_ams_s07_voltages_1.s07v03 = can1_ams_s07_voltages_1_s07v03_encode((float) rawVoltages[65] / 10000.0);
 8002460:	4ba9      	ldr	r3, [pc, #676]	@ (8002708 <main+0x19d0>)
 8002462:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246e:	ee17 0a90 	vmov	r0, s15
 8002472:	f7fe f80d 	bl	8000490 <__aeabi_f2d>
 8002476:	a3a2      	add	r3, pc, #648	@ (adr r3, 8002700 <main+0x19c8>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe f98a 	bl	8000794 <__aeabi_ddiv>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	ec43 2b17 	vmov	d7, r2, r3
 8002488:	eeb0 0a47 	vmov.f32	s0, s14
 800248c:	eef0 0a67 	vmov.f32	s1, s15
 8002490:	f005 fe7a 	bl	8008188 <can1_ams_s07_voltages_1_s07v03_encode>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4b9c      	ldr	r3, [pc, #624]	@ (800270c <main+0x19d4>)
 800249a:	709a      	strb	r2, [r3, #2]
        can1_ams_s07_voltages_1.s07v04 = can1_ams_s07_voltages_1_s07v04_encode((float) rawVoltages[66] / 10000.0);
 800249c:	4b9a      	ldr	r3, [pc, #616]	@ (8002708 <main+0x19d0>)
 800249e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024aa:	ee17 0a90 	vmov	r0, s15
 80024ae:	f7fd ffef 	bl	8000490 <__aeabi_f2d>
 80024b2:	a393      	add	r3, pc, #588	@ (adr r3, 8002700 <main+0x19c8>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f96c 	bl	8000794 <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	ec43 2b17 	vmov	d7, r2, r3
 80024c4:	eeb0 0a47 	vmov.f32	s0, s14
 80024c8:	eef0 0a67 	vmov.f32	s1, s15
 80024cc:	f005 fe88 	bl	80081e0 <can1_ams_s07_voltages_1_s07v04_encode>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b8d      	ldr	r3, [pc, #564]	@ (800270c <main+0x19d4>)
 80024d6:	70da      	strb	r2, [r3, #3]
        can1_ams_s07_voltages_1.s07v05 = can1_ams_s07_voltages_1_s07v05_encode((float) rawVoltages[67] / 10000.0);
 80024d8:	4b8b      	ldr	r3, [pc, #556]	@ (8002708 <main+0x19d0>)
 80024da:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e6:	ee17 0a90 	vmov	r0, s15
 80024ea:	f7fd ffd1 	bl	8000490 <__aeabi_f2d>
 80024ee:	a384      	add	r3, pc, #528	@ (adr r3, 8002700 <main+0x19c8>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fe f94e 	bl	8000794 <__aeabi_ddiv>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	ec43 2b17 	vmov	d7, r2, r3
 8002500:	eeb0 0a47 	vmov.f32	s0, s14
 8002504:	eef0 0a67 	vmov.f32	s1, s15
 8002508:	f005 fe96 	bl	8008238 <can1_ams_s07_voltages_1_s07v05_encode>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b7e      	ldr	r3, [pc, #504]	@ (800270c <main+0x19d4>)
 8002512:	711a      	strb	r2, [r3, #4]
        can1_ams_s07_voltages_1.s07v06 = can1_ams_s07_voltages_1_s07v06_encode((float) rawVoltages[68] / 10000.0);
 8002514:	4b7c      	ldr	r3, [pc, #496]	@ (8002708 <main+0x19d0>)
 8002516:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	ee17 0a90 	vmov	r0, s15
 8002526:	f7fd ffb3 	bl	8000490 <__aeabi_f2d>
 800252a:	a375      	add	r3, pc, #468	@ (adr r3, 8002700 <main+0x19c8>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe f930 	bl	8000794 <__aeabi_ddiv>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	ec43 2b17 	vmov	d7, r2, r3
 800253c:	eeb0 0a47 	vmov.f32	s0, s14
 8002540:	eef0 0a67 	vmov.f32	s1, s15
 8002544:	f005 fea4 	bl	8008290 <can1_ams_s07_voltages_1_s07v06_encode>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	4b6f      	ldr	r3, [pc, #444]	@ (800270c <main+0x19d4>)
 800254e:	715a      	strb	r2, [r3, #5]

        can1_ams_s07_voltages_1_pack(txData, &can1_ams_s07_voltages_1, CAN1_AMS_S07_VOLTAGES_1_LENGTH);
 8002550:	2206      	movs	r2, #6
 8002552:	496e      	ldr	r1, [pc, #440]	@ (800270c <main+0x19d4>)
 8002554:	486e      	ldr	r0, [pc, #440]	@ (8002710 <main+0x19d8>)
 8002556:	f005 fd45 	bl	8007fe4 <can1_ams_s07_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S07_VOLTAGES_1_FRAME_ID;
 800255a:	4b6e      	ldr	r3, [pc, #440]	@ (8002714 <main+0x19dc>)
 800255c:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8002560:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S07_VOLTAGES_1_LENGTH;
 8002562:	4b6c      	ldr	r3, [pc, #432]	@ (8002714 <main+0x19dc>)
 8002564:	2206      	movs	r2, #6
 8002566:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8002568:	4b6a      	ldr	r3, [pc, #424]	@ (8002714 <main+0x19dc>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 800256e:	4b69      	ldr	r3, [pc, #420]	@ (8002714 <main+0x19dc>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002574:	2300      	movs	r3, #0
 8002576:	4a66      	ldr	r2, [pc, #408]	@ (8002710 <main+0x19d8>)
 8002578:	4966      	ldr	r1, [pc, #408]	@ (8002714 <main+0x19dc>)
 800257a:	4867      	ldr	r0, [pc, #412]	@ (8002718 <main+0x19e0>)
 800257c:	f001 fe8f 	bl	800429e <HAL_CAN_AddTxMessage>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f001 8079 	beq.w	800367a <main+0x2942>
          Error_Handler();
 8002588:	f001 fb74 	bl	8003c74 <Error_Handler>
        break;
 800258c:	f001 b875 	b.w	800367a <main+0x2942>

      case 13:
        can1_ams_s07_voltages_2.s07v07 = can1_ams_s07_voltages_2_s07v07_encode((float) rawVoltages[69] / 10000.0);
 8002590:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <main+0x19d0>)
 8002592:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259e:	ee17 0a90 	vmov	r0, s15
 80025a2:	f7fd ff75 	bl	8000490 <__aeabi_f2d>
 80025a6:	a356      	add	r3, pc, #344	@ (adr r3, 8002700 <main+0x19c8>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fe f8f2 	bl	8000794 <__aeabi_ddiv>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	ec43 2b17 	vmov	d7, r2, r3
 80025b8:	eeb0 0a47 	vmov.f32	s0, s14
 80025bc:	eef0 0a67 	vmov.f32	s1, s15
 80025c0:	f005 fefa 	bl	80083b8 <can1_ams_s07_voltages_2_s07v07_encode>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b54      	ldr	r3, [pc, #336]	@ (800271c <main+0x19e4>)
 80025ca:	701a      	strb	r2, [r3, #0]
        can1_ams_s07_voltages_2.s07v08 = can1_ams_s07_voltages_2_s07v08_encode((float) rawVoltages[70] / 10000.0);
 80025cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002708 <main+0x19d0>)
 80025ce:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025da:	ee17 0a90 	vmov	r0, s15
 80025de:	f7fd ff57 	bl	8000490 <__aeabi_f2d>
 80025e2:	a347      	add	r3, pc, #284	@ (adr r3, 8002700 <main+0x19c8>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7fe f8d4 	bl	8000794 <__aeabi_ddiv>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	ec43 2b17 	vmov	d7, r2, r3
 80025f4:	eeb0 0a47 	vmov.f32	s0, s14
 80025f8:	eef0 0a67 	vmov.f32	s1, s15
 80025fc:	f005 ff08 	bl	8008410 <can1_ams_s07_voltages_2_s07v08_encode>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	4b45      	ldr	r3, [pc, #276]	@ (800271c <main+0x19e4>)
 8002606:	705a      	strb	r2, [r3, #1]
        can1_ams_s07_voltages_2.s07v09 = can1_ams_s07_voltages_2_s07v09_encode((float) rawVoltages[71] / 10000.0);
 8002608:	4b3f      	ldr	r3, [pc, #252]	@ (8002708 <main+0x19d0>)
 800260a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002616:	ee17 0a90 	vmov	r0, s15
 800261a:	f7fd ff39 	bl	8000490 <__aeabi_f2d>
 800261e:	a338      	add	r3, pc, #224	@ (adr r3, 8002700 <main+0x19c8>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f7fe f8b6 	bl	8000794 <__aeabi_ddiv>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	ec43 2b17 	vmov	d7, r2, r3
 8002630:	eeb0 0a47 	vmov.f32	s0, s14
 8002634:	eef0 0a67 	vmov.f32	s1, s15
 8002638:	f005 ff16 	bl	8008468 <can1_ams_s07_voltages_2_s07v09_encode>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	4b36      	ldr	r3, [pc, #216]	@ (800271c <main+0x19e4>)
 8002642:	709a      	strb	r2, [r3, #2]
        can1_ams_s07_voltages_2.s07v10 = can1_ams_s07_voltages_2_s07v10_encode((float) rawVoltages[72] / 10000.0);
 8002644:	4b30      	ldr	r3, [pc, #192]	@ (8002708 <main+0x19d0>)
 8002646:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002652:	ee17 0a90 	vmov	r0, s15
 8002656:	f7fd ff1b 	bl	8000490 <__aeabi_f2d>
 800265a:	a329      	add	r3, pc, #164	@ (adr r3, 8002700 <main+0x19c8>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fe f898 	bl	8000794 <__aeabi_ddiv>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	ec43 2b17 	vmov	d7, r2, r3
 800266c:	eeb0 0a47 	vmov.f32	s0, s14
 8002670:	eef0 0a67 	vmov.f32	s1, s15
 8002674:	f005 ff24 	bl	80084c0 <can1_ams_s07_voltages_2_s07v10_encode>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4b27      	ldr	r3, [pc, #156]	@ (800271c <main+0x19e4>)
 800267e:	70da      	strb	r2, [r3, #3]
        can1_ams_s07_voltages_2.s07v11 = can1_ams_s07_voltages_2_s07v11_encode((float) rawVoltages[73] / 10000.0);
 8002680:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <main+0x19d0>)
 8002682:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268e:	ee17 0a90 	vmov	r0, s15
 8002692:	f7fd fefd 	bl	8000490 <__aeabi_f2d>
 8002696:	a31a      	add	r3, pc, #104	@ (adr r3, 8002700 <main+0x19c8>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe f87a 	bl	8000794 <__aeabi_ddiv>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	ec43 2b17 	vmov	d7, r2, r3
 80026a8:	eeb0 0a47 	vmov.f32	s0, s14
 80026ac:	eef0 0a67 	vmov.f32	s1, s15
 80026b0:	f005 ff32 	bl	8008518 <can1_ams_s07_voltages_2_s07v11_encode>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	4b18      	ldr	r3, [pc, #96]	@ (800271c <main+0x19e4>)
 80026ba:	711a      	strb	r2, [r3, #4]

        can1_ams_s07_voltages_2_pack(txData, &can1_ams_s07_voltages_2, CAN1_AMS_S07_VOLTAGES_2_LENGTH);
 80026bc:	2205      	movs	r2, #5
 80026be:	4917      	ldr	r1, [pc, #92]	@ (800271c <main+0x19e4>)
 80026c0:	4813      	ldr	r0, [pc, #76]	@ (8002710 <main+0x19d8>)
 80026c2:	f005 fe0f 	bl	80082e4 <can1_ams_s07_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S07_VOLTAGES_2_FRAME_ID;
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <main+0x19dc>)
 80026c8:	f240 2265 	movw	r2, #613	@ 0x265
 80026cc:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S07_VOLTAGES_2_LENGTH;
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <main+0x19dc>)
 80026d0:	2205      	movs	r2, #5
 80026d2:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <main+0x19dc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <main+0x19dc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80026e0:	2300      	movs	r3, #0
 80026e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002710 <main+0x19d8>)
 80026e4:	490b      	ldr	r1, [pc, #44]	@ (8002714 <main+0x19dc>)
 80026e6:	480c      	ldr	r0, [pc, #48]	@ (8002718 <main+0x19e0>)
 80026e8:	f001 fdd9 	bl	800429e <HAL_CAN_AddTxMessage>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 87c5 	beq.w	800367e <main+0x2946>
          Error_Handler();
 80026f4:	f001 fabe 	bl	8003c74 <Error_Handler>
        break;
 80026f8:	f000 bfc1 	b.w	800367e <main+0x2946>
 80026fc:	f3af 8000 	nop.w
 8002700:	00000000 	.word	0x00000000
 8002704:	40c38800 	.word	0x40c38800
 8002708:	2000029c 	.word	0x2000029c
 800270c:	200001c8 	.word	0x200001c8
 8002710:	20000120 	.word	0x20000120
 8002714:	200000ec 	.word	0x200000ec
 8002718:	20000044 	.word	0x20000044
 800271c:	200001d0 	.word	0x200001d0

      case 14:
        can1_ams_s08_voltages_1.s08v01 = can1_ams_s08_voltages_1_s08v01_encode((float) rawVoltages[74] / 10000.0);
 8002720:	4bb7      	ldr	r3, [pc, #732]	@ (8002a00 <main+0x1cc8>)
 8002722:	f8b3 3094 	ldrh.w	r3, [r3, #148]	@ 0x94
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272e:	ee17 0a90 	vmov	r0, s15
 8002732:	f7fd fead 	bl	8000490 <__aeabi_f2d>
 8002736:	a3b0      	add	r3, pc, #704	@ (adr r3, 80029f8 <main+0x1cc0>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fe f82a 	bl	8000794 <__aeabi_ddiv>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	ec43 2b17 	vmov	d7, r2, r3
 8002748:	eeb0 0a47 	vmov.f32	s0, s14
 800274c:	eef0 0a67 	vmov.f32	s1, s15
 8002750:	f005 ff86 	bl	8008660 <can1_ams_s08_voltages_1_s08v01_encode>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	4baa      	ldr	r3, [pc, #680]	@ (8002a04 <main+0x1ccc>)
 800275a:	701a      	strb	r2, [r3, #0]
        can1_ams_s08_voltages_1.s08v02 = can1_ams_s08_voltages_1_s08v02_encode((float) rawVoltages[75] / 10000.0);
 800275c:	4ba8      	ldr	r3, [pc, #672]	@ (8002a00 <main+0x1cc8>)
 800275e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	ee17 0a90 	vmov	r0, s15
 800276e:	f7fd fe8f 	bl	8000490 <__aeabi_f2d>
 8002772:	a3a1      	add	r3, pc, #644	@ (adr r3, 80029f8 <main+0x1cc0>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fe f80c 	bl	8000794 <__aeabi_ddiv>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	ec43 2b17 	vmov	d7, r2, r3
 8002784:	eeb0 0a47 	vmov.f32	s0, s14
 8002788:	eef0 0a67 	vmov.f32	s1, s15
 800278c:	f005 ff94 	bl	80086b8 <can1_ams_s08_voltages_1_s08v02_encode>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	4b9b      	ldr	r3, [pc, #620]	@ (8002a04 <main+0x1ccc>)
 8002796:	705a      	strb	r2, [r3, #1]
        can1_ams_s08_voltages_1.s08v03 = can1_ams_s08_voltages_1_s08v03_encode((float) rawVoltages[76] / 10000.0);
 8002798:	4b99      	ldr	r3, [pc, #612]	@ (8002a00 <main+0x1cc8>)
 800279a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a6:	ee17 0a90 	vmov	r0, s15
 80027aa:	f7fd fe71 	bl	8000490 <__aeabi_f2d>
 80027ae:	a392      	add	r3, pc, #584	@ (adr r3, 80029f8 <main+0x1cc0>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd ffee 	bl	8000794 <__aeabi_ddiv>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	ec43 2b17 	vmov	d7, r2, r3
 80027c0:	eeb0 0a47 	vmov.f32	s0, s14
 80027c4:	eef0 0a67 	vmov.f32	s1, s15
 80027c8:	f005 ffa2 	bl	8008710 <can1_ams_s08_voltages_1_s08v03_encode>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002a04 <main+0x1ccc>)
 80027d2:	709a      	strb	r2, [r3, #2]
        can1_ams_s08_voltages_1.s08v04 = can1_ams_s08_voltages_1_s08v04_encode((float) rawVoltages[77] / 10000.0);
 80027d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002a00 <main+0x1cc8>)
 80027d6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e2:	ee17 0a90 	vmov	r0, s15
 80027e6:	f7fd fe53 	bl	8000490 <__aeabi_f2d>
 80027ea:	a383      	add	r3, pc, #524	@ (adr r3, 80029f8 <main+0x1cc0>)
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	f7fd ffd0 	bl	8000794 <__aeabi_ddiv>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	ec43 2b17 	vmov	d7, r2, r3
 80027fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002800:	eef0 0a67 	vmov.f32	s1, s15
 8002804:	f005 ffb0 	bl	8008768 <can1_ams_s08_voltages_1_s08v04_encode>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	4b7d      	ldr	r3, [pc, #500]	@ (8002a04 <main+0x1ccc>)
 800280e:	70da      	strb	r2, [r3, #3]
        can1_ams_s08_voltages_1.s08v05 = can1_ams_s08_voltages_1_s08v05_encode((float) rawVoltages[78] / 10000.0);
 8002810:	4b7b      	ldr	r3, [pc, #492]	@ (8002a00 <main+0x1cc8>)
 8002812:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281e:	ee17 0a90 	vmov	r0, s15
 8002822:	f7fd fe35 	bl	8000490 <__aeabi_f2d>
 8002826:	a374      	add	r3, pc, #464	@ (adr r3, 80029f8 <main+0x1cc0>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd ffb2 	bl	8000794 <__aeabi_ddiv>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	ec43 2b17 	vmov	d7, r2, r3
 8002838:	eeb0 0a47 	vmov.f32	s0, s14
 800283c:	eef0 0a67 	vmov.f32	s1, s15
 8002840:	f005 ffbe 	bl	80087c0 <can1_ams_s08_voltages_1_s08v05_encode>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	4b6e      	ldr	r3, [pc, #440]	@ (8002a04 <main+0x1ccc>)
 800284a:	711a      	strb	r2, [r3, #4]
        can1_ams_s08_voltages_1.s08v06 = can1_ams_s08_voltages_1_s08v06_encode((float) rawVoltages[79] / 10000.0);
 800284c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a00 <main+0x1cc8>)
 800284e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285a:	ee17 0a90 	vmov	r0, s15
 800285e:	f7fd fe17 	bl	8000490 <__aeabi_f2d>
 8002862:	a365      	add	r3, pc, #404	@ (adr r3, 80029f8 <main+0x1cc0>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd ff94 	bl	8000794 <__aeabi_ddiv>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	ec43 2b17 	vmov	d7, r2, r3
 8002874:	eeb0 0a47 	vmov.f32	s0, s14
 8002878:	eef0 0a67 	vmov.f32	s1, s15
 800287c:	f005 ffcc 	bl	8008818 <can1_ams_s08_voltages_1_s08v06_encode>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	4b5f      	ldr	r3, [pc, #380]	@ (8002a04 <main+0x1ccc>)
 8002886:	715a      	strb	r2, [r3, #5]

        can1_ams_s08_voltages_1_pack(txData, &can1_ams_s08_voltages_1, CAN1_AMS_S08_VOLTAGES_1_LENGTH);
 8002888:	2206      	movs	r2, #6
 800288a:	495e      	ldr	r1, [pc, #376]	@ (8002a04 <main+0x1ccc>)
 800288c:	485e      	ldr	r0, [pc, #376]	@ (8002a08 <main+0x1cd0>)
 800288e:	f005 fe6d 	bl	800856c <can1_ams_s08_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S08_VOLTAGES_1_FRAME_ID;
 8002892:	4b5e      	ldr	r3, [pc, #376]	@ (8002a0c <main+0x1cd4>)
 8002894:	f240 2266 	movw	r2, #614	@ 0x266
 8002898:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S08_VOLTAGES_1_LENGTH;
 800289a:	4b5c      	ldr	r3, [pc, #368]	@ (8002a0c <main+0x1cd4>)
 800289c:	2206      	movs	r2, #6
 800289e:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 80028a0:	4b5a      	ldr	r3, [pc, #360]	@ (8002a0c <main+0x1cd4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 80028a6:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <main+0x1cd4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80028ac:	2300      	movs	r3, #0
 80028ae:	4a56      	ldr	r2, [pc, #344]	@ (8002a08 <main+0x1cd0>)
 80028b0:	4956      	ldr	r1, [pc, #344]	@ (8002a0c <main+0x1cd4>)
 80028b2:	4857      	ldr	r0, [pc, #348]	@ (8002a10 <main+0x1cd8>)
 80028b4:	f001 fcf3 	bl	800429e <HAL_CAN_AddTxMessage>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 86e1 	beq.w	8003682 <main+0x294a>
          Error_Handler();
 80028c0:	f001 f9d8 	bl	8003c74 <Error_Handler>
        break;
 80028c4:	f000 bedd 	b.w	8003682 <main+0x294a>

      case 15:
        can1_ams_s08_voltages_2.s08v07 = can1_ams_s08_voltages_2_s08v07_encode((float) rawVoltages[80] / 10000.0);
 80028c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a00 <main+0x1cc8>)
 80028ca:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d6:	ee17 0a90 	vmov	r0, s15
 80028da:	f7fd fdd9 	bl	8000490 <__aeabi_f2d>
 80028de:	a346      	add	r3, pc, #280	@ (adr r3, 80029f8 <main+0x1cc0>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd ff56 	bl	8000794 <__aeabi_ddiv>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	ec43 2b17 	vmov	d7, r2, r3
 80028f0:	eeb0 0a47 	vmov.f32	s0, s14
 80028f4:	eef0 0a67 	vmov.f32	s1, s15
 80028f8:	f006 f822 	bl	8008940 <can1_ams_s08_voltages_2_s08v07_encode>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	4b44      	ldr	r3, [pc, #272]	@ (8002a14 <main+0x1cdc>)
 8002902:	701a      	strb	r2, [r3, #0]
        can1_ams_s08_voltages_2.s08v08 = can1_ams_s08_voltages_2_s08v08_encode((float) rawVoltages[81] / 10000.0);
 8002904:	4b3e      	ldr	r3, [pc, #248]	@ (8002a00 <main+0x1cc8>)
 8002906:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002912:	ee17 0a90 	vmov	r0, s15
 8002916:	f7fd fdbb 	bl	8000490 <__aeabi_f2d>
 800291a:	a337      	add	r3, pc, #220	@ (adr r3, 80029f8 <main+0x1cc0>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd ff38 	bl	8000794 <__aeabi_ddiv>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	ec43 2b17 	vmov	d7, r2, r3
 800292c:	eeb0 0a47 	vmov.f32	s0, s14
 8002930:	eef0 0a67 	vmov.f32	s1, s15
 8002934:	f006 f830 	bl	8008998 <can1_ams_s08_voltages_2_s08v08_encode>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	4b35      	ldr	r3, [pc, #212]	@ (8002a14 <main+0x1cdc>)
 800293e:	705a      	strb	r2, [r3, #1]
        can1_ams_s08_voltages_2.s08v09 = can1_ams_s08_voltages_2_s08v09_encode((float) rawVoltages[82] / 10000.0);
 8002940:	4b2f      	ldr	r3, [pc, #188]	@ (8002a00 <main+0x1cc8>)
 8002942:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294e:	ee17 0a90 	vmov	r0, s15
 8002952:	f7fd fd9d 	bl	8000490 <__aeabi_f2d>
 8002956:	a328      	add	r3, pc, #160	@ (adr r3, 80029f8 <main+0x1cc0>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f7fd ff1a 	bl	8000794 <__aeabi_ddiv>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	ec43 2b17 	vmov	d7, r2, r3
 8002968:	eeb0 0a47 	vmov.f32	s0, s14
 800296c:	eef0 0a67 	vmov.f32	s1, s15
 8002970:	f006 f83e 	bl	80089f0 <can1_ams_s08_voltages_2_s08v09_encode>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <main+0x1cdc>)
 800297a:	709a      	strb	r2, [r3, #2]
        can1_ams_s08_voltages_2.s08v10 = can1_ams_s08_voltages_2_s08v10_encode((float) rawVoltages[83] / 10000.0);
 800297c:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <main+0x1cc8>)
 800297e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298a:	ee17 0a90 	vmov	r0, s15
 800298e:	f7fd fd7f 	bl	8000490 <__aeabi_f2d>
 8002992:	a319      	add	r3, pc, #100	@ (adr r3, 80029f8 <main+0x1cc0>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fefc 	bl	8000794 <__aeabi_ddiv>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	ec43 2b17 	vmov	d7, r2, r3
 80029a4:	eeb0 0a47 	vmov.f32	s0, s14
 80029a8:	eef0 0a67 	vmov.f32	s1, s15
 80029ac:	f006 f84c 	bl	8008a48 <can1_ams_s08_voltages_2_s08v10_encode>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <main+0x1cdc>)
 80029b6:	70da      	strb	r2, [r3, #3]

        can1_ams_s08_voltages_2_pack(txData, &can1_ams_s08_voltages_2, CAN1_AMS_S08_VOLTAGES_2_LENGTH);
 80029b8:	2205      	movs	r2, #5
 80029ba:	4916      	ldr	r1, [pc, #88]	@ (8002a14 <main+0x1cdc>)
 80029bc:	4812      	ldr	r0, [pc, #72]	@ (8002a08 <main+0x1cd0>)
 80029be:	f005 ff55 	bl	800886c <can1_ams_s08_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S08_VOLTAGES_2_FRAME_ID;
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <main+0x1cd4>)
 80029c4:	f240 2267 	movw	r2, #615	@ 0x267
 80029c8:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S08_VOLTAGES_2_LENGTH;
 80029ca:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <main+0x1cd4>)
 80029cc:	2205      	movs	r2, #5
 80029ce:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 80029d0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <main+0x1cd4>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <main+0x1cd4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80029dc:	2300      	movs	r3, #0
 80029de:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <main+0x1cd0>)
 80029e0:	490a      	ldr	r1, [pc, #40]	@ (8002a0c <main+0x1cd4>)
 80029e2:	480b      	ldr	r0, [pc, #44]	@ (8002a10 <main+0x1cd8>)
 80029e4:	f001 fc5b 	bl	800429e <HAL_CAN_AddTxMessage>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 864b 	beq.w	8003686 <main+0x294e>
          Error_Handler();
 80029f0:	f001 f940 	bl	8003c74 <Error_Handler>
        break;
 80029f4:	f000 be47 	b.w	8003686 <main+0x294e>
 80029f8:	00000000 	.word	0x00000000
 80029fc:	40c38800 	.word	0x40c38800
 8002a00:	2000029c 	.word	0x2000029c
 8002a04:	200001d8 	.word	0x200001d8
 8002a08:	20000120 	.word	0x20000120
 8002a0c:	200000ec 	.word	0x200000ec
 8002a10:	20000044 	.word	0x20000044
 8002a14:	200001e0 	.word	0x200001e0

      case 16:
        can1_ams_s09_voltages_1.s09v01 = can1_ams_s09_voltages_1_s09v01_encode((float) rawVoltages[84] / 10000.0);
 8002a18:	4bc7      	ldr	r3, [pc, #796]	@ (8002d38 <main+0x2000>)
 8002a1a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	ee17 0a90 	vmov	r0, s15
 8002a2a:	f7fd fd31 	bl	8000490 <__aeabi_f2d>
 8002a2e:	a3c0      	add	r3, pc, #768	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd feae 	bl	8000794 <__aeabi_ddiv>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	ec43 2b17 	vmov	d7, r2, r3
 8002a40:	eeb0 0a47 	vmov.f32	s0, s14
 8002a44:	eef0 0a67 	vmov.f32	s1, s15
 8002a48:	f006 f8a2 	bl	8008b90 <can1_ams_s09_voltages_1_s09v01_encode>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4bba      	ldr	r3, [pc, #744]	@ (8002d3c <main+0x2004>)
 8002a52:	701a      	strb	r2, [r3, #0]
        can1_ams_s09_voltages_1.s09v02 = can1_ams_s09_voltages_1_s09v02_encode((float) rawVoltages[85] / 10000.0);
 8002a54:	4bb8      	ldr	r3, [pc, #736]	@ (8002d38 <main+0x2000>)
 8002a56:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a62:	ee17 0a90 	vmov	r0, s15
 8002a66:	f7fd fd13 	bl	8000490 <__aeabi_f2d>
 8002a6a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fe90 	bl	8000794 <__aeabi_ddiv>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	ec43 2b17 	vmov	d7, r2, r3
 8002a7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a80:	eef0 0a67 	vmov.f32	s1, s15
 8002a84:	f006 f8b0 	bl	8008be8 <can1_ams_s09_voltages_1_s09v02_encode>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4bab      	ldr	r3, [pc, #684]	@ (8002d3c <main+0x2004>)
 8002a8e:	705a      	strb	r2, [r3, #1]
        can1_ams_s09_voltages_1.s09v03 = can1_ams_s09_voltages_1_s09v03_encode((float) rawVoltages[86] / 10000.0);
 8002a90:	4ba9      	ldr	r3, [pc, #676]	@ (8002d38 <main+0x2000>)
 8002a92:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	ee17 0a90 	vmov	r0, s15
 8002aa2:	f7fd fcf5 	bl	8000490 <__aeabi_f2d>
 8002aa6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fe72 	bl	8000794 <__aeabi_ddiv>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	ec43 2b17 	vmov	d7, r2, r3
 8002ab8:	eeb0 0a47 	vmov.f32	s0, s14
 8002abc:	eef0 0a67 	vmov.f32	s1, s15
 8002ac0:	f006 f8be 	bl	8008c40 <can1_ams_s09_voltages_1_s09v03_encode>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d3c <main+0x2004>)
 8002aca:	709a      	strb	r2, [r3, #2]
        can1_ams_s09_voltages_1.s09v04 = can1_ams_s09_voltages_1_s09v04_encode((float) rawVoltages[87] / 10000.0);
 8002acc:	4b9a      	ldr	r3, [pc, #616]	@ (8002d38 <main+0x2000>)
 8002ace:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	ee17 0a90 	vmov	r0, s15
 8002ade:	f7fd fcd7 	bl	8000490 <__aeabi_f2d>
 8002ae2:	a393      	add	r3, pc, #588	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd fe54 	bl	8000794 <__aeabi_ddiv>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	ec43 2b17 	vmov	d7, r2, r3
 8002af4:	eeb0 0a47 	vmov.f32	s0, s14
 8002af8:	eef0 0a67 	vmov.f32	s1, s15
 8002afc:	f006 f8cc 	bl	8008c98 <can1_ams_s09_voltages_1_s09v04_encode>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b8d      	ldr	r3, [pc, #564]	@ (8002d3c <main+0x2004>)
 8002b06:	70da      	strb	r2, [r3, #3]
        can1_ams_s09_voltages_1.s09v05 = can1_ams_s09_voltages_1_s09v05_encode((float) rawVoltages[88] / 10000.0);
 8002b08:	4b8b      	ldr	r3, [pc, #556]	@ (8002d38 <main+0x2000>)
 8002b0a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b16:	ee17 0a90 	vmov	r0, s15
 8002b1a:	f7fd fcb9 	bl	8000490 <__aeabi_f2d>
 8002b1e:	a384      	add	r3, pc, #528	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd fe36 	bl	8000794 <__aeabi_ddiv>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	ec43 2b17 	vmov	d7, r2, r3
 8002b30:	eeb0 0a47 	vmov.f32	s0, s14
 8002b34:	eef0 0a67 	vmov.f32	s1, s15
 8002b38:	f006 f8da 	bl	8008cf0 <can1_ams_s09_voltages_1_s09v05_encode>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b7e      	ldr	r3, [pc, #504]	@ (8002d3c <main+0x2004>)
 8002b42:	711a      	strb	r2, [r3, #4]
        can1_ams_s09_voltages_1.s09v06 = can1_ams_s09_voltages_1_s09v06_encode((float) rawVoltages[89] / 10000.0);
 8002b44:	4b7c      	ldr	r3, [pc, #496]	@ (8002d38 <main+0x2000>)
 8002b46:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	ee17 0a90 	vmov	r0, s15
 8002b56:	f7fd fc9b 	bl	8000490 <__aeabi_f2d>
 8002b5a:	a375      	add	r3, pc, #468	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fe18 	bl	8000794 <__aeabi_ddiv>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	ec43 2b17 	vmov	d7, r2, r3
 8002b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b70:	eef0 0a67 	vmov.f32	s1, s15
 8002b74:	f006 f8e8 	bl	8008d48 <can1_ams_s09_voltages_1_s09v06_encode>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d3c <main+0x2004>)
 8002b7e:	715a      	strb	r2, [r3, #5]

        can1_ams_s09_voltages_1_pack(txData, &can1_ams_s09_voltages_1, CAN1_AMS_S09_VOLTAGES_1_LENGTH);
 8002b80:	2206      	movs	r2, #6
 8002b82:	496e      	ldr	r1, [pc, #440]	@ (8002d3c <main+0x2004>)
 8002b84:	486e      	ldr	r0, [pc, #440]	@ (8002d40 <main+0x2008>)
 8002b86:	f005 ff89 	bl	8008a9c <can1_ams_s09_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S09_VOLTAGES_1_FRAME_ID;
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d44 <main+0x200c>)
 8002b8c:	f44f 721a 	mov.w	r2, #616	@ 0x268
 8002b90:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S09_VOLTAGES_1_LENGTH;
 8002b92:	4b6c      	ldr	r3, [pc, #432]	@ (8002d44 <main+0x200c>)
 8002b94:	2206      	movs	r2, #6
 8002b96:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8002b98:	4b6a      	ldr	r3, [pc, #424]	@ (8002d44 <main+0x200c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8002b9e:	4b69      	ldr	r3, [pc, #420]	@ (8002d44 <main+0x200c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4a66      	ldr	r2, [pc, #408]	@ (8002d40 <main+0x2008>)
 8002ba8:	4966      	ldr	r1, [pc, #408]	@ (8002d44 <main+0x200c>)
 8002baa:	4867      	ldr	r0, [pc, #412]	@ (8002d48 <main+0x2010>)
 8002bac:	f001 fb77 	bl	800429e <HAL_CAN_AddTxMessage>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8569 	beq.w	800368a <main+0x2952>
          Error_Handler();
 8002bb8:	f001 f85c 	bl	8003c74 <Error_Handler>
        break;
 8002bbc:	f000 bd65 	b.w	800368a <main+0x2952>

      case 17:
        can1_ams_s09_voltages_2.s09v07 = can1_ams_s09_voltages_2_s09v07_encode((float) rawVoltages[90] / 10000.0);
 8002bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8002d38 <main+0x2000>)
 8002bc2:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bce:	ee17 0a90 	vmov	r0, s15
 8002bd2:	f7fd fc5d 	bl	8000490 <__aeabi_f2d>
 8002bd6:	a356      	add	r3, pc, #344	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f7fd fdda 	bl	8000794 <__aeabi_ddiv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	ec43 2b17 	vmov	d7, r2, r3
 8002be8:	eeb0 0a47 	vmov.f32	s0, s14
 8002bec:	eef0 0a67 	vmov.f32	s1, s15
 8002bf0:	f006 f93e 	bl	8008e70 <can1_ams_s09_voltages_2_s09v07_encode>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b54      	ldr	r3, [pc, #336]	@ (8002d4c <main+0x2014>)
 8002bfa:	701a      	strb	r2, [r3, #0]
        can1_ams_s09_voltages_2.s09v08 = can1_ams_s09_voltages_2_s09v08_encode((float) rawVoltages[91] / 10000.0);
 8002bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d38 <main+0x2000>)
 8002bfe:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0a:	ee17 0a90 	vmov	r0, s15
 8002c0e:	f7fd fc3f 	bl	8000490 <__aeabi_f2d>
 8002c12:	a347      	add	r3, pc, #284	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f7fd fdbc 	bl	8000794 <__aeabi_ddiv>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	ec43 2b17 	vmov	d7, r2, r3
 8002c24:	eeb0 0a47 	vmov.f32	s0, s14
 8002c28:	eef0 0a67 	vmov.f32	s1, s15
 8002c2c:	f006 f94c 	bl	8008ec8 <can1_ams_s09_voltages_2_s09v08_encode>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b45      	ldr	r3, [pc, #276]	@ (8002d4c <main+0x2014>)
 8002c36:	705a      	strb	r2, [r3, #1]
        can1_ams_s09_voltages_2.s09v09 = can1_ams_s09_voltages_2_s09v09_encode((float) rawVoltages[92] / 10000.0);
 8002c38:	4b3f      	ldr	r3, [pc, #252]	@ (8002d38 <main+0x2000>)
 8002c3a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	ee17 0a90 	vmov	r0, s15
 8002c4a:	f7fd fc21 	bl	8000490 <__aeabi_f2d>
 8002c4e:	a338      	add	r3, pc, #224	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fd9e 	bl	8000794 <__aeabi_ddiv>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	ec43 2b17 	vmov	d7, r2, r3
 8002c60:	eeb0 0a47 	vmov.f32	s0, s14
 8002c64:	eef0 0a67 	vmov.f32	s1, s15
 8002c68:	f006 f95a 	bl	8008f20 <can1_ams_s09_voltages_2_s09v09_encode>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b36      	ldr	r3, [pc, #216]	@ (8002d4c <main+0x2014>)
 8002c72:	709a      	strb	r2, [r3, #2]
        can1_ams_s09_voltages_2.s09v10 = can1_ams_s09_voltages_2_s09v10_encode((float) rawVoltages[93] / 10000.0);
 8002c74:	4b30      	ldr	r3, [pc, #192]	@ (8002d38 <main+0x2000>)
 8002c76:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c82:	ee17 0a90 	vmov	r0, s15
 8002c86:	f7fd fc03 	bl	8000490 <__aeabi_f2d>
 8002c8a:	a329      	add	r3, pc, #164	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f7fd fd80 	bl	8000794 <__aeabi_ddiv>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	ec43 2b17 	vmov	d7, r2, r3
 8002c9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002ca0:	eef0 0a67 	vmov.f32	s1, s15
 8002ca4:	f006 f968 	bl	8008f78 <can1_ams_s09_voltages_2_s09v10_encode>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <main+0x2014>)
 8002cae:	70da      	strb	r2, [r3, #3]
        can1_ams_s09_voltages_2.s09v11 = can1_ams_s09_voltages_2_s09v11_encode((float) rawVoltages[94] / 10000.0);
 8002cb0:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <main+0x2000>)
 8002cb2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbe:	ee17 0a90 	vmov	r0, s15
 8002cc2:	f7fd fbe5 	bl	8000490 <__aeabi_f2d>
 8002cc6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002d30 <main+0x1ff8>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fd62 	bl	8000794 <__aeabi_ddiv>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	ec43 2b17 	vmov	d7, r2, r3
 8002cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cdc:	eef0 0a67 	vmov.f32	s1, s15
 8002ce0:	f006 f976 	bl	8008fd0 <can1_ams_s09_voltages_2_s09v11_encode>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <main+0x2014>)
 8002cea:	711a      	strb	r2, [r3, #4]

        can1_ams_s09_voltages_2_pack(txData, &can1_ams_s09_voltages_2, CAN1_AMS_S09_VOLTAGES_2_LENGTH);
 8002cec:	2205      	movs	r2, #5
 8002cee:	4917      	ldr	r1, [pc, #92]	@ (8002d4c <main+0x2014>)
 8002cf0:	4813      	ldr	r0, [pc, #76]	@ (8002d40 <main+0x2008>)
 8002cf2:	f006 f853 	bl	8008d9c <can1_ams_s09_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S09_VOLTAGES_2_FRAME_ID;
 8002cf6:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <main+0x200c>)
 8002cf8:	f240 2269 	movw	r2, #617	@ 0x269
 8002cfc:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S09_VOLTAGES_2_LENGTH;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <main+0x200c>)
 8002d00:	2205      	movs	r2, #5
 8002d02:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8002d04:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <main+0x200c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <main+0x200c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002d10:	2300      	movs	r3, #0
 8002d12:	4a0b      	ldr	r2, [pc, #44]	@ (8002d40 <main+0x2008>)
 8002d14:	490b      	ldr	r1, [pc, #44]	@ (8002d44 <main+0x200c>)
 8002d16:	480c      	ldr	r0, [pc, #48]	@ (8002d48 <main+0x2010>)
 8002d18:	f001 fac1 	bl	800429e <HAL_CAN_AddTxMessage>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 84b5 	beq.w	800368e <main+0x2956>
          Error_Handler();
 8002d24:	f000 ffa6 	bl	8003c74 <Error_Handler>
        break;
 8002d28:	f000 bcb1 	b.w	800368e <main+0x2956>
 8002d2c:	f3af 8000 	nop.w
 8002d30:	00000000 	.word	0x00000000
 8002d34:	40c38800 	.word	0x40c38800
 8002d38:	2000029c 	.word	0x2000029c
 8002d3c:	200001e8 	.word	0x200001e8
 8002d40:	20000120 	.word	0x20000120
 8002d44:	200000ec 	.word	0x200000ec
 8002d48:	20000044 	.word	0x20000044
 8002d4c:	200001f0 	.word	0x200001f0

      case 18:
        can1_ams_s10_voltages_1.s10v01 = can1_ams_s10_voltages_1_s10v01_encode((float) rawVoltages[95] / 10000.0);
 8002d50:	4bb7      	ldr	r3, [pc, #732]	@ (8003030 <main+0x22f8>)
 8002d52:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5e:	ee17 0a90 	vmov	r0, s15
 8002d62:	f7fd fb95 	bl	8000490 <__aeabi_f2d>
 8002d66:	a3b0      	add	r3, pc, #704	@ (adr r3, 8003028 <main+0x22f0>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd fd12 	bl	8000794 <__aeabi_ddiv>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	ec43 2b17 	vmov	d7, r2, r3
 8002d78:	eeb0 0a47 	vmov.f32	s0, s14
 8002d7c:	eef0 0a67 	vmov.f32	s1, s15
 8002d80:	f006 f9ca 	bl	8009118 <can1_ams_s10_voltages_1_s10v01_encode>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4baa      	ldr	r3, [pc, #680]	@ (8003034 <main+0x22fc>)
 8002d8a:	701a      	strb	r2, [r3, #0]
        can1_ams_s10_voltages_1.s10v02 = can1_ams_s10_voltages_1_s10v02_encode((float) rawVoltages[96] / 10000.0);
 8002d8c:	4ba8      	ldr	r3, [pc, #672]	@ (8003030 <main+0x22f8>)
 8002d8e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	ee17 0a90 	vmov	r0, s15
 8002d9e:	f7fd fb77 	bl	8000490 <__aeabi_f2d>
 8002da2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003028 <main+0x22f0>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f7fd fcf4 	bl	8000794 <__aeabi_ddiv>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	ec43 2b17 	vmov	d7, r2, r3
 8002db4:	eeb0 0a47 	vmov.f32	s0, s14
 8002db8:	eef0 0a67 	vmov.f32	s1, s15
 8002dbc:	f006 f9d8 	bl	8009170 <can1_ams_s10_voltages_1_s10v02_encode>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8003034 <main+0x22fc>)
 8002dc6:	705a      	strb	r2, [r3, #1]
        can1_ams_s10_voltages_1.s10v03 = can1_ams_s10_voltages_1_s10v03_encode((float) rawVoltages[97] / 10000.0);
 8002dc8:	4b99      	ldr	r3, [pc, #612]	@ (8003030 <main+0x22f8>)
 8002dca:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	@ 0xc2
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd6:	ee17 0a90 	vmov	r0, s15
 8002dda:	f7fd fb59 	bl	8000490 <__aeabi_f2d>
 8002dde:	a392      	add	r3, pc, #584	@ (adr r3, 8003028 <main+0x22f0>)
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd fcd6 	bl	8000794 <__aeabi_ddiv>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	ec43 2b17 	vmov	d7, r2, r3
 8002df0:	eeb0 0a47 	vmov.f32	s0, s14
 8002df4:	eef0 0a67 	vmov.f32	s1, s15
 8002df8:	f006 f9e6 	bl	80091c8 <can1_ams_s10_voltages_1_s10v03_encode>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b8c      	ldr	r3, [pc, #560]	@ (8003034 <main+0x22fc>)
 8002e02:	709a      	strb	r2, [r3, #2]
        can1_ams_s10_voltages_1.s10v04 = can1_ams_s10_voltages_1_s10v04_encode((float) rawVoltages[98] / 10000.0);
 8002e04:	4b8a      	ldr	r3, [pc, #552]	@ (8003030 <main+0x22f8>)
 8002e06:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	@ 0xc4
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	ee17 0a90 	vmov	r0, s15
 8002e16:	f7fd fb3b 	bl	8000490 <__aeabi_f2d>
 8002e1a:	a383      	add	r3, pc, #524	@ (adr r3, 8003028 <main+0x22f0>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f7fd fcb8 	bl	8000794 <__aeabi_ddiv>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	ec43 2b17 	vmov	d7, r2, r3
 8002e2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e30:	eef0 0a67 	vmov.f32	s1, s15
 8002e34:	f006 f9f4 	bl	8009220 <can1_ams_s10_voltages_1_s10v04_encode>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b7d      	ldr	r3, [pc, #500]	@ (8003034 <main+0x22fc>)
 8002e3e:	70da      	strb	r2, [r3, #3]
        can1_ams_s10_voltages_1.s10v05 = can1_ams_s10_voltages_1_s10v05_encode((float) rawVoltages[99] / 10000.0);
 8002e40:	4b7b      	ldr	r3, [pc, #492]	@ (8003030 <main+0x22f8>)
 8002e42:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	@ 0xc6
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4e:	ee17 0a90 	vmov	r0, s15
 8002e52:	f7fd fb1d 	bl	8000490 <__aeabi_f2d>
 8002e56:	a374      	add	r3, pc, #464	@ (adr r3, 8003028 <main+0x22f0>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fc9a 	bl	8000794 <__aeabi_ddiv>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	ec43 2b17 	vmov	d7, r2, r3
 8002e68:	eeb0 0a47 	vmov.f32	s0, s14
 8002e6c:	eef0 0a67 	vmov.f32	s1, s15
 8002e70:	f006 fa02 	bl	8009278 <can1_ams_s10_voltages_1_s10v05_encode>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b6e      	ldr	r3, [pc, #440]	@ (8003034 <main+0x22fc>)
 8002e7a:	711a      	strb	r2, [r3, #4]
        can1_ams_s10_voltages_1.s10v06 = can1_ams_s10_voltages_1_s10v06_encode((float) rawVoltages[100] / 10000.0);
 8002e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003030 <main+0x22f8>)
 8002e7e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	@ 0xc8
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8a:	ee17 0a90 	vmov	r0, s15
 8002e8e:	f7fd faff 	bl	8000490 <__aeabi_f2d>
 8002e92:	a365      	add	r3, pc, #404	@ (adr r3, 8003028 <main+0x22f0>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd fc7c 	bl	8000794 <__aeabi_ddiv>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	ec43 2b17 	vmov	d7, r2, r3
 8002ea4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea8:	eef0 0a67 	vmov.f32	s1, s15
 8002eac:	f006 fa10 	bl	80092d0 <can1_ams_s10_voltages_1_s10v06_encode>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b5f      	ldr	r3, [pc, #380]	@ (8003034 <main+0x22fc>)
 8002eb6:	715a      	strb	r2, [r3, #5]

        can1_ams_s10_voltages_1_pack(txData, &can1_ams_s10_voltages_1, CAN1_AMS_S10_VOLTAGES_1_LENGTH);
 8002eb8:	2206      	movs	r2, #6
 8002eba:	495e      	ldr	r1, [pc, #376]	@ (8003034 <main+0x22fc>)
 8002ebc:	485e      	ldr	r0, [pc, #376]	@ (8003038 <main+0x2300>)
 8002ebe:	f006 f8b1 	bl	8009024 <can1_ams_s10_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S10_VOLTAGES_1_FRAME_ID;
 8002ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800303c <main+0x2304>)
 8002ec4:	f240 226a 	movw	r2, #618	@ 0x26a
 8002ec8:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S10_VOLTAGES_1_LENGTH;
 8002eca:	4b5c      	ldr	r3, [pc, #368]	@ (800303c <main+0x2304>)
 8002ecc:	2206      	movs	r2, #6
 8002ece:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8002ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800303c <main+0x2304>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8002ed6:	4b59      	ldr	r3, [pc, #356]	@ (800303c <main+0x2304>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8002edc:	2300      	movs	r3, #0
 8002ede:	4a56      	ldr	r2, [pc, #344]	@ (8003038 <main+0x2300>)
 8002ee0:	4956      	ldr	r1, [pc, #344]	@ (800303c <main+0x2304>)
 8002ee2:	4857      	ldr	r0, [pc, #348]	@ (8003040 <main+0x2308>)
 8002ee4:	f001 f9db 	bl	800429e <HAL_CAN_AddTxMessage>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 83d1 	beq.w	8003692 <main+0x295a>
          Error_Handler();
 8002ef0:	f000 fec0 	bl	8003c74 <Error_Handler>
        break;
 8002ef4:	e3cd      	b.n	8003692 <main+0x295a>

      case 19:
        can1_ams_s10_voltages_2.s10v07 = can1_ams_s10_voltages_2_s10v07_encode((float) rawVoltages[101] / 10000.0);
 8002ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8003030 <main+0x22f8>)
 8002ef8:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f04:	ee17 0a90 	vmov	r0, s15
 8002f08:	f7fd fac2 	bl	8000490 <__aeabi_f2d>
 8002f0c:	a346      	add	r3, pc, #280	@ (adr r3, 8003028 <main+0x22f0>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd fc3f 	bl	8000794 <__aeabi_ddiv>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	ec43 2b17 	vmov	d7, r2, r3
 8002f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f22:	eef0 0a67 	vmov.f32	s1, s15
 8002f26:	f006 fa67 	bl	80093f8 <can1_ams_s10_voltages_2_s10v07_encode>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b45      	ldr	r3, [pc, #276]	@ (8003044 <main+0x230c>)
 8002f30:	701a      	strb	r2, [r3, #0]
        can1_ams_s10_voltages_2.s10v08 = can1_ams_s10_voltages_2_s10v08_encode((float) rawVoltages[102] / 10000.0);
 8002f32:	4b3f      	ldr	r3, [pc, #252]	@ (8003030 <main+0x22f8>)
 8002f34:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f40:	ee17 0a90 	vmov	r0, s15
 8002f44:	f7fd faa4 	bl	8000490 <__aeabi_f2d>
 8002f48:	a337      	add	r3, pc, #220	@ (adr r3, 8003028 <main+0x22f0>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd fc21 	bl	8000794 <__aeabi_ddiv>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	ec43 2b17 	vmov	d7, r2, r3
 8002f5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f5e:	eef0 0a67 	vmov.f32	s1, s15
 8002f62:	f006 fa75 	bl	8009450 <can1_ams_s10_voltages_2_s10v08_encode>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b36      	ldr	r3, [pc, #216]	@ (8003044 <main+0x230c>)
 8002f6c:	705a      	strb	r2, [r3, #1]
        can1_ams_s10_voltages_2.s10v09 = can1_ams_s10_voltages_2_s10v09_encode((float) rawVoltages[103] / 10000.0);
 8002f6e:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <main+0x22f8>)
 8002f70:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7c:	ee17 0a90 	vmov	r0, s15
 8002f80:	f7fd fa86 	bl	8000490 <__aeabi_f2d>
 8002f84:	a328      	add	r3, pc, #160	@ (adr r3, 8003028 <main+0x22f0>)
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f7fd fc03 	bl	8000794 <__aeabi_ddiv>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	ec43 2b17 	vmov	d7, r2, r3
 8002f96:	eeb0 0a47 	vmov.f32	s0, s14
 8002f9a:	eef0 0a67 	vmov.f32	s1, s15
 8002f9e:	f006 fa83 	bl	80094a8 <can1_ams_s10_voltages_2_s10v09_encode>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <main+0x230c>)
 8002fa8:	709a      	strb	r2, [r3, #2]
        can1_ams_s10_voltages_2.s10v10 = can1_ams_s10_voltages_2_s10v10_encode((float) rawVoltages[104] / 10000.0);
 8002faa:	4b21      	ldr	r3, [pc, #132]	@ (8003030 <main+0x22f8>)
 8002fac:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8002fb0:	ee07 3a90 	vmov	s15, r3
 8002fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb8:	ee17 0a90 	vmov	r0, s15
 8002fbc:	f7fd fa68 	bl	8000490 <__aeabi_f2d>
 8002fc0:	a319      	add	r3, pc, #100	@ (adr r3, 8003028 <main+0x22f0>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	f7fd fbe5 	bl	8000794 <__aeabi_ddiv>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	ec43 2b17 	vmov	d7, r2, r3
 8002fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd6:	eef0 0a67 	vmov.f32	s1, s15
 8002fda:	f006 fa91 	bl	8009500 <can1_ams_s10_voltages_2_s10v10_encode>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <main+0x230c>)
 8002fe4:	70da      	strb	r2, [r3, #3]

        can1_ams_s10_voltages_2_pack(txData, &can1_ams_s10_voltages_2, CAN1_AMS_S10_VOLTAGES_2_LENGTH);
 8002fe6:	2205      	movs	r2, #5
 8002fe8:	4916      	ldr	r1, [pc, #88]	@ (8003044 <main+0x230c>)
 8002fea:	4813      	ldr	r0, [pc, #76]	@ (8003038 <main+0x2300>)
 8002fec:	f006 f99a 	bl	8009324 <can1_ams_s10_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S10_VOLTAGES_2_FRAME_ID;
 8002ff0:	4b12      	ldr	r3, [pc, #72]	@ (800303c <main+0x2304>)
 8002ff2:	f240 226b 	movw	r2, #619	@ 0x26b
 8002ff6:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S10_VOLTAGES_2_LENGTH;
 8002ff8:	4b10      	ldr	r3, [pc, #64]	@ (800303c <main+0x2304>)
 8002ffa:	2205      	movs	r2, #5
 8002ffc:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800303c <main+0x2304>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8003004:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <main+0x2304>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800300a:	2300      	movs	r3, #0
 800300c:	4a0a      	ldr	r2, [pc, #40]	@ (8003038 <main+0x2300>)
 800300e:	490b      	ldr	r1, [pc, #44]	@ (800303c <main+0x2304>)
 8003010:	480b      	ldr	r0, [pc, #44]	@ (8003040 <main+0x2308>)
 8003012:	f001 f944 	bl	800429e <HAL_CAN_AddTxMessage>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 833c 	beq.w	8003696 <main+0x295e>
          Error_Handler();
 800301e:	f000 fe29 	bl	8003c74 <Error_Handler>
        break;
 8003022:	e338      	b.n	8003696 <main+0x295e>
 8003024:	f3af 8000 	nop.w
 8003028:	00000000 	.word	0x00000000
 800302c:	40c38800 	.word	0x40c38800
 8003030:	2000029c 	.word	0x2000029c
 8003034:	200001f8 	.word	0x200001f8
 8003038:	20000120 	.word	0x20000120
 800303c:	200000ec 	.word	0x200000ec
 8003040:	20000044 	.word	0x20000044
 8003044:	20000200 	.word	0x20000200

      case 20:
        can1_ams_s11_voltages_1.s11v01 = can1_ams_s11_voltages_1_s11v01_encode((float) rawVoltages[105] / 10000.0);
 8003048:	4bc5      	ldr	r3, [pc, #788]	@ (8003360 <main+0x2628>)
 800304a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	ee17 0a90 	vmov	r0, s15
 800305a:	f7fd fa19 	bl	8000490 <__aeabi_f2d>
 800305e:	a3be      	add	r3, pc, #760	@ (adr r3, 8003358 <main+0x2620>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f7fd fb96 	bl	8000794 <__aeabi_ddiv>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	ec43 2b17 	vmov	d7, r2, r3
 8003070:	eeb0 0a47 	vmov.f32	s0, s14
 8003074:	eef0 0a67 	vmov.f32	s1, s15
 8003078:	f006 fae6 	bl	8009648 <can1_ams_s11_voltages_1_s11v01_encode>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	4bb8      	ldr	r3, [pc, #736]	@ (8003364 <main+0x262c>)
 8003082:	701a      	strb	r2, [r3, #0]
        can1_ams_s11_voltages_1.s11v02 = can1_ams_s11_voltages_1_s11v02_encode((float) rawVoltages[106] / 10000.0);
 8003084:	4bb6      	ldr	r3, [pc, #728]	@ (8003360 <main+0x2628>)
 8003086:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	ee17 0a90 	vmov	r0, s15
 8003096:	f7fd f9fb 	bl	8000490 <__aeabi_f2d>
 800309a:	a3af      	add	r3, pc, #700	@ (adr r3, 8003358 <main+0x2620>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd fb78 	bl	8000794 <__aeabi_ddiv>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	ec43 2b17 	vmov	d7, r2, r3
 80030ac:	eeb0 0a47 	vmov.f32	s0, s14
 80030b0:	eef0 0a67 	vmov.f32	s1, s15
 80030b4:	f006 faf4 	bl	80096a0 <can1_ams_s11_voltages_1_s11v02_encode>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4ba9      	ldr	r3, [pc, #676]	@ (8003364 <main+0x262c>)
 80030be:	705a      	strb	r2, [r3, #1]
        can1_ams_s11_voltages_1.s11v03 = can1_ams_s11_voltages_1_s11v03_encode((float) rawVoltages[107] / 10000.0);
 80030c0:	4ba7      	ldr	r3, [pc, #668]	@ (8003360 <main+0x2628>)
 80030c2:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ce:	ee17 0a90 	vmov	r0, s15
 80030d2:	f7fd f9dd 	bl	8000490 <__aeabi_f2d>
 80030d6:	a3a0      	add	r3, pc, #640	@ (adr r3, 8003358 <main+0x2620>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f7fd fb5a 	bl	8000794 <__aeabi_ddiv>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	ec43 2b17 	vmov	d7, r2, r3
 80030e8:	eeb0 0a47 	vmov.f32	s0, s14
 80030ec:	eef0 0a67 	vmov.f32	s1, s15
 80030f0:	f006 fb02 	bl	80096f8 <can1_ams_s11_voltages_1_s11v03_encode>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b9a      	ldr	r3, [pc, #616]	@ (8003364 <main+0x262c>)
 80030fa:	709a      	strb	r2, [r3, #2]
        can1_ams_s11_voltages_1.s11v04 = can1_ams_s11_voltages_1_s11v04_encode((float) rawVoltages[108] / 10000.0);
 80030fc:	4b98      	ldr	r3, [pc, #608]	@ (8003360 <main+0x2628>)
 80030fe:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	@ 0xd8
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	ee17 0a90 	vmov	r0, s15
 800310e:	f7fd f9bf 	bl	8000490 <__aeabi_f2d>
 8003112:	a391      	add	r3, pc, #580	@ (adr r3, 8003358 <main+0x2620>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f7fd fb3c 	bl	8000794 <__aeabi_ddiv>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	ec43 2b17 	vmov	d7, r2, r3
 8003124:	eeb0 0a47 	vmov.f32	s0, s14
 8003128:	eef0 0a67 	vmov.f32	s1, s15
 800312c:	f006 fb10 	bl	8009750 <can1_ams_s11_voltages_1_s11v04_encode>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	4b8b      	ldr	r3, [pc, #556]	@ (8003364 <main+0x262c>)
 8003136:	70da      	strb	r2, [r3, #3]
        can1_ams_s11_voltages_1.s11v05 = can1_ams_s11_voltages_1_s11v05_encode((float) rawVoltages[109] / 10000.0);
 8003138:	4b89      	ldr	r3, [pc, #548]	@ (8003360 <main+0x2628>)
 800313a:	f8b3 30da 	ldrh.w	r3, [r3, #218]	@ 0xda
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003146:	ee17 0a90 	vmov	r0, s15
 800314a:	f7fd f9a1 	bl	8000490 <__aeabi_f2d>
 800314e:	a382      	add	r3, pc, #520	@ (adr r3, 8003358 <main+0x2620>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f7fd fb1e 	bl	8000794 <__aeabi_ddiv>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	ec43 2b17 	vmov	d7, r2, r3
 8003160:	eeb0 0a47 	vmov.f32	s0, s14
 8003164:	eef0 0a67 	vmov.f32	s1, s15
 8003168:	f006 fb1e 	bl	80097a8 <can1_ams_s11_voltages_1_s11v05_encode>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	4b7c      	ldr	r3, [pc, #496]	@ (8003364 <main+0x262c>)
 8003172:	711a      	strb	r2, [r3, #4]
        can1_ams_s11_voltages_1.s11v06 = can1_ams_s11_voltages_1_s11v06_encode((float) rawVoltages[110] / 10000.0);
 8003174:	4b7a      	ldr	r3, [pc, #488]	@ (8003360 <main+0x2628>)
 8003176:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	ee17 0a90 	vmov	r0, s15
 8003186:	f7fd f983 	bl	8000490 <__aeabi_f2d>
 800318a:	a373      	add	r3, pc, #460	@ (adr r3, 8003358 <main+0x2620>)
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f7fd fb00 	bl	8000794 <__aeabi_ddiv>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	ec43 2b17 	vmov	d7, r2, r3
 800319c:	eeb0 0a47 	vmov.f32	s0, s14
 80031a0:	eef0 0a67 	vmov.f32	s1, s15
 80031a4:	f006 fb2c 	bl	8009800 <can1_ams_s11_voltages_1_s11v06_encode>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b6d      	ldr	r3, [pc, #436]	@ (8003364 <main+0x262c>)
 80031ae:	715a      	strb	r2, [r3, #5]

        can1_ams_s11_voltages_1_pack(txData, &can1_ams_s11_voltages_1, CAN1_AMS_S11_VOLTAGES_1_LENGTH);
 80031b0:	2206      	movs	r2, #6
 80031b2:	496c      	ldr	r1, [pc, #432]	@ (8003364 <main+0x262c>)
 80031b4:	486c      	ldr	r0, [pc, #432]	@ (8003368 <main+0x2630>)
 80031b6:	f006 f9cd 	bl	8009554 <can1_ams_s11_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S11_VOLTAGES_1_FRAME_ID;
 80031ba:	4b6c      	ldr	r3, [pc, #432]	@ (800336c <main+0x2634>)
 80031bc:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 80031c0:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S11_VOLTAGES_1_LENGTH;
 80031c2:	4b6a      	ldr	r3, [pc, #424]	@ (800336c <main+0x2634>)
 80031c4:	2206      	movs	r2, #6
 80031c6:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 80031c8:	4b68      	ldr	r3, [pc, #416]	@ (800336c <main+0x2634>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 80031ce:	4b67      	ldr	r3, [pc, #412]	@ (800336c <main+0x2634>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 80031d4:	2300      	movs	r3, #0
 80031d6:	4a64      	ldr	r2, [pc, #400]	@ (8003368 <main+0x2630>)
 80031d8:	4964      	ldr	r1, [pc, #400]	@ (800336c <main+0x2634>)
 80031da:	4865      	ldr	r0, [pc, #404]	@ (8003370 <main+0x2638>)
 80031dc:	f001 f85f 	bl	800429e <HAL_CAN_AddTxMessage>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8259 	beq.w	800369a <main+0x2962>
          Error_Handler();
 80031e8:	f000 fd44 	bl	8003c74 <Error_Handler>
        break;
 80031ec:	e255      	b.n	800369a <main+0x2962>

      case 21:
        can1_ams_s11_voltages_2.s11v07 = can1_ams_s11_voltages_2_s11v07_encode((float) rawVoltages[111] / 10000.0);
 80031ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003360 <main+0x2628>)
 80031f0:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fc:	ee17 0a90 	vmov	r0, s15
 8003200:	f7fd f946 	bl	8000490 <__aeabi_f2d>
 8003204:	a354      	add	r3, pc, #336	@ (adr r3, 8003358 <main+0x2620>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f7fd fac3 	bl	8000794 <__aeabi_ddiv>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	ec43 2b17 	vmov	d7, r2, r3
 8003216:	eeb0 0a47 	vmov.f32	s0, s14
 800321a:	eef0 0a67 	vmov.f32	s1, s15
 800321e:	f006 fb83 	bl	8009928 <can1_ams_s11_voltages_2_s11v07_encode>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	4b53      	ldr	r3, [pc, #332]	@ (8003374 <main+0x263c>)
 8003228:	701a      	strb	r2, [r3, #0]
        can1_ams_s11_voltages_2.s11v08 = can1_ams_s11_voltages_2_s11v08_encode((float) rawVoltages[112] / 10000.0);
 800322a:	4b4d      	ldr	r3, [pc, #308]	@ (8003360 <main+0x2628>)
 800322c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003238:	ee17 0a90 	vmov	r0, s15
 800323c:	f7fd f928 	bl	8000490 <__aeabi_f2d>
 8003240:	a345      	add	r3, pc, #276	@ (adr r3, 8003358 <main+0x2620>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd faa5 	bl	8000794 <__aeabi_ddiv>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	ec43 2b17 	vmov	d7, r2, r3
 8003252:	eeb0 0a47 	vmov.f32	s0, s14
 8003256:	eef0 0a67 	vmov.f32	s1, s15
 800325a:	f006 fb91 	bl	8009980 <can1_ams_s11_voltages_2_s11v08_encode>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	4b44      	ldr	r3, [pc, #272]	@ (8003374 <main+0x263c>)
 8003264:	705a      	strb	r2, [r3, #1]
        can1_ams_s11_voltages_2.s11v09 = can1_ams_s11_voltages_2_s11v09_encode((float) rawVoltages[113] / 10000.0);
 8003266:	4b3e      	ldr	r3, [pc, #248]	@ (8003360 <main+0x2628>)
 8003268:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	@ 0xe2
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003274:	ee17 0a90 	vmov	r0, s15
 8003278:	f7fd f90a 	bl	8000490 <__aeabi_f2d>
 800327c:	a336      	add	r3, pc, #216	@ (adr r3, 8003358 <main+0x2620>)
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f7fd fa87 	bl	8000794 <__aeabi_ddiv>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	ec43 2b17 	vmov	d7, r2, r3
 800328e:	eeb0 0a47 	vmov.f32	s0, s14
 8003292:	eef0 0a67 	vmov.f32	s1, s15
 8003296:	f006 fb9f 	bl	80099d8 <can1_ams_s11_voltages_2_s11v09_encode>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	4b35      	ldr	r3, [pc, #212]	@ (8003374 <main+0x263c>)
 80032a0:	709a      	strb	r2, [r3, #2]
        can1_ams_s11_voltages_2.s11v10 = can1_ams_s11_voltages_2_s11v10_encode((float) rawVoltages[114] / 10000.0);
 80032a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003360 <main+0x2628>)
 80032a4:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	@ 0xe4
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b0:	ee17 0a90 	vmov	r0, s15
 80032b4:	f7fd f8ec 	bl	8000490 <__aeabi_f2d>
 80032b8:	a327      	add	r3, pc, #156	@ (adr r3, 8003358 <main+0x2620>)
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	f7fd fa69 	bl	8000794 <__aeabi_ddiv>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	ec43 2b17 	vmov	d7, r2, r3
 80032ca:	eeb0 0a47 	vmov.f32	s0, s14
 80032ce:	eef0 0a67 	vmov.f32	s1, s15
 80032d2:	f006 fbad 	bl	8009a30 <can1_ams_s11_voltages_2_s11v10_encode>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <main+0x263c>)
 80032dc:	70da      	strb	r2, [r3, #3]
        can1_ams_s11_voltages_2.s11v11 = can1_ams_s11_voltages_2_s11v11_encode((float) rawVoltages[115] / 10000.0);
 80032de:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <main+0x2628>)
 80032e0:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	@ 0xe6
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	ee17 0a90 	vmov	r0, s15
 80032f0:	f7fd f8ce 	bl	8000490 <__aeabi_f2d>
 80032f4:	a318      	add	r3, pc, #96	@ (adr r3, 8003358 <main+0x2620>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fd fa4b 	bl	8000794 <__aeabi_ddiv>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	ec43 2b17 	vmov	d7, r2, r3
 8003306:	eeb0 0a47 	vmov.f32	s0, s14
 800330a:	eef0 0a67 	vmov.f32	s1, s15
 800330e:	f006 fbbb 	bl	8009a88 <can1_ams_s11_voltages_2_s11v11_encode>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	4b17      	ldr	r3, [pc, #92]	@ (8003374 <main+0x263c>)
 8003318:	711a      	strb	r2, [r3, #4]

        can1_ams_s11_voltages_2_pack(txData, &can1_ams_s11_voltages_2, CAN1_AMS_S11_VOLTAGES_2_LENGTH);
 800331a:	2205      	movs	r2, #5
 800331c:	4915      	ldr	r1, [pc, #84]	@ (8003374 <main+0x263c>)
 800331e:	4812      	ldr	r0, [pc, #72]	@ (8003368 <main+0x2630>)
 8003320:	f006 fa98 	bl	8009854 <can1_ams_s11_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S11_VOLTAGES_2_FRAME_ID;
 8003324:	4b11      	ldr	r3, [pc, #68]	@ (800336c <main+0x2634>)
 8003326:	f240 226d 	movw	r2, #621	@ 0x26d
 800332a:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S11_VOLTAGES_2_LENGTH;
 800332c:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <main+0x2634>)
 800332e:	2205      	movs	r2, #5
 8003330:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8003332:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <main+0x2634>)
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <main+0x2634>)
 800333a:	2200      	movs	r2, #0
 800333c:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 800333e:	2300      	movs	r3, #0
 8003340:	4a09      	ldr	r2, [pc, #36]	@ (8003368 <main+0x2630>)
 8003342:	490a      	ldr	r1, [pc, #40]	@ (800336c <main+0x2634>)
 8003344:	480a      	ldr	r0, [pc, #40]	@ (8003370 <main+0x2638>)
 8003346:	f000 ffaa 	bl	800429e <HAL_CAN_AddTxMessage>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 81a6 	beq.w	800369e <main+0x2966>
          Error_Handler();
 8003352:	f000 fc8f 	bl	8003c74 <Error_Handler>
        break;
 8003356:	e1a2      	b.n	800369e <main+0x2966>
 8003358:	00000000 	.word	0x00000000
 800335c:	40c38800 	.word	0x40c38800
 8003360:	2000029c 	.word	0x2000029c
 8003364:	20000208 	.word	0x20000208
 8003368:	20000120 	.word	0x20000120
 800336c:	200000ec 	.word	0x200000ec
 8003370:	20000044 	.word	0x20000044
 8003374:	20000210 	.word	0x20000210

      case 22:
        can1_ams_s12_voltages_1.s12v01 = can1_ams_s12_voltages_1_s12v01_encode((float) rawVoltages[116] / 10000.0);
 8003378:	4bcd      	ldr	r3, [pc, #820]	@ (80036b0 <main+0x2978>)
 800337a:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	ee17 0a90 	vmov	r0, s15
 800338a:	f7fd f881 	bl	8000490 <__aeabi_f2d>
 800338e:	a3c6      	add	r3, pc, #792	@ (adr r3, 80036a8 <main+0x2970>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd f9fe 	bl	8000794 <__aeabi_ddiv>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	ec43 2b17 	vmov	d7, r2, r3
 80033a0:	eeb0 0a47 	vmov.f32	s0, s14
 80033a4:	eef0 0a67 	vmov.f32	s1, s15
 80033a8:	f006 fc12 	bl	8009bd0 <can1_ams_s12_voltages_1_s12v01_encode>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	4bc0      	ldr	r3, [pc, #768]	@ (80036b4 <main+0x297c>)
 80033b2:	701a      	strb	r2, [r3, #0]
        can1_ams_s12_voltages_1.s12v02 = can1_ams_s12_voltages_1_s12v02_encode((float) rawVoltages[117] / 10000.0);
 80033b4:	4bbe      	ldr	r3, [pc, #760]	@ (80036b0 <main+0x2978>)
 80033b6:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	ee17 0a90 	vmov	r0, s15
 80033c6:	f7fd f863 	bl	8000490 <__aeabi_f2d>
 80033ca:	a3b7      	add	r3, pc, #732	@ (adr r3, 80036a8 <main+0x2970>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd f9e0 	bl	8000794 <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	ec43 2b17 	vmov	d7, r2, r3
 80033dc:	eeb0 0a47 	vmov.f32	s0, s14
 80033e0:	eef0 0a67 	vmov.f32	s1, s15
 80033e4:	f006 fc20 	bl	8009c28 <can1_ams_s12_voltages_1_s12v02_encode>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	4bb1      	ldr	r3, [pc, #708]	@ (80036b4 <main+0x297c>)
 80033ee:	705a      	strb	r2, [r3, #1]
        can1_ams_s12_voltages_1.s12v03 = can1_ams_s12_voltages_1_s12v03_encode((float) rawVoltages[118] / 10000.0);
 80033f0:	4baf      	ldr	r3, [pc, #700]	@ (80036b0 <main+0x2978>)
 80033f2:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	ee17 0a90 	vmov	r0, s15
 8003402:	f7fd f845 	bl	8000490 <__aeabi_f2d>
 8003406:	a3a8      	add	r3, pc, #672	@ (adr r3, 80036a8 <main+0x2970>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fd f9c2 	bl	8000794 <__aeabi_ddiv>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	ec43 2b17 	vmov	d7, r2, r3
 8003418:	eeb0 0a47 	vmov.f32	s0, s14
 800341c:	eef0 0a67 	vmov.f32	s1, s15
 8003420:	f006 fc2e 	bl	8009c80 <can1_ams_s12_voltages_1_s12v03_encode>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	4ba2      	ldr	r3, [pc, #648]	@ (80036b4 <main+0x297c>)
 800342a:	709a      	strb	r2, [r3, #2]
        can1_ams_s12_voltages_1.s12v04 = can1_ams_s12_voltages_1_s12v04_encode((float) rawVoltages[119] / 10000.0);
 800342c:	4ba0      	ldr	r3, [pc, #640]	@ (80036b0 <main+0x2978>)
 800342e:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	ee17 0a90 	vmov	r0, s15
 800343e:	f7fd f827 	bl	8000490 <__aeabi_f2d>
 8003442:	a399      	add	r3, pc, #612	@ (adr r3, 80036a8 <main+0x2970>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fd f9a4 	bl	8000794 <__aeabi_ddiv>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	ec43 2b17 	vmov	d7, r2, r3
 8003454:	eeb0 0a47 	vmov.f32	s0, s14
 8003458:	eef0 0a67 	vmov.f32	s1, s15
 800345c:	f006 fc3c 	bl	8009cd8 <can1_ams_s12_voltages_1_s12v04_encode>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	4b93      	ldr	r3, [pc, #588]	@ (80036b4 <main+0x297c>)
 8003466:	70da      	strb	r2, [r3, #3]
        can1_ams_s12_voltages_1.s12v05 = can1_ams_s12_voltages_1_s12v05_encode((float) rawVoltages[120] / 10000.0);
 8003468:	4b91      	ldr	r3, [pc, #580]	@ (80036b0 <main+0x2978>)
 800346a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	ee17 0a90 	vmov	r0, s15
 800347a:	f7fd f809 	bl	8000490 <__aeabi_f2d>
 800347e:	a38a      	add	r3, pc, #552	@ (adr r3, 80036a8 <main+0x2970>)
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f7fd f986 	bl	8000794 <__aeabi_ddiv>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	ec43 2b17 	vmov	d7, r2, r3
 8003490:	eeb0 0a47 	vmov.f32	s0, s14
 8003494:	eef0 0a67 	vmov.f32	s1, s15
 8003498:	f006 fc4a 	bl	8009d30 <can1_ams_s12_voltages_1_s12v05_encode>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	4b84      	ldr	r3, [pc, #528]	@ (80036b4 <main+0x297c>)
 80034a2:	711a      	strb	r2, [r3, #4]
        can1_ams_s12_voltages_1.s12v06 = can1_ams_s12_voltages_1_s12v06_encode((float) rawVoltages[121] / 10000.0);
 80034a4:	4b82      	ldr	r3, [pc, #520]	@ (80036b0 <main+0x2978>)
 80034a6:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b2:	ee17 0a90 	vmov	r0, s15
 80034b6:	f7fc ffeb 	bl	8000490 <__aeabi_f2d>
 80034ba:	a37b      	add	r3, pc, #492	@ (adr r3, 80036a8 <main+0x2970>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd f968 	bl	8000794 <__aeabi_ddiv>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	ec43 2b17 	vmov	d7, r2, r3
 80034cc:	eeb0 0a47 	vmov.f32	s0, s14
 80034d0:	eef0 0a67 	vmov.f32	s1, s15
 80034d4:	f006 fc58 	bl	8009d88 <can1_ams_s12_voltages_1_s12v06_encode>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	4b75      	ldr	r3, [pc, #468]	@ (80036b4 <main+0x297c>)
 80034de:	715a      	strb	r2, [r3, #5]

        can1_ams_s12_voltages_1_pack(txData, &can1_ams_s12_voltages_1, CAN1_AMS_S12_VOLTAGES_1_LENGTH);
 80034e0:	2206      	movs	r2, #6
 80034e2:	4974      	ldr	r1, [pc, #464]	@ (80036b4 <main+0x297c>)
 80034e4:	4874      	ldr	r0, [pc, #464]	@ (80036b8 <main+0x2980>)
 80034e6:	f006 faf9 	bl	8009adc <can1_ams_s12_voltages_1_pack>
        txHeader.StdId = CAN1_AMS_S12_VOLTAGES_1_FRAME_ID;
 80034ea:	4b74      	ldr	r3, [pc, #464]	@ (80036bc <main+0x2984>)
 80034ec:	f240 226e 	movw	r2, #622	@ 0x26e
 80034f0:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S12_VOLTAGES_1_LENGTH;
 80034f2:	4b72      	ldr	r3, [pc, #456]	@ (80036bc <main+0x2984>)
 80034f4:	2206      	movs	r2, #6
 80034f6:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 80034f8:	4b70      	ldr	r3, [pc, #448]	@ (80036bc <main+0x2984>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 80034fe:	4b6f      	ldr	r3, [pc, #444]	@ (80036bc <main+0x2984>)
 8003500:	2200      	movs	r2, #0
 8003502:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003504:	2300      	movs	r3, #0
 8003506:	4a6c      	ldr	r2, [pc, #432]	@ (80036b8 <main+0x2980>)
 8003508:	496c      	ldr	r1, [pc, #432]	@ (80036bc <main+0x2984>)
 800350a:	486d      	ldr	r0, [pc, #436]	@ (80036c0 <main+0x2988>)
 800350c:	f000 fec7 	bl	800429e <HAL_CAN_AddTxMessage>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80c5 	beq.w	80036a2 <main+0x296a>
          Error_Handler();
 8003518:	f000 fbac 	bl	8003c74 <Error_Handler>
        break;
 800351c:	e0c1      	b.n	80036a2 <main+0x296a>

      case 23:
        can1_ams_s12_voltages_2.s12v07 = can1_ams_s12_voltages_2_s12v07_encode((float) rawVoltages[122] / 10000.0);
 800351e:	4b64      	ldr	r3, [pc, #400]	@ (80036b0 <main+0x2978>)
 8003520:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352c:	ee17 0a90 	vmov	r0, s15
 8003530:	f7fc ffae 	bl	8000490 <__aeabi_f2d>
 8003534:	a35c      	add	r3, pc, #368	@ (adr r3, 80036a8 <main+0x2970>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f7fd f92b 	bl	8000794 <__aeabi_ddiv>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	ec43 2b17 	vmov	d7, r2, r3
 8003546:	eeb0 0a47 	vmov.f32	s0, s14
 800354a:	eef0 0a67 	vmov.f32	s1, s15
 800354e:	f006 fcaf 	bl	8009eb0 <can1_ams_s12_voltages_2_s12v07_encode>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	4b5b      	ldr	r3, [pc, #364]	@ (80036c4 <main+0x298c>)
 8003558:	701a      	strb	r2, [r3, #0]
        can1_ams_s12_voltages_2.s12v08 = can1_ams_s12_voltages_2_s12v08_encode((float) rawVoltages[123] / 10000.0);
 800355a:	4b55      	ldr	r3, [pc, #340]	@ (80036b0 <main+0x2978>)
 800355c:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003568:	ee17 0a90 	vmov	r0, s15
 800356c:	f7fc ff90 	bl	8000490 <__aeabi_f2d>
 8003570:	a34d      	add	r3, pc, #308	@ (adr r3, 80036a8 <main+0x2970>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f7fd f90d 	bl	8000794 <__aeabi_ddiv>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	ec43 2b17 	vmov	d7, r2, r3
 8003582:	eeb0 0a47 	vmov.f32	s0, s14
 8003586:	eef0 0a67 	vmov.f32	s1, s15
 800358a:	f006 fcbd 	bl	8009f08 <can1_ams_s12_voltages_2_s12v08_encode>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	4b4c      	ldr	r3, [pc, #304]	@ (80036c4 <main+0x298c>)
 8003594:	705a      	strb	r2, [r3, #1]
        can1_ams_s12_voltages_2.s12v09 = can1_ams_s12_voltages_2_s12v09_encode((float) rawVoltages[124] / 10000.0);
 8003596:	4b46      	ldr	r3, [pc, #280]	@ (80036b0 <main+0x2978>)
 8003598:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a4:	ee17 0a90 	vmov	r0, s15
 80035a8:	f7fc ff72 	bl	8000490 <__aeabi_f2d>
 80035ac:	a33e      	add	r3, pc, #248	@ (adr r3, 80036a8 <main+0x2970>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f7fd f8ef 	bl	8000794 <__aeabi_ddiv>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	ec43 2b17 	vmov	d7, r2, r3
 80035be:	eeb0 0a47 	vmov.f32	s0, s14
 80035c2:	eef0 0a67 	vmov.f32	s1, s15
 80035c6:	f006 fccb 	bl	8009f60 <can1_ams_s12_voltages_2_s12v09_encode>
 80035ca:	4603      	mov	r3, r0
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b3d      	ldr	r3, [pc, #244]	@ (80036c4 <main+0x298c>)
 80035d0:	709a      	strb	r2, [r3, #2]
        can1_ams_s12_voltages_2.s12v10 = can1_ams_s12_voltages_2_s12v10_encode((float) rawVoltages[125] / 10000.0);
 80035d2:	4b37      	ldr	r3, [pc, #220]	@ (80036b0 <main+0x2978>)
 80035d4:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e0:	ee17 0a90 	vmov	r0, s15
 80035e4:	f7fc ff54 	bl	8000490 <__aeabi_f2d>
 80035e8:	a32f      	add	r3, pc, #188	@ (adr r3, 80036a8 <main+0x2970>)
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f7fd f8d1 	bl	8000794 <__aeabi_ddiv>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	ec43 2b17 	vmov	d7, r2, r3
 80035fa:	eeb0 0a47 	vmov.f32	s0, s14
 80035fe:	eef0 0a67 	vmov.f32	s1, s15
 8003602:	f006 fcd9 	bl	8009fb8 <can1_ams_s12_voltages_2_s12v10_encode>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	4b2e      	ldr	r3, [pc, #184]	@ (80036c4 <main+0x298c>)
 800360c:	70da      	strb	r2, [r3, #3]

        can1_ams_s12_voltages_2_pack(txData, &can1_ams_s12_voltages_2, CAN1_AMS_S12_VOLTAGES_2_LENGTH);
 800360e:	2205      	movs	r2, #5
 8003610:	492c      	ldr	r1, [pc, #176]	@ (80036c4 <main+0x298c>)
 8003612:	4829      	ldr	r0, [pc, #164]	@ (80036b8 <main+0x2980>)
 8003614:	f006 fbe2 	bl	8009ddc <can1_ams_s12_voltages_2_pack>
        txHeader.StdId = CAN1_AMS_S12_VOLTAGES_2_FRAME_ID;
 8003618:	4b28      	ldr	r3, [pc, #160]	@ (80036bc <main+0x2984>)
 800361a:	f240 226f 	movw	r2, #623	@ 0x26f
 800361e:	601a      	str	r2, [r3, #0]
        txHeader.DLC = CAN1_AMS_S12_VOLTAGES_2_LENGTH;
 8003620:	4b26      	ldr	r3, [pc, #152]	@ (80036bc <main+0x2984>)
 8003622:	2205      	movs	r2, #5
 8003624:	611a      	str	r2, [r3, #16]
        txHeader.IDE = CAN_ID_STD;
 8003626:	4b25      	ldr	r3, [pc, #148]	@ (80036bc <main+0x2984>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
        txHeader.RTR = CAN_RTR_DATA;
 800362c:	4b23      	ldr	r3, [pc, #140]	@ (80036bc <main+0x2984>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
        if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK)
 8003632:	2300      	movs	r3, #0
 8003634:	4a20      	ldr	r2, [pc, #128]	@ (80036b8 <main+0x2980>)
 8003636:	4921      	ldr	r1, [pc, #132]	@ (80036bc <main+0x2984>)
 8003638:	4821      	ldr	r0, [pc, #132]	@ (80036c0 <main+0x2988>)
 800363a:	f000 fe30 	bl	800429e <HAL_CAN_AddTxMessage>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d041      	beq.n	80036c8 <main+0x2990>
          Error_Handler();
 8003644:	f000 fb16 	bl	8003c74 <Error_Handler>
        break;
 8003648:	e03e      	b.n	80036c8 <main+0x2990>
        break;
 800364a:	bf00      	nop
 800364c:	e03d      	b.n	80036ca <main+0x2992>
        break;
 800364e:	bf00      	nop
 8003650:	e03b      	b.n	80036ca <main+0x2992>
        break;
 8003652:	bf00      	nop
 8003654:	e039      	b.n	80036ca <main+0x2992>
        break;
 8003656:	bf00      	nop
 8003658:	e037      	b.n	80036ca <main+0x2992>
        break;
 800365a:	bf00      	nop
 800365c:	e035      	b.n	80036ca <main+0x2992>
        break;
 800365e:	bf00      	nop
 8003660:	e033      	b.n	80036ca <main+0x2992>
        break;
 8003662:	bf00      	nop
 8003664:	e031      	b.n	80036ca <main+0x2992>
        break;
 8003666:	bf00      	nop
 8003668:	e02f      	b.n	80036ca <main+0x2992>
        break;
 800366a:	bf00      	nop
 800366c:	e02d      	b.n	80036ca <main+0x2992>
        break;
 800366e:	bf00      	nop
 8003670:	e02b      	b.n	80036ca <main+0x2992>
        break;
 8003672:	bf00      	nop
 8003674:	e029      	b.n	80036ca <main+0x2992>
        break;
 8003676:	bf00      	nop
 8003678:	e027      	b.n	80036ca <main+0x2992>
        break;
 800367a:	bf00      	nop
 800367c:	e025      	b.n	80036ca <main+0x2992>
        break;
 800367e:	bf00      	nop
 8003680:	e023      	b.n	80036ca <main+0x2992>
        break;
 8003682:	bf00      	nop
 8003684:	e021      	b.n	80036ca <main+0x2992>
        break;
 8003686:	bf00      	nop
 8003688:	e01f      	b.n	80036ca <main+0x2992>
        break;
 800368a:	bf00      	nop
 800368c:	e01d      	b.n	80036ca <main+0x2992>
        break;
 800368e:	bf00      	nop
 8003690:	e01b      	b.n	80036ca <main+0x2992>
        break;
 8003692:	bf00      	nop
 8003694:	e019      	b.n	80036ca <main+0x2992>
        break;
 8003696:	bf00      	nop
 8003698:	e017      	b.n	80036ca <main+0x2992>
        break;
 800369a:	bf00      	nop
 800369c:	e015      	b.n	80036ca <main+0x2992>
        break;
 800369e:	bf00      	nop
 80036a0:	e013      	b.n	80036ca <main+0x2992>
        break;
 80036a2:	bf00      	nop
 80036a4:	e011      	b.n	80036ca <main+0x2992>
 80036a6:	bf00      	nop
 80036a8:	00000000 	.word	0x00000000
 80036ac:	40c38800 	.word	0x40c38800
 80036b0:	2000029c 	.word	0x2000029c
 80036b4:	20000218 	.word	0x20000218
 80036b8:	20000120 	.word	0x20000120
 80036bc:	200000ec 	.word	0x200000ec
 80036c0:	20000044 	.word	0x20000044
 80036c4:	20000220 	.word	0x20000220
        break;
 80036c8:	bf00      	nop
    }
    else // Temperatures
    {

    }
    cellOrTemp = !cellOrTemp; // Toggle between cells and temperatures on each pass
 80036ca:	4b8f      	ldr	r3, [pc, #572]	@ (8003908 <main+0x2bd0>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	4b8b      	ldr	r3, [pc, #556]	@ (8003908 <main+0x2bd0>)
 80036dc:	701a      	strb	r2, [r3, #0]


    // TODO: Consider moving this to an interrupt if IVT messages are more frequent and FIFO overflows
    // In general IVT overflows should not matter much since we will read the latest message
    // read can 1
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80036de:	e02a      	b.n	8003736 <main+0x29fe>
    {
      if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80036e0:	4b8a      	ldr	r3, [pc, #552]	@ (800390c <main+0x2bd4>)
 80036e2:	4a8b      	ldr	r2, [pc, #556]	@ (8003910 <main+0x2bd8>)
 80036e4:	2100      	movs	r1, #0
 80036e6:	488b      	ldr	r0, [pc, #556]	@ (8003914 <main+0x2bdc>)
 80036e8:	f000 fea9 	bl	800443e <HAL_CAN_GetRxMessage>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <main+0x29be>
      {
        Error_Handler();
 80036f2:	f000 fabf 	bl	8003c74 <Error_Handler>
      }

      // Process the received message based on its ID
      switch (rxHeader.StdId)
 80036f6:	4b86      	ldr	r3, [pc, #536]	@ (8003910 <main+0x2bd8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 80036fe:	d013      	beq.n	8003728 <main+0x29f0>
 8003700:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 8003704:	d816      	bhi.n	8003734 <main+0x29fc>
 8003706:	2b40      	cmp	r3, #64	@ 0x40
 8003708:	d002      	beq.n	8003710 <main+0x29d8>
 800370a:	2b48      	cmp	r3, #72	@ 0x48
 800370c:	d006      	beq.n	800371c <main+0x29e4>
      case CAN1_AMS_PARAMETERS_SET_FRAME_ID:
        can1_ams_parameters_set_unpack(&can1_ams_parameters_set, rxData, CAN1_AMS_PARAMETERS_SET_LENGTH);
        break;
      default:
        // Unknown ID, handle if necessary
        break;
 800370e:	e011      	b.n	8003734 <main+0x29fc>
        can1_dbu_status_1_unpack(&can1_dbu_status_1, rxData, CAN1_DBU_STATUS_1_LENGTH);
 8003710:	2208      	movs	r2, #8
 8003712:	497e      	ldr	r1, [pc, #504]	@ (800390c <main+0x2bd4>)
 8003714:	4880      	ldr	r0, [pc, #512]	@ (8003918 <main+0x2be0>)
 8003716:	f002 fbb9 	bl	8005e8c <can1_dbu_status_1_unpack>
        break;
 800371a:	e00c      	b.n	8003736 <main+0x29fe>
        can1_ecu_status_unpack(&can1_ecu_status, rxData, CAN1_ECU_STATUS_LENGTH);
 800371c:	2201      	movs	r2, #1
 800371e:	497b      	ldr	r1, [pc, #492]	@ (800390c <main+0x2bd4>)
 8003720:	487e      	ldr	r0, [pc, #504]	@ (800391c <main+0x2be4>)
 8003722:	f002 fc0b 	bl	8005f3c <can1_ecu_status_unpack>
        break;
 8003726:	e006      	b.n	8003736 <main+0x29fe>
        can1_ams_parameters_set_unpack(&can1_ams_parameters_set, rxData, CAN1_AMS_PARAMETERS_SET_LENGTH);
 8003728:	2208      	movs	r2, #8
 800372a:	4978      	ldr	r1, [pc, #480]	@ (800390c <main+0x2bd4>)
 800372c:	487c      	ldr	r0, [pc, #496]	@ (8003920 <main+0x2be8>)
 800372e:	f006 fc6d 	bl	800a00c <can1_ams_parameters_set_unpack>
        break;
 8003732:	e000      	b.n	8003736 <main+0x29fe>
        break;
 8003734:	bf00      	nop
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8003736:	2100      	movs	r1, #0
 8003738:	4876      	ldr	r0, [pc, #472]	@ (8003914 <main+0x2bdc>)
 800373a:	f000 ffa2 	bl	8004682 <HAL_CAN_GetRxFifoFillLevel>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1cd      	bne.n	80036e0 <main+0x29a8>
      }
    }

    // Read CAN2
    while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8003744:	e055      	b.n	80037f2 <main+0x2aba>
    {
      if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8003746:	4b71      	ldr	r3, [pc, #452]	@ (800390c <main+0x2bd4>)
 8003748:	4a71      	ldr	r2, [pc, #452]	@ (8003910 <main+0x2bd8>)
 800374a:	2100      	movs	r1, #0
 800374c:	4875      	ldr	r0, [pc, #468]	@ (8003924 <main+0x2bec>)
 800374e:	f000 fe76 	bl	800443e <HAL_CAN_GetRxMessage>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <main+0x2a24>
      {
        Error_Handler();
 8003758:	f000 fa8c 	bl	8003c74 <Error_Handler>
      }

      // Process the received message based on its ID
      switch (rxHeader.StdId)
 800375c:	4b6c      	ldr	r3, [pc, #432]	@ (8003910 <main+0x2bd8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f2a3 5321 	subw	r3, r3, #1313	@ 0x521
 8003764:	2b07      	cmp	r3, #7
 8003766:	d843      	bhi.n	80037f0 <main+0x2ab8>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <main+0x2a38>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	080037cd 	.word	0x080037cd
 8003774:	0800379d 	.word	0x0800379d
 8003778:	08003791 	.word	0x08003791
 800377c:	080037d9 	.word	0x080037d9
 8003780:	080037a9 	.word	0x080037a9
 8003784:	080037b5 	.word	0x080037b5
 8003788:	080037e5 	.word	0x080037e5
 800378c:	080037c1 	.word	0x080037c1
      {
      case CAN2_IVT_MSG_RESULT_U2_FRAME_ID:
        can2_ivt_msg_result_u2_unpack(&can2_ivt_msg_result_u2, rxData, CAN2_IVT_MSG_RESULT_U2_LENGTH);
 8003790:	2206      	movs	r2, #6
 8003792:	495e      	ldr	r1, [pc, #376]	@ (800390c <main+0x2bd4>)
 8003794:	4864      	ldr	r0, [pc, #400]	@ (8003928 <main+0x2bf0>)
 8003796:	f006 ff97 	bl	800a6c8 <can2_ivt_msg_result_u2_unpack>
        break;
 800379a:	e02a      	b.n	80037f2 <main+0x2aba>
      case CAN2_IVT_MSG_RESULT_U1_FRAME_ID:
        can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rxData, CAN2_IVT_MSG_RESULT_U1_LENGTH);
 800379c:	2206      	movs	r2, #6
 800379e:	495b      	ldr	r1, [pc, #364]	@ (800390c <main+0x2bd4>)
 80037a0:	4862      	ldr	r0, [pc, #392]	@ (800392c <main+0x2bf4>)
 80037a2:	f007 f819 	bl	800a7d8 <can2_ivt_msg_result_u1_unpack>
        break;
 80037a6:	e024      	b.n	80037f2 <main+0x2aba>
      case CAN2_IVT_MSG_RESULT_T_FRAME_ID:
        can2_ivt_msg_result_t_unpack(&can2_ivt_msg_result_t, rxData, CAN2_IVT_MSG_RESULT_T_LENGTH);
 80037a8:	2206      	movs	r2, #6
 80037aa:	4958      	ldr	r1, [pc, #352]	@ (800390c <main+0x2bd4>)
 80037ac:	4860      	ldr	r0, [pc, #384]	@ (8003930 <main+0x2bf8>)
 80037ae:	f006 fe7b 	bl	800a4a8 <can2_ivt_msg_result_t_unpack>
        break;
 80037b2:	e01e      	b.n	80037f2 <main+0x2aba>
      case CAN2_IVT_MSG_RESULT_W_FRAME_ID:
        can2_ivt_msg_result_w_unpack(&can2_ivt_msg_result_w, rxData, CAN2_IVT_MSG_RESULT_W_LENGTH);
 80037b4:	2206      	movs	r2, #6
 80037b6:	4955      	ldr	r1, [pc, #340]	@ (800390c <main+0x2bd4>)
 80037b8:	485e      	ldr	r0, [pc, #376]	@ (8003934 <main+0x2bfc>)
 80037ba:	f006 fded 	bl	800a398 <can2_ivt_msg_result_w_unpack>
        break;
 80037be:	e018      	b.n	80037f2 <main+0x2aba>
      case CAN2_IVT_MSG_RESULT_WH_FRAME_ID:
        can2_ivt_msg_result_wh_unpack(&can2_ivt_msg_result_wh, rxData, CAN2_IVT_MSG_RESULT_WH_LENGTH);
 80037c0:	2206      	movs	r2, #6
 80037c2:	4952      	ldr	r1, [pc, #328]	@ (800390c <main+0x2bd4>)
 80037c4:	485c      	ldr	r0, [pc, #368]	@ (8003938 <main+0x2c00>)
 80037c6:	f006 fcd7 	bl	800a178 <can2_ivt_msg_result_wh_unpack>
        break;
 80037ca:	e012      	b.n	80037f2 <main+0x2aba>
      case CAN2_IVT_MSG_RESULT_I_FRAME_ID:
        can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rxData, CAN2_IVT_MSG_RESULT_I_LENGTH);
 80037cc:	2206      	movs	r2, #6
 80037ce:	494f      	ldr	r1, [pc, #316]	@ (800390c <main+0x2bd4>)
 80037d0:	485a      	ldr	r0, [pc, #360]	@ (800393c <main+0x2c04>)
 80037d2:	f007 f889 	bl	800a8e8 <can2_ivt_msg_result_i_unpack>
        break;
 80037d6:	e00c      	b.n	80037f2 <main+0x2aba>
      case CAN2_IVT_MSG_RESULT_U3_FRAME_ID:
        can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rxData, CAN2_IVT_MSG_RESULT_U3_LENGTH);
 80037d8:	2206      	movs	r2, #6
 80037da:	494c      	ldr	r1, [pc, #304]	@ (800390c <main+0x2bd4>)
 80037dc:	4858      	ldr	r0, [pc, #352]	@ (8003940 <main+0x2c08>)
 80037de:	f006 feeb 	bl	800a5b8 <can2_ivt_msg_result_u3_unpack>
        break;
 80037e2:	e006      	b.n	80037f2 <main+0x2aba>
      case CAN2_IVT_MSG_RESULT_AS_FRAME_ID:
        can2_ivt_msg_result_as_unpack(&can2_ivt_msg_result_as, rxData, CAN2_IVT_MSG_RESULT_AS_LENGTH);
 80037e4:	2206      	movs	r2, #6
 80037e6:	4949      	ldr	r1, [pc, #292]	@ (800390c <main+0x2bd4>)
 80037e8:	4856      	ldr	r0, [pc, #344]	@ (8003944 <main+0x2c0c>)
 80037ea:	f006 fd4d 	bl	800a288 <can2_ivt_msg_result_as_unpack>
        break;
 80037ee:	e000      	b.n	80037f2 <main+0x2aba>
      default:
        // Unknown ID, handle if necessary
        break;
 80037f0:	bf00      	nop
    while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80037f2:	2100      	movs	r1, #0
 80037f4:	484b      	ldr	r0, [pc, #300]	@ (8003924 <main+0x2bec>)
 80037f6:	f000 ff44 	bl	8004682 <HAL_CAN_GetRxFifoFillLevel>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1a2      	bne.n	8003746 <main+0x2a0e>
      }
    }

    // find max and min voltages
    uint16_t maxVoltage = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	817b      	strh	r3, [r7, #10]
    uint16_t minVoltage = 0xFFFF;
 8003804:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003808:	813b      	strh	r3, [r7, #8]
    for (int i = 0; i < 126; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	e01a      	b.n	8003846 <main+0x2b0e>
    {
      if (rawVoltages[i] > maxVoltage)
 8003810:	4a4d      	ldr	r2, [pc, #308]	@ (8003948 <main+0x2c10>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003818:	897a      	ldrh	r2, [r7, #10]
 800381a:	429a      	cmp	r2, r3
 800381c:	d204      	bcs.n	8003828 <main+0x2af0>
        maxVoltage = rawVoltages[i];
 800381e:	4a4a      	ldr	r2, [pc, #296]	@ (8003948 <main+0x2c10>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003826:	817b      	strh	r3, [r7, #10]
      if (rawVoltages[i] < minVoltage)
 8003828:	4a47      	ldr	r2, [pc, #284]	@ (8003948 <main+0x2c10>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003830:	893a      	ldrh	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d904      	bls.n	8003840 <main+0x2b08>
        minVoltage = rawVoltages[i];
 8003836:	4a44      	ldr	r2, [pc, #272]	@ (8003948 <main+0x2c10>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800383e:	813b      	strh	r3, [r7, #8]
    for (int i = 0; i < 126; i++)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3301      	adds	r3, #1
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b7d      	cmp	r3, #125	@ 0x7d
 800384a:	dde1      	ble.n	8003810 <main+0x2ad8>
    }
    can1_ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_encode((float) maxVoltage / 10000.0);
 800384c:	897b      	ldrh	r3, [r7, #10]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003856:	ee17 0a90 	vmov	r0, s15
 800385a:	f7fc fe19 	bl	8000490 <__aeabi_f2d>
 800385e:	a328      	add	r3, pc, #160	@ (adr r3, 8003900 <main+0x2bc8>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc ff96 	bl	8000794 <__aeabi_ddiv>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	ec43 2b17 	vmov	d7, r2, r3
 8003870:	eeb0 0a47 	vmov.f32	s0, s14
 8003874:	eef0 0a67 	vmov.f32	s1, s15
 8003878:	f002 fac6 	bl	8005e08 <can1_ams_status_1_max_cell_voltage_encode>
 800387c:	eeb0 7a40 	vmov.f32	s14, s0
 8003880:	eef0 7a60 	vmov.f32	s15, s1
 8003884:	4b31      	ldr	r3, [pc, #196]	@ (800394c <main+0x2c14>)
 8003886:	ed83 7b06 	vstr	d7, [r3, #24]
    can1_ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_encode((float) minVoltage / 10000.0);
 800388a:	893b      	ldrh	r3, [r7, #8]
 800388c:	ee07 3a90 	vmov	s15, r3
 8003890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003894:	ee17 0a90 	vmov	r0, s15
 8003898:	f7fc fdfa 	bl	8000490 <__aeabi_f2d>
 800389c:	a318      	add	r3, pc, #96	@ (adr r3, 8003900 <main+0x2bc8>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fc ff77 	bl	8000794 <__aeabi_ddiv>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	ec43 2b17 	vmov	d7, r2, r3
 80038ae:	eeb0 0a47 	vmov.f32	s0, s14
 80038b2:	eef0 0a67 	vmov.f32	s1, s15
 80038b6:	f002 fa7f 	bl	8005db8 <can1_ams_status_1_min_cell_voltage_encode>
 80038ba:	eeb0 7a40 	vmov.f32	s14, s0
 80038be:	eef0 7a60 	vmov.f32	s15, s1
 80038c2:	4b22      	ldr	r3, [pc, #136]	@ (800394c <main+0x2c14>)
 80038c4:	ed83 7b04 	vstr	d7, [r3, #16]

    deltaTick = HAL_GetTick() - tick;
 80038c8:	f000 fbbe 	bl	8004048 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b20      	ldr	r3, [pc, #128]	@ (8003950 <main+0x2c18>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <main+0x2c1c>)
 80038d6:	6013      	str	r3, [r2, #0]
    can1_ams_status_1.ticks = can1_ams_status_1_ticks_encode(deltaTick);
 80038d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <main+0x2c1c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fc fdb5 	bl	800044c <__aeabi_ui2d>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	ec43 2b10 	vmov	d0, r2, r3
 80038ea:	f002 fab5 	bl	8005e58 <can1_ams_status_1_ticks_encode>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b16      	ldr	r3, [pc, #88]	@ (800394c <main+0x2c14>)
 80038f4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  {
 80038f8:	f7fd ba2d 	b.w	8000d56 <main+0x1e>
 80038fc:	f3af 8000 	nop.w
 8003900:	00000000 	.word	0x00000000
 8003904:	40c38800 	.word	0x40c38800
 8003908:	200004a6 	.word	0x200004a6
 800390c:	20000128 	.word	0x20000128
 8003910:	20000104 	.word	0x20000104
 8003914:	20000044 	.word	0x20000044
 8003918:	20000228 	.word	0x20000228
 800391c:	20000230 	.word	0x20000230
 8003920:	20000234 	.word	0x20000234
 8003924:	2000006c 	.word	0x2000006c
 8003928:	2000023c 	.word	0x2000023c
 800392c:	20000248 	.word	0x20000248
 8003930:	20000254 	.word	0x20000254
 8003934:	20000260 	.word	0x20000260
 8003938:	2000026c 	.word	0x2000026c
 800393c:	20000278 	.word	0x20000278
 8003940:	20000284 	.word	0x20000284
 8003944:	20000290 	.word	0x20000290
 8003948:	2000029c 	.word	0x2000029c
 800394c:	20000130 	.word	0x20000130
 8003950:	200004c0 	.word	0x200004c0
 8003954:	200004c4 	.word	0x200004c4

08003958 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b094      	sub	sp, #80	@ 0x50
 800395c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800395e:	f107 0320 	add.w	r3, r7, #32
 8003962:	2230      	movs	r2, #48	@ 0x30
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f007 f846 	bl	800a9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	4b28      	ldr	r3, [pc, #160]	@ (8003a24 <SystemClock_Config+0xcc>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	4a27      	ldr	r2, [pc, #156]	@ (8003a24 <SystemClock_Config+0xcc>)
 8003986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800398a:	6413      	str	r3, [r2, #64]	@ 0x40
 800398c:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <SystemClock_Config+0xcc>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003998:	2300      	movs	r3, #0
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	4b22      	ldr	r3, [pc, #136]	@ (8003a28 <SystemClock_Config+0xd0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a21      	ldr	r2, [pc, #132]	@ (8003a28 <SystemClock_Config+0xd0>)
 80039a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a28 <SystemClock_Config+0xd0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039b4:	2302      	movs	r3, #2
 80039b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039b8:	2301      	movs	r3, #1
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039bc:	2310      	movs	r3, #16
 80039be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039c0:	2302      	movs	r3, #2
 80039c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039c4:	2300      	movs	r3, #0
 80039c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039c8:	2308      	movs	r3, #8
 80039ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039d0:	2302      	movs	r3, #2
 80039d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039d4:	2304      	movs	r3, #4
 80039d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039d8:	f107 0320 	add.w	r3, r7, #32
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 f915 	bl	8004c0c <HAL_RCC_OscConfig>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039e8:	f000 f944 	bl	8003c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039ec:	230f      	movs	r3, #15
 80039ee:	60fb      	str	r3, [r7, #12]
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f0:	2302      	movs	r3, #2
 80039f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80039fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a04:	f107 030c 	add.w	r3, r7, #12
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fb76 	bl	80050fc <HAL_RCC_ClockConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a16:	f000 f92d 	bl	8003c74 <Error_Handler>
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3750      	adds	r7, #80	@ 0x50
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40007000 	.word	0x40007000

08003a2c <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003a30:	4b17      	ldr	r3, [pc, #92]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a32:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <MX_CAN1_Init+0x68>)
 8003a34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8003a36:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a38:	2202      	movs	r2, #2
 8003a3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003a3c:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003a42:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a4a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8003a4e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a56:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003a58:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003a6a:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003a70:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003a7c:	4804      	ldr	r0, [pc, #16]	@ (8003a90 <MX_CAN1_Init+0x64>)
 8003a7e:	f000 fb13 	bl	80040a8 <HAL_CAN_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003a88:	f000 f8f4 	bl	8003c74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000044 	.word	0x20000044
 8003a94:	40006400 	.word	0x40006400

08003a98 <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003a9c:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003a9e:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <MX_CAN2_Init+0x68>)
 8003aa0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8003aa2:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003aa8:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003ab6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8003aba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003abc:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003abe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003ac2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003ad6:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003adc:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003ae8:	4804      	ldr	r0, [pc, #16]	@ (8003afc <MX_CAN2_Init+0x64>)
 8003aea:	f000 fadd 	bl	80040a8 <HAL_CAN_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003af4:	f000 f8be 	bl	8003c74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003af8:	bf00      	nop
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	2000006c 	.word	0x2000006c
 8003b00:	40006800 	.word	0x40006800

08003b04 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b08:	4b17      	ldr	r3, [pc, #92]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b0a:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <MX_SPI1_Init+0x68>)
 8003b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b0e:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b16:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b1c:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b22:	4b11      	ldr	r3, [pc, #68]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b36:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b48:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b4e:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b50:	220a      	movs	r2, #10
 8003b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b54:	4804      	ldr	r0, [pc, #16]	@ (8003b68 <MX_SPI1_Init+0x64>)
 8003b56:	f001 fc7d 	bl	8005454 <HAL_SPI_Init>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b60:	f000 f888 	bl	8003c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b64:	bf00      	nop
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000094 	.word	0x20000094
 8003b6c:	40013000 	.word	0x40013000

08003b70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	@ 0x28
 8003b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b76:	f107 0314 	add.w	r3, r7, #20
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	60da      	str	r2, [r3, #12]
 8003b84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	4b37      	ldr	r3, [pc, #220]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	4a36      	ldr	r2, [pc, #216]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003b90:	f043 0310 	orr.w	r3, r3, #16
 8003b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b96:	4b34      	ldr	r3, [pc, #208]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	4b30      	ldr	r3, [pc, #192]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	4a2f      	ldr	r2, [pc, #188]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	4b29      	ldr	r3, [pc, #164]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	4a28      	ldr	r2, [pc, #160]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bce:	4b26      	ldr	r3, [pc, #152]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	4b22      	ldr	r3, [pc, #136]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	4a21      	ldr	r2, [pc, #132]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bea:	4b1f      	ldr	r3, [pc, #124]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c06:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <MX_GPIO_Init+0xf8>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MCU_STATUS_LED1_Pin|MCU_STATUS_LED2_Pin, GPIO_PIN_RESET);
 8003c12:	2200      	movs	r2, #0
 8003c14:	210c      	movs	r1, #12
 8003c16:	4815      	ldr	r0, [pc, #84]	@ (8003c6c <MX_GPIO_Init+0xfc>)
 8003c18:	f000 ffde 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SSN_GPIO_Port, SPI1_SSN_Pin, GPIO_PIN_RESET);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2110      	movs	r1, #16
 8003c20:	4813      	ldr	r0, [pc, #76]	@ (8003c70 <MX_GPIO_Init+0x100>)
 8003c22:	f000 ffd9 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_STATUS_LED1_Pin MCU_STATUS_LED2_Pin */
  GPIO_InitStruct.Pin = MCU_STATUS_LED1_Pin|MCU_STATUS_LED2_Pin;
 8003c26:	230c      	movs	r3, #12
 8003c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	480b      	ldr	r0, [pc, #44]	@ (8003c6c <MX_GPIO_Init+0xfc>)
 8003c3e:	f000 fe2f 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SSN_Pin */
  GPIO_InitStruct.Pin = SPI1_SSN_Pin;
 8003c42:	2310      	movs	r3, #16
 8003c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_SSN_GPIO_Port, &GPIO_InitStruct);
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	4619      	mov	r1, r3
 8003c58:	4805      	ldr	r0, [pc, #20]	@ (8003c70 <MX_GPIO_Init+0x100>)
 8003c5a:	f000 fe21 	bl	80048a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003c5e:	bf00      	nop
 8003c60:	3728      	adds	r7, #40	@ 0x28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40020800 	.word	0x40020800

08003c74 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c78:	b672      	cpsid	i
}
 8003c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <Error_Handler+0x8>

08003c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <HAL_MspInit+0x4c>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8003ccc <HAL_MspInit+0x4c>)
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <HAL_MspInit+0x4c>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c9e:	607b      	str	r3, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <HAL_MspInit+0x4c>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	4a08      	ldr	r2, [pc, #32]	@ (8003ccc <HAL_MspInit+0x4c>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ccc <HAL_MspInit+0x4c>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800

08003cd0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	@ 0x30
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	f107 031c 	add.w	r3, r7, #28
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a43      	ldr	r2, [pc, #268]	@ (8003dfc <HAL_CAN_MspInit+0x12c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d136      	bne.n	8003d60 <HAL_CAN_MspInit+0x90>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003cf2:	4b43      	ldr	r3, [pc, #268]	@ (8003e00 <HAL_CAN_MspInit+0x130>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	4a41      	ldr	r2, [pc, #260]	@ (8003e00 <HAL_CAN_MspInit+0x130>)
 8003cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003cfc:	4b40      	ldr	r3, [pc, #256]	@ (8003e00 <HAL_CAN_MspInit+0x130>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d10d      	bne.n	8003d20 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	4b3e      	ldr	r3, [pc, #248]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d14:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	4b37      	ldr	r3, [pc, #220]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	4a36      	ldr	r2, [pc, #216]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d30:	4b34      	ldr	r3, [pc, #208]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003d3c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003d4e:	2309      	movs	r3, #9
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	f107 031c 	add.w	r3, r7, #28
 8003d56:	4619      	mov	r1, r3
 8003d58:	482b      	ldr	r0, [pc, #172]	@ (8003e08 <HAL_CAN_MspInit+0x138>)
 8003d5a:	f000 fda1 	bl	80048a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003d5e:	e048      	b.n	8003df2 <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a29      	ldr	r2, [pc, #164]	@ (8003e0c <HAL_CAN_MspInit+0x13c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d143      	bne.n	8003df2 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	4b25      	ldr	r3, [pc, #148]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	4a24      	ldr	r2, [pc, #144]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d7a:	4b22      	ldr	r3, [pc, #136]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003d86:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <HAL_CAN_MspInit+0x130>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <HAL_CAN_MspInit+0x130>)
 8003d8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003d90:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <HAL_CAN_MspInit+0x130>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d10d      	bne.n	8003db4 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	4a18      	ldr	r2, [pc, #96]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da8:	4b16      	ldr	r3, [pc, #88]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db4:	2300      	movs	r3, #0
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	4a11      	ldr	r2, [pc, #68]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <HAL_CAN_MspInit+0x134>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003dd0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dde:	2303      	movs	r3, #3
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003de2:	2309      	movs	r3, #9
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	4619      	mov	r1, r3
 8003dec:	4808      	ldr	r0, [pc, #32]	@ (8003e10 <HAL_CAN_MspInit+0x140>)
 8003dee:	f000 fd57 	bl	80048a0 <HAL_GPIO_Init>
}
 8003df2:	bf00      	nop
 8003df4:	3730      	adds	r7, #48	@ 0x30
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40006400 	.word	0x40006400
 8003e00:	200004c8 	.word	0x200004c8
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40020000 	.word	0x40020000
 8003e0c:	40006800 	.word	0x40006800
 8003e10:	40020400 	.word	0x40020400

08003e14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	@ 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	@ (8003e98 <HAL_SPI_MspInit+0x84>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d12b      	bne.n	8003e8e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <HAL_SPI_MspInit+0x88>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	4a17      	ldr	r2, [pc, #92]	@ (8003e9c <HAL_SPI_MspInit+0x88>)
 8003e40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e46:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <HAL_SPI_MspInit+0x88>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <HAL_SPI_MspInit+0x88>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	4a10      	ldr	r2, [pc, #64]	@ (8003e9c <HAL_SPI_MspInit+0x88>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e62:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <HAL_SPI_MspInit+0x88>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e6e:	23e0      	movs	r3, #224	@ 0xe0
 8003e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e72:	2302      	movs	r3, #2
 8003e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e7e:	2305      	movs	r3, #5
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4619      	mov	r1, r3
 8003e88:	4805      	ldr	r0, [pc, #20]	@ (8003ea0 <HAL_SPI_MspInit+0x8c>)
 8003e8a:	f000 fd09 	bl	80048a0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	@ 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40013000 	.word	0x40013000
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40020000 	.word	0x40020000

08003ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ea8:	bf00      	nop
 8003eaa:	e7fd      	b.n	8003ea8 <NMI_Handler+0x4>

08003eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <HardFault_Handler+0x4>

08003eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <MemManage_Handler+0x4>

08003ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec0:	bf00      	nop
 8003ec2:	e7fd      	b.n	8003ec0 <BusFault_Handler+0x4>

08003ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <UsageFault_Handler+0x4>

08003ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003efa:	f000 f891 	bl	8004020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f08:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <SystemInit+0x20>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	4a05      	ldr	r2, [pc, #20]	@ (8003f24 <SystemInit+0x20>)
 8003f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003f2c:	f7ff ffea 	bl	8003f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f30:	480c      	ldr	r0, [pc, #48]	@ (8003f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f32:	490d      	ldr	r1, [pc, #52]	@ (8003f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f34:	4a0d      	ldr	r2, [pc, #52]	@ (8003f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f38:	e002      	b.n	8003f40 <LoopCopyDataInit>

08003f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f3e:	3304      	adds	r3, #4

08003f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f44:	d3f9      	bcc.n	8003f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f46:	4a0a      	ldr	r2, [pc, #40]	@ (8003f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f48:	4c0a      	ldr	r4, [pc, #40]	@ (8003f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f4c:	e001      	b.n	8003f52 <LoopFillZerobss>

08003f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f50:	3204      	adds	r2, #4

08003f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f54:	d3fb      	bcc.n	8003f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f56:	f006 fd57 	bl	800aa08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f5a:	f7fc feed 	bl	8000d38 <main>
  bx  lr    
 8003f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f68:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003f6c:	0800ac88 	.word	0x0800ac88
  ldr r2, =_sbss
 8003f70:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8003f74:	200004d0 	.word	0x200004d0

08003f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f78:	e7fe      	b.n	8003f78 <ADC_IRQHandler>
	...

08003f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f80:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <HAL_Init+0x40>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0d      	ldr	r2, [pc, #52]	@ (8003fbc <HAL_Init+0x40>)
 8003f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <HAL_Init+0x40>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0a      	ldr	r2, [pc, #40]	@ (8003fbc <HAL_Init+0x40>)
 8003f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f98:	4b08      	ldr	r3, [pc, #32]	@ (8003fbc <HAL_Init+0x40>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a07      	ldr	r2, [pc, #28]	@ (8003fbc <HAL_Init+0x40>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa4:	2003      	movs	r0, #3
 8003fa6:	f000 fc47 	bl	8004838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003faa:	200f      	movs	r0, #15
 8003fac:	f000 f808 	bl	8003fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb0:	f7ff fe66 	bl	8003c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023c00 	.word	0x40023c00

08003fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fc8:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <HAL_InitTick+0x54>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_InitTick+0x58>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fc51 	bl	8004886 <HAL_SYSTICK_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00e      	b.n	800400c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b0f      	cmp	r3, #15
 8003ff2:	d80a      	bhi.n	800400a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	f000 fc27 	bl	800484e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004000:	4a06      	ldr	r2, [pc, #24]	@ (800401c <HAL_InitTick+0x5c>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000018 	.word	0x20000018
 8004018:	20000020 	.word	0x20000020
 800401c:	2000001c 	.word	0x2000001c

08004020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004024:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_IncTick+0x20>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <HAL_IncTick+0x24>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4413      	add	r3, r2
 8004030:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <HAL_IncTick+0x24>)
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000020 	.word	0x20000020
 8004044:	200004cc 	.word	0x200004cc

08004048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return uwTick;
 800404c:	4b03      	ldr	r3, [pc, #12]	@ (800405c <HAL_GetTick+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	200004cc 	.word	0x200004cc

08004060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004068:	f7ff ffee 	bl	8004048 <HAL_GetTick>
 800406c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d005      	beq.n	8004086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800407a:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <HAL_Delay+0x44>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004086:	bf00      	nop
 8004088:	f7ff ffde 	bl	8004048 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	429a      	cmp	r2, r3
 8004096:	d8f7      	bhi.n	8004088 <HAL_Delay+0x28>
  {
  }
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000020 	.word	0x20000020

080040a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0ed      	b.n	8004296 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fe02 	bl	8003cd0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7ff ffb4 	bl	8004048 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040e2:	e012      	b.n	800410a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040e4:	f7ff ffb0 	bl	8004048 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b0a      	cmp	r3, #10
 80040f0:	d90b      	bls.n	800410a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2205      	movs	r2, #5
 8004102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0c5      	b.n	8004296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0e5      	beq.n	80040e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0202 	bic.w	r2, r2, #2
 8004126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004128:	f7ff ff8e 	bl	8004048 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800412e:	e012      	b.n	8004156 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004130:	f7ff ff8a 	bl	8004048 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b0a      	cmp	r3, #10
 800413c:	d90b      	bls.n	8004156 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2205      	movs	r2, #5
 800414e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e09f      	b.n	8004296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7e1b      	ldrb	r3, [r3, #24]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d108      	bne.n	800417e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e007      	b.n	800418e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7e5b      	ldrb	r3, [r3, #25]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d108      	bne.n	80041a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e007      	b.n	80041b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7e9b      	ldrb	r3, [r3, #26]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d108      	bne.n	80041d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0220 	orr.w	r2, r2, #32
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e007      	b.n	80041e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0220 	bic.w	r2, r2, #32
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	7edb      	ldrb	r3, [r3, #27]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d108      	bne.n	80041fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0210 	bic.w	r2, r2, #16
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e007      	b.n	800420c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0210 	orr.w	r2, r2, #16
 800420a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	7f1b      	ldrb	r3, [r3, #28]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d108      	bne.n	8004226 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0208 	orr.w	r2, r2, #8
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e007      	b.n	8004236 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0208 	bic.w	r2, r2, #8
 8004234:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7f5b      	ldrb	r3, [r3, #29]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d108      	bne.n	8004250 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0204 	orr.w	r2, r2, #4
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e007      	b.n	8004260 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0204 	bic.w	r2, r2, #4
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	ea42 0103 	orr.w	r1, r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800429e:	b480      	push	{r7}
 80042a0:	b089      	sub	sp, #36	@ 0x24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80042bc:	7ffb      	ldrb	r3, [r7, #31]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d003      	beq.n	80042ca <HAL_CAN_AddTxMessage+0x2c>
 80042c2:	7ffb      	ldrb	r3, [r7, #31]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	f040 80ad 	bne.w	8004424 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d105      	bne.n	80042ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8095 	beq.w	8004414 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	0e1b      	lsrs	r3, r3, #24
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042f4:	2201      	movs	r2, #1
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	409a      	lsls	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004310:	68f9      	ldr	r1, [r7, #12]
 8004312:	6809      	ldr	r1, [r1, #0]
 8004314:	431a      	orrs	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	3318      	adds	r3, #24
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	440b      	add	r3, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e00f      	b.n	8004342 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800432c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004336:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	3318      	adds	r3, #24
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	440b      	add	r3, r1
 8004340:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6819      	ldr	r1, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	3318      	adds	r3, #24
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	440b      	add	r3, r1
 8004352:	3304      	adds	r3, #4
 8004354:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	7d1b      	ldrb	r3, [r3, #20]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d111      	bne.n	8004382 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	3318      	adds	r3, #24
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	4413      	add	r3, r2
 800436a:	3304      	adds	r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6811      	ldr	r1, [r2, #0]
 8004372:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	3318      	adds	r3, #24
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	440b      	add	r3, r1
 800437e:	3304      	adds	r3, #4
 8004380:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3307      	adds	r3, #7
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	061a      	lsls	r2, r3, #24
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3306      	adds	r3, #6
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3305      	adds	r3, #5
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	4313      	orrs	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	3204      	adds	r2, #4
 80043a2:	7812      	ldrb	r2, [r2, #0]
 80043a4:	4610      	mov	r0, r2
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	6811      	ldr	r1, [r2, #0]
 80043aa:	ea43 0200 	orr.w	r2, r3, r0
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	440b      	add	r3, r1
 80043b4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80043b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3303      	adds	r3, #3
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	061a      	lsls	r2, r3, #24
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3302      	adds	r3, #2
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3301      	adds	r3, #1
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	4313      	orrs	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	7812      	ldrb	r2, [r2, #0]
 80043da:	4610      	mov	r0, r2
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	6811      	ldr	r1, [r2, #0]
 80043e0:	ea43 0200 	orr.w	r2, r3, r0
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	440b      	add	r3, r1
 80043ea:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80043ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	3318      	adds	r3, #24
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	4413      	add	r3, r2
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	6811      	ldr	r1, [r2, #0]
 8004402:	f043 0201 	orr.w	r2, r3, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3318      	adds	r3, #24
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	440b      	add	r3, r1
 800440e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e00e      	b.n	8004432 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e006      	b.n	8004432 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	@ 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800443e:	b480      	push	{r7}
 8004440:	b087      	sub	sp, #28
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004452:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d003      	beq.n	8004462 <HAL_CAN_GetRxMessage+0x24>
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	2b02      	cmp	r3, #2
 800445e:	f040 8103 	bne.w	8004668 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10e      	bne.n	8004486 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e0f7      	b.n	8004676 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d107      	bne.n	80044a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0e8      	b.n	8004676 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	331b      	adds	r3, #27
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	4413      	add	r3, r2
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0204 	and.w	r2, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	331b      	adds	r3, #27
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	4413      	add	r3, r2
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0d5b      	lsrs	r3, r3, #21
 80044d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e00b      	b.n	80044f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	331b      	adds	r3, #27
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	4413      	add	r3, r2
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	08db      	lsrs	r3, r3, #3
 80044ec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	331b      	adds	r3, #27
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	4413      	add	r3, r2
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0202 	and.w	r2, r3, #2
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	331b      	adds	r3, #27
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	4413      	add	r3, r2
 8004516:	3304      	adds	r3, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2208      	movs	r2, #8
 8004526:	611a      	str	r2, [r3, #16]
 8004528:	e00b      	b.n	8004542 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	331b      	adds	r3, #27
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	4413      	add	r3, r2
 8004536:	3304      	adds	r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 020f 	and.w	r2, r3, #15
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	331b      	adds	r3, #27
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	4413      	add	r3, r2
 800454e:	3304      	adds	r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	b2da      	uxtb	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	331b      	adds	r3, #27
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	4413      	add	r3, r2
 8004566:	3304      	adds	r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	0c1b      	lsrs	r3, r3, #16
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	4413      	add	r3, r2
 800457c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	4413      	add	r3, r2
 8004592:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0a1a      	lsrs	r2, r3, #8
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	0c1a      	lsrs	r2, r3, #16
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	3302      	adds	r3, #2
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0e1a      	lsrs	r2, r3, #24
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	3303      	adds	r3, #3
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4413      	add	r3, r2
 80045e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	3304      	adds	r3, #4
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0a1a      	lsrs	r2, r3, #8
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	3305      	adds	r3, #5
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4413      	add	r3, r2
 8004612:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	0c1a      	lsrs	r2, r3, #16
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	3306      	adds	r3, #6
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4413      	add	r3, r2
 800462c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	0e1a      	lsrs	r2, r3, #24
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	3307      	adds	r3, #7
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0220 	orr.w	r2, r2, #32
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	e007      	b.n	8004664 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0220 	orr.w	r2, r2, #32
 8004662:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e006      	b.n	8004676 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004696:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004698:	7afb      	ldrb	r3, [r7, #11]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d002      	beq.n	80046a4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800469e:	7afb      	ldrb	r3, [r7, #11]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d10f      	bne.n	80046c4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e005      	b.n	80046c4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80046c4:	68fb      	ldr	r3, [r7, #12]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004706:	4a04      	ldr	r2, [pc, #16]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	60d3      	str	r3, [r2, #12]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <__NVIC_GetPriorityGrouping+0x18>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	f003 0307 	and.w	r3, r3, #7
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004748:	2b00      	cmp	r3, #0
 800474a:	db0a      	blt.n	8004762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	490c      	ldr	r1, [pc, #48]	@ (8004784 <__NVIC_SetPriority+0x4c>)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	0112      	lsls	r2, r2, #4
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	440b      	add	r3, r1
 800475c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004760:	e00a      	b.n	8004778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4908      	ldr	r1, [pc, #32]	@ (8004788 <__NVIC_SetPriority+0x50>)
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	3b04      	subs	r3, #4
 8004770:	0112      	lsls	r2, r2, #4
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	440b      	add	r3, r1
 8004776:	761a      	strb	r2, [r3, #24]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000e100 	.word	0xe000e100
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800478c:	b480      	push	{r7}
 800478e:	b089      	sub	sp, #36	@ 0x24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f1c3 0307 	rsb	r3, r3, #7
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	bf28      	it	cs
 80047aa:	2304      	movcs	r3, #4
 80047ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3304      	adds	r3, #4
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d902      	bls.n	80047bc <NVIC_EncodePriority+0x30>
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3b03      	subs	r3, #3
 80047ba:	e000      	b.n	80047be <NVIC_EncodePriority+0x32>
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c0:	f04f 32ff 	mov.w	r2, #4294967295
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	401a      	ands	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047d4:	f04f 31ff 	mov.w	r1, #4294967295
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	43d9      	mvns	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e4:	4313      	orrs	r3, r2
         );
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3724      	adds	r7, #36	@ 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3b01      	subs	r3, #1
 8004800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004804:	d301      	bcc.n	800480a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004806:	2301      	movs	r3, #1
 8004808:	e00f      	b.n	800482a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800480a:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <SysTick_Config+0x40>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3b01      	subs	r3, #1
 8004810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004812:	210f      	movs	r1, #15
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	f7ff ff8e 	bl	8004738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <SysTick_Config+0x40>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004822:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <SysTick_Config+0x40>)
 8004824:	2207      	movs	r2, #7
 8004826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	e000e010 	.word	0xe000e010

08004838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff47 	bl	80046d4 <__NVIC_SetPriorityGrouping>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004860:	f7ff ff5c 	bl	800471c <__NVIC_GetPriorityGrouping>
 8004864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	6978      	ldr	r0, [r7, #20]
 800486c:	f7ff ff8e 	bl	800478c <NVIC_EncodePriority>
 8004870:	4602      	mov	r2, r0
 8004872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff ff5d 	bl	8004738 <__NVIC_SetPriority>
}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff ffb0 	bl	80047f4 <SysTick_Config>
 8004894:	4603      	mov	r3, r0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	@ 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	e16b      	b.n	8004b94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048bc:	2201      	movs	r2, #1
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	f040 815a 	bne.w	8004b8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d005      	beq.n	80048f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d130      	bne.n	8004954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4313      	orrs	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004928:	2201      	movs	r2, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	43db      	mvns	r3, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4013      	ands	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 0201 	and.w	r2, r3, #1
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b03      	cmp	r3, #3
 800495e:	d017      	beq.n	8004990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	2203      	movs	r2, #3
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d123      	bne.n	80049e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	08da      	lsrs	r2, r3, #3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3208      	adds	r2, #8
 80049a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	220f      	movs	r2, #15
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	08da      	lsrs	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3208      	adds	r2, #8
 80049de:	69b9      	ldr	r1, [r7, #24]
 80049e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	2203      	movs	r2, #3
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4013      	ands	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0203 	and.w	r2, r3, #3
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80b4 	beq.w	8004b8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	4b60      	ldr	r3, [pc, #384]	@ (8004bac <HAL_GPIO_Init+0x30c>)
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bac <HAL_GPIO_Init+0x30c>)
 8004a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a36:	4b5d      	ldr	r3, [pc, #372]	@ (8004bac <HAL_GPIO_Init+0x30c>)
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a42:	4a5b      	ldr	r2, [pc, #364]	@ (8004bb0 <HAL_GPIO_Init+0x310>)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	3302      	adds	r3, #2
 8004a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	220f      	movs	r2, #15
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a52      	ldr	r2, [pc, #328]	@ (8004bb4 <HAL_GPIO_Init+0x314>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02b      	beq.n	8004ac6 <HAL_GPIO_Init+0x226>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a51      	ldr	r2, [pc, #324]	@ (8004bb8 <HAL_GPIO_Init+0x318>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d025      	beq.n	8004ac2 <HAL_GPIO_Init+0x222>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a50      	ldr	r2, [pc, #320]	@ (8004bbc <HAL_GPIO_Init+0x31c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01f      	beq.n	8004abe <HAL_GPIO_Init+0x21e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a4f      	ldr	r2, [pc, #316]	@ (8004bc0 <HAL_GPIO_Init+0x320>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d019      	beq.n	8004aba <HAL_GPIO_Init+0x21a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a4e      	ldr	r2, [pc, #312]	@ (8004bc4 <HAL_GPIO_Init+0x324>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_GPIO_Init+0x216>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a4d      	ldr	r2, [pc, #308]	@ (8004bc8 <HAL_GPIO_Init+0x328>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00d      	beq.n	8004ab2 <HAL_GPIO_Init+0x212>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a4c      	ldr	r2, [pc, #304]	@ (8004bcc <HAL_GPIO_Init+0x32c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <HAL_GPIO_Init+0x20e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8004bd0 <HAL_GPIO_Init+0x330>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d101      	bne.n	8004aaa <HAL_GPIO_Init+0x20a>
 8004aa6:	2307      	movs	r3, #7
 8004aa8:	e00e      	b.n	8004ac8 <HAL_GPIO_Init+0x228>
 8004aaa:	2308      	movs	r3, #8
 8004aac:	e00c      	b.n	8004ac8 <HAL_GPIO_Init+0x228>
 8004aae:	2306      	movs	r3, #6
 8004ab0:	e00a      	b.n	8004ac8 <HAL_GPIO_Init+0x228>
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	e008      	b.n	8004ac8 <HAL_GPIO_Init+0x228>
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	e006      	b.n	8004ac8 <HAL_GPIO_Init+0x228>
 8004aba:	2303      	movs	r3, #3
 8004abc:	e004      	b.n	8004ac8 <HAL_GPIO_Init+0x228>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e002      	b.n	8004ac8 <HAL_GPIO_Init+0x228>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_GPIO_Init+0x228>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	f002 0203 	and.w	r2, r2, #3
 8004ace:	0092      	lsls	r2, r2, #2
 8004ad0:	4093      	lsls	r3, r2
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ad8:	4935      	ldr	r1, [pc, #212]	@ (8004bb0 <HAL_GPIO_Init+0x310>)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	3302      	adds	r3, #2
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd4 <HAL_GPIO_Init+0x334>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b0a:	4a32      	ldr	r2, [pc, #200]	@ (8004bd4 <HAL_GPIO_Init+0x334>)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b10:	4b30      	ldr	r3, [pc, #192]	@ (8004bd4 <HAL_GPIO_Init+0x334>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b34:	4a27      	ldr	r2, [pc, #156]	@ (8004bd4 <HAL_GPIO_Init+0x334>)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b3a:	4b26      	ldr	r3, [pc, #152]	@ (8004bd4 <HAL_GPIO_Init+0x334>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd4 <HAL_GPIO_Init+0x334>)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b64:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd4 <HAL_GPIO_Init+0x334>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b88:	4a12      	ldr	r2, [pc, #72]	@ (8004bd4 <HAL_GPIO_Init+0x334>)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3301      	adds	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	f67f ae90 	bls.w	80048bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3724      	adds	r7, #36	@ 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	40013800 	.word	0x40013800
 8004bb4:	40020000 	.word	0x40020000
 8004bb8:	40020400 	.word	0x40020400
 8004bbc:	40020800 	.word	0x40020800
 8004bc0:	40020c00 	.word	0x40020c00
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40021400 	.word	0x40021400
 8004bcc:	40021800 	.word	0x40021800
 8004bd0:	40021c00 	.word	0x40021c00
 8004bd4:	40013c00 	.word	0x40013c00

08004bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	807b      	strh	r3, [r7, #2]
 8004be4:	4613      	mov	r3, r2
 8004be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004be8:	787b      	ldrb	r3, [r7, #1]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bf4:	e003      	b.n	8004bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	041a      	lsls	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	619a      	str	r2, [r3, #24]
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e267      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d075      	beq.n	8004d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c2a:	4b88      	ldr	r3, [pc, #544]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d00c      	beq.n	8004c50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c36:	4b85      	ldr	r3, [pc, #532]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d112      	bne.n	8004c68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c42:	4b82      	ldr	r3, [pc, #520]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c4e:	d10b      	bne.n	8004c68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	4b7e      	ldr	r3, [pc, #504]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d05b      	beq.n	8004d14 <HAL_RCC_OscConfig+0x108>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d157      	bne.n	8004d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e242      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c70:	d106      	bne.n	8004c80 <HAL_RCC_OscConfig+0x74>
 8004c72:	4b76      	ldr	r3, [pc, #472]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a75      	ldr	r2, [pc, #468]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e01d      	b.n	8004cbc <HAL_RCC_OscConfig+0xb0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x98>
 8004c8a:	4b70      	ldr	r3, [pc, #448]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b6d      	ldr	r3, [pc, #436]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0xb0>
 8004ca4:	4b69      	ldr	r3, [pc, #420]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a68      	ldr	r2, [pc, #416]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b66      	ldr	r3, [pc, #408]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a65      	ldr	r2, [pc, #404]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7ff f9c0 	bl	8004048 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7ff f9bc 	bl	8004048 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	@ 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e207      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	4b5b      	ldr	r3, [pc, #364]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0xc0>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7ff f9ac 	bl	8004048 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7ff f9a8 	bl	8004048 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	@ 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e1f3      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d06:	4b51      	ldr	r3, [pc, #324]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0xe8>
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d063      	beq.n	8004dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d22:	4b4a      	ldr	r3, [pc, #296]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2e:	4b47      	ldr	r3, [pc, #284]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d11c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d3a:	4b44      	ldr	r3, [pc, #272]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d116      	bne.n	8004d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d46:	4b41      	ldr	r3, [pc, #260]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_RCC_OscConfig+0x152>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d001      	beq.n	8004d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1c7      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4937      	ldr	r1, [pc, #220]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	e03a      	b.n	8004dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d7c:	4b34      	ldr	r3, [pc, #208]	@ (8004e50 <HAL_RCC_OscConfig+0x244>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7ff f961 	bl	8004048 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7ff f95d 	bl	8004048 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e1a8      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b28      	ldr	r3, [pc, #160]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4925      	ldr	r1, [pc, #148]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]
 8004dbc:	e015      	b.n	8004dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dbe:	4b24      	ldr	r3, [pc, #144]	@ (8004e50 <HAL_RCC_OscConfig+0x244>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7ff f940 	bl	8004048 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dcc:	f7ff f93c 	bl	8004048 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e187      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dde:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d036      	beq.n	8004e64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfe:	4b15      	ldr	r3, [pc, #84]	@ (8004e54 <HAL_RCC_OscConfig+0x248>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7ff f920 	bl	8004048 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0c:	f7ff f91c 	bl	8004048 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e167      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x200>
 8004e2a:	e01b      	b.n	8004e64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e2c:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <HAL_RCC_OscConfig+0x248>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e32:	f7ff f909 	bl	8004048 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e38:	e00e      	b.n	8004e58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3a:	f7ff f905 	bl	8004048 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d907      	bls.n	8004e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e150      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	42470000 	.word	0x42470000
 8004e54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	4b88      	ldr	r3, [pc, #544]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ea      	bne.n	8004e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8097 	beq.w	8004fa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e76:	4b81      	ldr	r3, [pc, #516]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10f      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	4b7d      	ldr	r3, [pc, #500]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e92:	4b7a      	ldr	r3, [pc, #488]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea2:	4b77      	ldr	r3, [pc, #476]	@ (8005080 <HAL_RCC_OscConfig+0x474>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d118      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eae:	4b74      	ldr	r3, [pc, #464]	@ (8005080 <HAL_RCC_OscConfig+0x474>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a73      	ldr	r2, [pc, #460]	@ (8005080 <HAL_RCC_OscConfig+0x474>)
 8004eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eba:	f7ff f8c5 	bl	8004048 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec2:	f7ff f8c1 	bl	8004048 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e10c      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8005080 <HAL_RCC_OscConfig+0x474>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x2ea>
 8004ee8:	4b64      	ldr	r3, [pc, #400]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eec:	4a63      	ldr	r2, [pc, #396]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef4:	e01c      	b.n	8004f30 <HAL_RCC_OscConfig+0x324>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x30c>
 8004efe:	4b5f      	ldr	r3, [pc, #380]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f02:	4a5e      	ldr	r2, [pc, #376]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0x324>
 8004f18:	4b58      	ldr	r3, [pc, #352]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1c:	4a57      	ldr	r2, [pc, #348]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f1e:	f023 0301 	bic.w	r3, r3, #1
 8004f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f24:	4b55      	ldr	r3, [pc, #340]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f28:	4a54      	ldr	r2, [pc, #336]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f2a:	f023 0304 	bic.w	r3, r3, #4
 8004f2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d015      	beq.n	8004f64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7ff f886 	bl	8004048 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f40:	f7ff f882 	bl	8004048 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0cb      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f56:	4b49      	ldr	r3, [pc, #292]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ee      	beq.n	8004f40 <HAL_RCC_OscConfig+0x334>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f64:	f7ff f870 	bl	8004048 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6c:	f7ff f86c 	bl	8004048 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0b5      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f82:	4b3e      	ldr	r3, [pc, #248]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ee      	bne.n	8004f6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f94:	4b39      	ldr	r3, [pc, #228]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	4a38      	ldr	r2, [pc, #224]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a1 	beq.w	80050ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004faa:	4b34      	ldr	r3, [pc, #208]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d05c      	beq.n	8005070 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d141      	bne.n	8005042 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b31      	ldr	r3, [pc, #196]	@ (8005084 <HAL_RCC_OscConfig+0x478>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7ff f840 	bl	8004048 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7ff f83c 	bl	8004048 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e087      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	4b27      	ldr	r3, [pc, #156]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	019b      	lsls	r3, r3, #6
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	3b01      	subs	r3, #1
 8005004:	041b      	lsls	r3, r3, #16
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	491b      	ldr	r1, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005014:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x478>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501a:	f7ff f815 	bl	8004048 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005022:	f7ff f811 	bl	8004048 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e05c      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005034:	4b11      	ldr	r3, [pc, #68]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x416>
 8005040:	e054      	b.n	80050ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005042:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <HAL_RCC_OscConfig+0x478>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fe fffe 	bl	8004048 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005050:	f7fe fffa 	bl	8004048 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e045      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x444>
 800506e:	e03d      	b.n	80050ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e038      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
 800507c:	40023800 	.word	0x40023800
 8005080:	40007000 	.word	0x40007000
 8005084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005088:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <HAL_RCC_OscConfig+0x4ec>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d028      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d121      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d11a      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	3b01      	subs	r3, #1
 80050d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800

080050fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0cc      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b68      	ldr	r3, [pc, #416]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d90c      	bls.n	8005138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b65      	ldr	r3, [pc, #404]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b63      	ldr	r3, [pc, #396]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0b8      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d020      	beq.n	8005186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005150:	4b59      	ldr	r3, [pc, #356]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	4a58      	ldr	r2, [pc, #352]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800515a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005168:	4b53      	ldr	r3, [pc, #332]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a52      	ldr	r2, [pc, #328]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005174:	4b50      	ldr	r3, [pc, #320]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	494d      	ldr	r1, [pc, #308]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d044      	beq.n	800521c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	4b47      	ldr	r3, [pc, #284]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d119      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e07f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d003      	beq.n	80051ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ba:	4b3f      	ldr	r3, [pc, #252]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ca:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e067      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051da:	4b37      	ldr	r3, [pc, #220]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f023 0203 	bic.w	r2, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4934      	ldr	r1, [pc, #208]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051ec:	f7fe ff2c 	bl	8004048 <HAL_GetTick>
 80051f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	e00a      	b.n	800520a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f4:	f7fe ff28 	bl	8004048 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e04f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 020c 	and.w	r2, r3, #12
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	429a      	cmp	r2, r3
 800521a:	d1eb      	bne.n	80051f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800521c:	4b25      	ldr	r3, [pc, #148]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d20c      	bcs.n	8005244 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522a:	4b22      	ldr	r3, [pc, #136]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005232:	4b20      	ldr	r3, [pc, #128]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e032      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005250:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4916      	ldr	r1, [pc, #88]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800526e:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	490e      	ldr	r1, [pc, #56]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005282:	f000 f821 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 8005286:	4602      	mov	r2, r0
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	490a      	ldr	r1, [pc, #40]	@ (80052bc <HAL_RCC_ClockConfig+0x1c0>)
 8005294:	5ccb      	ldrb	r3, [r1, r3]
 8005296:	fa22 f303 	lsr.w	r3, r2, r3
 800529a:	4a09      	ldr	r2, [pc, #36]	@ (80052c0 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800529e:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <HAL_RCC_ClockConfig+0x1c8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fe8c 	bl	8003fc0 <HAL_InitTick>

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40023c00 	.word	0x40023c00
 80052b8:	40023800 	.word	0x40023800
 80052bc:	0800ac68 	.word	0x0800ac68
 80052c0:	20000018 	.word	0x20000018
 80052c4:	2000001c 	.word	0x2000001c

080052c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052cc:	b090      	sub	sp, #64	@ 0x40
 80052ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e0:	4b59      	ldr	r3, [pc, #356]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x180>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 030c 	and.w	r3, r3, #12
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d00d      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x40>
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	f200 80a1 	bhi.w	8005434 <HAL_RCC_GetSysClockFreq+0x16c>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x34>
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d003      	beq.n	8005302 <HAL_RCC_GetSysClockFreq+0x3a>
 80052fa:	e09b      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052fc:	4b53      	ldr	r3, [pc, #332]	@ (800544c <HAL_RCC_GetSysClockFreq+0x184>)
 80052fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005300:	e09b      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005302:	4b53      	ldr	r3, [pc, #332]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x188>)
 8005304:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005306:	e098      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005308:	4b4f      	ldr	r3, [pc, #316]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x180>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005310:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005312:	4b4d      	ldr	r3, [pc, #308]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x180>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d028      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800531e:	4b4a      	ldr	r3, [pc, #296]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x180>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	099b      	lsrs	r3, r3, #6
 8005324:	2200      	movs	r2, #0
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	627a      	str	r2, [r7, #36]	@ 0x24
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005330:	2100      	movs	r1, #0
 8005332:	4b47      	ldr	r3, [pc, #284]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x188>)
 8005334:	fb03 f201 	mul.w	r2, r3, r1
 8005338:	2300      	movs	r3, #0
 800533a:	fb00 f303 	mul.w	r3, r0, r3
 800533e:	4413      	add	r3, r2
 8005340:	4a43      	ldr	r2, [pc, #268]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x188>)
 8005342:	fba0 1202 	umull	r1, r2, r0, r2
 8005346:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005348:	460a      	mov	r2, r1
 800534a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800534c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800534e:	4413      	add	r3, r2
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005354:	2200      	movs	r2, #0
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	61fa      	str	r2, [r7, #28]
 800535a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800535e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005362:	f7fb fb1f 	bl	80009a4 <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4613      	mov	r3, r2
 800536c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800536e:	e053      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005370:	4b35      	ldr	r3, [pc, #212]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x180>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	2200      	movs	r2, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	617a      	str	r2, [r7, #20]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005382:	f04f 0b00 	mov.w	fp, #0
 8005386:	4652      	mov	r2, sl
 8005388:	465b      	mov	r3, fp
 800538a:	f04f 0000 	mov.w	r0, #0
 800538e:	f04f 0100 	mov.w	r1, #0
 8005392:	0159      	lsls	r1, r3, #5
 8005394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005398:	0150      	lsls	r0, r2, #5
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	ebb2 080a 	subs.w	r8, r2, sl
 80053a2:	eb63 090b 	sbc.w	r9, r3, fp
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053ba:	ebb2 0408 	subs.w	r4, r2, r8
 80053be:	eb63 0509 	sbc.w	r5, r3, r9
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	00eb      	lsls	r3, r5, #3
 80053cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053d0:	00e2      	lsls	r2, r4, #3
 80053d2:	4614      	mov	r4, r2
 80053d4:	461d      	mov	r5, r3
 80053d6:	eb14 030a 	adds.w	r3, r4, sl
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	eb45 030b 	adc.w	r3, r5, fp
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ee:	4629      	mov	r1, r5
 80053f0:	028b      	lsls	r3, r1, #10
 80053f2:	4621      	mov	r1, r4
 80053f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053f8:	4621      	mov	r1, r4
 80053fa:	028a      	lsls	r2, r1, #10
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005402:	2200      	movs	r2, #0
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	60fa      	str	r2, [r7, #12]
 8005408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800540c:	f7fb faca 	bl	80009a4 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4613      	mov	r3, r2
 8005416:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005418:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x180>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	3301      	adds	r3, #1
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005428:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005432:	e002      	b.n	800543a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_RCC_GetSysClockFreq+0x184>)
 8005436:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800543a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800543c:	4618      	mov	r0, r3
 800543e:	3740      	adds	r7, #64	@ 0x40
 8005440:	46bd      	mov	sp, r7
 8005442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	00f42400 	.word	0x00f42400
 8005450:	017d7840 	.word	0x017d7840

08005454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e07b      	b.n	800555e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	2b00      	cmp	r3, #0
 800546c:	d108      	bne.n	8005480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005476:	d009      	beq.n	800548c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	61da      	str	r2, [r3, #28]
 800547e:	e005      	b.n	800548c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fe fcb4 	bl	8003e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005510:	ea42 0103 	orr.w	r1, r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	f003 0104 	and.w	r1, r3, #4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	f003 0210 	and.w	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800554c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b088      	sub	sp, #32
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005576:	f7fe fd67 	bl	8004048 <HAL_GetTick>
 800557a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d001      	beq.n	8005590 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800558c:	2302      	movs	r3, #2
 800558e:	e12a      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_SPI_Transmit+0x36>
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e122      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_SPI_Transmit+0x48>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e11b      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2203      	movs	r2, #3
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055fc:	d10f      	bne.n	800561e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800560c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800561c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b40      	cmp	r3, #64	@ 0x40
 800562a:	d007      	beq.n	800563c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800563a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005644:	d152      	bne.n	80056ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SPI_Transmit+0xee>
 800564e:	8b7b      	ldrh	r3, [r7, #26]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d145      	bne.n	80056e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005678:	e032      	b.n	80056e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d112      	bne.n	80056ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056ac:	e018      	b.n	80056e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ae:	f7fe fccb 	bl	8004048 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d803      	bhi.n	80056c6 <HAL_SPI_Transmit+0x160>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit+0x166>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e082      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1c7      	bne.n	800567a <HAL_SPI_Transmit+0x114>
 80056ea:	e053      	b.n	8005794 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Transmit+0x194>
 80056f4:	8b7b      	ldrh	r3, [r7, #26]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d147      	bne.n	800578a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005720:	e033      	b.n	800578a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b02      	cmp	r3, #2
 800572e:	d113      	bne.n	8005758 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	7812      	ldrb	r2, [r2, #0]
 800573c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005756:	e018      	b.n	800578a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005758:	f7fe fc76 	bl	8004048 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d803      	bhi.n	8005770 <HAL_SPI_Transmit+0x20a>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Transmit+0x210>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e02d      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1c6      	bne.n	8005722 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 fa59 	bl	8005c50 <SPI_EndRxTxTransaction>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b08a      	sub	sp, #40	@ 0x28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057fc:	2301      	movs	r3, #1
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005800:	f7fe fc22 	bl	8004048 <HAL_GetTick>
 8005804:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800580c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005814:	887b      	ldrh	r3, [r7, #2]
 8005816:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005818:	7ffb      	ldrb	r3, [r7, #31]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d00c      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x4a>
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005824:	d106      	bne.n	8005834 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <HAL_SPI_TransmitReceive+0x46>
 800582e:	7ffb      	ldrb	r3, [r7, #31]
 8005830:	2b04      	cmp	r3, #4
 8005832:	d001      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005834:	2302      	movs	r3, #2
 8005836:	e17f      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_SPI_TransmitReceive+0x5c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_SPI_TransmitReceive+0x5c>
 8005844:	887b      	ldrh	r3, [r7, #2]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e174      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_SPI_TransmitReceive+0x6e>
 8005858:	2302      	movs	r3, #2
 800585a:	e16d      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x34a>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b04      	cmp	r3, #4
 800586e:	d003      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2205      	movs	r2, #5
 8005874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	887a      	ldrh	r2, [r7, #2]
 800588e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	887a      	ldrh	r2, [r7, #2]
 800589a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	887a      	ldrh	r2, [r7, #2]
 80058a0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b40      	cmp	r3, #64	@ 0x40
 80058ba:	d007      	beq.n	80058cc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d4:	d17e      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_TransmitReceive+0xf6>
 80058de:	8afb      	ldrh	r3, [r7, #22]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d16c      	bne.n	80059be <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	881a      	ldrh	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f4:	1c9a      	adds	r2, r3, #2
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005908:	e059      	b.n	80059be <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b02      	cmp	r3, #2
 8005916:	d11b      	bne.n	8005950 <HAL_SPI_TransmitReceive+0x162>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d016      	beq.n	8005950 <HAL_SPI_TransmitReceive+0x162>
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	2b01      	cmp	r3, #1
 8005926:	d113      	bne.n	8005950 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592c:	881a      	ldrh	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	1c9a      	adds	r2, r3, #2
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b01      	cmp	r3, #1
 800595c:	d119      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x1a4>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d014      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005972:	b292      	uxth	r2, r2
 8005974:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800598e:	2301      	movs	r3, #1
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005992:	f7fe fb59 	bl	8004048 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800599e:	429a      	cmp	r2, r3
 80059a0:	d80d      	bhi.n	80059be <HAL_SPI_TransmitReceive+0x1d0>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d009      	beq.n	80059be <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e0bc      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1a0      	bne.n	800590a <HAL_SPI_TransmitReceive+0x11c>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d19b      	bne.n	800590a <HAL_SPI_TransmitReceive+0x11c>
 80059d2:	e082      	b.n	8005ada <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x1f4>
 80059dc:	8afb      	ldrh	r3, [r7, #22]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d171      	bne.n	8005ac6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a08:	e05d      	b.n	8005ac6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d11c      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x264>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d017      	beq.n	8005a52 <HAL_SPI_TransmitReceive+0x264>
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d114      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	7812      	ldrb	r2, [r2, #0]
 8005a34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d119      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x2a6>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d014      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a90:	2301      	movs	r3, #1
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a94:	f7fe fad8 	bl	8004048 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d803      	bhi.n	8005aac <HAL_SPI_TransmitReceive+0x2be>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d102      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x2c4>
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e038      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d19c      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x21c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d197      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ada:	6a3a      	ldr	r2, [r7, #32]
 8005adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f8b6 	bl	8005c50 <SPI_EndRxTxTransaction>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e01d      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
  }
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3728      	adds	r7, #40	@ 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b50:	f7fe fa7a 	bl	8004048 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b60:	f7fe fa72 	bl	8004048 <HAL_GetTick>
 8005b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b66:	4b39      	ldr	r3, [pc, #228]	@ (8005c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	015b      	lsls	r3, r3, #5
 8005b6c:	0d1b      	lsrs	r3, r3, #20
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	fb02 f303 	mul.w	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b76:	e055      	b.n	8005c24 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d051      	beq.n	8005c24 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b80:	f7fe fa62 	bl	8004048 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d902      	bls.n	8005b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d13d      	bne.n	8005c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bae:	d111      	bne.n	8005bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb8:	d004      	beq.n	8005bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc2:	d107      	bne.n	8005bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bdc:	d10f      	bne.n	8005bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e018      	b.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d102      	bne.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61fb      	str	r3, [r7, #28]
 8005c1c:	e002      	b.n	8005c24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d19a      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000018 	.word	0x20000018

08005c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2201      	movs	r2, #1
 8005c64:	2102      	movs	r1, #2
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff ff6a 	bl	8005b40 <SPI_WaitFlagStateUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e032      	b.n	8005ce8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c82:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf0 <SPI_EndRxTxTransaction+0xa0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf4 <SPI_EndRxTxTransaction+0xa4>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	0d5b      	lsrs	r3, r3, #21
 8005c8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ca0:	d112      	bne.n	8005cc8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2180      	movs	r1, #128	@ 0x80
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f7ff ff47 	bl	8005b40 <SPI_WaitFlagStateUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d016      	beq.n	8005ce6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e00f      	b.n	8005ce8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b80      	cmp	r3, #128	@ 0x80
 8005ce0:	d0f2      	beq.n	8005cc8 <SPI_EndRxTxTransaction+0x78>
 8005ce2:	e000      	b.n	8005ce6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005ce4:	bf00      	nop
  }

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000018 	.word	0x20000018
 8005cf4:	165e9f81 	.word	0x165e9f81

08005cf8 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
 8005d02:	460b      	mov	r3, r1
 8005d04:	71bb      	strb	r3, [r7, #6]
 8005d06:	4613      	mov	r3, r2
 8005d08:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8005d0a:	79fa      	ldrb	r2, [r7, #7]
 8005d0c:	79bb      	ldrb	r3, [r7, #6]
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	797b      	ldrb	r3, [r7, #5]
 8005d16:	4013      	ands	r3, r2
 8005d18:	b2db      	uxtb	r3, r3
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	71fb      	strb	r3, [r7, #7]
 8005d30:	460b      	mov	r3, r1
 8005d32:	71bb      	strb	r3, [r7, #6]
 8005d34:	4613      	mov	r3, r2
 8005d36:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8005d38:	79fa      	ldrb	r2, [r7, #7]
 8005d3a:	797b      	ldrb	r3, [r7, #5]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	79bb      	ldrb	r3, [r7, #6]
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	b29b      	uxth	r3, r3
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	71fb      	strb	r3, [r7, #7]
 8005d60:	460b      	mov	r3, r1
 8005d62:	71bb      	strb	r3, [r7, #6]
 8005d64:	4613      	mov	r3, r2
 8005d66:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8005d68:	79fa      	ldrb	r2, [r7, #7]
 8005d6a:	797b      	ldrb	r3, [r7, #5]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	79bb      	ldrb	r3, [r7, #6]
 8005d74:	fa42 f303 	asr.w	r3, r2, r3
 8005d78:	b2db      	uxtb	r3, r3
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	460b      	mov	r3, r1
 8005d92:	71bb      	strb	r3, [r7, #6]
 8005d94:	4613      	mov	r3, r2
 8005d96:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 8005d98:	79fa      	ldrb	r2, [r7, #7]
 8005d9a:	797b      	ldrb	r3, [r7, #5]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79bb      	ldrb	r3, [r7, #6]
 8005da4:	fa42 f303 	asr.w	r3, r2, r3
 8005da8:	b29b      	uxth	r3, r3
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <can1_ams_status_1_min_cell_voltage_encode>:
{
    return (value <= 1u);
}

double can1_ams_status_1_min_cell_voltage_encode(double value)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - 2.0) / 0.00784);
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dce:	f7fa f9ff 	bl	80001d0 <__aeabi_dsub>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	a309      	add	r3, pc, #36	@ (adr r3, 8005e00 <can1_ams_status_1_min_cell_voltage_encode+0x48>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fcd8 	bl	8000794 <__aeabi_ddiv>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	ec43 2b17 	vmov	d7, r2, r3
}
 8005dec:	eeb0 0a47 	vmov.f32	s0, s14
 8005df0:	eef0 0a67 	vmov.f32	s1, s15
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	f3af 8000 	nop.w
 8005e00:	fcce1c58 	.word	0xfcce1c58
 8005e04:	3f800e6a 	.word	0x3f800e6a

08005e08 <can1_ams_status_1_max_cell_voltage_encode>:
{
    return ((value >= 63.775510204081634) && (value <= 318.8775510204082));
}

double can1_ams_status_1_max_cell_voltage_encode(double value)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	ed87 0b00 	vstr	d0, [r7]
    return (double)((value - 2.4) / 0.00784);
 8005e12:	a30d      	add	r3, pc, #52	@ (adr r3, 8005e48 <can1_ams_status_1_max_cell_voltage_encode+0x40>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e1c:	f7fa f9d8 	bl	80001d0 <__aeabi_dsub>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	a309      	add	r3, pc, #36	@ (adr r3, 8005e50 <can1_ams_status_1_max_cell_voltage_encode+0x48>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fcb1 	bl	8000794 <__aeabi_ddiv>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	ec43 2b17 	vmov	d7, r2, r3
}
 8005e3a:	eeb0 0a47 	vmov.f32	s0, s14
 8005e3e:	eef0 0a67 	vmov.f32	s1, s15
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	33333333 	.word	0x33333333
 8005e4c:	40033333 	.word	0x40033333
 8005e50:	fcce1c58 	.word	0xfcce1c58
 8005e54:	3f800e6a 	.word	0x3f800e6a

08005e58 <can1_ams_status_1_ticks_encode>:
{
    return (value <= 15u);
}

uint8_t can1_ams_status_1_ticks_encode(double value)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value / 10.0);
 8005e62:	f04f 0200 	mov.w	r2, #0
 8005e66:	4b08      	ldr	r3, [pc, #32]	@ (8005e88 <can1_ams_status_1_ticks_encode+0x30>)
 8005e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e6c:	f7fa fc92 	bl	8000794 <__aeabi_ddiv>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	f7fa fd74 	bl	8000964 <__aeabi_d2uiz>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	b2db      	uxtb	r3, r3
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40240000 	.word	0x40240000

08005e8c <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b07      	cmp	r3, #7
 8005e9c:	d802      	bhi.n	8005ea4 <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8005e9e:	f06f 0315 	mvn.w	r3, #21
 8005ea2:	e047      	b.n	8005f34 <can1_dbu_status_1_unpack+0xa8>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff ff52 	bl	8005d56 <unpack_right_shift_u8>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ff47 	bl	8005d56 <unpack_right_shift_u8>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	705a      	strb	r2, [r3, #1]
    dst_p->selected_mission = unpack_right_shift_u8(src_p[0], 2u, 0x1cu);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	221c      	movs	r2, #28
 8005ed6:	2102      	movs	r1, #2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ff3c 	bl	8005d56 <unpack_right_shift_u8>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	709a      	strb	r2, [r3, #2]
    dbu_temperature = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	3306      	adds	r3, #6
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	22f0      	movs	r2, #240	@ 0xf0
 8005eee:	2104      	movs	r1, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff ff48 	bl	8005d86 <unpack_right_shift_u16>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3307      	adds	r3, #7
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	22ff      	movs	r2, #255	@ 0xff
 8005f02:	2104      	movs	r1, #4
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ff0e 	bl	8005d26 <unpack_left_shift_u16>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8005f14:	8afb      	ldrh	r3, [r7, #22]
 8005f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <can1_dbu_status_1_unpack+0x9e>
        dbu_temperature |= 0xf000u;
 8005f1e:	8afb      	ldrh	r3, [r7, #22]
 8005f20:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8005f24:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8005f28:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 8005f2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	809a      	strh	r2, [r3, #4]

    return (0);
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <can1_ecu_status_unpack>:

int can1_ecu_status_unpack(
    struct can1_ecu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <can1_ecu_status_unpack+0x18>
        return (-EINVAL);
 8005f4e:	f06f 0315 	mvn.w	r3, #21
 8005f52:	e02c      	b.n	8005fae <can1_ecu_status_unpack+0x72>
    }

    dst_p->ts_not_off = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fefa 	bl	8005d56 <unpack_right_shift_u8>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	701a      	strb	r2, [r3, #0]
    dst_p->rst_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	2101      	movs	r1, #1
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff feef 	bl	8005d56 <unpack_right_shift_u8>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	705a      	strb	r2, [r3, #1]
    dst_p->sidepanel_activate_ts_button = unpack_right_shift_u8(src_p[0], 2u, 0x04u);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2204      	movs	r2, #4
 8005f86:	2102      	movs	r1, #2
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fee4 	bl	8005d56 <unpack_right_shift_u8>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	461a      	mov	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	709a      	strb	r2, [r3, #2]
    dst_p->ts_off = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2280      	movs	r2, #128	@ 0x80
 8005f9c:	2107      	movs	r1, #7
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fed9 	bl	8005d56 <unpack_right_shift_u8>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	70da      	strb	r2, [r3, #3]

    return (0);
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <can1_ams_s01_voltages_1_pack>:

int can1_ams_s01_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s01_voltages_1_t *src_p,
    size_t size)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d802      	bhi.n	8005fce <can1_ams_s01_voltages_1_pack+0x18>
        return (-EINVAL);
 8005fc8:	f06f 0315 	mvn.w	r3, #21
 8005fcc:	e069      	b.n	80060a2 <can1_ams_s01_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8005fce:	2206      	movs	r2, #6
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f004 fd10 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s01v01, 0u, 0xffu);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	22ff      	movs	r2, #255	@ 0xff
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fe89 	bl	8005cf8 <pack_left_shift_u8>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s01v02, 0u, 0xffu);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	22ff      	movs	r2, #255	@ 0xff
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fe7a 	bl	8005cf8 <pack_left_shift_u8>
 8006004:	4603      	mov	r3, r0
 8006006:	4619      	mov	r1, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	430a      	orrs	r2, r1
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s01v03, 0u, 0xffu);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	789b      	ldrb	r3, [r3, #2]
 800601c:	22ff      	movs	r2, #255	@ 0xff
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fe69 	bl	8005cf8 <pack_left_shift_u8>
 8006026:	4603      	mov	r3, r0
 8006028:	4619      	mov	r1, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3302      	adds	r3, #2
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3302      	adds	r3, #2
 8006034:	430a      	orrs	r2, r1
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s01v04, 0u, 0xffu);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	78db      	ldrb	r3, [r3, #3]
 800603e:	22ff      	movs	r2, #255	@ 0xff
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fe58 	bl	8005cf8 <pack_left_shift_u8>
 8006048:	4603      	mov	r3, r0
 800604a:	4619      	mov	r1, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3303      	adds	r3, #3
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3303      	adds	r3, #3
 8006056:	430a      	orrs	r2, r1
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s01v05, 0u, 0xffu);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	791b      	ldrb	r3, [r3, #4]
 8006060:	22ff      	movs	r2, #255	@ 0xff
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fe47 	bl	8005cf8 <pack_left_shift_u8>
 800606a:	4603      	mov	r3, r0
 800606c:	4619      	mov	r1, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3304      	adds	r3, #4
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3304      	adds	r3, #4
 8006078:	430a      	orrs	r2, r1
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s01v06, 0u, 0xffu);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	795b      	ldrb	r3, [r3, #5]
 8006082:	22ff      	movs	r2, #255	@ 0xff
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fe36 	bl	8005cf8 <pack_left_shift_u8>
 800608c:	4603      	mov	r3, r0
 800608e:	4619      	mov	r1, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3305      	adds	r3, #5
 8006094:	781a      	ldrb	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3305      	adds	r3, #5
 800609a:	430a      	orrs	r2, r1
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]

    return (6);
 80060a0:	2306      	movs	r3, #6
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	0000      	movs	r0, r0
 80060ac:	0000      	movs	r0, r0
	...

080060b0 <can1_ams_s01_voltages_1_s01v01_encode>:

    return 0;
}

uint8_t can1_ams_s01_voltages_1_s01v01_encode(double value)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	4b10      	ldr	r3, [pc, #64]	@ (8006100 <can1_ams_s01_voltages_1_s01v01_encode+0x50>)
 80060c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060c4:	f7fa f884 	bl	80001d0 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4610      	mov	r0, r2
 80060ce:	4619      	mov	r1, r3
 80060d0:	a309      	add	r3, pc, #36	@ (adr r3, 80060f8 <can1_ams_s01_voltages_1_s01v01_encode+0x48>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f7fa fb5d 	bl	8000794 <__aeabi_ddiv>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	f7fa fc3f 	bl	8000964 <__aeabi_d2uiz>
 80060e6:	4603      	mov	r3, r0
 80060e8:	b2db      	uxtb	r3, r3
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	f3af 8000 	nop.w
 80060f8:	fcce1c58 	.word	0xfcce1c58
 80060fc:	3f800e6a 	.word	0x3f800e6a
 8006100:	40040000 	.word	0x40040000
 8006104:	00000000 	.word	0x00000000

08006108 <can1_ams_s01_voltages_1_s01v02_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v02_encode(double value)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	4b10      	ldr	r3, [pc, #64]	@ (8006158 <can1_ams_s01_voltages_1_s01v02_encode+0x50>)
 8006118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800611c:	f7fa f858 	bl	80001d0 <__aeabi_dsub>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4610      	mov	r0, r2
 8006126:	4619      	mov	r1, r3
 8006128:	a309      	add	r3, pc, #36	@ (adr r3, 8006150 <can1_ams_s01_voltages_1_s01v02_encode+0x48>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa fb31 	bl	8000794 <__aeabi_ddiv>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4610      	mov	r0, r2
 8006138:	4619      	mov	r1, r3
 800613a:	f7fa fc13 	bl	8000964 <__aeabi_d2uiz>
 800613e:	4603      	mov	r3, r0
 8006140:	b2db      	uxtb	r3, r3
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	f3af 8000 	nop.w
 8006150:	fcce1c58 	.word	0xfcce1c58
 8006154:	3f800e6a 	.word	0x3f800e6a
 8006158:	40040000 	.word	0x40040000
 800615c:	00000000 	.word	0x00000000

08006160 <can1_ams_s01_voltages_1_s01v03_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v03_encode(double value)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	4b10      	ldr	r3, [pc, #64]	@ (80061b0 <can1_ams_s01_voltages_1_s01v03_encode+0x50>)
 8006170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006174:	f7fa f82c 	bl	80001d0 <__aeabi_dsub>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	a309      	add	r3, pc, #36	@ (adr r3, 80061a8 <can1_ams_s01_voltages_1_s01v03_encode+0x48>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa fb05 	bl	8000794 <__aeabi_ddiv>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	f7fa fbe7 	bl	8000964 <__aeabi_d2uiz>
 8006196:	4603      	mov	r3, r0
 8006198:	b2db      	uxtb	r3, r3
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	f3af 8000 	nop.w
 80061a8:	fcce1c58 	.word	0xfcce1c58
 80061ac:	3f800e6a 	.word	0x3f800e6a
 80061b0:	40040000 	.word	0x40040000
 80061b4:	00000000 	.word	0x00000000

080061b8 <can1_ams_s01_voltages_1_s01v04_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v04_encode(double value)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	4b10      	ldr	r3, [pc, #64]	@ (8006208 <can1_ams_s01_voltages_1_s01v04_encode+0x50>)
 80061c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061cc:	f7fa f800 	bl	80001d0 <__aeabi_dsub>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4610      	mov	r0, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	a309      	add	r3, pc, #36	@ (adr r3, 8006200 <can1_ams_s01_voltages_1_s01v04_encode+0x48>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f7fa fad9 	bl	8000794 <__aeabi_ddiv>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4610      	mov	r0, r2
 80061e8:	4619      	mov	r1, r3
 80061ea:	f7fa fbbb 	bl	8000964 <__aeabi_d2uiz>
 80061ee:	4603      	mov	r3, r0
 80061f0:	b2db      	uxtb	r3, r3
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	f3af 8000 	nop.w
 8006200:	fcce1c58 	.word	0xfcce1c58
 8006204:	3f800e6a 	.word	0x3f800e6a
 8006208:	40040000 	.word	0x40040000
 800620c:	00000000 	.word	0x00000000

08006210 <can1_ams_s01_voltages_1_s01v05_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v05_encode(double value)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	4b10      	ldr	r3, [pc, #64]	@ (8006260 <can1_ams_s01_voltages_1_s01v05_encode+0x50>)
 8006220:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006224:	f7f9 ffd4 	bl	80001d0 <__aeabi_dsub>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4610      	mov	r0, r2
 800622e:	4619      	mov	r1, r3
 8006230:	a309      	add	r3, pc, #36	@ (adr r3, 8006258 <can1_ams_s01_voltages_1_s01v05_encode+0x48>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa faad 	bl	8000794 <__aeabi_ddiv>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	f7fa fb8f 	bl	8000964 <__aeabi_d2uiz>
 8006246:	4603      	mov	r3, r0
 8006248:	b2db      	uxtb	r3, r3
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	f3af 8000 	nop.w
 8006258:	fcce1c58 	.word	0xfcce1c58
 800625c:	3f800e6a 	.word	0x3f800e6a
 8006260:	40040000 	.word	0x40040000
 8006264:	00000000 	.word	0x00000000

08006268 <can1_ams_s01_voltages_1_s01v06_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_1_s01v06_encode(double value)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	4b10      	ldr	r3, [pc, #64]	@ (80062b8 <can1_ams_s01_voltages_1_s01v06_encode+0x50>)
 8006278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800627c:	f7f9 ffa8 	bl	80001d0 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4610      	mov	r0, r2
 8006286:	4619      	mov	r1, r3
 8006288:	a309      	add	r3, pc, #36	@ (adr r3, 80062b0 <can1_ams_s01_voltages_1_s01v06_encode+0x48>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f7fa fa81 	bl	8000794 <__aeabi_ddiv>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	f7fa fb63 	bl	8000964 <__aeabi_d2uiz>
 800629e:	4603      	mov	r3, r0
 80062a0:	b2db      	uxtb	r3, r3
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w
 80062b0:	fcce1c58 	.word	0xfcce1c58
 80062b4:	3f800e6a 	.word	0x3f800e6a
 80062b8:	40040000 	.word	0x40040000

080062bc <can1_ams_s01_voltages_2_pack>:

int can1_ams_s01_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s01_voltages_2_t *src_p,
    size_t size)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d802      	bhi.n	80062d4 <can1_ams_s01_voltages_2_pack+0x18>
        return (-EINVAL);
 80062ce:	f06f 0315 	mvn.w	r3, #21
 80062d2:	e058      	b.n	8006386 <can1_ams_s01_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 80062d4:	2205      	movs	r2, #5
 80062d6:	2100      	movs	r1, #0
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f004 fb8d 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s01v07, 0u, 0xffu);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	22ff      	movs	r2, #255	@ 0xff
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fd06 	bl	8005cf8 <pack_left_shift_u8>
 80062ec:	4603      	mov	r3, r0
 80062ee:	461a      	mov	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s01v08, 0u, 0xffu);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	22ff      	movs	r2, #255	@ 0xff
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fcf7 	bl	8005cf8 <pack_left_shift_u8>
 800630a:	4603      	mov	r3, r0
 800630c:	4619      	mov	r1, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	781a      	ldrb	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	430a      	orrs	r2, r1
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s01v09, 0u, 0xffu);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	789b      	ldrb	r3, [r3, #2]
 8006322:	22ff      	movs	r2, #255	@ 0xff
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fce6 	bl	8005cf8 <pack_left_shift_u8>
 800632c:	4603      	mov	r3, r0
 800632e:	4619      	mov	r1, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3302      	adds	r3, #2
 8006334:	781a      	ldrb	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3302      	adds	r3, #2
 800633a:	430a      	orrs	r2, r1
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s01v10, 0u, 0xffu);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	78db      	ldrb	r3, [r3, #3]
 8006344:	22ff      	movs	r2, #255	@ 0xff
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fcd5 	bl	8005cf8 <pack_left_shift_u8>
 800634e:	4603      	mov	r3, r0
 8006350:	4619      	mov	r1, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3303      	adds	r3, #3
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3303      	adds	r3, #3
 800635c:	430a      	orrs	r2, r1
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s01v11, 0u, 0xffu);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	22ff      	movs	r2, #255	@ 0xff
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fcc4 	bl	8005cf8 <pack_left_shift_u8>
 8006370:	4603      	mov	r3, r0
 8006372:	4619      	mov	r1, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3304      	adds	r3, #4
 8006378:	781a      	ldrb	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3304      	adds	r3, #4
 800637e:	430a      	orrs	r2, r1
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]

    return (5);
 8006384:	2305      	movs	r3, #5
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <can1_ams_s01_voltages_2_s01v07_encode>:

    return 0;
}

uint8_t can1_ams_s01_voltages_2_s01v07_encode(double value)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	4b10      	ldr	r3, [pc, #64]	@ (80063e0 <can1_ams_s01_voltages_2_s01v07_encode+0x50>)
 80063a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063a4:	f7f9 ff14 	bl	80001d0 <__aeabi_dsub>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4610      	mov	r0, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	a309      	add	r3, pc, #36	@ (adr r3, 80063d8 <can1_ams_s01_voltages_2_s01v07_encode+0x48>)
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f7fa f9ed 	bl	8000794 <__aeabi_ddiv>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4610      	mov	r0, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	f7fa facf 	bl	8000964 <__aeabi_d2uiz>
 80063c6:	4603      	mov	r3, r0
 80063c8:	b2db      	uxtb	r3, r3
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	f3af 8000 	nop.w
 80063d8:	fcce1c58 	.word	0xfcce1c58
 80063dc:	3f800e6a 	.word	0x3f800e6a
 80063e0:	40040000 	.word	0x40040000
 80063e4:	00000000 	.word	0x00000000

080063e8 <can1_ams_s01_voltages_2_s01v08_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v08_encode(double value)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	4b10      	ldr	r3, [pc, #64]	@ (8006438 <can1_ams_s01_voltages_2_s01v08_encode+0x50>)
 80063f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063fc:	f7f9 fee8 	bl	80001d0 <__aeabi_dsub>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4610      	mov	r0, r2
 8006406:	4619      	mov	r1, r3
 8006408:	a309      	add	r3, pc, #36	@ (adr r3, 8006430 <can1_ams_s01_voltages_2_s01v08_encode+0x48>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7fa f9c1 	bl	8000794 <__aeabi_ddiv>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4610      	mov	r0, r2
 8006418:	4619      	mov	r1, r3
 800641a:	f7fa faa3 	bl	8000964 <__aeabi_d2uiz>
 800641e:	4603      	mov	r3, r0
 8006420:	b2db      	uxtb	r3, r3
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	f3af 8000 	nop.w
 8006430:	fcce1c58 	.word	0xfcce1c58
 8006434:	3f800e6a 	.word	0x3f800e6a
 8006438:	40040000 	.word	0x40040000
 800643c:	00000000 	.word	0x00000000

08006440 <can1_ams_s01_voltages_2_s01v09_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v09_encode(double value)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	4b10      	ldr	r3, [pc, #64]	@ (8006490 <can1_ams_s01_voltages_2_s01v09_encode+0x50>)
 8006450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006454:	f7f9 febc 	bl	80001d0 <__aeabi_dsub>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4610      	mov	r0, r2
 800645e:	4619      	mov	r1, r3
 8006460:	a309      	add	r3, pc, #36	@ (adr r3, 8006488 <can1_ams_s01_voltages_2_s01v09_encode+0x48>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f7fa f995 	bl	8000794 <__aeabi_ddiv>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	f7fa fa77 	bl	8000964 <__aeabi_d2uiz>
 8006476:	4603      	mov	r3, r0
 8006478:	b2db      	uxtb	r3, r3
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	f3af 8000 	nop.w
 8006488:	fcce1c58 	.word	0xfcce1c58
 800648c:	3f800e6a 	.word	0x3f800e6a
 8006490:	40040000 	.word	0x40040000
 8006494:	00000000 	.word	0x00000000

08006498 <can1_ams_s01_voltages_2_s01v10_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v10_encode(double value)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	4b10      	ldr	r3, [pc, #64]	@ (80064e8 <can1_ams_s01_voltages_2_s01v10_encode+0x50>)
 80064a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064ac:	f7f9 fe90 	bl	80001d0 <__aeabi_dsub>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	a309      	add	r3, pc, #36	@ (adr r3, 80064e0 <can1_ams_s01_voltages_2_s01v10_encode+0x48>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f7fa f969 	bl	8000794 <__aeabi_ddiv>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	f7fa fa4b 	bl	8000964 <__aeabi_d2uiz>
 80064ce:	4603      	mov	r3, r0
 80064d0:	b2db      	uxtb	r3, r3
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	f3af 8000 	nop.w
 80064e0:	fcce1c58 	.word	0xfcce1c58
 80064e4:	3f800e6a 	.word	0x3f800e6a
 80064e8:	40040000 	.word	0x40040000
 80064ec:	00000000 	.word	0x00000000

080064f0 <can1_ams_s01_voltages_2_s01v11_encode>:

    return (true);
}

uint8_t can1_ams_s01_voltages_2_s01v11_encode(double value)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	4b10      	ldr	r3, [pc, #64]	@ (8006540 <can1_ams_s01_voltages_2_s01v11_encode+0x50>)
 8006500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006504:	f7f9 fe64 	bl	80001d0 <__aeabi_dsub>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	a309      	add	r3, pc, #36	@ (adr r3, 8006538 <can1_ams_s01_voltages_2_s01v11_encode+0x48>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7fa f93d 	bl	8000794 <__aeabi_ddiv>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	f7fa fa1f 	bl	8000964 <__aeabi_d2uiz>
 8006526:	4603      	mov	r3, r0
 8006528:	b2db      	uxtb	r3, r3
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	f3af 8000 	nop.w
 8006538:	fcce1c58 	.word	0xfcce1c58
 800653c:	3f800e6a 	.word	0x3f800e6a
 8006540:	40040000 	.word	0x40040000

08006544 <can1_ams_s02_voltages_1_pack>:

int can1_ams_s02_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s02_voltages_1_t *src_p,
    size_t size)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b05      	cmp	r3, #5
 8006554:	d802      	bhi.n	800655c <can1_ams_s02_voltages_1_pack+0x18>
        return (-EINVAL);
 8006556:	f06f 0315 	mvn.w	r3, #21
 800655a:	e069      	b.n	8006630 <can1_ams_s02_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800655c:	2206      	movs	r2, #6
 800655e:	2100      	movs	r1, #0
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f004 fa49 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s02v01, 0u, 0xffu);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	22ff      	movs	r2, #255	@ 0xff
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fbc2 	bl	8005cf8 <pack_left_shift_u8>
 8006574:	4603      	mov	r3, r0
 8006576:	461a      	mov	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	4313      	orrs	r3, r2
 800657e:	b2da      	uxtb	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s02v02, 0u, 0xffu);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	22ff      	movs	r2, #255	@ 0xff
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fbb3 	bl	8005cf8 <pack_left_shift_u8>
 8006592:	4603      	mov	r3, r0
 8006594:	4619      	mov	r1, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	430a      	orrs	r2, r1
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s02v03, 0u, 0xffu);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	789b      	ldrb	r3, [r3, #2]
 80065aa:	22ff      	movs	r2, #255	@ 0xff
 80065ac:	2100      	movs	r1, #0
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fba2 	bl	8005cf8 <pack_left_shift_u8>
 80065b4:	4603      	mov	r3, r0
 80065b6:	4619      	mov	r1, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3302      	adds	r3, #2
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3302      	adds	r3, #2
 80065c2:	430a      	orrs	r2, r1
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s02v04, 0u, 0xffu);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	78db      	ldrb	r3, [r3, #3]
 80065cc:	22ff      	movs	r2, #255	@ 0xff
 80065ce:	2100      	movs	r1, #0
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fb91 	bl	8005cf8 <pack_left_shift_u8>
 80065d6:	4603      	mov	r3, r0
 80065d8:	4619      	mov	r1, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3303      	adds	r3, #3
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3303      	adds	r3, #3
 80065e4:	430a      	orrs	r2, r1
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s02v05, 0u, 0xffu);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	791b      	ldrb	r3, [r3, #4]
 80065ee:	22ff      	movs	r2, #255	@ 0xff
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fb80 	bl	8005cf8 <pack_left_shift_u8>
 80065f8:	4603      	mov	r3, r0
 80065fa:	4619      	mov	r1, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3304      	adds	r3, #4
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3304      	adds	r3, #4
 8006606:	430a      	orrs	r2, r1
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s02v06, 0u, 0xffu);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	795b      	ldrb	r3, [r3, #5]
 8006610:	22ff      	movs	r2, #255	@ 0xff
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fb6f 	bl	8005cf8 <pack_left_shift_u8>
 800661a:	4603      	mov	r3, r0
 800661c:	4619      	mov	r1, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3305      	adds	r3, #5
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3305      	adds	r3, #5
 8006628:	430a      	orrs	r2, r1
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]

    return (6);
 800662e:	2306      	movs	r3, #6
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <can1_ams_s02_voltages_1_s02v01_encode>:

    return 0;
}

uint8_t can1_ams_s02_voltages_1_s02v01_encode(double value)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	4b10      	ldr	r3, [pc, #64]	@ (8006688 <can1_ams_s02_voltages_1_s02v01_encode+0x50>)
 8006648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800664c:	f7f9 fdc0 	bl	80001d0 <__aeabi_dsub>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4610      	mov	r0, r2
 8006656:	4619      	mov	r1, r3
 8006658:	a309      	add	r3, pc, #36	@ (adr r3, 8006680 <can1_ams_s02_voltages_1_s02v01_encode+0x48>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f7fa f899 	bl	8000794 <__aeabi_ddiv>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4610      	mov	r0, r2
 8006668:	4619      	mov	r1, r3
 800666a:	f7fa f97b 	bl	8000964 <__aeabi_d2uiz>
 800666e:	4603      	mov	r3, r0
 8006670:	b2db      	uxtb	r3, r3
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	f3af 8000 	nop.w
 8006680:	fcce1c58 	.word	0xfcce1c58
 8006684:	3f800e6a 	.word	0x3f800e6a
 8006688:	40040000 	.word	0x40040000
 800668c:	00000000 	.word	0x00000000

08006690 <can1_ams_s02_voltages_1_s02v02_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v02_encode(double value)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <can1_ams_s02_voltages_1_s02v02_encode+0x50>)
 80066a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066a4:	f7f9 fd94 	bl	80001d0 <__aeabi_dsub>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4610      	mov	r0, r2
 80066ae:	4619      	mov	r1, r3
 80066b0:	a309      	add	r3, pc, #36	@ (adr r3, 80066d8 <can1_ams_s02_voltages_1_s02v02_encode+0x48>)
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f7fa f86d 	bl	8000794 <__aeabi_ddiv>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4610      	mov	r0, r2
 80066c0:	4619      	mov	r1, r3
 80066c2:	f7fa f94f 	bl	8000964 <__aeabi_d2uiz>
 80066c6:	4603      	mov	r3, r0
 80066c8:	b2db      	uxtb	r3, r3
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	f3af 8000 	nop.w
 80066d8:	fcce1c58 	.word	0xfcce1c58
 80066dc:	3f800e6a 	.word	0x3f800e6a
 80066e0:	40040000 	.word	0x40040000
 80066e4:	00000000 	.word	0x00000000

080066e8 <can1_ams_s02_voltages_1_s02v03_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v03_encode(double value)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	4b10      	ldr	r3, [pc, #64]	@ (8006738 <can1_ams_s02_voltages_1_s02v03_encode+0x50>)
 80066f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066fc:	f7f9 fd68 	bl	80001d0 <__aeabi_dsub>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4610      	mov	r0, r2
 8006706:	4619      	mov	r1, r3
 8006708:	a309      	add	r3, pc, #36	@ (adr r3, 8006730 <can1_ams_s02_voltages_1_s02v03_encode+0x48>)
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f7fa f841 	bl	8000794 <__aeabi_ddiv>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4610      	mov	r0, r2
 8006718:	4619      	mov	r1, r3
 800671a:	f7fa f923 	bl	8000964 <__aeabi_d2uiz>
 800671e:	4603      	mov	r3, r0
 8006720:	b2db      	uxtb	r3, r3
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	f3af 8000 	nop.w
 8006730:	fcce1c58 	.word	0xfcce1c58
 8006734:	3f800e6a 	.word	0x3f800e6a
 8006738:	40040000 	.word	0x40040000
 800673c:	00000000 	.word	0x00000000

08006740 <can1_ams_s02_voltages_1_s02v04_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v04_encode(double value)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <can1_ams_s02_voltages_1_s02v04_encode+0x50>)
 8006750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006754:	f7f9 fd3c 	bl	80001d0 <__aeabi_dsub>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4610      	mov	r0, r2
 800675e:	4619      	mov	r1, r3
 8006760:	a309      	add	r3, pc, #36	@ (adr r3, 8006788 <can1_ams_s02_voltages_1_s02v04_encode+0x48>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7fa f815 	bl	8000794 <__aeabi_ddiv>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4610      	mov	r0, r2
 8006770:	4619      	mov	r1, r3
 8006772:	f7fa f8f7 	bl	8000964 <__aeabi_d2uiz>
 8006776:	4603      	mov	r3, r0
 8006778:	b2db      	uxtb	r3, r3
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	f3af 8000 	nop.w
 8006788:	fcce1c58 	.word	0xfcce1c58
 800678c:	3f800e6a 	.word	0x3f800e6a
 8006790:	40040000 	.word	0x40040000
 8006794:	00000000 	.word	0x00000000

08006798 <can1_ams_s02_voltages_1_s02v05_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v05_encode(double value)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	4b10      	ldr	r3, [pc, #64]	@ (80067e8 <can1_ams_s02_voltages_1_s02v05_encode+0x50>)
 80067a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067ac:	f7f9 fd10 	bl	80001d0 <__aeabi_dsub>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4610      	mov	r0, r2
 80067b6:	4619      	mov	r1, r3
 80067b8:	a309      	add	r3, pc, #36	@ (adr r3, 80067e0 <can1_ams_s02_voltages_1_s02v05_encode+0x48>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7f9 ffe9 	bl	8000794 <__aeabi_ddiv>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4610      	mov	r0, r2
 80067c8:	4619      	mov	r1, r3
 80067ca:	f7fa f8cb 	bl	8000964 <__aeabi_d2uiz>
 80067ce:	4603      	mov	r3, r0
 80067d0:	b2db      	uxtb	r3, r3
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w
 80067e0:	fcce1c58 	.word	0xfcce1c58
 80067e4:	3f800e6a 	.word	0x3f800e6a
 80067e8:	40040000 	.word	0x40040000
 80067ec:	00000000 	.word	0x00000000

080067f0 <can1_ams_s02_voltages_1_s02v06_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_1_s02v06_encode(double value)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <can1_ams_s02_voltages_1_s02v06_encode+0x50>)
 8006800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006804:	f7f9 fce4 	bl	80001d0 <__aeabi_dsub>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4610      	mov	r0, r2
 800680e:	4619      	mov	r1, r3
 8006810:	a309      	add	r3, pc, #36	@ (adr r3, 8006838 <can1_ams_s02_voltages_1_s02v06_encode+0x48>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 ffbd 	bl	8000794 <__aeabi_ddiv>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	f7fa f89f 	bl	8000964 <__aeabi_d2uiz>
 8006826:	4603      	mov	r3, r0
 8006828:	b2db      	uxtb	r3, r3
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	f3af 8000 	nop.w
 8006838:	fcce1c58 	.word	0xfcce1c58
 800683c:	3f800e6a 	.word	0x3f800e6a
 8006840:	40040000 	.word	0x40040000

08006844 <can1_ams_s02_voltages_2_pack>:

int can1_ams_s02_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s02_voltages_2_t *src_p,
    size_t size)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b04      	cmp	r3, #4
 8006854:	d802      	bhi.n	800685c <can1_ams_s02_voltages_2_pack+0x18>
        return (-EINVAL);
 8006856:	f06f 0315 	mvn.w	r3, #21
 800685a:	e058      	b.n	800690e <can1_ams_s02_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800685c:	2205      	movs	r2, #5
 800685e:	2100      	movs	r1, #0
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f004 f8c9 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s02v07, 0u, 0xffu);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	22ff      	movs	r2, #255	@ 0xff
 800686c:	2100      	movs	r1, #0
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fa42 	bl	8005cf8 <pack_left_shift_u8>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	4313      	orrs	r3, r2
 800687e:	b2da      	uxtb	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s02v08, 0u, 0xffu);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	22ff      	movs	r2, #255	@ 0xff
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff fa33 	bl	8005cf8 <pack_left_shift_u8>
 8006892:	4603      	mov	r3, r0
 8006894:	4619      	mov	r1, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	430a      	orrs	r2, r1
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s02v09, 0u, 0xffu);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	789b      	ldrb	r3, [r3, #2]
 80068aa:	22ff      	movs	r2, #255	@ 0xff
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fa22 	bl	8005cf8 <pack_left_shift_u8>
 80068b4:	4603      	mov	r3, r0
 80068b6:	4619      	mov	r1, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3302      	adds	r3, #2
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3302      	adds	r3, #2
 80068c2:	430a      	orrs	r2, r1
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s02v10, 0u, 0xffu);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	78db      	ldrb	r3, [r3, #3]
 80068cc:	22ff      	movs	r2, #255	@ 0xff
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff fa11 	bl	8005cf8 <pack_left_shift_u8>
 80068d6:	4603      	mov	r3, r0
 80068d8:	4619      	mov	r1, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3303      	adds	r3, #3
 80068de:	781a      	ldrb	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3303      	adds	r3, #3
 80068e4:	430a      	orrs	r2, r1
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s02v11, 0u, 0xffu);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	791b      	ldrb	r3, [r3, #4]
 80068ee:	22ff      	movs	r2, #255	@ 0xff
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fa00 	bl	8005cf8 <pack_left_shift_u8>
 80068f8:	4603      	mov	r3, r0
 80068fa:	4619      	mov	r1, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3304      	adds	r3, #4
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3304      	adds	r3, #4
 8006906:	430a      	orrs	r2, r1
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]

    return (5);
 800690c:	2305      	movs	r3, #5
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <can1_ams_s02_voltages_2_s02v07_encode>:

    return 0;
}

uint8_t can1_ams_s02_voltages_2_s02v07_encode(double value)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	4b10      	ldr	r3, [pc, #64]	@ (8006968 <can1_ams_s02_voltages_2_s02v07_encode+0x50>)
 8006928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800692c:	f7f9 fc50 	bl	80001d0 <__aeabi_dsub>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4610      	mov	r0, r2
 8006936:	4619      	mov	r1, r3
 8006938:	a309      	add	r3, pc, #36	@ (adr r3, 8006960 <can1_ams_s02_voltages_2_s02v07_encode+0x48>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 ff29 	bl	8000794 <__aeabi_ddiv>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4610      	mov	r0, r2
 8006948:	4619      	mov	r1, r3
 800694a:	f7fa f80b 	bl	8000964 <__aeabi_d2uiz>
 800694e:	4603      	mov	r3, r0
 8006950:	b2db      	uxtb	r3, r3
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w
 8006960:	fcce1c58 	.word	0xfcce1c58
 8006964:	3f800e6a 	.word	0x3f800e6a
 8006968:	40040000 	.word	0x40040000
 800696c:	00000000 	.word	0x00000000

08006970 <can1_ams_s02_voltages_2_s02v08_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v08_encode(double value)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	4b10      	ldr	r3, [pc, #64]	@ (80069c0 <can1_ams_s02_voltages_2_s02v08_encode+0x50>)
 8006980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006984:	f7f9 fc24 	bl	80001d0 <__aeabi_dsub>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	a309      	add	r3, pc, #36	@ (adr r3, 80069b8 <can1_ams_s02_voltages_2_s02v08_encode+0x48>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fefd 	bl	8000794 <__aeabi_ddiv>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	f7f9 ffdf 	bl	8000964 <__aeabi_d2uiz>
 80069a6:	4603      	mov	r3, r0
 80069a8:	b2db      	uxtb	r3, r3
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	f3af 8000 	nop.w
 80069b8:	fcce1c58 	.word	0xfcce1c58
 80069bc:	3f800e6a 	.word	0x3f800e6a
 80069c0:	40040000 	.word	0x40040000
 80069c4:	00000000 	.word	0x00000000

080069c8 <can1_ams_s02_voltages_2_s02v09_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v09_encode(double value)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	4b10      	ldr	r3, [pc, #64]	@ (8006a18 <can1_ams_s02_voltages_2_s02v09_encode+0x50>)
 80069d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069dc:	f7f9 fbf8 	bl	80001d0 <__aeabi_dsub>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4610      	mov	r0, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	a309      	add	r3, pc, #36	@ (adr r3, 8006a10 <can1_ams_s02_voltages_2_s02v09_encode+0x48>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 fed1 	bl	8000794 <__aeabi_ddiv>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f7f9 ffb3 	bl	8000964 <__aeabi_d2uiz>
 80069fe:	4603      	mov	r3, r0
 8006a00:	b2db      	uxtb	r3, r3
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	f3af 8000 	nop.w
 8006a10:	fcce1c58 	.word	0xfcce1c58
 8006a14:	3f800e6a 	.word	0x3f800e6a
 8006a18:	40040000 	.word	0x40040000
 8006a1c:	00000000 	.word	0x00000000

08006a20 <can1_ams_s02_voltages_2_s02v10_encode>:

    return (true);
}

uint8_t can1_ams_s02_voltages_2_s02v10_encode(double value)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	4b10      	ldr	r3, [pc, #64]	@ (8006a70 <can1_ams_s02_voltages_2_s02v10_encode+0x50>)
 8006a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a34:	f7f9 fbcc 	bl	80001d0 <__aeabi_dsub>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	a309      	add	r3, pc, #36	@ (adr r3, 8006a68 <can1_ams_s02_voltages_2_s02v10_encode+0x48>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fea5 	bl	8000794 <__aeabi_ddiv>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7f9 ff87 	bl	8000964 <__aeabi_d2uiz>
 8006a56:	4603      	mov	r3, r0
 8006a58:	b2db      	uxtb	r3, r3
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	f3af 8000 	nop.w
 8006a68:	fcce1c58 	.word	0xfcce1c58
 8006a6c:	3f800e6a 	.word	0x3f800e6a
 8006a70:	40040000 	.word	0x40040000

08006a74 <can1_ams_s03_voltages_1_pack>:

int can1_ams_s03_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s03_voltages_1_t *src_p,
    size_t size)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b05      	cmp	r3, #5
 8006a84:	d802      	bhi.n	8006a8c <can1_ams_s03_voltages_1_pack+0x18>
        return (-EINVAL);
 8006a86:	f06f 0315 	mvn.w	r3, #21
 8006a8a:	e069      	b.n	8006b60 <can1_ams_s03_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8006a8c:	2206      	movs	r2, #6
 8006a8e:	2100      	movs	r1, #0
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f003 ffb1 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s03v01, 0u, 0xffu);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	22ff      	movs	r2, #255	@ 0xff
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff f92a 	bl	8005cf8 <pack_left_shift_u8>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s03v02, 0u, 0xffu);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	785b      	ldrb	r3, [r3, #1]
 8006ab8:	22ff      	movs	r2, #255	@ 0xff
 8006aba:	2100      	movs	r1, #0
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff f91b 	bl	8005cf8 <pack_left_shift_u8>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	781a      	ldrb	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s03v03, 0u, 0xffu);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	789b      	ldrb	r3, [r3, #2]
 8006ada:	22ff      	movs	r2, #255	@ 0xff
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff f90a 	bl	8005cf8 <pack_left_shift_u8>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3302      	adds	r3, #2
 8006aec:	781a      	ldrb	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3302      	adds	r3, #2
 8006af2:	430a      	orrs	r2, r1
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s03v04, 0u, 0xffu);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	78db      	ldrb	r3, [r3, #3]
 8006afc:	22ff      	movs	r2, #255	@ 0xff
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff f8f9 	bl	8005cf8 <pack_left_shift_u8>
 8006b06:	4603      	mov	r3, r0
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3303      	adds	r3, #3
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3303      	adds	r3, #3
 8006b14:	430a      	orrs	r2, r1
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s03v05, 0u, 0xffu);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	791b      	ldrb	r3, [r3, #4]
 8006b1e:	22ff      	movs	r2, #255	@ 0xff
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff f8e8 	bl	8005cf8 <pack_left_shift_u8>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3304      	adds	r3, #4
 8006b36:	430a      	orrs	r2, r1
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s03v06, 0u, 0xffu);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	795b      	ldrb	r3, [r3, #5]
 8006b40:	22ff      	movs	r2, #255	@ 0xff
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff f8d7 	bl	8005cf8 <pack_left_shift_u8>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3305      	adds	r3, #5
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3305      	adds	r3, #5
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]

    return (6);
 8006b5e:	2306      	movs	r3, #6
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <can1_ams_s03_voltages_1_s03v01_encode>:

    return 0;
}

uint8_t can1_ams_s03_voltages_1_s03v01_encode(double value)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	4b10      	ldr	r3, [pc, #64]	@ (8006bb8 <can1_ams_s03_voltages_1_s03v01_encode+0x50>)
 8006b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7c:	f7f9 fb28 	bl	80001d0 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4610      	mov	r0, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	a309      	add	r3, pc, #36	@ (adr r3, 8006bb0 <can1_ams_s03_voltages_1_s03v01_encode+0x48>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fe01 	bl	8000794 <__aeabi_ddiv>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4610      	mov	r0, r2
 8006b98:	4619      	mov	r1, r3
 8006b9a:	f7f9 fee3 	bl	8000964 <__aeabi_d2uiz>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	b2db      	uxtb	r3, r3
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w
 8006bb0:	fcce1c58 	.word	0xfcce1c58
 8006bb4:	3f800e6a 	.word	0x3f800e6a
 8006bb8:	40040000 	.word	0x40040000
 8006bbc:	00000000 	.word	0x00000000

08006bc0 <can1_ams_s03_voltages_1_s03v02_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v02_encode(double value)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	4b10      	ldr	r3, [pc, #64]	@ (8006c10 <can1_ams_s03_voltages_1_s03v02_encode+0x50>)
 8006bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bd4:	f7f9 fafc 	bl	80001d0 <__aeabi_dsub>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	a309      	add	r3, pc, #36	@ (adr r3, 8006c08 <can1_ams_s03_voltages_1_s03v02_encode+0x48>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fdd5 	bl	8000794 <__aeabi_ddiv>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	f7f9 feb7 	bl	8000964 <__aeabi_d2uiz>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	b2db      	uxtb	r3, r3
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	f3af 8000 	nop.w
 8006c08:	fcce1c58 	.word	0xfcce1c58
 8006c0c:	3f800e6a 	.word	0x3f800e6a
 8006c10:	40040000 	.word	0x40040000
 8006c14:	00000000 	.word	0x00000000

08006c18 <can1_ams_s03_voltages_1_s03v03_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v03_encode(double value)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006c22:	f04f 0200 	mov.w	r2, #0
 8006c26:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <can1_ams_s03_voltages_1_s03v03_encode+0x50>)
 8006c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c2c:	f7f9 fad0 	bl	80001d0 <__aeabi_dsub>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4610      	mov	r0, r2
 8006c36:	4619      	mov	r1, r3
 8006c38:	a309      	add	r3, pc, #36	@ (adr r3, 8006c60 <can1_ams_s03_voltages_1_s03v03_encode+0x48>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 fda9 	bl	8000794 <__aeabi_ddiv>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4610      	mov	r0, r2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f7f9 fe8b 	bl	8000964 <__aeabi_d2uiz>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	b2db      	uxtb	r3, r3
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w
 8006c60:	fcce1c58 	.word	0xfcce1c58
 8006c64:	3f800e6a 	.word	0x3f800e6a
 8006c68:	40040000 	.word	0x40040000
 8006c6c:	00000000 	.word	0x00000000

08006c70 <can1_ams_s03_voltages_1_s03v04_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v04_encode(double value)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	4b10      	ldr	r3, [pc, #64]	@ (8006cc0 <can1_ams_s03_voltages_1_s03v04_encode+0x50>)
 8006c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c84:	f7f9 faa4 	bl	80001d0 <__aeabi_dsub>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4619      	mov	r1, r3
 8006c90:	a309      	add	r3, pc, #36	@ (adr r3, 8006cb8 <can1_ams_s03_voltages_1_s03v04_encode+0x48>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 fd7d 	bl	8000794 <__aeabi_ddiv>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f7f9 fe5f 	bl	8000964 <__aeabi_d2uiz>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	b2db      	uxtb	r3, r3
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	f3af 8000 	nop.w
 8006cb8:	fcce1c58 	.word	0xfcce1c58
 8006cbc:	3f800e6a 	.word	0x3f800e6a
 8006cc0:	40040000 	.word	0x40040000
 8006cc4:	00000000 	.word	0x00000000

08006cc8 <can1_ams_s03_voltages_1_s03v05_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v05_encode(double value)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	4b10      	ldr	r3, [pc, #64]	@ (8006d18 <can1_ams_s03_voltages_1_s03v05_encode+0x50>)
 8006cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cdc:	f7f9 fa78 	bl	80001d0 <__aeabi_dsub>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	a309      	add	r3, pc, #36	@ (adr r3, 8006d10 <can1_ams_s03_voltages_1_s03v05_encode+0x48>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fd51 	bl	8000794 <__aeabi_ddiv>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	f7f9 fe33 	bl	8000964 <__aeabi_d2uiz>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	b2db      	uxtb	r3, r3
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	f3af 8000 	nop.w
 8006d10:	fcce1c58 	.word	0xfcce1c58
 8006d14:	3f800e6a 	.word	0x3f800e6a
 8006d18:	40040000 	.word	0x40040000
 8006d1c:	00000000 	.word	0x00000000

08006d20 <can1_ams_s03_voltages_1_s03v06_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_1_s03v06_encode(double value)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <can1_ams_s03_voltages_1_s03v06_encode+0x50>)
 8006d30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d34:	f7f9 fa4c 	bl	80001d0 <__aeabi_dsub>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4619      	mov	r1, r3
 8006d40:	a309      	add	r3, pc, #36	@ (adr r3, 8006d68 <can1_ams_s03_voltages_1_s03v06_encode+0x48>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fd25 	bl	8000794 <__aeabi_ddiv>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4610      	mov	r0, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	f7f9 fe07 	bl	8000964 <__aeabi_d2uiz>
 8006d56:	4603      	mov	r3, r0
 8006d58:	b2db      	uxtb	r3, r3
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	f3af 8000 	nop.w
 8006d68:	fcce1c58 	.word	0xfcce1c58
 8006d6c:	3f800e6a 	.word	0x3f800e6a
 8006d70:	40040000 	.word	0x40040000

08006d74 <can1_ams_s03_voltages_2_pack>:

int can1_ams_s03_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s03_voltages_2_t *src_p,
    size_t size)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d802      	bhi.n	8006d8c <can1_ams_s03_voltages_2_pack+0x18>
        return (-EINVAL);
 8006d86:	f06f 0315 	mvn.w	r3, #21
 8006d8a:	e058      	b.n	8006e3e <can1_ams_s03_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	2100      	movs	r1, #0
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f003 fe31 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s03v07, 0u, 0xffu);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	22ff      	movs	r2, #255	@ 0xff
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe ffaa 	bl	8005cf8 <pack_left_shift_u8>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s03v08, 0u, 0xffu);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	22ff      	movs	r2, #255	@ 0xff
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe ff9b 	bl	8005cf8 <pack_left_shift_u8>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	781a      	ldrb	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s03v09, 0u, 0xffu);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	789b      	ldrb	r3, [r3, #2]
 8006dda:	22ff      	movs	r2, #255	@ 0xff
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe ff8a 	bl	8005cf8 <pack_left_shift_u8>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4619      	mov	r1, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3302      	adds	r3, #2
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3302      	adds	r3, #2
 8006df2:	430a      	orrs	r2, r1
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s03v10, 0u, 0xffu);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	78db      	ldrb	r3, [r3, #3]
 8006dfc:	22ff      	movs	r2, #255	@ 0xff
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe ff79 	bl	8005cf8 <pack_left_shift_u8>
 8006e06:	4603      	mov	r3, r0
 8006e08:	4619      	mov	r1, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3303      	adds	r3, #3
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3303      	adds	r3, #3
 8006e14:	430a      	orrs	r2, r1
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s03v11, 0u, 0xffu);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	791b      	ldrb	r3, [r3, #4]
 8006e1e:	22ff      	movs	r2, #255	@ 0xff
 8006e20:	2100      	movs	r1, #0
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe ff68 	bl	8005cf8 <pack_left_shift_u8>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3304      	adds	r3, #4
 8006e36:	430a      	orrs	r2, r1
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]

    return (5);
 8006e3c:	2305      	movs	r3, #5
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <can1_ams_s03_voltages_2_s03v07_encode>:

    return 0;
}

uint8_t can1_ams_s03_voltages_2_s03v07_encode(double value)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	4b10      	ldr	r3, [pc, #64]	@ (8006e98 <can1_ams_s03_voltages_2_s03v07_encode+0x50>)
 8006e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e5c:	f7f9 f9b8 	bl	80001d0 <__aeabi_dsub>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	a309      	add	r3, pc, #36	@ (adr r3, 8006e90 <can1_ams_s03_voltages_2_s03v07_encode+0x48>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f7f9 fc91 	bl	8000794 <__aeabi_ddiv>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4610      	mov	r0, r2
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f7f9 fd73 	bl	8000964 <__aeabi_d2uiz>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	b2db      	uxtb	r3, r3
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w
 8006e90:	fcce1c58 	.word	0xfcce1c58
 8006e94:	3f800e6a 	.word	0x3f800e6a
 8006e98:	40040000 	.word	0x40040000
 8006e9c:	00000000 	.word	0x00000000

08006ea0 <can1_ams_s03_voltages_2_s03v08_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v08_encode(double value)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	4b10      	ldr	r3, [pc, #64]	@ (8006ef0 <can1_ams_s03_voltages_2_s03v08_encode+0x50>)
 8006eb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eb4:	f7f9 f98c 	bl	80001d0 <__aeabi_dsub>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	a309      	add	r3, pc, #36	@ (adr r3, 8006ee8 <can1_ams_s03_voltages_2_s03v08_encode+0x48>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 fc65 	bl	8000794 <__aeabi_ddiv>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f7f9 fd47 	bl	8000964 <__aeabi_d2uiz>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	b2db      	uxtb	r3, r3
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	f3af 8000 	nop.w
 8006ee8:	fcce1c58 	.word	0xfcce1c58
 8006eec:	3f800e6a 	.word	0x3f800e6a
 8006ef0:	40040000 	.word	0x40040000
 8006ef4:	00000000 	.word	0x00000000

08006ef8 <can1_ams_s03_voltages_2_s03v09_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v09_encode(double value)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	4b10      	ldr	r3, [pc, #64]	@ (8006f48 <can1_ams_s03_voltages_2_s03v09_encode+0x50>)
 8006f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f0c:	f7f9 f960 	bl	80001d0 <__aeabi_dsub>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4610      	mov	r0, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	a309      	add	r3, pc, #36	@ (adr r3, 8006f40 <can1_ams_s03_voltages_2_s03v09_encode+0x48>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 fc39 	bl	8000794 <__aeabi_ddiv>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4610      	mov	r0, r2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f7f9 fd1b 	bl	8000964 <__aeabi_d2uiz>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	b2db      	uxtb	r3, r3
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w
 8006f40:	fcce1c58 	.word	0xfcce1c58
 8006f44:	3f800e6a 	.word	0x3f800e6a
 8006f48:	40040000 	.word	0x40040000
 8006f4c:	00000000 	.word	0x00000000

08006f50 <can1_ams_s03_voltages_2_s03v10_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v10_encode(double value)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	4b10      	ldr	r3, [pc, #64]	@ (8006fa0 <can1_ams_s03_voltages_2_s03v10_encode+0x50>)
 8006f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f64:	f7f9 f934 	bl	80001d0 <__aeabi_dsub>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	a309      	add	r3, pc, #36	@ (adr r3, 8006f98 <can1_ams_s03_voltages_2_s03v10_encode+0x48>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 fc0d 	bl	8000794 <__aeabi_ddiv>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4619      	mov	r1, r3
 8006f82:	f7f9 fcef 	bl	8000964 <__aeabi_d2uiz>
 8006f86:	4603      	mov	r3, r0
 8006f88:	b2db      	uxtb	r3, r3
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	f3af 8000 	nop.w
 8006f98:	fcce1c58 	.word	0xfcce1c58
 8006f9c:	3f800e6a 	.word	0x3f800e6a
 8006fa0:	40040000 	.word	0x40040000
 8006fa4:	00000000 	.word	0x00000000

08006fa8 <can1_ams_s03_voltages_2_s03v11_encode>:

    return (true);
}

uint8_t can1_ams_s03_voltages_2_s03v11_encode(double value)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <can1_ams_s03_voltages_2_s03v11_encode+0x50>)
 8006fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fbc:	f7f9 f908 	bl	80001d0 <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	a309      	add	r3, pc, #36	@ (adr r3, 8006ff0 <can1_ams_s03_voltages_2_s03v11_encode+0x48>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 fbe1 	bl	8000794 <__aeabi_ddiv>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f7f9 fcc3 	bl	8000964 <__aeabi_d2uiz>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	b2db      	uxtb	r3, r3
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w
 8006ff0:	fcce1c58 	.word	0xfcce1c58
 8006ff4:	3f800e6a 	.word	0x3f800e6a
 8006ff8:	40040000 	.word	0x40040000

08006ffc <can1_ams_s04_voltages_1_pack>:

int can1_ams_s04_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s04_voltages_1_t *src_p,
    size_t size)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b05      	cmp	r3, #5
 800700c:	d802      	bhi.n	8007014 <can1_ams_s04_voltages_1_pack+0x18>
        return (-EINVAL);
 800700e:	f06f 0315 	mvn.w	r3, #21
 8007012:	e069      	b.n	80070e8 <can1_ams_s04_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8007014:	2206      	movs	r2, #6
 8007016:	2100      	movs	r1, #0
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f003 fced 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s04v01, 0u, 0xffu);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	22ff      	movs	r2, #255	@ 0xff
 8007024:	2100      	movs	r1, #0
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fe66 	bl	8005cf8 <pack_left_shift_u8>
 800702c:	4603      	mov	r3, r0
 800702e:	461a      	mov	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	4313      	orrs	r3, r2
 8007036:	b2da      	uxtb	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s04v02, 0u, 0xffu);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	22ff      	movs	r2, #255	@ 0xff
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fe57 	bl	8005cf8 <pack_left_shift_u8>
 800704a:	4603      	mov	r3, r0
 800704c:	4619      	mov	r1, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	430a      	orrs	r2, r1
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s04v03, 0u, 0xffu);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	789b      	ldrb	r3, [r3, #2]
 8007062:	22ff      	movs	r2, #255	@ 0xff
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fe46 	bl	8005cf8 <pack_left_shift_u8>
 800706c:	4603      	mov	r3, r0
 800706e:	4619      	mov	r1, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3302      	adds	r3, #2
 8007074:	781a      	ldrb	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3302      	adds	r3, #2
 800707a:	430a      	orrs	r2, r1
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s04v04, 0u, 0xffu);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	78db      	ldrb	r3, [r3, #3]
 8007084:	22ff      	movs	r2, #255	@ 0xff
 8007086:	2100      	movs	r1, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fe35 	bl	8005cf8 <pack_left_shift_u8>
 800708e:	4603      	mov	r3, r0
 8007090:	4619      	mov	r1, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3303      	adds	r3, #3
 8007096:	781a      	ldrb	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3303      	adds	r3, #3
 800709c:	430a      	orrs	r2, r1
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s04v05, 0u, 0xffu);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	791b      	ldrb	r3, [r3, #4]
 80070a6:	22ff      	movs	r2, #255	@ 0xff
 80070a8:	2100      	movs	r1, #0
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe fe24 	bl	8005cf8 <pack_left_shift_u8>
 80070b0:	4603      	mov	r3, r0
 80070b2:	4619      	mov	r1, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3304      	adds	r3, #4
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3304      	adds	r3, #4
 80070be:	430a      	orrs	r2, r1
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s04v06, 0u, 0xffu);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	795b      	ldrb	r3, [r3, #5]
 80070c8:	22ff      	movs	r2, #255	@ 0xff
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe fe13 	bl	8005cf8 <pack_left_shift_u8>
 80070d2:	4603      	mov	r3, r0
 80070d4:	4619      	mov	r1, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3305      	adds	r3, #5
 80070da:	781a      	ldrb	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3305      	adds	r3, #5
 80070e0:	430a      	orrs	r2, r1
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

    return (6);
 80070e6:	2306      	movs	r3, #6
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <can1_ams_s04_voltages_1_s04v01_encode>:

    return 0;
}

uint8_t can1_ams_s04_voltages_1_s04v01_encode(double value)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	4b10      	ldr	r3, [pc, #64]	@ (8007140 <can1_ams_s04_voltages_1_s04v01_encode+0x50>)
 8007100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007104:	f7f9 f864 	bl	80001d0 <__aeabi_dsub>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	a309      	add	r3, pc, #36	@ (adr r3, 8007138 <can1_ams_s04_voltages_1_s04v01_encode+0x48>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 fb3d 	bl	8000794 <__aeabi_ddiv>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4610      	mov	r0, r2
 8007120:	4619      	mov	r1, r3
 8007122:	f7f9 fc1f 	bl	8000964 <__aeabi_d2uiz>
 8007126:	4603      	mov	r3, r0
 8007128:	b2db      	uxtb	r3, r3
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	f3af 8000 	nop.w
 8007138:	fcce1c58 	.word	0xfcce1c58
 800713c:	3f800e6a 	.word	0x3f800e6a
 8007140:	40040000 	.word	0x40040000
 8007144:	00000000 	.word	0x00000000

08007148 <can1_ams_s04_voltages_1_s04v02_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v02_encode(double value)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	4b10      	ldr	r3, [pc, #64]	@ (8007198 <can1_ams_s04_voltages_1_s04v02_encode+0x50>)
 8007158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800715c:	f7f9 f838 	bl	80001d0 <__aeabi_dsub>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4610      	mov	r0, r2
 8007166:	4619      	mov	r1, r3
 8007168:	a309      	add	r3, pc, #36	@ (adr r3, 8007190 <can1_ams_s04_voltages_1_s04v02_encode+0x48>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 fb11 	bl	8000794 <__aeabi_ddiv>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4610      	mov	r0, r2
 8007178:	4619      	mov	r1, r3
 800717a:	f7f9 fbf3 	bl	8000964 <__aeabi_d2uiz>
 800717e:	4603      	mov	r3, r0
 8007180:	b2db      	uxtb	r3, r3
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	f3af 8000 	nop.w
 8007190:	fcce1c58 	.word	0xfcce1c58
 8007194:	3f800e6a 	.word	0x3f800e6a
 8007198:	40040000 	.word	0x40040000
 800719c:	00000000 	.word	0x00000000

080071a0 <can1_ams_s04_voltages_1_s04v03_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v03_encode(double value)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	4b10      	ldr	r3, [pc, #64]	@ (80071f0 <can1_ams_s04_voltages_1_s04v03_encode+0x50>)
 80071b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071b4:	f7f9 f80c 	bl	80001d0 <__aeabi_dsub>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	a309      	add	r3, pc, #36	@ (adr r3, 80071e8 <can1_ams_s04_voltages_1_s04v03_encode+0x48>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f7f9 fae5 	bl	8000794 <__aeabi_ddiv>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4610      	mov	r0, r2
 80071d0:	4619      	mov	r1, r3
 80071d2:	f7f9 fbc7 	bl	8000964 <__aeabi_d2uiz>
 80071d6:	4603      	mov	r3, r0
 80071d8:	b2db      	uxtb	r3, r3
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	f3af 8000 	nop.w
 80071e8:	fcce1c58 	.word	0xfcce1c58
 80071ec:	3f800e6a 	.word	0x3f800e6a
 80071f0:	40040000 	.word	0x40040000
 80071f4:	00000000 	.word	0x00000000

080071f8 <can1_ams_s04_voltages_1_s04v04_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v04_encode(double value)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	4b10      	ldr	r3, [pc, #64]	@ (8007248 <can1_ams_s04_voltages_1_s04v04_encode+0x50>)
 8007208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800720c:	f7f8 ffe0 	bl	80001d0 <__aeabi_dsub>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4610      	mov	r0, r2
 8007216:	4619      	mov	r1, r3
 8007218:	a309      	add	r3, pc, #36	@ (adr r3, 8007240 <can1_ams_s04_voltages_1_s04v04_encode+0x48>)
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 fab9 	bl	8000794 <__aeabi_ddiv>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	f7f9 fb9b 	bl	8000964 <__aeabi_d2uiz>
 800722e:	4603      	mov	r3, r0
 8007230:	b2db      	uxtb	r3, r3
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w
 8007240:	fcce1c58 	.word	0xfcce1c58
 8007244:	3f800e6a 	.word	0x3f800e6a
 8007248:	40040000 	.word	0x40040000
 800724c:	00000000 	.word	0x00000000

08007250 <can1_ams_s04_voltages_1_s04v05_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v05_encode(double value)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <can1_ams_s04_voltages_1_s04v05_encode+0x50>)
 8007260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007264:	f7f8 ffb4 	bl	80001d0 <__aeabi_dsub>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	a309      	add	r3, pc, #36	@ (adr r3, 8007298 <can1_ams_s04_voltages_1_s04v05_encode+0x48>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 fa8d 	bl	8000794 <__aeabi_ddiv>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4610      	mov	r0, r2
 8007280:	4619      	mov	r1, r3
 8007282:	f7f9 fb6f 	bl	8000964 <__aeabi_d2uiz>
 8007286:	4603      	mov	r3, r0
 8007288:	b2db      	uxtb	r3, r3
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	f3af 8000 	nop.w
 8007298:	fcce1c58 	.word	0xfcce1c58
 800729c:	3f800e6a 	.word	0x3f800e6a
 80072a0:	40040000 	.word	0x40040000
 80072a4:	00000000 	.word	0x00000000

080072a8 <can1_ams_s04_voltages_1_s04v06_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_1_s04v06_encode(double value)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	4b10      	ldr	r3, [pc, #64]	@ (80072f8 <can1_ams_s04_voltages_1_s04v06_encode+0x50>)
 80072b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072bc:	f7f8 ff88 	bl	80001d0 <__aeabi_dsub>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4610      	mov	r0, r2
 80072c6:	4619      	mov	r1, r3
 80072c8:	a309      	add	r3, pc, #36	@ (adr r3, 80072f0 <can1_ams_s04_voltages_1_s04v06_encode+0x48>)
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f7f9 fa61 	bl	8000794 <__aeabi_ddiv>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4610      	mov	r0, r2
 80072d8:	4619      	mov	r1, r3
 80072da:	f7f9 fb43 	bl	8000964 <__aeabi_d2uiz>
 80072de:	4603      	mov	r3, r0
 80072e0:	b2db      	uxtb	r3, r3
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	f3af 8000 	nop.w
 80072f0:	fcce1c58 	.word	0xfcce1c58
 80072f4:	3f800e6a 	.word	0x3f800e6a
 80072f8:	40040000 	.word	0x40040000

080072fc <can1_ams_s04_voltages_2_pack>:

int can1_ams_s04_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s04_voltages_2_t *src_p,
    size_t size)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b04      	cmp	r3, #4
 800730c:	d802      	bhi.n	8007314 <can1_ams_s04_voltages_2_pack+0x18>
        return (-EINVAL);
 800730e:	f06f 0315 	mvn.w	r3, #21
 8007312:	e058      	b.n	80073c6 <can1_ams_s04_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 8007314:	2205      	movs	r2, #5
 8007316:	2100      	movs	r1, #0
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f003 fb6d 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s04v07, 0u, 0xffu);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	22ff      	movs	r2, #255	@ 0xff
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fce6 	bl	8005cf8 <pack_left_shift_u8>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	4313      	orrs	r3, r2
 8007336:	b2da      	uxtb	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s04v08, 0u, 0xffu);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	22ff      	movs	r2, #255	@ 0xff
 8007342:	2100      	movs	r1, #0
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fcd7 	bl	8005cf8 <pack_left_shift_u8>
 800734a:	4603      	mov	r3, r0
 800734c:	4619      	mov	r1, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
 8007358:	430a      	orrs	r2, r1
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s04v09, 0u, 0xffu);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	789b      	ldrb	r3, [r3, #2]
 8007362:	22ff      	movs	r2, #255	@ 0xff
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fcc6 	bl	8005cf8 <pack_left_shift_u8>
 800736c:	4603      	mov	r3, r0
 800736e:	4619      	mov	r1, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3302      	adds	r3, #2
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3302      	adds	r3, #2
 800737a:	430a      	orrs	r2, r1
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s04v10, 0u, 0xffu);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	78db      	ldrb	r3, [r3, #3]
 8007384:	22ff      	movs	r2, #255	@ 0xff
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe fcb5 	bl	8005cf8 <pack_left_shift_u8>
 800738e:	4603      	mov	r3, r0
 8007390:	4619      	mov	r1, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3303      	adds	r3, #3
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3303      	adds	r3, #3
 800739c:	430a      	orrs	r2, r1
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s04v11, 0u, 0xffu);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	791b      	ldrb	r3, [r3, #4]
 80073a6:	22ff      	movs	r2, #255	@ 0xff
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fca4 	bl	8005cf8 <pack_left_shift_u8>
 80073b0:	4603      	mov	r3, r0
 80073b2:	4619      	mov	r1, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3304      	adds	r3, #4
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3304      	adds	r3, #4
 80073be:	430a      	orrs	r2, r1
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]

    return (5);
 80073c4:	2305      	movs	r3, #5
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <can1_ams_s04_voltages_2_s04v07_encode>:

    return 0;
}

uint8_t can1_ams_s04_voltages_2_s04v07_encode(double value)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <can1_ams_s04_voltages_2_s04v07_encode+0x50>)
 80073e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073e4:	f7f8 fef4 	bl	80001d0 <__aeabi_dsub>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4610      	mov	r0, r2
 80073ee:	4619      	mov	r1, r3
 80073f0:	a309      	add	r3, pc, #36	@ (adr r3, 8007418 <can1_ams_s04_voltages_2_s04v07_encode+0x48>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f7f9 f9cd 	bl	8000794 <__aeabi_ddiv>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4610      	mov	r0, r2
 8007400:	4619      	mov	r1, r3
 8007402:	f7f9 faaf 	bl	8000964 <__aeabi_d2uiz>
 8007406:	4603      	mov	r3, r0
 8007408:	b2db      	uxtb	r3, r3
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	f3af 8000 	nop.w
 8007418:	fcce1c58 	.word	0xfcce1c58
 800741c:	3f800e6a 	.word	0x3f800e6a
 8007420:	40040000 	.word	0x40040000
 8007424:	00000000 	.word	0x00000000

08007428 <can1_ams_s04_voltages_2_s04v08_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v08_encode(double value)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	4b10      	ldr	r3, [pc, #64]	@ (8007478 <can1_ams_s04_voltages_2_s04v08_encode+0x50>)
 8007438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800743c:	f7f8 fec8 	bl	80001d0 <__aeabi_dsub>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4610      	mov	r0, r2
 8007446:	4619      	mov	r1, r3
 8007448:	a309      	add	r3, pc, #36	@ (adr r3, 8007470 <can1_ams_s04_voltages_2_s04v08_encode+0x48>)
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	f7f9 f9a1 	bl	8000794 <__aeabi_ddiv>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4610      	mov	r0, r2
 8007458:	4619      	mov	r1, r3
 800745a:	f7f9 fa83 	bl	8000964 <__aeabi_d2uiz>
 800745e:	4603      	mov	r3, r0
 8007460:	b2db      	uxtb	r3, r3
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	f3af 8000 	nop.w
 8007470:	fcce1c58 	.word	0xfcce1c58
 8007474:	3f800e6a 	.word	0x3f800e6a
 8007478:	40040000 	.word	0x40040000
 800747c:	00000000 	.word	0x00000000

08007480 <can1_ams_s04_voltages_2_s04v09_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v09_encode(double value)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	4b10      	ldr	r3, [pc, #64]	@ (80074d0 <can1_ams_s04_voltages_2_s04v09_encode+0x50>)
 8007490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007494:	f7f8 fe9c 	bl	80001d0 <__aeabi_dsub>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	a309      	add	r3, pc, #36	@ (adr r3, 80074c8 <can1_ams_s04_voltages_2_s04v09_encode+0x48>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f7f9 f975 	bl	8000794 <__aeabi_ddiv>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4610      	mov	r0, r2
 80074b0:	4619      	mov	r1, r3
 80074b2:	f7f9 fa57 	bl	8000964 <__aeabi_d2uiz>
 80074b6:	4603      	mov	r3, r0
 80074b8:	b2db      	uxtb	r3, r3
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	f3af 8000 	nop.w
 80074c8:	fcce1c58 	.word	0xfcce1c58
 80074cc:	3f800e6a 	.word	0x3f800e6a
 80074d0:	40040000 	.word	0x40040000
 80074d4:	00000000 	.word	0x00000000

080074d8 <can1_ams_s04_voltages_2_s04v10_encode>:

    return (true);
}

uint8_t can1_ams_s04_voltages_2_s04v10_encode(double value)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80074e2:	f04f 0200 	mov.w	r2, #0
 80074e6:	4b10      	ldr	r3, [pc, #64]	@ (8007528 <can1_ams_s04_voltages_2_s04v10_encode+0x50>)
 80074e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ec:	f7f8 fe70 	bl	80001d0 <__aeabi_dsub>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4610      	mov	r0, r2
 80074f6:	4619      	mov	r1, r3
 80074f8:	a309      	add	r3, pc, #36	@ (adr r3, 8007520 <can1_ams_s04_voltages_2_s04v10_encode+0x48>)
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	f7f9 f949 	bl	8000794 <__aeabi_ddiv>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	f7f9 fa2b 	bl	8000964 <__aeabi_d2uiz>
 800750e:	4603      	mov	r3, r0
 8007510:	b2db      	uxtb	r3, r3
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w
 8007520:	fcce1c58 	.word	0xfcce1c58
 8007524:	3f800e6a 	.word	0x3f800e6a
 8007528:	40040000 	.word	0x40040000

0800752c <can1_ams_s05_voltages_1_pack>:

int can1_ams_s05_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s05_voltages_1_t *src_p,
    size_t size)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b05      	cmp	r3, #5
 800753c:	d802      	bhi.n	8007544 <can1_ams_s05_voltages_1_pack+0x18>
        return (-EINVAL);
 800753e:	f06f 0315 	mvn.w	r3, #21
 8007542:	e069      	b.n	8007618 <can1_ams_s05_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8007544:	2206      	movs	r2, #6
 8007546:	2100      	movs	r1, #0
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f003 fa55 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s05v01, 0u, 0xffu);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	22ff      	movs	r2, #255	@ 0xff
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fbce 	bl	8005cf8 <pack_left_shift_u8>
 800755c:	4603      	mov	r3, r0
 800755e:	461a      	mov	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	4313      	orrs	r3, r2
 8007566:	b2da      	uxtb	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s05v02, 0u, 0xffu);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	22ff      	movs	r2, #255	@ 0xff
 8007572:	2100      	movs	r1, #0
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fbbf 	bl	8005cf8 <pack_left_shift_u8>
 800757a:	4603      	mov	r3, r0
 800757c:	4619      	mov	r1, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	781a      	ldrb	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3301      	adds	r3, #1
 8007588:	430a      	orrs	r2, r1
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s05v03, 0u, 0xffu);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	789b      	ldrb	r3, [r3, #2]
 8007592:	22ff      	movs	r2, #255	@ 0xff
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fbae 	bl	8005cf8 <pack_left_shift_u8>
 800759c:	4603      	mov	r3, r0
 800759e:	4619      	mov	r1, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3302      	adds	r3, #2
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3302      	adds	r3, #2
 80075aa:	430a      	orrs	r2, r1
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s05v04, 0u, 0xffu);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	78db      	ldrb	r3, [r3, #3]
 80075b4:	22ff      	movs	r2, #255	@ 0xff
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe fb9d 	bl	8005cf8 <pack_left_shift_u8>
 80075be:	4603      	mov	r3, r0
 80075c0:	4619      	mov	r1, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3303      	adds	r3, #3
 80075c6:	781a      	ldrb	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3303      	adds	r3, #3
 80075cc:	430a      	orrs	r2, r1
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s05v05, 0u, 0xffu);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	791b      	ldrb	r3, [r3, #4]
 80075d6:	22ff      	movs	r2, #255	@ 0xff
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fb8c 	bl	8005cf8 <pack_left_shift_u8>
 80075e0:	4603      	mov	r3, r0
 80075e2:	4619      	mov	r1, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3304      	adds	r3, #4
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3304      	adds	r3, #4
 80075ee:	430a      	orrs	r2, r1
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s05v06, 0u, 0xffu);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	795b      	ldrb	r3, [r3, #5]
 80075f8:	22ff      	movs	r2, #255	@ 0xff
 80075fa:	2100      	movs	r1, #0
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fb7b 	bl	8005cf8 <pack_left_shift_u8>
 8007602:	4603      	mov	r3, r0
 8007604:	4619      	mov	r1, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3305      	adds	r3, #5
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3305      	adds	r3, #5
 8007610:	430a      	orrs	r2, r1
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]

    return (6);
 8007616:	2306      	movs	r3, #6
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <can1_ams_s05_voltages_1_s05v01_encode>:

    return 0;
}

uint8_t can1_ams_s05_voltages_1_s05v01_encode(double value)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	4b10      	ldr	r3, [pc, #64]	@ (8007670 <can1_ams_s05_voltages_1_s05v01_encode+0x50>)
 8007630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007634:	f7f8 fdcc 	bl	80001d0 <__aeabi_dsub>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4610      	mov	r0, r2
 800763e:	4619      	mov	r1, r3
 8007640:	a309      	add	r3, pc, #36	@ (adr r3, 8007668 <can1_ams_s05_voltages_1_s05v01_encode+0x48>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f9 f8a5 	bl	8000794 <__aeabi_ddiv>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4610      	mov	r0, r2
 8007650:	4619      	mov	r1, r3
 8007652:	f7f9 f987 	bl	8000964 <__aeabi_d2uiz>
 8007656:	4603      	mov	r3, r0
 8007658:	b2db      	uxtb	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	f3af 8000 	nop.w
 8007668:	fcce1c58 	.word	0xfcce1c58
 800766c:	3f800e6a 	.word	0x3f800e6a
 8007670:	40040000 	.word	0x40040000
 8007674:	00000000 	.word	0x00000000

08007678 <can1_ams_s05_voltages_1_s05v02_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v02_encode(double value)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	4b10      	ldr	r3, [pc, #64]	@ (80076c8 <can1_ams_s05_voltages_1_s05v02_encode+0x50>)
 8007688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800768c:	f7f8 fda0 	bl	80001d0 <__aeabi_dsub>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4610      	mov	r0, r2
 8007696:	4619      	mov	r1, r3
 8007698:	a309      	add	r3, pc, #36	@ (adr r3, 80076c0 <can1_ams_s05_voltages_1_s05v02_encode+0x48>)
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f7f9 f879 	bl	8000794 <__aeabi_ddiv>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4610      	mov	r0, r2
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7f9 f95b 	bl	8000964 <__aeabi_d2uiz>
 80076ae:	4603      	mov	r3, r0
 80076b0:	b2db      	uxtb	r3, r3
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	f3af 8000 	nop.w
 80076c0:	fcce1c58 	.word	0xfcce1c58
 80076c4:	3f800e6a 	.word	0x3f800e6a
 80076c8:	40040000 	.word	0x40040000
 80076cc:	00000000 	.word	0x00000000

080076d0 <can1_ams_s05_voltages_1_s05v03_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v03_encode(double value)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	4b10      	ldr	r3, [pc, #64]	@ (8007720 <can1_ams_s05_voltages_1_s05v03_encode+0x50>)
 80076e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e4:	f7f8 fd74 	bl	80001d0 <__aeabi_dsub>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4610      	mov	r0, r2
 80076ee:	4619      	mov	r1, r3
 80076f0:	a309      	add	r3, pc, #36	@ (adr r3, 8007718 <can1_ams_s05_voltages_1_s05v03_encode+0x48>)
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	f7f9 f84d 	bl	8000794 <__aeabi_ddiv>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4610      	mov	r0, r2
 8007700:	4619      	mov	r1, r3
 8007702:	f7f9 f92f 	bl	8000964 <__aeabi_d2uiz>
 8007706:	4603      	mov	r3, r0
 8007708:	b2db      	uxtb	r3, r3
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	f3af 8000 	nop.w
 8007718:	fcce1c58 	.word	0xfcce1c58
 800771c:	3f800e6a 	.word	0x3f800e6a
 8007720:	40040000 	.word	0x40040000
 8007724:	00000000 	.word	0x00000000

08007728 <can1_ams_s05_voltages_1_s05v04_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v04_encode(double value)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	4b10      	ldr	r3, [pc, #64]	@ (8007778 <can1_ams_s05_voltages_1_s05v04_encode+0x50>)
 8007738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800773c:	f7f8 fd48 	bl	80001d0 <__aeabi_dsub>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	a309      	add	r3, pc, #36	@ (adr r3, 8007770 <can1_ams_s05_voltages_1_s05v04_encode+0x48>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f9 f821 	bl	8000794 <__aeabi_ddiv>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4610      	mov	r0, r2
 8007758:	4619      	mov	r1, r3
 800775a:	f7f9 f903 	bl	8000964 <__aeabi_d2uiz>
 800775e:	4603      	mov	r3, r0
 8007760:	b2db      	uxtb	r3, r3
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w
 8007770:	fcce1c58 	.word	0xfcce1c58
 8007774:	3f800e6a 	.word	0x3f800e6a
 8007778:	40040000 	.word	0x40040000
 800777c:	00000000 	.word	0x00000000

08007780 <can1_ams_s05_voltages_1_s05v05_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v05_encode(double value)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800778a:	f04f 0200 	mov.w	r2, #0
 800778e:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <can1_ams_s05_voltages_1_s05v05_encode+0x50>)
 8007790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007794:	f7f8 fd1c 	bl	80001d0 <__aeabi_dsub>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4610      	mov	r0, r2
 800779e:	4619      	mov	r1, r3
 80077a0:	a309      	add	r3, pc, #36	@ (adr r3, 80077c8 <can1_ams_s05_voltages_1_s05v05_encode+0x48>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f8 fff5 	bl	8000794 <__aeabi_ddiv>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7f9 f8d7 	bl	8000964 <__aeabi_d2uiz>
 80077b6:	4603      	mov	r3, r0
 80077b8:	b2db      	uxtb	r3, r3
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	fcce1c58 	.word	0xfcce1c58
 80077cc:	3f800e6a 	.word	0x3f800e6a
 80077d0:	40040000 	.word	0x40040000
 80077d4:	00000000 	.word	0x00000000

080077d8 <can1_ams_s05_voltages_1_s05v06_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_1_s05v06_encode(double value)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	4b10      	ldr	r3, [pc, #64]	@ (8007828 <can1_ams_s05_voltages_1_s05v06_encode+0x50>)
 80077e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077ec:	f7f8 fcf0 	bl	80001d0 <__aeabi_dsub>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4610      	mov	r0, r2
 80077f6:	4619      	mov	r1, r3
 80077f8:	a309      	add	r3, pc, #36	@ (adr r3, 8007820 <can1_ams_s05_voltages_1_s05v06_encode+0x48>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 ffc9 	bl	8000794 <__aeabi_ddiv>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4610      	mov	r0, r2
 8007808:	4619      	mov	r1, r3
 800780a:	f7f9 f8ab 	bl	8000964 <__aeabi_d2uiz>
 800780e:	4603      	mov	r3, r0
 8007810:	b2db      	uxtb	r3, r3
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	f3af 8000 	nop.w
 8007820:	fcce1c58 	.word	0xfcce1c58
 8007824:	3f800e6a 	.word	0x3f800e6a
 8007828:	40040000 	.word	0x40040000

0800782c <can1_ams_s05_voltages_2_pack>:

int can1_ams_s05_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s05_voltages_2_t *src_p,
    size_t size)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b04      	cmp	r3, #4
 800783c:	d802      	bhi.n	8007844 <can1_ams_s05_voltages_2_pack+0x18>
        return (-EINVAL);
 800783e:	f06f 0315 	mvn.w	r3, #21
 8007842:	e058      	b.n	80078f6 <can1_ams_s05_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 8007844:	2205      	movs	r2, #5
 8007846:	2100      	movs	r1, #0
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f003 f8d5 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s05v07, 0u, 0xffu);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	22ff      	movs	r2, #255	@ 0xff
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fa4e 	bl	8005cf8 <pack_left_shift_u8>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	4313      	orrs	r3, r2
 8007866:	b2da      	uxtb	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s05v08, 0u, 0xffu);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	22ff      	movs	r2, #255	@ 0xff
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe fa3f 	bl	8005cf8 <pack_left_shift_u8>
 800787a:	4603      	mov	r3, r0
 800787c:	4619      	mov	r1, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	430a      	orrs	r2, r1
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s05v09, 0u, 0xffu);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	789b      	ldrb	r3, [r3, #2]
 8007892:	22ff      	movs	r2, #255	@ 0xff
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fa2e 	bl	8005cf8 <pack_left_shift_u8>
 800789c:	4603      	mov	r3, r0
 800789e:	4619      	mov	r1, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3302      	adds	r3, #2
 80078a4:	781a      	ldrb	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3302      	adds	r3, #2
 80078aa:	430a      	orrs	r2, r1
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s05v10, 0u, 0xffu);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	78db      	ldrb	r3, [r3, #3]
 80078b4:	22ff      	movs	r2, #255	@ 0xff
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fa1d 	bl	8005cf8 <pack_left_shift_u8>
 80078be:	4603      	mov	r3, r0
 80078c0:	4619      	mov	r1, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3303      	adds	r3, #3
 80078c6:	781a      	ldrb	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3303      	adds	r3, #3
 80078cc:	430a      	orrs	r2, r1
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s05v11, 0u, 0xffu);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	791b      	ldrb	r3, [r3, #4]
 80078d6:	22ff      	movs	r2, #255	@ 0xff
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fa0c 	bl	8005cf8 <pack_left_shift_u8>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4619      	mov	r1, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3304      	adds	r3, #4
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3304      	adds	r3, #4
 80078ee:	430a      	orrs	r2, r1
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]

    return (5);
 80078f4:	2305      	movs	r3, #5
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <can1_ams_s05_voltages_2_s05v07_encode>:

    return 0;
}

uint8_t can1_ams_s05_voltages_2_s05v07_encode(double value)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	4b10      	ldr	r3, [pc, #64]	@ (8007950 <can1_ams_s05_voltages_2_s05v07_encode+0x50>)
 8007910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007914:	f7f8 fc5c 	bl	80001d0 <__aeabi_dsub>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4610      	mov	r0, r2
 800791e:	4619      	mov	r1, r3
 8007920:	a309      	add	r3, pc, #36	@ (adr r3, 8007948 <can1_ams_s05_voltages_2_s05v07_encode+0x48>)
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f8 ff35 	bl	8000794 <__aeabi_ddiv>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4610      	mov	r0, r2
 8007930:	4619      	mov	r1, r3
 8007932:	f7f9 f817 	bl	8000964 <__aeabi_d2uiz>
 8007936:	4603      	mov	r3, r0
 8007938:	b2db      	uxtb	r3, r3
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	f3af 8000 	nop.w
 8007948:	fcce1c58 	.word	0xfcce1c58
 800794c:	3f800e6a 	.word	0x3f800e6a
 8007950:	40040000 	.word	0x40040000
 8007954:	00000000 	.word	0x00000000

08007958 <can1_ams_s05_voltages_2_s05v08_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v08_encode(double value)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	4b10      	ldr	r3, [pc, #64]	@ (80079a8 <can1_ams_s05_voltages_2_s05v08_encode+0x50>)
 8007968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800796c:	f7f8 fc30 	bl	80001d0 <__aeabi_dsub>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4610      	mov	r0, r2
 8007976:	4619      	mov	r1, r3
 8007978:	a309      	add	r3, pc, #36	@ (adr r3, 80079a0 <can1_ams_s05_voltages_2_s05v08_encode+0x48>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 ff09 	bl	8000794 <__aeabi_ddiv>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4610      	mov	r0, r2
 8007988:	4619      	mov	r1, r3
 800798a:	f7f8 ffeb 	bl	8000964 <__aeabi_d2uiz>
 800798e:	4603      	mov	r3, r0
 8007990:	b2db      	uxtb	r3, r3
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	f3af 8000 	nop.w
 80079a0:	fcce1c58 	.word	0xfcce1c58
 80079a4:	3f800e6a 	.word	0x3f800e6a
 80079a8:	40040000 	.word	0x40040000
 80079ac:	00000000 	.word	0x00000000

080079b0 <can1_ams_s05_voltages_2_s05v09_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v09_encode(double value)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	4b10      	ldr	r3, [pc, #64]	@ (8007a00 <can1_ams_s05_voltages_2_s05v09_encode+0x50>)
 80079c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079c4:	f7f8 fc04 	bl	80001d0 <__aeabi_dsub>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4610      	mov	r0, r2
 80079ce:	4619      	mov	r1, r3
 80079d0:	a309      	add	r3, pc, #36	@ (adr r3, 80079f8 <can1_ams_s05_voltages_2_s05v09_encode+0x48>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fedd 	bl	8000794 <__aeabi_ddiv>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4610      	mov	r0, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	f7f8 ffbf 	bl	8000964 <__aeabi_d2uiz>
 80079e6:	4603      	mov	r3, r0
 80079e8:	b2db      	uxtb	r3, r3
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	f3af 8000 	nop.w
 80079f8:	fcce1c58 	.word	0xfcce1c58
 80079fc:	3f800e6a 	.word	0x3f800e6a
 8007a00:	40040000 	.word	0x40040000
 8007a04:	00000000 	.word	0x00000000

08007a08 <can1_ams_s05_voltages_2_s05v10_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v10_encode(double value)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	4b10      	ldr	r3, [pc, #64]	@ (8007a58 <can1_ams_s05_voltages_2_s05v10_encode+0x50>)
 8007a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a1c:	f7f8 fbd8 	bl	80001d0 <__aeabi_dsub>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	a309      	add	r3, pc, #36	@ (adr r3, 8007a50 <can1_ams_s05_voltages_2_s05v10_encode+0x48>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 feb1 	bl	8000794 <__aeabi_ddiv>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4610      	mov	r0, r2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f7f8 ff93 	bl	8000964 <__aeabi_d2uiz>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	b2db      	uxtb	r3, r3
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	f3af 8000 	nop.w
 8007a50:	fcce1c58 	.word	0xfcce1c58
 8007a54:	3f800e6a 	.word	0x3f800e6a
 8007a58:	40040000 	.word	0x40040000
 8007a5c:	00000000 	.word	0x00000000

08007a60 <can1_ams_s05_voltages_2_s05v11_encode>:

    return (true);
}

uint8_t can1_ams_s05_voltages_2_s05v11_encode(double value)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	4b10      	ldr	r3, [pc, #64]	@ (8007ab0 <can1_ams_s05_voltages_2_s05v11_encode+0x50>)
 8007a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a74:	f7f8 fbac 	bl	80001d0 <__aeabi_dsub>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4619      	mov	r1, r3
 8007a80:	a309      	add	r3, pc, #36	@ (adr r3, 8007aa8 <can1_ams_s05_voltages_2_s05v11_encode+0x48>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f7f8 fe85 	bl	8000794 <__aeabi_ddiv>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4610      	mov	r0, r2
 8007a90:	4619      	mov	r1, r3
 8007a92:	f7f8 ff67 	bl	8000964 <__aeabi_d2uiz>
 8007a96:	4603      	mov	r3, r0
 8007a98:	b2db      	uxtb	r3, r3
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	f3af 8000 	nop.w
 8007aa8:	fcce1c58 	.word	0xfcce1c58
 8007aac:	3f800e6a 	.word	0x3f800e6a
 8007ab0:	40040000 	.word	0x40040000

08007ab4 <can1_ams_s06_voltages_1_pack>:

int can1_ams_s06_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s06_voltages_1_t *src_p,
    size_t size)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b05      	cmp	r3, #5
 8007ac4:	d802      	bhi.n	8007acc <can1_ams_s06_voltages_1_pack+0x18>
        return (-EINVAL);
 8007ac6:	f06f 0315 	mvn.w	r3, #21
 8007aca:	e069      	b.n	8007ba0 <can1_ams_s06_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8007acc:	2206      	movs	r2, #6
 8007ace:	2100      	movs	r1, #0
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f002 ff91 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s06v01, 0u, 0xffu);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	22ff      	movs	r2, #255	@ 0xff
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe f90a 	bl	8005cf8 <pack_left_shift_u8>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s06v02, 0u, 0xffu);
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	22ff      	movs	r2, #255	@ 0xff
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe f8fb 	bl	8005cf8 <pack_left_shift_u8>
 8007b02:	4603      	mov	r3, r0
 8007b04:	4619      	mov	r1, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	430a      	orrs	r2, r1
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s06v03, 0u, 0xffu);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	22ff      	movs	r2, #255	@ 0xff
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe f8ea 	bl	8005cf8 <pack_left_shift_u8>
 8007b24:	4603      	mov	r3, r0
 8007b26:	4619      	mov	r1, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3302      	adds	r3, #2
 8007b32:	430a      	orrs	r2, r1
 8007b34:	b2d2      	uxtb	r2, r2
 8007b36:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s06v04, 0u, 0xffu);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	22ff      	movs	r2, #255	@ 0xff
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe f8d9 	bl	8005cf8 <pack_left_shift_u8>
 8007b46:	4603      	mov	r3, r0
 8007b48:	4619      	mov	r1, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3303      	adds	r3, #3
 8007b4e:	781a      	ldrb	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3303      	adds	r3, #3
 8007b54:	430a      	orrs	r2, r1
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s06v05, 0u, 0xffu);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	791b      	ldrb	r3, [r3, #4]
 8007b5e:	22ff      	movs	r2, #255	@ 0xff
 8007b60:	2100      	movs	r1, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe f8c8 	bl	8005cf8 <pack_left_shift_u8>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3304      	adds	r3, #4
 8007b76:	430a      	orrs	r2, r1
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s06v06, 0u, 0xffu);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	795b      	ldrb	r3, [r3, #5]
 8007b80:	22ff      	movs	r2, #255	@ 0xff
 8007b82:	2100      	movs	r1, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe f8b7 	bl	8005cf8 <pack_left_shift_u8>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3305      	adds	r3, #5
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3305      	adds	r3, #5
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]

    return (6);
 8007b9e:	2306      	movs	r3, #6
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <can1_ams_s06_voltages_1_s06v01_encode>:

    return 0;
}

uint8_t can1_ams_s06_voltages_1_s06v01_encode(double value)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	4b10      	ldr	r3, [pc, #64]	@ (8007bf8 <can1_ams_s06_voltages_1_s06v01_encode+0x50>)
 8007bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bbc:	f7f8 fb08 	bl	80001d0 <__aeabi_dsub>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	a309      	add	r3, pc, #36	@ (adr r3, 8007bf0 <can1_ams_s06_voltages_1_s06v01_encode+0x48>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fde1 	bl	8000794 <__aeabi_ddiv>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7f8 fec3 	bl	8000964 <__aeabi_d2uiz>
 8007bde:	4603      	mov	r3, r0
 8007be0:	b2db      	uxtb	r3, r3
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
 8007bf0:	fcce1c58 	.word	0xfcce1c58
 8007bf4:	3f800e6a 	.word	0x3f800e6a
 8007bf8:	40040000 	.word	0x40040000
 8007bfc:	00000000 	.word	0x00000000

08007c00 <can1_ams_s06_voltages_1_s06v02_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v02_encode(double value)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007c0a:	f04f 0200 	mov.w	r2, #0
 8007c0e:	4b10      	ldr	r3, [pc, #64]	@ (8007c50 <can1_ams_s06_voltages_1_s06v02_encode+0x50>)
 8007c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c14:	f7f8 fadc 	bl	80001d0 <__aeabi_dsub>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4619      	mov	r1, r3
 8007c20:	a309      	add	r3, pc, #36	@ (adr r3, 8007c48 <can1_ams_s06_voltages_1_s06v02_encode+0x48>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fdb5 	bl	8000794 <__aeabi_ddiv>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	f7f8 fe97 	bl	8000964 <__aeabi_d2uiz>
 8007c36:	4603      	mov	r3, r0
 8007c38:	b2db      	uxtb	r3, r3
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	f3af 8000 	nop.w
 8007c48:	fcce1c58 	.word	0xfcce1c58
 8007c4c:	3f800e6a 	.word	0x3f800e6a
 8007c50:	40040000 	.word	0x40040000
 8007c54:	00000000 	.word	0x00000000

08007c58 <can1_ams_s06_voltages_1_s06v03_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v03_encode(double value)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	4b10      	ldr	r3, [pc, #64]	@ (8007ca8 <can1_ams_s06_voltages_1_s06v03_encode+0x50>)
 8007c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c6c:	f7f8 fab0 	bl	80001d0 <__aeabi_dsub>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4610      	mov	r0, r2
 8007c76:	4619      	mov	r1, r3
 8007c78:	a309      	add	r3, pc, #36	@ (adr r3, 8007ca0 <can1_ams_s06_voltages_1_s06v03_encode+0x48>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fd89 	bl	8000794 <__aeabi_ddiv>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7f8 fe6b 	bl	8000964 <__aeabi_d2uiz>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	b2db      	uxtb	r3, r3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	fcce1c58 	.word	0xfcce1c58
 8007ca4:	3f800e6a 	.word	0x3f800e6a
 8007ca8:	40040000 	.word	0x40040000
 8007cac:	00000000 	.word	0x00000000

08007cb0 <can1_ams_s06_voltages_1_s06v04_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v04_encode(double value)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007cba:	f04f 0200 	mov.w	r2, #0
 8007cbe:	4b10      	ldr	r3, [pc, #64]	@ (8007d00 <can1_ams_s06_voltages_1_s06v04_encode+0x50>)
 8007cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cc4:	f7f8 fa84 	bl	80001d0 <__aeabi_dsub>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4619      	mov	r1, r3
 8007cd0:	a309      	add	r3, pc, #36	@ (adr r3, 8007cf8 <can1_ams_s06_voltages_1_s06v04_encode+0x48>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f7f8 fd5d 	bl	8000794 <__aeabi_ddiv>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f7f8 fe3f 	bl	8000964 <__aeabi_d2uiz>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	b2db      	uxtb	r3, r3
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	fcce1c58 	.word	0xfcce1c58
 8007cfc:	3f800e6a 	.word	0x3f800e6a
 8007d00:	40040000 	.word	0x40040000
 8007d04:	00000000 	.word	0x00000000

08007d08 <can1_ams_s06_voltages_1_s06v05_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v05_encode(double value)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	4b10      	ldr	r3, [pc, #64]	@ (8007d58 <can1_ams_s06_voltages_1_s06v05_encode+0x50>)
 8007d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1c:	f7f8 fa58 	bl	80001d0 <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4610      	mov	r0, r2
 8007d26:	4619      	mov	r1, r3
 8007d28:	a309      	add	r3, pc, #36	@ (adr r3, 8007d50 <can1_ams_s06_voltages_1_s06v05_encode+0x48>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fd31 	bl	8000794 <__aeabi_ddiv>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4610      	mov	r0, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f7f8 fe13 	bl	8000964 <__aeabi_d2uiz>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	b2db      	uxtb	r3, r3
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w
 8007d50:	fcce1c58 	.word	0xfcce1c58
 8007d54:	3f800e6a 	.word	0x3f800e6a
 8007d58:	40040000 	.word	0x40040000
 8007d5c:	00000000 	.word	0x00000000

08007d60 <can1_ams_s06_voltages_1_s06v06_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_1_s06v06_encode(double value)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007d6a:	f04f 0200 	mov.w	r2, #0
 8007d6e:	4b10      	ldr	r3, [pc, #64]	@ (8007db0 <can1_ams_s06_voltages_1_s06v06_encode+0x50>)
 8007d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d74:	f7f8 fa2c 	bl	80001d0 <__aeabi_dsub>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4619      	mov	r1, r3
 8007d80:	a309      	add	r3, pc, #36	@ (adr r3, 8007da8 <can1_ams_s06_voltages_1_s06v06_encode+0x48>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fd05 	bl	8000794 <__aeabi_ddiv>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4610      	mov	r0, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	f7f8 fde7 	bl	8000964 <__aeabi_d2uiz>
 8007d96:	4603      	mov	r3, r0
 8007d98:	b2db      	uxtb	r3, r3
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	f3af 8000 	nop.w
 8007da8:	fcce1c58 	.word	0xfcce1c58
 8007dac:	3f800e6a 	.word	0x3f800e6a
 8007db0:	40040000 	.word	0x40040000

08007db4 <can1_ams_s06_voltages_2_pack>:

int can1_ams_s06_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s06_voltages_2_t *src_p,
    size_t size)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d802      	bhi.n	8007dcc <can1_ams_s06_voltages_2_pack+0x18>
        return (-EINVAL);
 8007dc6:	f06f 0315 	mvn.w	r3, #21
 8007dca:	e058      	b.n	8007e7e <can1_ams_s06_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 8007dcc:	2205      	movs	r2, #5
 8007dce:	2100      	movs	r1, #0
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f002 fe11 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s06v07, 0u, 0xffu);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	22ff      	movs	r2, #255	@ 0xff
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fd ff8a 	bl	8005cf8 <pack_left_shift_u8>
 8007de4:	4603      	mov	r3, r0
 8007de6:	461a      	mov	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s06v08, 0u, 0xffu);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	22ff      	movs	r2, #255	@ 0xff
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fd ff7b 	bl	8005cf8 <pack_left_shift_u8>
 8007e02:	4603      	mov	r3, r0
 8007e04:	4619      	mov	r1, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	430a      	orrs	r2, r1
 8007e12:	b2d2      	uxtb	r2, r2
 8007e14:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s06v09, 0u, 0xffu);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	789b      	ldrb	r3, [r3, #2]
 8007e1a:	22ff      	movs	r2, #255	@ 0xff
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fd ff6a 	bl	8005cf8 <pack_left_shift_u8>
 8007e24:	4603      	mov	r3, r0
 8007e26:	4619      	mov	r1, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	781a      	ldrb	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3302      	adds	r3, #2
 8007e32:	430a      	orrs	r2, r1
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s06v10, 0u, 0xffu);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	78db      	ldrb	r3, [r3, #3]
 8007e3c:	22ff      	movs	r2, #255	@ 0xff
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fd ff59 	bl	8005cf8 <pack_left_shift_u8>
 8007e46:	4603      	mov	r3, r0
 8007e48:	4619      	mov	r1, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	3303      	adds	r3, #3
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3303      	adds	r3, #3
 8007e54:	430a      	orrs	r2, r1
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s06v11, 0u, 0xffu);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	22ff      	movs	r2, #255	@ 0xff
 8007e60:	2100      	movs	r1, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fd ff48 	bl	8005cf8 <pack_left_shift_u8>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	781a      	ldrb	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3304      	adds	r3, #4
 8007e76:	430a      	orrs	r2, r1
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	701a      	strb	r2, [r3, #0]

    return (5);
 8007e7c:	2305      	movs	r3, #5
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <can1_ams_s06_voltages_2_s06v07_encode>:

    return 0;
}

uint8_t can1_ams_s06_voltages_2_s06v07_encode(double value)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007e92:	f04f 0200 	mov.w	r2, #0
 8007e96:	4b10      	ldr	r3, [pc, #64]	@ (8007ed8 <can1_ams_s06_voltages_2_s06v07_encode+0x50>)
 8007e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e9c:	f7f8 f998 	bl	80001d0 <__aeabi_dsub>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	a309      	add	r3, pc, #36	@ (adr r3, 8007ed0 <can1_ams_s06_voltages_2_s06v07_encode+0x48>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f7f8 fc71 	bl	8000794 <__aeabi_ddiv>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7f8 fd53 	bl	8000964 <__aeabi_d2uiz>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	b2db      	uxtb	r3, r3
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	f3af 8000 	nop.w
 8007ed0:	fcce1c58 	.word	0xfcce1c58
 8007ed4:	3f800e6a 	.word	0x3f800e6a
 8007ed8:	40040000 	.word	0x40040000
 8007edc:	00000000 	.word	0x00000000

08007ee0 <can1_ams_s06_voltages_2_s06v08_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v08_encode(double value)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	4b10      	ldr	r3, [pc, #64]	@ (8007f30 <can1_ams_s06_voltages_2_s06v08_encode+0x50>)
 8007ef0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef4:	f7f8 f96c 	bl	80001d0 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4610      	mov	r0, r2
 8007efe:	4619      	mov	r1, r3
 8007f00:	a309      	add	r3, pc, #36	@ (adr r3, 8007f28 <can1_ams_s06_voltages_2_s06v08_encode+0x48>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f7f8 fc45 	bl	8000794 <__aeabi_ddiv>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4610      	mov	r0, r2
 8007f10:	4619      	mov	r1, r3
 8007f12:	f7f8 fd27 	bl	8000964 <__aeabi_d2uiz>
 8007f16:	4603      	mov	r3, r0
 8007f18:	b2db      	uxtb	r3, r3
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	fcce1c58 	.word	0xfcce1c58
 8007f2c:	3f800e6a 	.word	0x3f800e6a
 8007f30:	40040000 	.word	0x40040000
 8007f34:	00000000 	.word	0x00000000

08007f38 <can1_ams_s06_voltages_2_s06v09_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v09_encode(double value)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	4b10      	ldr	r3, [pc, #64]	@ (8007f88 <can1_ams_s06_voltages_2_s06v09_encode+0x50>)
 8007f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f4c:	f7f8 f940 	bl	80001d0 <__aeabi_dsub>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4610      	mov	r0, r2
 8007f56:	4619      	mov	r1, r3
 8007f58:	a309      	add	r3, pc, #36	@ (adr r3, 8007f80 <can1_ams_s06_voltages_2_s06v09_encode+0x48>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 fc19 	bl	8000794 <__aeabi_ddiv>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f7f8 fcfb 	bl	8000964 <__aeabi_d2uiz>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	b2db      	uxtb	r3, r3
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	f3af 8000 	nop.w
 8007f80:	fcce1c58 	.word	0xfcce1c58
 8007f84:	3f800e6a 	.word	0x3f800e6a
 8007f88:	40040000 	.word	0x40040000
 8007f8c:	00000000 	.word	0x00000000

08007f90 <can1_ams_s06_voltages_2_s06v10_encode>:

    return (true);
}

uint8_t can1_ams_s06_voltages_2_s06v10_encode(double value)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	4b10      	ldr	r3, [pc, #64]	@ (8007fe0 <can1_ams_s06_voltages_2_s06v10_encode+0x50>)
 8007fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa4:	f7f8 f914 	bl	80001d0 <__aeabi_dsub>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4610      	mov	r0, r2
 8007fae:	4619      	mov	r1, r3
 8007fb0:	a309      	add	r3, pc, #36	@ (adr r3, 8007fd8 <can1_ams_s06_voltages_2_s06v10_encode+0x48>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f7f8 fbed 	bl	8000794 <__aeabi_ddiv>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f7f8 fccf 	bl	8000964 <__aeabi_d2uiz>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	b2db      	uxtb	r3, r3
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	fcce1c58 	.word	0xfcce1c58
 8007fdc:	3f800e6a 	.word	0x3f800e6a
 8007fe0:	40040000 	.word	0x40040000

08007fe4 <can1_ams_s07_voltages_1_pack>:

int can1_ams_s07_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s07_voltages_1_t *src_p,
    size_t size)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	d802      	bhi.n	8007ffc <can1_ams_s07_voltages_1_pack+0x18>
        return (-EINVAL);
 8007ff6:	f06f 0315 	mvn.w	r3, #21
 8007ffa:	e069      	b.n	80080d0 <can1_ams_s07_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8007ffc:	2206      	movs	r2, #6
 8007ffe:	2100      	movs	r1, #0
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f002 fcf9 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s07v01, 0u, 0xffu);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	22ff      	movs	r2, #255	@ 0xff
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f7fd fe72 	bl	8005cf8 <pack_left_shift_u8>
 8008014:	4603      	mov	r3, r0
 8008016:	461a      	mov	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	4313      	orrs	r3, r2
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s07v02, 0u, 0xffu);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	785b      	ldrb	r3, [r3, #1]
 8008028:	22ff      	movs	r2, #255	@ 0xff
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f7fd fe63 	bl	8005cf8 <pack_left_shift_u8>
 8008032:	4603      	mov	r3, r0
 8008034:	4619      	mov	r1, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3301      	adds	r3, #1
 800803a:	781a      	ldrb	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	430a      	orrs	r2, r1
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s07v03, 0u, 0xffu);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	789b      	ldrb	r3, [r3, #2]
 800804a:	22ff      	movs	r2, #255	@ 0xff
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f7fd fe52 	bl	8005cf8 <pack_left_shift_u8>
 8008054:	4603      	mov	r3, r0
 8008056:	4619      	mov	r1, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3302      	adds	r3, #2
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3302      	adds	r3, #2
 8008062:	430a      	orrs	r2, r1
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s07v04, 0u, 0xffu);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	78db      	ldrb	r3, [r3, #3]
 800806c:	22ff      	movs	r2, #255	@ 0xff
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd fe41 	bl	8005cf8 <pack_left_shift_u8>
 8008076:	4603      	mov	r3, r0
 8008078:	4619      	mov	r1, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3303      	adds	r3, #3
 800807e:	781a      	ldrb	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3303      	adds	r3, #3
 8008084:	430a      	orrs	r2, r1
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s07v05, 0u, 0xffu);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	791b      	ldrb	r3, [r3, #4]
 800808e:	22ff      	movs	r2, #255	@ 0xff
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f7fd fe30 	bl	8005cf8 <pack_left_shift_u8>
 8008098:	4603      	mov	r3, r0
 800809a:	4619      	mov	r1, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3304      	adds	r3, #4
 80080a0:	781a      	ldrb	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	430a      	orrs	r2, r1
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s07v06, 0u, 0xffu);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	795b      	ldrb	r3, [r3, #5]
 80080b0:	22ff      	movs	r2, #255	@ 0xff
 80080b2:	2100      	movs	r1, #0
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd fe1f 	bl	8005cf8 <pack_left_shift_u8>
 80080ba:	4603      	mov	r3, r0
 80080bc:	4619      	mov	r1, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3305      	adds	r3, #5
 80080c2:	781a      	ldrb	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3305      	adds	r3, #5
 80080c8:	430a      	orrs	r2, r1
 80080ca:	b2d2      	uxtb	r2, r2
 80080cc:	701a      	strb	r2, [r3, #0]

    return (6);
 80080ce:	2306      	movs	r3, #6
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <can1_ams_s07_voltages_1_s07v01_encode>:

    return 0;
}

uint8_t can1_ams_s07_voltages_1_s07v01_encode(double value)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	4b10      	ldr	r3, [pc, #64]	@ (8008128 <can1_ams_s07_voltages_1_s07v01_encode+0x50>)
 80080e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ec:	f7f8 f870 	bl	80001d0 <__aeabi_dsub>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	a309      	add	r3, pc, #36	@ (adr r3, 8008120 <can1_ams_s07_voltages_1_s07v01_encode+0x48>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f7f8 fb49 	bl	8000794 <__aeabi_ddiv>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4610      	mov	r0, r2
 8008108:	4619      	mov	r1, r3
 800810a:	f7f8 fc2b 	bl	8000964 <__aeabi_d2uiz>
 800810e:	4603      	mov	r3, r0
 8008110:	b2db      	uxtb	r3, r3
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w
 8008120:	fcce1c58 	.word	0xfcce1c58
 8008124:	3f800e6a 	.word	0x3f800e6a
 8008128:	40040000 	.word	0x40040000
 800812c:	00000000 	.word	0x00000000

08008130 <can1_ams_s07_voltages_1_s07v02_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v02_encode(double value)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	4b10      	ldr	r3, [pc, #64]	@ (8008180 <can1_ams_s07_voltages_1_s07v02_encode+0x50>)
 8008140:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008144:	f7f8 f844 	bl	80001d0 <__aeabi_dsub>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4610      	mov	r0, r2
 800814e:	4619      	mov	r1, r3
 8008150:	a309      	add	r3, pc, #36	@ (adr r3, 8008178 <can1_ams_s07_voltages_1_s07v02_encode+0x48>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f7f8 fb1d 	bl	8000794 <__aeabi_ddiv>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4610      	mov	r0, r2
 8008160:	4619      	mov	r1, r3
 8008162:	f7f8 fbff 	bl	8000964 <__aeabi_d2uiz>
 8008166:	4603      	mov	r3, r0
 8008168:	b2db      	uxtb	r3, r3
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	f3af 8000 	nop.w
 8008178:	fcce1c58 	.word	0xfcce1c58
 800817c:	3f800e6a 	.word	0x3f800e6a
 8008180:	40040000 	.word	0x40040000
 8008184:	00000000 	.word	0x00000000

08008188 <can1_ams_s07_voltages_1_s07v03_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v03_encode(double value)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	4b10      	ldr	r3, [pc, #64]	@ (80081d8 <can1_ams_s07_voltages_1_s07v03_encode+0x50>)
 8008198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800819c:	f7f8 f818 	bl	80001d0 <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	a309      	add	r3, pc, #36	@ (adr r3, 80081d0 <can1_ams_s07_voltages_1_s07v03_encode+0x48>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 faf1 	bl	8000794 <__aeabi_ddiv>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4610      	mov	r0, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	f7f8 fbd3 	bl	8000964 <__aeabi_d2uiz>
 80081be:	4603      	mov	r3, r0
 80081c0:	b2db      	uxtb	r3, r3
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	f3af 8000 	nop.w
 80081d0:	fcce1c58 	.word	0xfcce1c58
 80081d4:	3f800e6a 	.word	0x3f800e6a
 80081d8:	40040000 	.word	0x40040000
 80081dc:	00000000 	.word	0x00000000

080081e0 <can1_ams_s07_voltages_1_s07v04_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v04_encode(double value)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80081ea:	f04f 0200 	mov.w	r2, #0
 80081ee:	4b10      	ldr	r3, [pc, #64]	@ (8008230 <can1_ams_s07_voltages_1_s07v04_encode+0x50>)
 80081f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081f4:	f7f7 ffec 	bl	80001d0 <__aeabi_dsub>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4610      	mov	r0, r2
 80081fe:	4619      	mov	r1, r3
 8008200:	a309      	add	r3, pc, #36	@ (adr r3, 8008228 <can1_ams_s07_voltages_1_s07v04_encode+0x48>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f7f8 fac5 	bl	8000794 <__aeabi_ddiv>
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	4610      	mov	r0, r2
 8008210:	4619      	mov	r1, r3
 8008212:	f7f8 fba7 	bl	8000964 <__aeabi_d2uiz>
 8008216:	4603      	mov	r3, r0
 8008218:	b2db      	uxtb	r3, r3
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	f3af 8000 	nop.w
 8008228:	fcce1c58 	.word	0xfcce1c58
 800822c:	3f800e6a 	.word	0x3f800e6a
 8008230:	40040000 	.word	0x40040000
 8008234:	00000000 	.word	0x00000000

08008238 <can1_ams_s07_voltages_1_s07v05_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v05_encode(double value)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008242:	f04f 0200 	mov.w	r2, #0
 8008246:	4b10      	ldr	r3, [pc, #64]	@ (8008288 <can1_ams_s07_voltages_1_s07v05_encode+0x50>)
 8008248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800824c:	f7f7 ffc0 	bl	80001d0 <__aeabi_dsub>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4610      	mov	r0, r2
 8008256:	4619      	mov	r1, r3
 8008258:	a309      	add	r3, pc, #36	@ (adr r3, 8008280 <can1_ams_s07_voltages_1_s07v05_encode+0x48>)
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f7f8 fa99 	bl	8000794 <__aeabi_ddiv>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4610      	mov	r0, r2
 8008268:	4619      	mov	r1, r3
 800826a:	f7f8 fb7b 	bl	8000964 <__aeabi_d2uiz>
 800826e:	4603      	mov	r3, r0
 8008270:	b2db      	uxtb	r3, r3
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w
 8008280:	fcce1c58 	.word	0xfcce1c58
 8008284:	3f800e6a 	.word	0x3f800e6a
 8008288:	40040000 	.word	0x40040000
 800828c:	00000000 	.word	0x00000000

08008290 <can1_ams_s07_voltages_1_s07v06_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_1_s07v06_encode(double value)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	4b10      	ldr	r3, [pc, #64]	@ (80082e0 <can1_ams_s07_voltages_1_s07v06_encode+0x50>)
 80082a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082a4:	f7f7 ff94 	bl	80001d0 <__aeabi_dsub>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4610      	mov	r0, r2
 80082ae:	4619      	mov	r1, r3
 80082b0:	a309      	add	r3, pc, #36	@ (adr r3, 80082d8 <can1_ams_s07_voltages_1_s07v06_encode+0x48>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f8 fa6d 	bl	8000794 <__aeabi_ddiv>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4610      	mov	r0, r2
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7f8 fb4f 	bl	8000964 <__aeabi_d2uiz>
 80082c6:	4603      	mov	r3, r0
 80082c8:	b2db      	uxtb	r3, r3
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	f3af 8000 	nop.w
 80082d8:	fcce1c58 	.word	0xfcce1c58
 80082dc:	3f800e6a 	.word	0x3f800e6a
 80082e0:	40040000 	.word	0x40040000

080082e4 <can1_ams_s07_voltages_2_pack>:

int can1_ams_s07_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s07_voltages_2_t *src_p,
    size_t size)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d802      	bhi.n	80082fc <can1_ams_s07_voltages_2_pack+0x18>
        return (-EINVAL);
 80082f6:	f06f 0315 	mvn.w	r3, #21
 80082fa:	e058      	b.n	80083ae <can1_ams_s07_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 80082fc:	2205      	movs	r2, #5
 80082fe:	2100      	movs	r1, #0
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f002 fb79 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s07v07, 0u, 0xffu);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	22ff      	movs	r2, #255	@ 0xff
 800830c:	2100      	movs	r1, #0
 800830e:	4618      	mov	r0, r3
 8008310:	f7fd fcf2 	bl	8005cf8 <pack_left_shift_u8>
 8008314:	4603      	mov	r3, r0
 8008316:	461a      	mov	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	4313      	orrs	r3, r2
 800831e:	b2da      	uxtb	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s07v08, 0u, 0xffu);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	22ff      	movs	r2, #255	@ 0xff
 800832a:	2100      	movs	r1, #0
 800832c:	4618      	mov	r0, r3
 800832e:	f7fd fce3 	bl	8005cf8 <pack_left_shift_u8>
 8008332:	4603      	mov	r3, r0
 8008334:	4619      	mov	r1, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3301      	adds	r3, #1
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	430a      	orrs	r2, r1
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s07v09, 0u, 0xffu);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	789b      	ldrb	r3, [r3, #2]
 800834a:	22ff      	movs	r2, #255	@ 0xff
 800834c:	2100      	movs	r1, #0
 800834e:	4618      	mov	r0, r3
 8008350:	f7fd fcd2 	bl	8005cf8 <pack_left_shift_u8>
 8008354:	4603      	mov	r3, r0
 8008356:	4619      	mov	r1, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3302      	adds	r3, #2
 800835c:	781a      	ldrb	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3302      	adds	r3, #2
 8008362:	430a      	orrs	r2, r1
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s07v10, 0u, 0xffu);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	78db      	ldrb	r3, [r3, #3]
 800836c:	22ff      	movs	r2, #255	@ 0xff
 800836e:	2100      	movs	r1, #0
 8008370:	4618      	mov	r0, r3
 8008372:	f7fd fcc1 	bl	8005cf8 <pack_left_shift_u8>
 8008376:	4603      	mov	r3, r0
 8008378:	4619      	mov	r1, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3303      	adds	r3, #3
 800837e:	781a      	ldrb	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3303      	adds	r3, #3
 8008384:	430a      	orrs	r2, r1
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s07v11, 0u, 0xffu);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	791b      	ldrb	r3, [r3, #4]
 800838e:	22ff      	movs	r2, #255	@ 0xff
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f7fd fcb0 	bl	8005cf8 <pack_left_shift_u8>
 8008398:	4603      	mov	r3, r0
 800839a:	4619      	mov	r1, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3304      	adds	r3, #4
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3304      	adds	r3, #4
 80083a6:	430a      	orrs	r2, r1
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	701a      	strb	r2, [r3, #0]

    return (5);
 80083ac:	2305      	movs	r3, #5
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <can1_ams_s07_voltages_2_s07v07_encode>:

    return 0;
}

uint8_t can1_ams_s07_voltages_2_s07v07_encode(double value)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80083c2:	f04f 0200 	mov.w	r2, #0
 80083c6:	4b10      	ldr	r3, [pc, #64]	@ (8008408 <can1_ams_s07_voltages_2_s07v07_encode+0x50>)
 80083c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083cc:	f7f7 ff00 	bl	80001d0 <__aeabi_dsub>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4610      	mov	r0, r2
 80083d6:	4619      	mov	r1, r3
 80083d8:	a309      	add	r3, pc, #36	@ (adr r3, 8008400 <can1_ams_s07_voltages_2_s07v07_encode+0x48>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f8 f9d9 	bl	8000794 <__aeabi_ddiv>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4610      	mov	r0, r2
 80083e8:	4619      	mov	r1, r3
 80083ea:	f7f8 fabb 	bl	8000964 <__aeabi_d2uiz>
 80083ee:	4603      	mov	r3, r0
 80083f0:	b2db      	uxtb	r3, r3
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	f3af 8000 	nop.w
 8008400:	fcce1c58 	.word	0xfcce1c58
 8008404:	3f800e6a 	.word	0x3f800e6a
 8008408:	40040000 	.word	0x40040000
 800840c:	00000000 	.word	0x00000000

08008410 <can1_ams_s07_voltages_2_s07v08_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v08_encode(double value)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800841a:	f04f 0200 	mov.w	r2, #0
 800841e:	4b10      	ldr	r3, [pc, #64]	@ (8008460 <can1_ams_s07_voltages_2_s07v08_encode+0x50>)
 8008420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008424:	f7f7 fed4 	bl	80001d0 <__aeabi_dsub>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4610      	mov	r0, r2
 800842e:	4619      	mov	r1, r3
 8008430:	a309      	add	r3, pc, #36	@ (adr r3, 8008458 <can1_ams_s07_voltages_2_s07v08_encode+0x48>)
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	f7f8 f9ad 	bl	8000794 <__aeabi_ddiv>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4610      	mov	r0, r2
 8008440:	4619      	mov	r1, r3
 8008442:	f7f8 fa8f 	bl	8000964 <__aeabi_d2uiz>
 8008446:	4603      	mov	r3, r0
 8008448:	b2db      	uxtb	r3, r3
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	f3af 8000 	nop.w
 8008458:	fcce1c58 	.word	0xfcce1c58
 800845c:	3f800e6a 	.word	0x3f800e6a
 8008460:	40040000 	.word	0x40040000
 8008464:	00000000 	.word	0x00000000

08008468 <can1_ams_s07_voltages_2_s07v09_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v09_encode(double value)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008472:	f04f 0200 	mov.w	r2, #0
 8008476:	4b10      	ldr	r3, [pc, #64]	@ (80084b8 <can1_ams_s07_voltages_2_s07v09_encode+0x50>)
 8008478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800847c:	f7f7 fea8 	bl	80001d0 <__aeabi_dsub>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4610      	mov	r0, r2
 8008486:	4619      	mov	r1, r3
 8008488:	a309      	add	r3, pc, #36	@ (adr r3, 80084b0 <can1_ams_s07_voltages_2_s07v09_encode+0x48>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f8 f981 	bl	8000794 <__aeabi_ddiv>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4610      	mov	r0, r2
 8008498:	4619      	mov	r1, r3
 800849a:	f7f8 fa63 	bl	8000964 <__aeabi_d2uiz>
 800849e:	4603      	mov	r3, r0
 80084a0:	b2db      	uxtb	r3, r3
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	f3af 8000 	nop.w
 80084b0:	fcce1c58 	.word	0xfcce1c58
 80084b4:	3f800e6a 	.word	0x3f800e6a
 80084b8:	40040000 	.word	0x40040000
 80084bc:	00000000 	.word	0x00000000

080084c0 <can1_ams_s07_voltages_2_s07v10_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v10_encode(double value)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80084ca:	f04f 0200 	mov.w	r2, #0
 80084ce:	4b10      	ldr	r3, [pc, #64]	@ (8008510 <can1_ams_s07_voltages_2_s07v10_encode+0x50>)
 80084d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084d4:	f7f7 fe7c 	bl	80001d0 <__aeabi_dsub>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4610      	mov	r0, r2
 80084de:	4619      	mov	r1, r3
 80084e0:	a309      	add	r3, pc, #36	@ (adr r3, 8008508 <can1_ams_s07_voltages_2_s07v10_encode+0x48>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f7f8 f955 	bl	8000794 <__aeabi_ddiv>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4610      	mov	r0, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	f7f8 fa37 	bl	8000964 <__aeabi_d2uiz>
 80084f6:	4603      	mov	r3, r0
 80084f8:	b2db      	uxtb	r3, r3
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	f3af 8000 	nop.w
 8008508:	fcce1c58 	.word	0xfcce1c58
 800850c:	3f800e6a 	.word	0x3f800e6a
 8008510:	40040000 	.word	0x40040000
 8008514:	00000000 	.word	0x00000000

08008518 <can1_ams_s07_voltages_2_s07v11_encode>:

    return (true);
}

uint8_t can1_ams_s07_voltages_2_s07v11_encode(double value)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008522:	f04f 0200 	mov.w	r2, #0
 8008526:	4b10      	ldr	r3, [pc, #64]	@ (8008568 <can1_ams_s07_voltages_2_s07v11_encode+0x50>)
 8008528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800852c:	f7f7 fe50 	bl	80001d0 <__aeabi_dsub>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4610      	mov	r0, r2
 8008536:	4619      	mov	r1, r3
 8008538:	a309      	add	r3, pc, #36	@ (adr r3, 8008560 <can1_ams_s07_voltages_2_s07v11_encode+0x48>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	f7f8 f929 	bl	8000794 <__aeabi_ddiv>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4610      	mov	r0, r2
 8008548:	4619      	mov	r1, r3
 800854a:	f7f8 fa0b 	bl	8000964 <__aeabi_d2uiz>
 800854e:	4603      	mov	r3, r0
 8008550:	b2db      	uxtb	r3, r3
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	f3af 8000 	nop.w
 8008560:	fcce1c58 	.word	0xfcce1c58
 8008564:	3f800e6a 	.word	0x3f800e6a
 8008568:	40040000 	.word	0x40040000

0800856c <can1_ams_s08_voltages_1_pack>:

int can1_ams_s08_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s08_voltages_1_t *src_p,
    size_t size)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b05      	cmp	r3, #5
 800857c:	d802      	bhi.n	8008584 <can1_ams_s08_voltages_1_pack+0x18>
        return (-EINVAL);
 800857e:	f06f 0315 	mvn.w	r3, #21
 8008582:	e069      	b.n	8008658 <can1_ams_s08_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8008584:	2206      	movs	r2, #6
 8008586:	2100      	movs	r1, #0
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f002 fa35 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s08v01, 0u, 0xffu);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	22ff      	movs	r2, #255	@ 0xff
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd fbae 	bl	8005cf8 <pack_left_shift_u8>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s08v02, 0u, 0xffu);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	22ff      	movs	r2, #255	@ 0xff
 80085b2:	2100      	movs	r1, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fd fb9f 	bl	8005cf8 <pack_left_shift_u8>
 80085ba:	4603      	mov	r3, r0
 80085bc:	4619      	mov	r1, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3301      	adds	r3, #1
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	3301      	adds	r3, #1
 80085c8:	430a      	orrs	r2, r1
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s08v03, 0u, 0xffu);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	789b      	ldrb	r3, [r3, #2]
 80085d2:	22ff      	movs	r2, #255	@ 0xff
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fd fb8e 	bl	8005cf8 <pack_left_shift_u8>
 80085dc:	4603      	mov	r3, r0
 80085de:	4619      	mov	r1, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3302      	adds	r3, #2
 80085e4:	781a      	ldrb	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3302      	adds	r3, #2
 80085ea:	430a      	orrs	r2, r1
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s08v04, 0u, 0xffu);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	78db      	ldrb	r3, [r3, #3]
 80085f4:	22ff      	movs	r2, #255	@ 0xff
 80085f6:	2100      	movs	r1, #0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fd fb7d 	bl	8005cf8 <pack_left_shift_u8>
 80085fe:	4603      	mov	r3, r0
 8008600:	4619      	mov	r1, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3303      	adds	r3, #3
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3303      	adds	r3, #3
 800860c:	430a      	orrs	r2, r1
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s08v05, 0u, 0xffu);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	791b      	ldrb	r3, [r3, #4]
 8008616:	22ff      	movs	r2, #255	@ 0xff
 8008618:	2100      	movs	r1, #0
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fb6c 	bl	8005cf8 <pack_left_shift_u8>
 8008620:	4603      	mov	r3, r0
 8008622:	4619      	mov	r1, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3304      	adds	r3, #4
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3304      	adds	r3, #4
 800862e:	430a      	orrs	r2, r1
 8008630:	b2d2      	uxtb	r2, r2
 8008632:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s08v06, 0u, 0xffu);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	795b      	ldrb	r3, [r3, #5]
 8008638:	22ff      	movs	r2, #255	@ 0xff
 800863a:	2100      	movs	r1, #0
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fb5b 	bl	8005cf8 <pack_left_shift_u8>
 8008642:	4603      	mov	r3, r0
 8008644:	4619      	mov	r1, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3305      	adds	r3, #5
 800864a:	781a      	ldrb	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3305      	adds	r3, #5
 8008650:	430a      	orrs	r2, r1
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]

    return (6);
 8008656:	2306      	movs	r3, #6
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <can1_ams_s08_voltages_1_s08v01_encode>:

    return 0;
}

uint8_t can1_ams_s08_voltages_1_s08v01_encode(double value)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	4b10      	ldr	r3, [pc, #64]	@ (80086b0 <can1_ams_s08_voltages_1_s08v01_encode+0x50>)
 8008670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008674:	f7f7 fdac 	bl	80001d0 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	a309      	add	r3, pc, #36	@ (adr r3, 80086a8 <can1_ams_s08_voltages_1_s08v01_encode+0x48>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f8 f885 	bl	8000794 <__aeabi_ddiv>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4610      	mov	r0, r2
 8008690:	4619      	mov	r1, r3
 8008692:	f7f8 f967 	bl	8000964 <__aeabi_d2uiz>
 8008696:	4603      	mov	r3, r0
 8008698:	b2db      	uxtb	r3, r3
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	f3af 8000 	nop.w
 80086a8:	fcce1c58 	.word	0xfcce1c58
 80086ac:	3f800e6a 	.word	0x3f800e6a
 80086b0:	40040000 	.word	0x40040000
 80086b4:	00000000 	.word	0x00000000

080086b8 <can1_ams_s08_voltages_1_s08v02_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v02_encode(double value)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80086c2:	f04f 0200 	mov.w	r2, #0
 80086c6:	4b10      	ldr	r3, [pc, #64]	@ (8008708 <can1_ams_s08_voltages_1_s08v02_encode+0x50>)
 80086c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086cc:	f7f7 fd80 	bl	80001d0 <__aeabi_dsub>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4610      	mov	r0, r2
 80086d6:	4619      	mov	r1, r3
 80086d8:	a309      	add	r3, pc, #36	@ (adr r3, 8008700 <can1_ams_s08_voltages_1_s08v02_encode+0x48>)
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	f7f8 f859 	bl	8000794 <__aeabi_ddiv>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4610      	mov	r0, r2
 80086e8:	4619      	mov	r1, r3
 80086ea:	f7f8 f93b 	bl	8000964 <__aeabi_d2uiz>
 80086ee:	4603      	mov	r3, r0
 80086f0:	b2db      	uxtb	r3, r3
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	f3af 8000 	nop.w
 8008700:	fcce1c58 	.word	0xfcce1c58
 8008704:	3f800e6a 	.word	0x3f800e6a
 8008708:	40040000 	.word	0x40040000
 800870c:	00000000 	.word	0x00000000

08008710 <can1_ams_s08_voltages_1_s08v03_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v03_encode(double value)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	4b10      	ldr	r3, [pc, #64]	@ (8008760 <can1_ams_s08_voltages_1_s08v03_encode+0x50>)
 8008720:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008724:	f7f7 fd54 	bl	80001d0 <__aeabi_dsub>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4610      	mov	r0, r2
 800872e:	4619      	mov	r1, r3
 8008730:	a309      	add	r3, pc, #36	@ (adr r3, 8008758 <can1_ams_s08_voltages_1_s08v03_encode+0x48>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f7f8 f82d 	bl	8000794 <__aeabi_ddiv>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4610      	mov	r0, r2
 8008740:	4619      	mov	r1, r3
 8008742:	f7f8 f90f 	bl	8000964 <__aeabi_d2uiz>
 8008746:	4603      	mov	r3, r0
 8008748:	b2db      	uxtb	r3, r3
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	f3af 8000 	nop.w
 8008758:	fcce1c58 	.word	0xfcce1c58
 800875c:	3f800e6a 	.word	0x3f800e6a
 8008760:	40040000 	.word	0x40040000
 8008764:	00000000 	.word	0x00000000

08008768 <can1_ams_s08_voltages_1_s08v04_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v04_encode(double value)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	4b10      	ldr	r3, [pc, #64]	@ (80087b8 <can1_ams_s08_voltages_1_s08v04_encode+0x50>)
 8008778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800877c:	f7f7 fd28 	bl	80001d0 <__aeabi_dsub>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4610      	mov	r0, r2
 8008786:	4619      	mov	r1, r3
 8008788:	a309      	add	r3, pc, #36	@ (adr r3, 80087b0 <can1_ams_s08_voltages_1_s08v04_encode+0x48>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f8 f801 	bl	8000794 <__aeabi_ddiv>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4610      	mov	r0, r2
 8008798:	4619      	mov	r1, r3
 800879a:	f7f8 f8e3 	bl	8000964 <__aeabi_d2uiz>
 800879e:	4603      	mov	r3, r0
 80087a0:	b2db      	uxtb	r3, r3
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w
 80087b0:	fcce1c58 	.word	0xfcce1c58
 80087b4:	3f800e6a 	.word	0x3f800e6a
 80087b8:	40040000 	.word	0x40040000
 80087bc:	00000000 	.word	0x00000000

080087c0 <can1_ams_s08_voltages_1_s08v05_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v05_encode(double value)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80087ca:	f04f 0200 	mov.w	r2, #0
 80087ce:	4b10      	ldr	r3, [pc, #64]	@ (8008810 <can1_ams_s08_voltages_1_s08v05_encode+0x50>)
 80087d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087d4:	f7f7 fcfc 	bl	80001d0 <__aeabi_dsub>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	a309      	add	r3, pc, #36	@ (adr r3, 8008808 <can1_ams_s08_voltages_1_s08v05_encode+0x48>)
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	f7f7 ffd5 	bl	8000794 <__aeabi_ddiv>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4610      	mov	r0, r2
 80087f0:	4619      	mov	r1, r3
 80087f2:	f7f8 f8b7 	bl	8000964 <__aeabi_d2uiz>
 80087f6:	4603      	mov	r3, r0
 80087f8:	b2db      	uxtb	r3, r3
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	f3af 8000 	nop.w
 8008808:	fcce1c58 	.word	0xfcce1c58
 800880c:	3f800e6a 	.word	0x3f800e6a
 8008810:	40040000 	.word	0x40040000
 8008814:	00000000 	.word	0x00000000

08008818 <can1_ams_s08_voltages_1_s08v06_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_1_s08v06_encode(double value)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008822:	f04f 0200 	mov.w	r2, #0
 8008826:	4b10      	ldr	r3, [pc, #64]	@ (8008868 <can1_ams_s08_voltages_1_s08v06_encode+0x50>)
 8008828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800882c:	f7f7 fcd0 	bl	80001d0 <__aeabi_dsub>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4610      	mov	r0, r2
 8008836:	4619      	mov	r1, r3
 8008838:	a309      	add	r3, pc, #36	@ (adr r3, 8008860 <can1_ams_s08_voltages_1_s08v06_encode+0x48>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f7f7 ffa9 	bl	8000794 <__aeabi_ddiv>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4610      	mov	r0, r2
 8008848:	4619      	mov	r1, r3
 800884a:	f7f8 f88b 	bl	8000964 <__aeabi_d2uiz>
 800884e:	4603      	mov	r3, r0
 8008850:	b2db      	uxtb	r3, r3
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	f3af 8000 	nop.w
 8008860:	fcce1c58 	.word	0xfcce1c58
 8008864:	3f800e6a 	.word	0x3f800e6a
 8008868:	40040000 	.word	0x40040000

0800886c <can1_ams_s08_voltages_2_pack>:

int can1_ams_s08_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s08_voltages_2_t *src_p,
    size_t size)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b04      	cmp	r3, #4
 800887c:	d802      	bhi.n	8008884 <can1_ams_s08_voltages_2_pack+0x18>
        return (-EINVAL);
 800887e:	f06f 0315 	mvn.w	r3, #21
 8008882:	e058      	b.n	8008936 <can1_ams_s08_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 8008884:	2205      	movs	r2, #5
 8008886:	2100      	movs	r1, #0
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f002 f8b5 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s08v07, 0u, 0xffu);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	22ff      	movs	r2, #255	@ 0xff
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f7fd fa2e 	bl	8005cf8 <pack_left_shift_u8>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s08v08, 0u, 0xffu);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	22ff      	movs	r2, #255	@ 0xff
 80088b2:	2100      	movs	r1, #0
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fd fa1f 	bl	8005cf8 <pack_left_shift_u8>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4619      	mov	r1, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3301      	adds	r3, #1
 80088c2:	781a      	ldrb	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	430a      	orrs	r2, r1
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s08v09, 0u, 0xffu);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	789b      	ldrb	r3, [r3, #2]
 80088d2:	22ff      	movs	r2, #255	@ 0xff
 80088d4:	2100      	movs	r1, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fd fa0e 	bl	8005cf8 <pack_left_shift_u8>
 80088dc:	4603      	mov	r3, r0
 80088de:	4619      	mov	r1, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3302      	adds	r3, #2
 80088e4:	781a      	ldrb	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3302      	adds	r3, #2
 80088ea:	430a      	orrs	r2, r1
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s08v10, 0u, 0xffu);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	78db      	ldrb	r3, [r3, #3]
 80088f4:	22ff      	movs	r2, #255	@ 0xff
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fd f9fd 	bl	8005cf8 <pack_left_shift_u8>
 80088fe:	4603      	mov	r3, r0
 8008900:	4619      	mov	r1, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3303      	adds	r3, #3
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	3303      	adds	r3, #3
 800890c:	430a      	orrs	r2, r1
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s08v11, 0u, 0xffu);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	791b      	ldrb	r3, [r3, #4]
 8008916:	22ff      	movs	r2, #255	@ 0xff
 8008918:	2100      	movs	r1, #0
 800891a:	4618      	mov	r0, r3
 800891c:	f7fd f9ec 	bl	8005cf8 <pack_left_shift_u8>
 8008920:	4603      	mov	r3, r0
 8008922:	4619      	mov	r1, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3304      	adds	r3, #4
 8008928:	781a      	ldrb	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3304      	adds	r3, #4
 800892e:	430a      	orrs	r2, r1
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	701a      	strb	r2, [r3, #0]

    return (5);
 8008934:	2305      	movs	r3, #5
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <can1_ams_s08_voltages_2_s08v07_encode>:

    return 0;
}

uint8_t can1_ams_s08_voltages_2_s08v07_encode(double value)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	4b10      	ldr	r3, [pc, #64]	@ (8008990 <can1_ams_s08_voltages_2_s08v07_encode+0x50>)
 8008950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008954:	f7f7 fc3c 	bl	80001d0 <__aeabi_dsub>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4610      	mov	r0, r2
 800895e:	4619      	mov	r1, r3
 8008960:	a309      	add	r3, pc, #36	@ (adr r3, 8008988 <can1_ams_s08_voltages_2_s08v07_encode+0x48>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 ff15 	bl	8000794 <__aeabi_ddiv>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	f7f7 fff7 	bl	8000964 <__aeabi_d2uiz>
 8008976:	4603      	mov	r3, r0
 8008978:	b2db      	uxtb	r3, r3
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	f3af 8000 	nop.w
 8008988:	fcce1c58 	.word	0xfcce1c58
 800898c:	3f800e6a 	.word	0x3f800e6a
 8008990:	40040000 	.word	0x40040000
 8008994:	00000000 	.word	0x00000000

08008998 <can1_ams_s08_voltages_2_s08v08_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v08_encode(double value)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	4b10      	ldr	r3, [pc, #64]	@ (80089e8 <can1_ams_s08_voltages_2_s08v08_encode+0x50>)
 80089a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089ac:	f7f7 fc10 	bl	80001d0 <__aeabi_dsub>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4610      	mov	r0, r2
 80089b6:	4619      	mov	r1, r3
 80089b8:	a309      	add	r3, pc, #36	@ (adr r3, 80089e0 <can1_ams_s08_voltages_2_s08v08_encode+0x48>)
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	f7f7 fee9 	bl	8000794 <__aeabi_ddiv>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4610      	mov	r0, r2
 80089c8:	4619      	mov	r1, r3
 80089ca:	f7f7 ffcb 	bl	8000964 <__aeabi_d2uiz>
 80089ce:	4603      	mov	r3, r0
 80089d0:	b2db      	uxtb	r3, r3
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	f3af 8000 	nop.w
 80089e0:	fcce1c58 	.word	0xfcce1c58
 80089e4:	3f800e6a 	.word	0x3f800e6a
 80089e8:	40040000 	.word	0x40040000
 80089ec:	00000000 	.word	0x00000000

080089f0 <can1_ams_s08_voltages_2_s08v09_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v09_encode(double value)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80089fa:	f04f 0200 	mov.w	r2, #0
 80089fe:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <can1_ams_s08_voltages_2_s08v09_encode+0x50>)
 8008a00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a04:	f7f7 fbe4 	bl	80001d0 <__aeabi_dsub>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	a309      	add	r3, pc, #36	@ (adr r3, 8008a38 <can1_ams_s08_voltages_2_s08v09_encode+0x48>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f7f7 febd 	bl	8000794 <__aeabi_ddiv>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4619      	mov	r1, r3
 8008a22:	f7f7 ff9f 	bl	8000964 <__aeabi_d2uiz>
 8008a26:	4603      	mov	r3, r0
 8008a28:	b2db      	uxtb	r3, r3
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	f3af 8000 	nop.w
 8008a38:	fcce1c58 	.word	0xfcce1c58
 8008a3c:	3f800e6a 	.word	0x3f800e6a
 8008a40:	40040000 	.word	0x40040000
 8008a44:	00000000 	.word	0x00000000

08008a48 <can1_ams_s08_voltages_2_s08v10_encode>:

    return (true);
}

uint8_t can1_ams_s08_voltages_2_s08v10_encode(double value)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	4b10      	ldr	r3, [pc, #64]	@ (8008a98 <can1_ams_s08_voltages_2_s08v10_encode+0x50>)
 8008a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a5c:	f7f7 fbb8 	bl	80001d0 <__aeabi_dsub>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4610      	mov	r0, r2
 8008a66:	4619      	mov	r1, r3
 8008a68:	a309      	add	r3, pc, #36	@ (adr r3, 8008a90 <can1_ams_s08_voltages_2_s08v10_encode+0x48>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f7f7 fe91 	bl	8000794 <__aeabi_ddiv>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4610      	mov	r0, r2
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f7f7 ff73 	bl	8000964 <__aeabi_d2uiz>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	b2db      	uxtb	r3, r3
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	f3af 8000 	nop.w
 8008a90:	fcce1c58 	.word	0xfcce1c58
 8008a94:	3f800e6a 	.word	0x3f800e6a
 8008a98:	40040000 	.word	0x40040000

08008a9c <can1_ams_s09_voltages_1_pack>:

int can1_ams_s09_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s09_voltages_1_t *src_p,
    size_t size)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	d802      	bhi.n	8008ab4 <can1_ams_s09_voltages_1_pack+0x18>
        return (-EINVAL);
 8008aae:	f06f 0315 	mvn.w	r3, #21
 8008ab2:	e069      	b.n	8008b88 <can1_ams_s09_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8008ab4:	2206      	movs	r2, #6
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f001 ff9d 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s09v01, 0u, 0xffu);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	22ff      	movs	r2, #255	@ 0xff
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fd f916 	bl	8005cf8 <pack_left_shift_u8>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s09v02, 0u, 0xffu);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	785b      	ldrb	r3, [r3, #1]
 8008ae0:	22ff      	movs	r2, #255	@ 0xff
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fd f907 	bl	8005cf8 <pack_left_shift_u8>
 8008aea:	4603      	mov	r3, r0
 8008aec:	4619      	mov	r1, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3301      	adds	r3, #1
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3301      	adds	r3, #1
 8008af8:	430a      	orrs	r2, r1
 8008afa:	b2d2      	uxtb	r2, r2
 8008afc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s09v03, 0u, 0xffu);
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	789b      	ldrb	r3, [r3, #2]
 8008b02:	22ff      	movs	r2, #255	@ 0xff
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fd f8f6 	bl	8005cf8 <pack_left_shift_u8>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	4619      	mov	r1, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3302      	adds	r3, #2
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3302      	adds	r3, #2
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	b2d2      	uxtb	r2, r2
 8008b1e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s09v04, 0u, 0xffu);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	78db      	ldrb	r3, [r3, #3]
 8008b24:	22ff      	movs	r2, #255	@ 0xff
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fd f8e5 	bl	8005cf8 <pack_left_shift_u8>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	4619      	mov	r1, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3303      	adds	r3, #3
 8008b36:	781a      	ldrb	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3303      	adds	r3, #3
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s09v05, 0u, 0xffu);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	791b      	ldrb	r3, [r3, #4]
 8008b46:	22ff      	movs	r2, #255	@ 0xff
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd f8d4 	bl	8005cf8 <pack_left_shift_u8>
 8008b50:	4603      	mov	r3, r0
 8008b52:	4619      	mov	r1, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3304      	adds	r3, #4
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	b2d2      	uxtb	r2, r2
 8008b62:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s09v06, 0u, 0xffu);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	795b      	ldrb	r3, [r3, #5]
 8008b68:	22ff      	movs	r2, #255	@ 0xff
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fd f8c3 	bl	8005cf8 <pack_left_shift_u8>
 8008b72:	4603      	mov	r3, r0
 8008b74:	4619      	mov	r1, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3305      	adds	r3, #5
 8008b7a:	781a      	ldrb	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3305      	adds	r3, #5
 8008b80:	430a      	orrs	r2, r1
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]

    return (6);
 8008b86:	2306      	movs	r3, #6
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <can1_ams_s09_voltages_1_s09v01_encode>:

    return 0;
}

uint8_t can1_ams_s09_voltages_1_s09v01_encode(double value)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	4b10      	ldr	r3, [pc, #64]	@ (8008be0 <can1_ams_s09_voltages_1_s09v01_encode+0x50>)
 8008ba0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ba4:	f7f7 fb14 	bl	80001d0 <__aeabi_dsub>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4610      	mov	r0, r2
 8008bae:	4619      	mov	r1, r3
 8008bb0:	a309      	add	r3, pc, #36	@ (adr r3, 8008bd8 <can1_ams_s09_voltages_1_s09v01_encode+0x48>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fded 	bl	8000794 <__aeabi_ddiv>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	f7f7 fecf 	bl	8000964 <__aeabi_d2uiz>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	b2db      	uxtb	r3, r3
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	fcce1c58 	.word	0xfcce1c58
 8008bdc:	3f800e6a 	.word	0x3f800e6a
 8008be0:	40040000 	.word	0x40040000
 8008be4:	00000000 	.word	0x00000000

08008be8 <can1_ams_s09_voltages_1_s09v02_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v02_encode(double value)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008bf2:	f04f 0200 	mov.w	r2, #0
 8008bf6:	4b10      	ldr	r3, [pc, #64]	@ (8008c38 <can1_ams_s09_voltages_1_s09v02_encode+0x50>)
 8008bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bfc:	f7f7 fae8 	bl	80001d0 <__aeabi_dsub>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4610      	mov	r0, r2
 8008c06:	4619      	mov	r1, r3
 8008c08:	a309      	add	r3, pc, #36	@ (adr r3, 8008c30 <can1_ams_s09_voltages_1_s09v02_encode+0x48>)
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	f7f7 fdc1 	bl	8000794 <__aeabi_ddiv>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4610      	mov	r0, r2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	f7f7 fea3 	bl	8000964 <__aeabi_d2uiz>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	b2db      	uxtb	r3, r3
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	f3af 8000 	nop.w
 8008c30:	fcce1c58 	.word	0xfcce1c58
 8008c34:	3f800e6a 	.word	0x3f800e6a
 8008c38:	40040000 	.word	0x40040000
 8008c3c:	00000000 	.word	0x00000000

08008c40 <can1_ams_s09_voltages_1_s09v03_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v03_encode(double value)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	4b10      	ldr	r3, [pc, #64]	@ (8008c90 <can1_ams_s09_voltages_1_s09v03_encode+0x50>)
 8008c50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c54:	f7f7 fabc 	bl	80001d0 <__aeabi_dsub>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	4619      	mov	r1, r3
 8008c60:	a309      	add	r3, pc, #36	@ (adr r3, 8008c88 <can1_ams_s09_voltages_1_s09v03_encode+0x48>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fd95 	bl	8000794 <__aeabi_ddiv>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4619      	mov	r1, r3
 8008c72:	f7f7 fe77 	bl	8000964 <__aeabi_d2uiz>
 8008c76:	4603      	mov	r3, r0
 8008c78:	b2db      	uxtb	r3, r3
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	f3af 8000 	nop.w
 8008c88:	fcce1c58 	.word	0xfcce1c58
 8008c8c:	3f800e6a 	.word	0x3f800e6a
 8008c90:	40040000 	.word	0x40040000
 8008c94:	00000000 	.word	0x00000000

08008c98 <can1_ams_s09_voltages_1_s09v04_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v04_encode(double value)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	4b10      	ldr	r3, [pc, #64]	@ (8008ce8 <can1_ams_s09_voltages_1_s09v04_encode+0x50>)
 8008ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cac:	f7f7 fa90 	bl	80001d0 <__aeabi_dsub>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	a309      	add	r3, pc, #36	@ (adr r3, 8008ce0 <can1_ams_s09_voltages_1_s09v04_encode+0x48>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fd69 	bl	8000794 <__aeabi_ddiv>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f7f7 fe4b 	bl	8000964 <__aeabi_d2uiz>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	b2db      	uxtb	r3, r3
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	fcce1c58 	.word	0xfcce1c58
 8008ce4:	3f800e6a 	.word	0x3f800e6a
 8008ce8:	40040000 	.word	0x40040000
 8008cec:	00000000 	.word	0x00000000

08008cf0 <can1_ams_s09_voltages_1_s09v05_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v05_encode(double value)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008cfa:	f04f 0200 	mov.w	r2, #0
 8008cfe:	4b10      	ldr	r3, [pc, #64]	@ (8008d40 <can1_ams_s09_voltages_1_s09v05_encode+0x50>)
 8008d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d04:	f7f7 fa64 	bl	80001d0 <__aeabi_dsub>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4619      	mov	r1, r3
 8008d10:	a309      	add	r3, pc, #36	@ (adr r3, 8008d38 <can1_ams_s09_voltages_1_s09v05_encode+0x48>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fd3d 	bl	8000794 <__aeabi_ddiv>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4619      	mov	r1, r3
 8008d22:	f7f7 fe1f 	bl	8000964 <__aeabi_d2uiz>
 8008d26:	4603      	mov	r3, r0
 8008d28:	b2db      	uxtb	r3, r3
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	f3af 8000 	nop.w
 8008d38:	fcce1c58 	.word	0xfcce1c58
 8008d3c:	3f800e6a 	.word	0x3f800e6a
 8008d40:	40040000 	.word	0x40040000
 8008d44:	00000000 	.word	0x00000000

08008d48 <can1_ams_s09_voltages_1_s09v06_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_1_s09v06_encode(double value)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008d52:	f04f 0200 	mov.w	r2, #0
 8008d56:	4b10      	ldr	r3, [pc, #64]	@ (8008d98 <can1_ams_s09_voltages_1_s09v06_encode+0x50>)
 8008d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d5c:	f7f7 fa38 	bl	80001d0 <__aeabi_dsub>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	a309      	add	r3, pc, #36	@ (adr r3, 8008d90 <can1_ams_s09_voltages_1_s09v06_encode+0x48>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	f7f7 fd11 	bl	8000794 <__aeabi_ddiv>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4610      	mov	r0, r2
 8008d78:	4619      	mov	r1, r3
 8008d7a:	f7f7 fdf3 	bl	8000964 <__aeabi_d2uiz>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	b2db      	uxtb	r3, r3
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	f3af 8000 	nop.w
 8008d90:	fcce1c58 	.word	0xfcce1c58
 8008d94:	3f800e6a 	.word	0x3f800e6a
 8008d98:	40040000 	.word	0x40040000

08008d9c <can1_ams_s09_voltages_2_pack>:

int can1_ams_s09_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s09_voltages_2_t *src_p,
    size_t size)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d802      	bhi.n	8008db4 <can1_ams_s09_voltages_2_pack+0x18>
        return (-EINVAL);
 8008dae:	f06f 0315 	mvn.w	r3, #21
 8008db2:	e058      	b.n	8008e66 <can1_ams_s09_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 8008db4:	2205      	movs	r2, #5
 8008db6:	2100      	movs	r1, #0
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f001 fe1d 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s09v07, 0u, 0xffu);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	22ff      	movs	r2, #255	@ 0xff
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fc ff96 	bl	8005cf8 <pack_left_shift_u8>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s09v08, 0u, 0xffu);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	785b      	ldrb	r3, [r3, #1]
 8008de0:	22ff      	movs	r2, #255	@ 0xff
 8008de2:	2100      	movs	r1, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fc ff87 	bl	8005cf8 <pack_left_shift_u8>
 8008dea:	4603      	mov	r3, r0
 8008dec:	4619      	mov	r1, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	781a      	ldrb	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s09v09, 0u, 0xffu);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	789b      	ldrb	r3, [r3, #2]
 8008e02:	22ff      	movs	r2, #255	@ 0xff
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fc ff76 	bl	8005cf8 <pack_left_shift_u8>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	4619      	mov	r1, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3302      	adds	r3, #2
 8008e14:	781a      	ldrb	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3302      	adds	r3, #2
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s09v10, 0u, 0xffu);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	22ff      	movs	r2, #255	@ 0xff
 8008e26:	2100      	movs	r1, #0
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fc ff65 	bl	8005cf8 <pack_left_shift_u8>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4619      	mov	r1, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3303      	adds	r3, #3
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3303      	adds	r3, #3
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s09v11, 0u, 0xffu);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	791b      	ldrb	r3, [r3, #4]
 8008e46:	22ff      	movs	r2, #255	@ 0xff
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fc ff54 	bl	8005cf8 <pack_left_shift_u8>
 8008e50:	4603      	mov	r3, r0
 8008e52:	4619      	mov	r1, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3304      	adds	r3, #4
 8008e58:	781a      	ldrb	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	b2d2      	uxtb	r2, r2
 8008e62:	701a      	strb	r2, [r3, #0]

    return (5);
 8008e64:	2305      	movs	r3, #5
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <can1_ams_s09_voltages_2_s09v07_encode>:

    return 0;
}

uint8_t can1_ams_s09_voltages_2_s09v07_encode(double value)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	4b10      	ldr	r3, [pc, #64]	@ (8008ec0 <can1_ams_s09_voltages_2_s09v07_encode+0x50>)
 8008e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e84:	f7f7 f9a4 	bl	80001d0 <__aeabi_dsub>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	a309      	add	r3, pc, #36	@ (adr r3, 8008eb8 <can1_ams_s09_voltages_2_s09v07_encode+0x48>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fc7d 	bl	8000794 <__aeabi_ddiv>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f7f7 fd5f 	bl	8000964 <__aeabi_d2uiz>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	b2db      	uxtb	r3, r3
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	f3af 8000 	nop.w
 8008eb8:	fcce1c58 	.word	0xfcce1c58
 8008ebc:	3f800e6a 	.word	0x3f800e6a
 8008ec0:	40040000 	.word	0x40040000
 8008ec4:	00000000 	.word	0x00000000

08008ec8 <can1_ams_s09_voltages_2_s09v08_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v08_encode(double value)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	4b10      	ldr	r3, [pc, #64]	@ (8008f18 <can1_ams_s09_voltages_2_s09v08_encode+0x50>)
 8008ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008edc:	f7f7 f978 	bl	80001d0 <__aeabi_dsub>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	a309      	add	r3, pc, #36	@ (adr r3, 8008f10 <can1_ams_s09_voltages_2_s09v08_encode+0x48>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 fc51 	bl	8000794 <__aeabi_ddiv>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f7f7 fd33 	bl	8000964 <__aeabi_d2uiz>
 8008efe:	4603      	mov	r3, r0
 8008f00:	b2db      	uxtb	r3, r3
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	f3af 8000 	nop.w
 8008f10:	fcce1c58 	.word	0xfcce1c58
 8008f14:	3f800e6a 	.word	0x3f800e6a
 8008f18:	40040000 	.word	0x40040000
 8008f1c:	00000000 	.word	0x00000000

08008f20 <can1_ams_s09_voltages_2_s09v09_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v09_encode(double value)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008f2a:	f04f 0200 	mov.w	r2, #0
 8008f2e:	4b10      	ldr	r3, [pc, #64]	@ (8008f70 <can1_ams_s09_voltages_2_s09v09_encode+0x50>)
 8008f30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f34:	f7f7 f94c 	bl	80001d0 <__aeabi_dsub>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4619      	mov	r1, r3
 8008f40:	a309      	add	r3, pc, #36	@ (adr r3, 8008f68 <can1_ams_s09_voltages_2_s09v09_encode+0x48>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f7f7 fc25 	bl	8000794 <__aeabi_ddiv>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4619      	mov	r1, r3
 8008f52:	f7f7 fd07 	bl	8000964 <__aeabi_d2uiz>
 8008f56:	4603      	mov	r3, r0
 8008f58:	b2db      	uxtb	r3, r3
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	f3af 8000 	nop.w
 8008f68:	fcce1c58 	.word	0xfcce1c58
 8008f6c:	3f800e6a 	.word	0x3f800e6a
 8008f70:	40040000 	.word	0x40040000
 8008f74:	00000000 	.word	0x00000000

08008f78 <can1_ams_s09_voltages_2_s09v10_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v10_encode(double value)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008f82:	f04f 0200 	mov.w	r2, #0
 8008f86:	4b10      	ldr	r3, [pc, #64]	@ (8008fc8 <can1_ams_s09_voltages_2_s09v10_encode+0x50>)
 8008f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f8c:	f7f7 f920 	bl	80001d0 <__aeabi_dsub>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4610      	mov	r0, r2
 8008f96:	4619      	mov	r1, r3
 8008f98:	a309      	add	r3, pc, #36	@ (adr r3, 8008fc0 <can1_ams_s09_voltages_2_s09v10_encode+0x48>)
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f7f7 fbf9 	bl	8000794 <__aeabi_ddiv>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	4619      	mov	r1, r3
 8008faa:	f7f7 fcdb 	bl	8000964 <__aeabi_d2uiz>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	b2db      	uxtb	r3, r3
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	f3af 8000 	nop.w
 8008fc0:	fcce1c58 	.word	0xfcce1c58
 8008fc4:	3f800e6a 	.word	0x3f800e6a
 8008fc8:	40040000 	.word	0x40040000
 8008fcc:	00000000 	.word	0x00000000

08008fd0 <can1_ams_s09_voltages_2_s09v11_encode>:

    return (true);
}

uint8_t can1_ams_s09_voltages_2_s09v11_encode(double value)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008fda:	f04f 0200 	mov.w	r2, #0
 8008fde:	4b10      	ldr	r3, [pc, #64]	@ (8009020 <can1_ams_s09_voltages_2_s09v11_encode+0x50>)
 8008fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fe4:	f7f7 f8f4 	bl	80001d0 <__aeabi_dsub>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4610      	mov	r0, r2
 8008fee:	4619      	mov	r1, r3
 8008ff0:	a309      	add	r3, pc, #36	@ (adr r3, 8009018 <can1_ams_s09_voltages_2_s09v11_encode+0x48>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 fbcd 	bl	8000794 <__aeabi_ddiv>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4610      	mov	r0, r2
 8009000:	4619      	mov	r1, r3
 8009002:	f7f7 fcaf 	bl	8000964 <__aeabi_d2uiz>
 8009006:	4603      	mov	r3, r0
 8009008:	b2db      	uxtb	r3, r3
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	f3af 8000 	nop.w
 8009018:	fcce1c58 	.word	0xfcce1c58
 800901c:	3f800e6a 	.word	0x3f800e6a
 8009020:	40040000 	.word	0x40040000

08009024 <can1_ams_s10_voltages_1_pack>:

int can1_ams_s10_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s10_voltages_1_t *src_p,
    size_t size)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b05      	cmp	r3, #5
 8009034:	d802      	bhi.n	800903c <can1_ams_s10_voltages_1_pack+0x18>
        return (-EINVAL);
 8009036:	f06f 0315 	mvn.w	r3, #21
 800903a:	e069      	b.n	8009110 <can1_ams_s10_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800903c:	2206      	movs	r2, #6
 800903e:	2100      	movs	r1, #0
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f001 fcd9 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s10v01, 0u, 0xffu);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	22ff      	movs	r2, #255	@ 0xff
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f7fc fe52 	bl	8005cf8 <pack_left_shift_u8>
 8009054:	4603      	mov	r3, r0
 8009056:	461a      	mov	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	4313      	orrs	r3, r2
 800905e:	b2da      	uxtb	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s10v02, 0u, 0xffu);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	785b      	ldrb	r3, [r3, #1]
 8009068:	22ff      	movs	r2, #255	@ 0xff
 800906a:	2100      	movs	r1, #0
 800906c:	4618      	mov	r0, r3
 800906e:	f7fc fe43 	bl	8005cf8 <pack_left_shift_u8>
 8009072:	4603      	mov	r3, r0
 8009074:	4619      	mov	r1, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3301      	adds	r3, #1
 800907a:	781a      	ldrb	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3301      	adds	r3, #1
 8009080:	430a      	orrs	r2, r1
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s10v03, 0u, 0xffu);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	789b      	ldrb	r3, [r3, #2]
 800908a:	22ff      	movs	r2, #255	@ 0xff
 800908c:	2100      	movs	r1, #0
 800908e:	4618      	mov	r0, r3
 8009090:	f7fc fe32 	bl	8005cf8 <pack_left_shift_u8>
 8009094:	4603      	mov	r3, r0
 8009096:	4619      	mov	r1, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3302      	adds	r3, #2
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3302      	adds	r3, #2
 80090a2:	430a      	orrs	r2, r1
 80090a4:	b2d2      	uxtb	r2, r2
 80090a6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s10v04, 0u, 0xffu);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	78db      	ldrb	r3, [r3, #3]
 80090ac:	22ff      	movs	r2, #255	@ 0xff
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fc fe21 	bl	8005cf8 <pack_left_shift_u8>
 80090b6:	4603      	mov	r3, r0
 80090b8:	4619      	mov	r1, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3303      	adds	r3, #3
 80090be:	781a      	ldrb	r2, [r3, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3303      	adds	r3, #3
 80090c4:	430a      	orrs	r2, r1
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s10v05, 0u, 0xffu);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	791b      	ldrb	r3, [r3, #4]
 80090ce:	22ff      	movs	r2, #255	@ 0xff
 80090d0:	2100      	movs	r1, #0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fc fe10 	bl	8005cf8 <pack_left_shift_u8>
 80090d8:	4603      	mov	r3, r0
 80090da:	4619      	mov	r1, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3304      	adds	r3, #4
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3304      	adds	r3, #4
 80090e6:	430a      	orrs	r2, r1
 80090e8:	b2d2      	uxtb	r2, r2
 80090ea:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s10v06, 0u, 0xffu);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	795b      	ldrb	r3, [r3, #5]
 80090f0:	22ff      	movs	r2, #255	@ 0xff
 80090f2:	2100      	movs	r1, #0
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fc fdff 	bl	8005cf8 <pack_left_shift_u8>
 80090fa:	4603      	mov	r3, r0
 80090fc:	4619      	mov	r1, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3305      	adds	r3, #5
 8009102:	781a      	ldrb	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3305      	adds	r3, #5
 8009108:	430a      	orrs	r2, r1
 800910a:	b2d2      	uxtb	r2, r2
 800910c:	701a      	strb	r2, [r3, #0]

    return (6);
 800910e:	2306      	movs	r3, #6
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <can1_ams_s10_voltages_1_s10v01_encode>:

    return 0;
}

uint8_t can1_ams_s10_voltages_1_s10v01_encode(double value)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009122:	f04f 0200 	mov.w	r2, #0
 8009126:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <can1_ams_s10_voltages_1_s10v01_encode+0x50>)
 8009128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800912c:	f7f7 f850 	bl	80001d0 <__aeabi_dsub>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4610      	mov	r0, r2
 8009136:	4619      	mov	r1, r3
 8009138:	a309      	add	r3, pc, #36	@ (adr r3, 8009160 <can1_ams_s10_voltages_1_s10v01_encode+0x48>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 fb29 	bl	8000794 <__aeabi_ddiv>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4610      	mov	r0, r2
 8009148:	4619      	mov	r1, r3
 800914a:	f7f7 fc0b 	bl	8000964 <__aeabi_d2uiz>
 800914e:	4603      	mov	r3, r0
 8009150:	b2db      	uxtb	r3, r3
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	f3af 8000 	nop.w
 8009160:	fcce1c58 	.word	0xfcce1c58
 8009164:	3f800e6a 	.word	0x3f800e6a
 8009168:	40040000 	.word	0x40040000
 800916c:	00000000 	.word	0x00000000

08009170 <can1_ams_s10_voltages_1_s10v02_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v02_encode(double value)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	4b10      	ldr	r3, [pc, #64]	@ (80091c0 <can1_ams_s10_voltages_1_s10v02_encode+0x50>)
 8009180:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009184:	f7f7 f824 	bl	80001d0 <__aeabi_dsub>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4610      	mov	r0, r2
 800918e:	4619      	mov	r1, r3
 8009190:	a309      	add	r3, pc, #36	@ (adr r3, 80091b8 <can1_ams_s10_voltages_1_s10v02_encode+0x48>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	f7f7 fafd 	bl	8000794 <__aeabi_ddiv>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4610      	mov	r0, r2
 80091a0:	4619      	mov	r1, r3
 80091a2:	f7f7 fbdf 	bl	8000964 <__aeabi_d2uiz>
 80091a6:	4603      	mov	r3, r0
 80091a8:	b2db      	uxtb	r3, r3
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	f3af 8000 	nop.w
 80091b8:	fcce1c58 	.word	0xfcce1c58
 80091bc:	3f800e6a 	.word	0x3f800e6a
 80091c0:	40040000 	.word	0x40040000
 80091c4:	00000000 	.word	0x00000000

080091c8 <can1_ams_s10_voltages_1_s10v03_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v03_encode(double value)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80091d2:	f04f 0200 	mov.w	r2, #0
 80091d6:	4b10      	ldr	r3, [pc, #64]	@ (8009218 <can1_ams_s10_voltages_1_s10v03_encode+0x50>)
 80091d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091dc:	f7f6 fff8 	bl	80001d0 <__aeabi_dsub>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4610      	mov	r0, r2
 80091e6:	4619      	mov	r1, r3
 80091e8:	a309      	add	r3, pc, #36	@ (adr r3, 8009210 <can1_ams_s10_voltages_1_s10v03_encode+0x48>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f7 fad1 	bl	8000794 <__aeabi_ddiv>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4610      	mov	r0, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	f7f7 fbb3 	bl	8000964 <__aeabi_d2uiz>
 80091fe:	4603      	mov	r3, r0
 8009200:	b2db      	uxtb	r3, r3
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	f3af 8000 	nop.w
 8009210:	fcce1c58 	.word	0xfcce1c58
 8009214:	3f800e6a 	.word	0x3f800e6a
 8009218:	40040000 	.word	0x40040000
 800921c:	00000000 	.word	0x00000000

08009220 <can1_ams_s10_voltages_1_s10v04_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v04_encode(double value)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800922a:	f04f 0200 	mov.w	r2, #0
 800922e:	4b10      	ldr	r3, [pc, #64]	@ (8009270 <can1_ams_s10_voltages_1_s10v04_encode+0x50>)
 8009230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009234:	f7f6 ffcc 	bl	80001d0 <__aeabi_dsub>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4610      	mov	r0, r2
 800923e:	4619      	mov	r1, r3
 8009240:	a309      	add	r3, pc, #36	@ (adr r3, 8009268 <can1_ams_s10_voltages_1_s10v04_encode+0x48>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7f7 faa5 	bl	8000794 <__aeabi_ddiv>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4610      	mov	r0, r2
 8009250:	4619      	mov	r1, r3
 8009252:	f7f7 fb87 	bl	8000964 <__aeabi_d2uiz>
 8009256:	4603      	mov	r3, r0
 8009258:	b2db      	uxtb	r3, r3
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	f3af 8000 	nop.w
 8009268:	fcce1c58 	.word	0xfcce1c58
 800926c:	3f800e6a 	.word	0x3f800e6a
 8009270:	40040000 	.word	0x40040000
 8009274:	00000000 	.word	0x00000000

08009278 <can1_ams_s10_voltages_1_s10v05_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v05_encode(double value)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009282:	f04f 0200 	mov.w	r2, #0
 8009286:	4b10      	ldr	r3, [pc, #64]	@ (80092c8 <can1_ams_s10_voltages_1_s10v05_encode+0x50>)
 8009288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800928c:	f7f6 ffa0 	bl	80001d0 <__aeabi_dsub>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4610      	mov	r0, r2
 8009296:	4619      	mov	r1, r3
 8009298:	a309      	add	r3, pc, #36	@ (adr r3, 80092c0 <can1_ams_s10_voltages_1_s10v05_encode+0x48>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f7 fa79 	bl	8000794 <__aeabi_ddiv>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4610      	mov	r0, r2
 80092a8:	4619      	mov	r1, r3
 80092aa:	f7f7 fb5b 	bl	8000964 <__aeabi_d2uiz>
 80092ae:	4603      	mov	r3, r0
 80092b0:	b2db      	uxtb	r3, r3
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	f3af 8000 	nop.w
 80092c0:	fcce1c58 	.word	0xfcce1c58
 80092c4:	3f800e6a 	.word	0x3f800e6a
 80092c8:	40040000 	.word	0x40040000
 80092cc:	00000000 	.word	0x00000000

080092d0 <can1_ams_s10_voltages_1_s10v06_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_1_s10v06_encode(double value)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	4b10      	ldr	r3, [pc, #64]	@ (8009320 <can1_ams_s10_voltages_1_s10v06_encode+0x50>)
 80092e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092e4:	f7f6 ff74 	bl	80001d0 <__aeabi_dsub>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4610      	mov	r0, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	a309      	add	r3, pc, #36	@ (adr r3, 8009318 <can1_ams_s10_voltages_1_s10v06_encode+0x48>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f7f7 fa4d 	bl	8000794 <__aeabi_ddiv>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	4610      	mov	r0, r2
 8009300:	4619      	mov	r1, r3
 8009302:	f7f7 fb2f 	bl	8000964 <__aeabi_d2uiz>
 8009306:	4603      	mov	r3, r0
 8009308:	b2db      	uxtb	r3, r3
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	f3af 8000 	nop.w
 8009318:	fcce1c58 	.word	0xfcce1c58
 800931c:	3f800e6a 	.word	0x3f800e6a
 8009320:	40040000 	.word	0x40040000

08009324 <can1_ams_s10_voltages_2_pack>:

int can1_ams_s10_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s10_voltages_2_t *src_p,
    size_t size)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b04      	cmp	r3, #4
 8009334:	d802      	bhi.n	800933c <can1_ams_s10_voltages_2_pack+0x18>
        return (-EINVAL);
 8009336:	f06f 0315 	mvn.w	r3, #21
 800933a:	e058      	b.n	80093ee <can1_ams_s10_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800933c:	2205      	movs	r2, #5
 800933e:	2100      	movs	r1, #0
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f001 fb59 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s10v07, 0u, 0xffu);
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	22ff      	movs	r2, #255	@ 0xff
 800934c:	2100      	movs	r1, #0
 800934e:	4618      	mov	r0, r3
 8009350:	f7fc fcd2 	bl	8005cf8 <pack_left_shift_u8>
 8009354:	4603      	mov	r3, r0
 8009356:	461a      	mov	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	4313      	orrs	r3, r2
 800935e:	b2da      	uxtb	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s10v08, 0u, 0xffu);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	22ff      	movs	r2, #255	@ 0xff
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f7fc fcc3 	bl	8005cf8 <pack_left_shift_u8>
 8009372:	4603      	mov	r3, r0
 8009374:	4619      	mov	r1, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	781a      	ldrb	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	430a      	orrs	r2, r1
 8009382:	b2d2      	uxtb	r2, r2
 8009384:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s10v09, 0u, 0xffu);
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	789b      	ldrb	r3, [r3, #2]
 800938a:	22ff      	movs	r2, #255	@ 0xff
 800938c:	2100      	movs	r1, #0
 800938e:	4618      	mov	r0, r3
 8009390:	f7fc fcb2 	bl	8005cf8 <pack_left_shift_u8>
 8009394:	4603      	mov	r3, r0
 8009396:	4619      	mov	r1, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3302      	adds	r3, #2
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3302      	adds	r3, #2
 80093a2:	430a      	orrs	r2, r1
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s10v10, 0u, 0xffu);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	78db      	ldrb	r3, [r3, #3]
 80093ac:	22ff      	movs	r2, #255	@ 0xff
 80093ae:	2100      	movs	r1, #0
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fc fca1 	bl	8005cf8 <pack_left_shift_u8>
 80093b6:	4603      	mov	r3, r0
 80093b8:	4619      	mov	r1, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3303      	adds	r3, #3
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3303      	adds	r3, #3
 80093c4:	430a      	orrs	r2, r1
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s10v11, 0u, 0xffu);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	791b      	ldrb	r3, [r3, #4]
 80093ce:	22ff      	movs	r2, #255	@ 0xff
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fc fc90 	bl	8005cf8 <pack_left_shift_u8>
 80093d8:	4603      	mov	r3, r0
 80093da:	4619      	mov	r1, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3304      	adds	r3, #4
 80093e0:	781a      	ldrb	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3304      	adds	r3, #4
 80093e6:	430a      	orrs	r2, r1
 80093e8:	b2d2      	uxtb	r2, r2
 80093ea:	701a      	strb	r2, [r3, #0]

    return (5);
 80093ec:	2305      	movs	r3, #5
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <can1_ams_s10_voltages_2_s10v07_encode>:

    return 0;
}

uint8_t can1_ams_s10_voltages_2_s10v07_encode(double value)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	4b10      	ldr	r3, [pc, #64]	@ (8009448 <can1_ams_s10_voltages_2_s10v07_encode+0x50>)
 8009408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800940c:	f7f6 fee0 	bl	80001d0 <__aeabi_dsub>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4610      	mov	r0, r2
 8009416:	4619      	mov	r1, r3
 8009418:	a309      	add	r3, pc, #36	@ (adr r3, 8009440 <can1_ams_s10_voltages_2_s10v07_encode+0x48>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f7 f9b9 	bl	8000794 <__aeabi_ddiv>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4610      	mov	r0, r2
 8009428:	4619      	mov	r1, r3
 800942a:	f7f7 fa9b 	bl	8000964 <__aeabi_d2uiz>
 800942e:	4603      	mov	r3, r0
 8009430:	b2db      	uxtb	r3, r3
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	f3af 8000 	nop.w
 8009440:	fcce1c58 	.word	0xfcce1c58
 8009444:	3f800e6a 	.word	0x3f800e6a
 8009448:	40040000 	.word	0x40040000
 800944c:	00000000 	.word	0x00000000

08009450 <can1_ams_s10_voltages_2_s10v08_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v08_encode(double value)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	4b10      	ldr	r3, [pc, #64]	@ (80094a0 <can1_ams_s10_voltages_2_s10v08_encode+0x50>)
 8009460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009464:	f7f6 feb4 	bl	80001d0 <__aeabi_dsub>
 8009468:	4602      	mov	r2, r0
 800946a:	460b      	mov	r3, r1
 800946c:	4610      	mov	r0, r2
 800946e:	4619      	mov	r1, r3
 8009470:	a309      	add	r3, pc, #36	@ (adr r3, 8009498 <can1_ams_s10_voltages_2_s10v08_encode+0x48>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 f98d 	bl	8000794 <__aeabi_ddiv>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4610      	mov	r0, r2
 8009480:	4619      	mov	r1, r3
 8009482:	f7f7 fa6f 	bl	8000964 <__aeabi_d2uiz>
 8009486:	4603      	mov	r3, r0
 8009488:	b2db      	uxtb	r3, r3
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	f3af 8000 	nop.w
 8009498:	fcce1c58 	.word	0xfcce1c58
 800949c:	3f800e6a 	.word	0x3f800e6a
 80094a0:	40040000 	.word	0x40040000
 80094a4:	00000000 	.word	0x00000000

080094a8 <can1_ams_s10_voltages_2_s10v09_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v09_encode(double value)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	4b10      	ldr	r3, [pc, #64]	@ (80094f8 <can1_ams_s10_voltages_2_s10v09_encode+0x50>)
 80094b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094bc:	f7f6 fe88 	bl	80001d0 <__aeabi_dsub>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4610      	mov	r0, r2
 80094c6:	4619      	mov	r1, r3
 80094c8:	a309      	add	r3, pc, #36	@ (adr r3, 80094f0 <can1_ams_s10_voltages_2_s10v09_encode+0x48>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	f7f7 f961 	bl	8000794 <__aeabi_ddiv>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4610      	mov	r0, r2
 80094d8:	4619      	mov	r1, r3
 80094da:	f7f7 fa43 	bl	8000964 <__aeabi_d2uiz>
 80094de:	4603      	mov	r3, r0
 80094e0:	b2db      	uxtb	r3, r3
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	f3af 8000 	nop.w
 80094f0:	fcce1c58 	.word	0xfcce1c58
 80094f4:	3f800e6a 	.word	0x3f800e6a
 80094f8:	40040000 	.word	0x40040000
 80094fc:	00000000 	.word	0x00000000

08009500 <can1_ams_s10_voltages_2_s10v10_encode>:

    return (true);
}

uint8_t can1_ams_s10_voltages_2_s10v10_encode(double value)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800950a:	f04f 0200 	mov.w	r2, #0
 800950e:	4b10      	ldr	r3, [pc, #64]	@ (8009550 <can1_ams_s10_voltages_2_s10v10_encode+0x50>)
 8009510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009514:	f7f6 fe5c 	bl	80001d0 <__aeabi_dsub>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4610      	mov	r0, r2
 800951e:	4619      	mov	r1, r3
 8009520:	a309      	add	r3, pc, #36	@ (adr r3, 8009548 <can1_ams_s10_voltages_2_s10v10_encode+0x48>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f7 f935 	bl	8000794 <__aeabi_ddiv>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4610      	mov	r0, r2
 8009530:	4619      	mov	r1, r3
 8009532:	f7f7 fa17 	bl	8000964 <__aeabi_d2uiz>
 8009536:	4603      	mov	r3, r0
 8009538:	b2db      	uxtb	r3, r3
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	f3af 8000 	nop.w
 8009548:	fcce1c58 	.word	0xfcce1c58
 800954c:	3f800e6a 	.word	0x3f800e6a
 8009550:	40040000 	.word	0x40040000

08009554 <can1_ams_s11_voltages_1_pack>:

int can1_ams_s11_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s11_voltages_1_t *src_p,
    size_t size)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b05      	cmp	r3, #5
 8009564:	d802      	bhi.n	800956c <can1_ams_s11_voltages_1_pack+0x18>
        return (-EINVAL);
 8009566:	f06f 0315 	mvn.w	r3, #21
 800956a:	e069      	b.n	8009640 <can1_ams_s11_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 800956c:	2206      	movs	r2, #6
 800956e:	2100      	movs	r1, #0
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f001 fa41 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s11v01, 0u, 0xffu);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	22ff      	movs	r2, #255	@ 0xff
 800957c:	2100      	movs	r1, #0
 800957e:	4618      	mov	r0, r3
 8009580:	f7fc fbba 	bl	8005cf8 <pack_left_shift_u8>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	4313      	orrs	r3, r2
 800958e:	b2da      	uxtb	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s11v02, 0u, 0xffu);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	785b      	ldrb	r3, [r3, #1]
 8009598:	22ff      	movs	r2, #255	@ 0xff
 800959a:	2100      	movs	r1, #0
 800959c:	4618      	mov	r0, r3
 800959e:	f7fc fbab 	bl	8005cf8 <pack_left_shift_u8>
 80095a2:	4603      	mov	r3, r0
 80095a4:	4619      	mov	r1, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	781a      	ldrb	r2, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3301      	adds	r3, #1
 80095b0:	430a      	orrs	r2, r1
 80095b2:	b2d2      	uxtb	r2, r2
 80095b4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s11v03, 0u, 0xffu);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	789b      	ldrb	r3, [r3, #2]
 80095ba:	22ff      	movs	r2, #255	@ 0xff
 80095bc:	2100      	movs	r1, #0
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fc fb9a 	bl	8005cf8 <pack_left_shift_u8>
 80095c4:	4603      	mov	r3, r0
 80095c6:	4619      	mov	r1, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3302      	adds	r3, #2
 80095cc:	781a      	ldrb	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3302      	adds	r3, #2
 80095d2:	430a      	orrs	r2, r1
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s11v04, 0u, 0xffu);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	78db      	ldrb	r3, [r3, #3]
 80095dc:	22ff      	movs	r2, #255	@ 0xff
 80095de:	2100      	movs	r1, #0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fc fb89 	bl	8005cf8 <pack_left_shift_u8>
 80095e6:	4603      	mov	r3, r0
 80095e8:	4619      	mov	r1, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3303      	adds	r3, #3
 80095ee:	781a      	ldrb	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3303      	adds	r3, #3
 80095f4:	430a      	orrs	r2, r1
 80095f6:	b2d2      	uxtb	r2, r2
 80095f8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s11v05, 0u, 0xffu);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	791b      	ldrb	r3, [r3, #4]
 80095fe:	22ff      	movs	r2, #255	@ 0xff
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f7fc fb78 	bl	8005cf8 <pack_left_shift_u8>
 8009608:	4603      	mov	r3, r0
 800960a:	4619      	mov	r1, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3304      	adds	r3, #4
 8009610:	781a      	ldrb	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3304      	adds	r3, #4
 8009616:	430a      	orrs	r2, r1
 8009618:	b2d2      	uxtb	r2, r2
 800961a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s11v06, 0u, 0xffu);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	795b      	ldrb	r3, [r3, #5]
 8009620:	22ff      	movs	r2, #255	@ 0xff
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f7fc fb67 	bl	8005cf8 <pack_left_shift_u8>
 800962a:	4603      	mov	r3, r0
 800962c:	4619      	mov	r1, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3305      	adds	r3, #5
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3305      	adds	r3, #5
 8009638:	430a      	orrs	r2, r1
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	701a      	strb	r2, [r3, #0]

    return (6);
 800963e:	2306      	movs	r3, #6
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <can1_ams_s11_voltages_1_s11v01_encode>:

    return 0;
}

uint8_t can1_ams_s11_voltages_1_s11v01_encode(double value)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009652:	f04f 0200 	mov.w	r2, #0
 8009656:	4b10      	ldr	r3, [pc, #64]	@ (8009698 <can1_ams_s11_voltages_1_s11v01_encode+0x50>)
 8009658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800965c:	f7f6 fdb8 	bl	80001d0 <__aeabi_dsub>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4610      	mov	r0, r2
 8009666:	4619      	mov	r1, r3
 8009668:	a309      	add	r3, pc, #36	@ (adr r3, 8009690 <can1_ams_s11_voltages_1_s11v01_encode+0x48>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f7f7 f891 	bl	8000794 <__aeabi_ddiv>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4610      	mov	r0, r2
 8009678:	4619      	mov	r1, r3
 800967a:	f7f7 f973 	bl	8000964 <__aeabi_d2uiz>
 800967e:	4603      	mov	r3, r0
 8009680:	b2db      	uxtb	r3, r3
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	f3af 8000 	nop.w
 8009690:	fcce1c58 	.word	0xfcce1c58
 8009694:	3f800e6a 	.word	0x3f800e6a
 8009698:	40040000 	.word	0x40040000
 800969c:	00000000 	.word	0x00000000

080096a0 <can1_ams_s11_voltages_1_s11v02_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v02_encode(double value)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	4b10      	ldr	r3, [pc, #64]	@ (80096f0 <can1_ams_s11_voltages_1_s11v02_encode+0x50>)
 80096b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096b4:	f7f6 fd8c 	bl	80001d0 <__aeabi_dsub>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4610      	mov	r0, r2
 80096be:	4619      	mov	r1, r3
 80096c0:	a309      	add	r3, pc, #36	@ (adr r3, 80096e8 <can1_ams_s11_voltages_1_s11v02_encode+0x48>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f7f7 f865 	bl	8000794 <__aeabi_ddiv>
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	4610      	mov	r0, r2
 80096d0:	4619      	mov	r1, r3
 80096d2:	f7f7 f947 	bl	8000964 <__aeabi_d2uiz>
 80096d6:	4603      	mov	r3, r0
 80096d8:	b2db      	uxtb	r3, r3
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	f3af 8000 	nop.w
 80096e8:	fcce1c58 	.word	0xfcce1c58
 80096ec:	3f800e6a 	.word	0x3f800e6a
 80096f0:	40040000 	.word	0x40040000
 80096f4:	00000000 	.word	0x00000000

080096f8 <can1_ams_s11_voltages_1_s11v03_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v03_encode(double value)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009702:	f04f 0200 	mov.w	r2, #0
 8009706:	4b10      	ldr	r3, [pc, #64]	@ (8009748 <can1_ams_s11_voltages_1_s11v03_encode+0x50>)
 8009708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800970c:	f7f6 fd60 	bl	80001d0 <__aeabi_dsub>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4610      	mov	r0, r2
 8009716:	4619      	mov	r1, r3
 8009718:	a309      	add	r3, pc, #36	@ (adr r3, 8009740 <can1_ams_s11_voltages_1_s11v03_encode+0x48>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	f7f7 f839 	bl	8000794 <__aeabi_ddiv>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4610      	mov	r0, r2
 8009728:	4619      	mov	r1, r3
 800972a:	f7f7 f91b 	bl	8000964 <__aeabi_d2uiz>
 800972e:	4603      	mov	r3, r0
 8009730:	b2db      	uxtb	r3, r3
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	f3af 8000 	nop.w
 8009740:	fcce1c58 	.word	0xfcce1c58
 8009744:	3f800e6a 	.word	0x3f800e6a
 8009748:	40040000 	.word	0x40040000
 800974c:	00000000 	.word	0x00000000

08009750 <can1_ams_s11_voltages_1_s11v04_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v04_encode(double value)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800975a:	f04f 0200 	mov.w	r2, #0
 800975e:	4b10      	ldr	r3, [pc, #64]	@ (80097a0 <can1_ams_s11_voltages_1_s11v04_encode+0x50>)
 8009760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009764:	f7f6 fd34 	bl	80001d0 <__aeabi_dsub>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4610      	mov	r0, r2
 800976e:	4619      	mov	r1, r3
 8009770:	a309      	add	r3, pc, #36	@ (adr r3, 8009798 <can1_ams_s11_voltages_1_s11v04_encode+0x48>)
 8009772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009776:	f7f7 f80d 	bl	8000794 <__aeabi_ddiv>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4610      	mov	r0, r2
 8009780:	4619      	mov	r1, r3
 8009782:	f7f7 f8ef 	bl	8000964 <__aeabi_d2uiz>
 8009786:	4603      	mov	r3, r0
 8009788:	b2db      	uxtb	r3, r3
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	f3af 8000 	nop.w
 8009798:	fcce1c58 	.word	0xfcce1c58
 800979c:	3f800e6a 	.word	0x3f800e6a
 80097a0:	40040000 	.word	0x40040000
 80097a4:	00000000 	.word	0x00000000

080097a8 <can1_ams_s11_voltages_1_s11v05_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v05_encode(double value)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80097b2:	f04f 0200 	mov.w	r2, #0
 80097b6:	4b10      	ldr	r3, [pc, #64]	@ (80097f8 <can1_ams_s11_voltages_1_s11v05_encode+0x50>)
 80097b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097bc:	f7f6 fd08 	bl	80001d0 <__aeabi_dsub>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4610      	mov	r0, r2
 80097c6:	4619      	mov	r1, r3
 80097c8:	a309      	add	r3, pc, #36	@ (adr r3, 80097f0 <can1_ams_s11_voltages_1_s11v05_encode+0x48>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f7f6 ffe1 	bl	8000794 <__aeabi_ddiv>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4610      	mov	r0, r2
 80097d8:	4619      	mov	r1, r3
 80097da:	f7f7 f8c3 	bl	8000964 <__aeabi_d2uiz>
 80097de:	4603      	mov	r3, r0
 80097e0:	b2db      	uxtb	r3, r3
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w
 80097f0:	fcce1c58 	.word	0xfcce1c58
 80097f4:	3f800e6a 	.word	0x3f800e6a
 80097f8:	40040000 	.word	0x40040000
 80097fc:	00000000 	.word	0x00000000

08009800 <can1_ams_s11_voltages_1_s11v06_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_1_s11v06_encode(double value)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	4b10      	ldr	r3, [pc, #64]	@ (8009850 <can1_ams_s11_voltages_1_s11v06_encode+0x50>)
 8009810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009814:	f7f6 fcdc 	bl	80001d0 <__aeabi_dsub>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4610      	mov	r0, r2
 800981e:	4619      	mov	r1, r3
 8009820:	a309      	add	r3, pc, #36	@ (adr r3, 8009848 <can1_ams_s11_voltages_1_s11v06_encode+0x48>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 ffb5 	bl	8000794 <__aeabi_ddiv>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4610      	mov	r0, r2
 8009830:	4619      	mov	r1, r3
 8009832:	f7f7 f897 	bl	8000964 <__aeabi_d2uiz>
 8009836:	4603      	mov	r3, r0
 8009838:	b2db      	uxtb	r3, r3
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	f3af 8000 	nop.w
 8009848:	fcce1c58 	.word	0xfcce1c58
 800984c:	3f800e6a 	.word	0x3f800e6a
 8009850:	40040000 	.word	0x40040000

08009854 <can1_ams_s11_voltages_2_pack>:

int can1_ams_s11_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s11_voltages_2_t *src_p,
    size_t size)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b04      	cmp	r3, #4
 8009864:	d802      	bhi.n	800986c <can1_ams_s11_voltages_2_pack+0x18>
        return (-EINVAL);
 8009866:	f06f 0315 	mvn.w	r3, #21
 800986a:	e058      	b.n	800991e <can1_ams_s11_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 800986c:	2205      	movs	r2, #5
 800986e:	2100      	movs	r1, #0
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f001 f8c1 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s11v07, 0u, 0xffu);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	22ff      	movs	r2, #255	@ 0xff
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f7fc fa3a 	bl	8005cf8 <pack_left_shift_u8>
 8009884:	4603      	mov	r3, r0
 8009886:	461a      	mov	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	4313      	orrs	r3, r2
 800988e:	b2da      	uxtb	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s11v08, 0u, 0xffu);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	785b      	ldrb	r3, [r3, #1]
 8009898:	22ff      	movs	r2, #255	@ 0xff
 800989a:	2100      	movs	r1, #0
 800989c:	4618      	mov	r0, r3
 800989e:	f7fc fa2b 	bl	8005cf8 <pack_left_shift_u8>
 80098a2:	4603      	mov	r3, r0
 80098a4:	4619      	mov	r1, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3301      	adds	r3, #1
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	430a      	orrs	r2, r1
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s11v09, 0u, 0xffu);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	789b      	ldrb	r3, [r3, #2]
 80098ba:	22ff      	movs	r2, #255	@ 0xff
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fc fa1a 	bl	8005cf8 <pack_left_shift_u8>
 80098c4:	4603      	mov	r3, r0
 80098c6:	4619      	mov	r1, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3302      	adds	r3, #2
 80098cc:	781a      	ldrb	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3302      	adds	r3, #2
 80098d2:	430a      	orrs	r2, r1
 80098d4:	b2d2      	uxtb	r2, r2
 80098d6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s11v10, 0u, 0xffu);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	78db      	ldrb	r3, [r3, #3]
 80098dc:	22ff      	movs	r2, #255	@ 0xff
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fc fa09 	bl	8005cf8 <pack_left_shift_u8>
 80098e6:	4603      	mov	r3, r0
 80098e8:	4619      	mov	r1, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3303      	adds	r3, #3
 80098ee:	781a      	ldrb	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3303      	adds	r3, #3
 80098f4:	430a      	orrs	r2, r1
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s11v11, 0u, 0xffu);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	791b      	ldrb	r3, [r3, #4]
 80098fe:	22ff      	movs	r2, #255	@ 0xff
 8009900:	2100      	movs	r1, #0
 8009902:	4618      	mov	r0, r3
 8009904:	f7fc f9f8 	bl	8005cf8 <pack_left_shift_u8>
 8009908:	4603      	mov	r3, r0
 800990a:	4619      	mov	r1, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3304      	adds	r3, #4
 8009910:	781a      	ldrb	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3304      	adds	r3, #4
 8009916:	430a      	orrs	r2, r1
 8009918:	b2d2      	uxtb	r2, r2
 800991a:	701a      	strb	r2, [r3, #0]

    return (5);
 800991c:	2305      	movs	r3, #5
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <can1_ams_s11_voltages_2_s11v07_encode>:

    return 0;
}

uint8_t can1_ams_s11_voltages_2_s11v07_encode(double value)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009932:	f04f 0200 	mov.w	r2, #0
 8009936:	4b10      	ldr	r3, [pc, #64]	@ (8009978 <can1_ams_s11_voltages_2_s11v07_encode+0x50>)
 8009938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800993c:	f7f6 fc48 	bl	80001d0 <__aeabi_dsub>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4610      	mov	r0, r2
 8009946:	4619      	mov	r1, r3
 8009948:	a309      	add	r3, pc, #36	@ (adr r3, 8009970 <can1_ams_s11_voltages_2_s11v07_encode+0x48>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	f7f6 ff21 	bl	8000794 <__aeabi_ddiv>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4610      	mov	r0, r2
 8009958:	4619      	mov	r1, r3
 800995a:	f7f7 f803 	bl	8000964 <__aeabi_d2uiz>
 800995e:	4603      	mov	r3, r0
 8009960:	b2db      	uxtb	r3, r3
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	f3af 8000 	nop.w
 8009970:	fcce1c58 	.word	0xfcce1c58
 8009974:	3f800e6a 	.word	0x3f800e6a
 8009978:	40040000 	.word	0x40040000
 800997c:	00000000 	.word	0x00000000

08009980 <can1_ams_s11_voltages_2_s11v08_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v08_encode(double value)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 800998a:	f04f 0200 	mov.w	r2, #0
 800998e:	4b10      	ldr	r3, [pc, #64]	@ (80099d0 <can1_ams_s11_voltages_2_s11v08_encode+0x50>)
 8009990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009994:	f7f6 fc1c 	bl	80001d0 <__aeabi_dsub>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4610      	mov	r0, r2
 800999e:	4619      	mov	r1, r3
 80099a0:	a309      	add	r3, pc, #36	@ (adr r3, 80099c8 <can1_ams_s11_voltages_2_s11v08_encode+0x48>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fef5 	bl	8000794 <__aeabi_ddiv>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4610      	mov	r0, r2
 80099b0:	4619      	mov	r1, r3
 80099b2:	f7f6 ffd7 	bl	8000964 <__aeabi_d2uiz>
 80099b6:	4603      	mov	r3, r0
 80099b8:	b2db      	uxtb	r3, r3
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	f3af 8000 	nop.w
 80099c8:	fcce1c58 	.word	0xfcce1c58
 80099cc:	3f800e6a 	.word	0x3f800e6a
 80099d0:	40040000 	.word	0x40040000
 80099d4:	00000000 	.word	0x00000000

080099d8 <can1_ams_s11_voltages_2_s11v09_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v09_encode(double value)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80099e2:	f04f 0200 	mov.w	r2, #0
 80099e6:	4b10      	ldr	r3, [pc, #64]	@ (8009a28 <can1_ams_s11_voltages_2_s11v09_encode+0x50>)
 80099e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099ec:	f7f6 fbf0 	bl	80001d0 <__aeabi_dsub>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4610      	mov	r0, r2
 80099f6:	4619      	mov	r1, r3
 80099f8:	a309      	add	r3, pc, #36	@ (adr r3, 8009a20 <can1_ams_s11_voltages_2_s11v09_encode+0x48>)
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f7f6 fec9 	bl	8000794 <__aeabi_ddiv>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4610      	mov	r0, r2
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f7f6 ffab 	bl	8000964 <__aeabi_d2uiz>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	b2db      	uxtb	r3, r3
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	f3af 8000 	nop.w
 8009a20:	fcce1c58 	.word	0xfcce1c58
 8009a24:	3f800e6a 	.word	0x3f800e6a
 8009a28:	40040000 	.word	0x40040000
 8009a2c:	00000000 	.word	0x00000000

08009a30 <can1_ams_s11_voltages_2_s11v10_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v10_encode(double value)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009a3a:	f04f 0200 	mov.w	r2, #0
 8009a3e:	4b10      	ldr	r3, [pc, #64]	@ (8009a80 <can1_ams_s11_voltages_2_s11v10_encode+0x50>)
 8009a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a44:	f7f6 fbc4 	bl	80001d0 <__aeabi_dsub>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4619      	mov	r1, r3
 8009a50:	a309      	add	r3, pc, #36	@ (adr r3, 8009a78 <can1_ams_s11_voltages_2_s11v10_encode+0x48>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f7f6 fe9d 	bl	8000794 <__aeabi_ddiv>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4610      	mov	r0, r2
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7f6 ff7f 	bl	8000964 <__aeabi_d2uiz>
 8009a66:	4603      	mov	r3, r0
 8009a68:	b2db      	uxtb	r3, r3
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	f3af 8000 	nop.w
 8009a78:	fcce1c58 	.word	0xfcce1c58
 8009a7c:	3f800e6a 	.word	0x3f800e6a
 8009a80:	40040000 	.word	0x40040000
 8009a84:	00000000 	.word	0x00000000

08009a88 <can1_ams_s11_voltages_2_s11v11_encode>:

    return (true);
}

uint8_t can1_ams_s11_voltages_2_s11v11_encode(double value)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	4b10      	ldr	r3, [pc, #64]	@ (8009ad8 <can1_ams_s11_voltages_2_s11v11_encode+0x50>)
 8009a98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a9c:	f7f6 fb98 	bl	80001d0 <__aeabi_dsub>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	a309      	add	r3, pc, #36	@ (adr r3, 8009ad0 <can1_ams_s11_voltages_2_s11v11_encode+0x48>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	f7f6 fe71 	bl	8000794 <__aeabi_ddiv>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	4619      	mov	r1, r3
 8009aba:	f7f6 ff53 	bl	8000964 <__aeabi_d2uiz>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	b2db      	uxtb	r3, r3
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	f3af 8000 	nop.w
 8009ad0:	fcce1c58 	.word	0xfcce1c58
 8009ad4:	3f800e6a 	.word	0x3f800e6a
 8009ad8:	40040000 	.word	0x40040000

08009adc <can1_ams_s12_voltages_1_pack>:

int can1_ams_s12_voltages_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_s12_voltages_1_t *src_p,
    size_t size)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
    if (size < 6u) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b05      	cmp	r3, #5
 8009aec:	d802      	bhi.n	8009af4 <can1_ams_s12_voltages_1_pack+0x18>
        return (-EINVAL);
 8009aee:	f06f 0315 	mvn.w	r3, #21
 8009af2:	e069      	b.n	8009bc8 <can1_ams_s12_voltages_1_pack+0xec>
    }

    memset(&dst_p[0], 0, 6);
 8009af4:	2206      	movs	r2, #6
 8009af6:	2100      	movs	r1, #0
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f000 ff7d 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s12v01, 0u, 0xffu);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	22ff      	movs	r2, #255	@ 0xff
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fc f8f6 	bl	8005cf8 <pack_left_shift_u8>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s12v02, 0u, 0xffu);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	22ff      	movs	r2, #255	@ 0xff
 8009b22:	2100      	movs	r1, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fc f8e7 	bl	8005cf8 <pack_left_shift_u8>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3301      	adds	r3, #1
 8009b32:	781a      	ldrb	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	b2d2      	uxtb	r2, r2
 8009b3c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s12v03, 0u, 0xffu);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	789b      	ldrb	r3, [r3, #2]
 8009b42:	22ff      	movs	r2, #255	@ 0xff
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fc f8d6 	bl	8005cf8 <pack_left_shift_u8>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4619      	mov	r1, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3302      	adds	r3, #2
 8009b54:	781a      	ldrb	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3302      	adds	r3, #2
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	b2d2      	uxtb	r2, r2
 8009b5e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s12v04, 0u, 0xffu);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	78db      	ldrb	r3, [r3, #3]
 8009b64:	22ff      	movs	r2, #255	@ 0xff
 8009b66:	2100      	movs	r1, #0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fc f8c5 	bl	8005cf8 <pack_left_shift_u8>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4619      	mov	r1, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3303      	adds	r3, #3
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3303      	adds	r3, #3
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	b2d2      	uxtb	r2, r2
 8009b80:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s12v05, 0u, 0xffu);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	791b      	ldrb	r3, [r3, #4]
 8009b86:	22ff      	movs	r2, #255	@ 0xff
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fc f8b4 	bl	8005cf8 <pack_left_shift_u8>
 8009b90:	4603      	mov	r3, r0
 8009b92:	4619      	mov	r1, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	3304      	adds	r3, #4
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u8(src_p->s12v06, 0u, 0xffu);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	795b      	ldrb	r3, [r3, #5]
 8009ba8:	22ff      	movs	r2, #255	@ 0xff
 8009baa:	2100      	movs	r1, #0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fc f8a3 	bl	8005cf8 <pack_left_shift_u8>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3305      	adds	r3, #5
 8009bba:	781a      	ldrb	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3305      	adds	r3, #5
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	701a      	strb	r2, [r3, #0]

    return (6);
 8009bc6:	2306      	movs	r3, #6
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <can1_ams_s12_voltages_1_s12v01_encode>:

    return 0;
}

uint8_t can1_ams_s12_voltages_1_s12v01_encode(double value)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	4b10      	ldr	r3, [pc, #64]	@ (8009c20 <can1_ams_s12_voltages_1_s12v01_encode+0x50>)
 8009be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009be4:	f7f6 faf4 	bl	80001d0 <__aeabi_dsub>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4610      	mov	r0, r2
 8009bee:	4619      	mov	r1, r3
 8009bf0:	a309      	add	r3, pc, #36	@ (adr r3, 8009c18 <can1_ams_s12_voltages_1_s12v01_encode+0x48>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	f7f6 fdcd 	bl	8000794 <__aeabi_ddiv>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4610      	mov	r0, r2
 8009c00:	4619      	mov	r1, r3
 8009c02:	f7f6 feaf 	bl	8000964 <__aeabi_d2uiz>
 8009c06:	4603      	mov	r3, r0
 8009c08:	b2db      	uxtb	r3, r3
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	f3af 8000 	nop.w
 8009c18:	fcce1c58 	.word	0xfcce1c58
 8009c1c:	3f800e6a 	.word	0x3f800e6a
 8009c20:	40040000 	.word	0x40040000
 8009c24:	00000000 	.word	0x00000000

08009c28 <can1_ams_s12_voltages_1_s12v02_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v02_encode(double value)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	4b10      	ldr	r3, [pc, #64]	@ (8009c78 <can1_ams_s12_voltages_1_s12v02_encode+0x50>)
 8009c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c3c:	f7f6 fac8 	bl	80001d0 <__aeabi_dsub>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4610      	mov	r0, r2
 8009c46:	4619      	mov	r1, r3
 8009c48:	a309      	add	r3, pc, #36	@ (adr r3, 8009c70 <can1_ams_s12_voltages_1_s12v02_encode+0x48>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fda1 	bl	8000794 <__aeabi_ddiv>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4610      	mov	r0, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	f7f6 fe83 	bl	8000964 <__aeabi_d2uiz>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	b2db      	uxtb	r3, r3
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w
 8009c70:	fcce1c58 	.word	0xfcce1c58
 8009c74:	3f800e6a 	.word	0x3f800e6a
 8009c78:	40040000 	.word	0x40040000
 8009c7c:	00000000 	.word	0x00000000

08009c80 <can1_ams_s12_voltages_1_s12v03_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v03_encode(double value)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009c8a:	f04f 0200 	mov.w	r2, #0
 8009c8e:	4b10      	ldr	r3, [pc, #64]	@ (8009cd0 <can1_ams_s12_voltages_1_s12v03_encode+0x50>)
 8009c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c94:	f7f6 fa9c 	bl	80001d0 <__aeabi_dsub>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	a309      	add	r3, pc, #36	@ (adr r3, 8009cc8 <can1_ams_s12_voltages_1_s12v03_encode+0x48>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fd75 	bl	8000794 <__aeabi_ddiv>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4610      	mov	r0, r2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f7f6 fe57 	bl	8000964 <__aeabi_d2uiz>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	b2db      	uxtb	r3, r3
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	f3af 8000 	nop.w
 8009cc8:	fcce1c58 	.word	0xfcce1c58
 8009ccc:	3f800e6a 	.word	0x3f800e6a
 8009cd0:	40040000 	.word	0x40040000
 8009cd4:	00000000 	.word	0x00000000

08009cd8 <can1_ams_s12_voltages_1_s12v04_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v04_encode(double value)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	4b10      	ldr	r3, [pc, #64]	@ (8009d28 <can1_ams_s12_voltages_1_s12v04_encode+0x50>)
 8009ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cec:	f7f6 fa70 	bl	80001d0 <__aeabi_dsub>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	a309      	add	r3, pc, #36	@ (adr r3, 8009d20 <can1_ams_s12_voltages_1_s12v04_encode+0x48>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fd49 	bl	8000794 <__aeabi_ddiv>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4610      	mov	r0, r2
 8009d08:	4619      	mov	r1, r3
 8009d0a:	f7f6 fe2b 	bl	8000964 <__aeabi_d2uiz>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	b2db      	uxtb	r3, r3
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	f3af 8000 	nop.w
 8009d20:	fcce1c58 	.word	0xfcce1c58
 8009d24:	3f800e6a 	.word	0x3f800e6a
 8009d28:	40040000 	.word	0x40040000
 8009d2c:	00000000 	.word	0x00000000

08009d30 <can1_ams_s12_voltages_1_s12v05_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v05_encode(double value)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009d3a:	f04f 0200 	mov.w	r2, #0
 8009d3e:	4b10      	ldr	r3, [pc, #64]	@ (8009d80 <can1_ams_s12_voltages_1_s12v05_encode+0x50>)
 8009d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d44:	f7f6 fa44 	bl	80001d0 <__aeabi_dsub>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	4619      	mov	r1, r3
 8009d50:	a309      	add	r3, pc, #36	@ (adr r3, 8009d78 <can1_ams_s12_voltages_1_s12v05_encode+0x48>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 fd1d 	bl	8000794 <__aeabi_ddiv>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4610      	mov	r0, r2
 8009d60:	4619      	mov	r1, r3
 8009d62:	f7f6 fdff 	bl	8000964 <__aeabi_d2uiz>
 8009d66:	4603      	mov	r3, r0
 8009d68:	b2db      	uxtb	r3, r3
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	f3af 8000 	nop.w
 8009d78:	fcce1c58 	.word	0xfcce1c58
 8009d7c:	3f800e6a 	.word	0x3f800e6a
 8009d80:	40040000 	.word	0x40040000
 8009d84:	00000000 	.word	0x00000000

08009d88 <can1_ams_s12_voltages_1_s12v06_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_1_s12v06_encode(double value)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009d92:	f04f 0200 	mov.w	r2, #0
 8009d96:	4b10      	ldr	r3, [pc, #64]	@ (8009dd8 <can1_ams_s12_voltages_1_s12v06_encode+0x50>)
 8009d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d9c:	f7f6 fa18 	bl	80001d0 <__aeabi_dsub>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4610      	mov	r0, r2
 8009da6:	4619      	mov	r1, r3
 8009da8:	a309      	add	r3, pc, #36	@ (adr r3, 8009dd0 <can1_ams_s12_voltages_1_s12v06_encode+0x48>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f7f6 fcf1 	bl	8000794 <__aeabi_ddiv>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4610      	mov	r0, r2
 8009db8:	4619      	mov	r1, r3
 8009dba:	f7f6 fdd3 	bl	8000964 <__aeabi_d2uiz>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	b2db      	uxtb	r3, r3
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	f3af 8000 	nop.w
 8009dd0:	fcce1c58 	.word	0xfcce1c58
 8009dd4:	3f800e6a 	.word	0x3f800e6a
 8009dd8:	40040000 	.word	0x40040000

08009ddc <can1_ams_s12_voltages_2_pack>:

int can1_ams_s12_voltages_2_pack(
    uint8_t *dst_p,
    const struct can1_ams_s12_voltages_2_t *src_p,
    size_t size)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
    if (size < 5u) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d802      	bhi.n	8009df4 <can1_ams_s12_voltages_2_pack+0x18>
        return (-EINVAL);
 8009dee:	f06f 0315 	mvn.w	r3, #21
 8009df2:	e058      	b.n	8009ea6 <can1_ams_s12_voltages_2_pack+0xca>
    }

    memset(&dst_p[0], 0, 5);
 8009df4:	2205      	movs	r2, #5
 8009df6:	2100      	movs	r1, #0
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fdfd 	bl	800a9f8 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->s12v07, 0u, 0xffu);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	22ff      	movs	r2, #255	@ 0xff
 8009e04:	2100      	movs	r1, #0
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fb ff76 	bl	8005cf8 <pack_left_shift_u8>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->s12v08, 0u, 0xffu);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	785b      	ldrb	r3, [r3, #1]
 8009e20:	22ff      	movs	r2, #255	@ 0xff
 8009e22:	2100      	movs	r1, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fb ff67 	bl	8005cf8 <pack_left_shift_u8>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3301      	adds	r3, #1
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3301      	adds	r3, #1
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->s12v09, 0u, 0xffu);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	789b      	ldrb	r3, [r3, #2]
 8009e42:	22ff      	movs	r2, #255	@ 0xff
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fb ff56 	bl	8005cf8 <pack_left_shift_u8>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	4619      	mov	r1, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3302      	adds	r3, #2
 8009e54:	781a      	ldrb	r2, [r3, #0]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3302      	adds	r3, #2
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	b2d2      	uxtb	r2, r2
 8009e5e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->s12v10, 0u, 0xffu);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	78db      	ldrb	r3, [r3, #3]
 8009e64:	22ff      	movs	r2, #255	@ 0xff
 8009e66:	2100      	movs	r1, #0
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fb ff45 	bl	8005cf8 <pack_left_shift_u8>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4619      	mov	r1, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3303      	adds	r3, #3
 8009e76:	781a      	ldrb	r2, [r3, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3303      	adds	r3, #3
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u8(src_p->s12v11, 0u, 0xffu);
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	791b      	ldrb	r3, [r3, #4]
 8009e86:	22ff      	movs	r2, #255	@ 0xff
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fb ff34 	bl	8005cf8 <pack_left_shift_u8>
 8009e90:	4603      	mov	r3, r0
 8009e92:	4619      	mov	r1, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3304      	adds	r3, #4
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	b2d2      	uxtb	r2, r2
 8009ea2:	701a      	strb	r2, [r3, #0]

    return (5);
 8009ea4:	2305      	movs	r3, #5
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <can1_ams_s12_voltages_2_s12v07_encode>:

    return 0;
}

uint8_t can1_ams_s12_voltages_2_s12v07_encode(double value)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009eba:	f04f 0200 	mov.w	r2, #0
 8009ebe:	4b10      	ldr	r3, [pc, #64]	@ (8009f00 <can1_ams_s12_voltages_2_s12v07_encode+0x50>)
 8009ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ec4:	f7f6 f984 	bl	80001d0 <__aeabi_dsub>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4619      	mov	r1, r3
 8009ed0:	a309      	add	r3, pc, #36	@ (adr r3, 8009ef8 <can1_ams_s12_voltages_2_s12v07_encode+0x48>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fc5d 	bl	8000794 <__aeabi_ddiv>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f7f6 fd3f 	bl	8000964 <__aeabi_d2uiz>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	b2db      	uxtb	r3, r3
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	f3af 8000 	nop.w
 8009ef8:	fcce1c58 	.word	0xfcce1c58
 8009efc:	3f800e6a 	.word	0x3f800e6a
 8009f00:	40040000 	.word	0x40040000
 8009f04:	00000000 	.word	0x00000000

08009f08 <can1_ams_s12_voltages_2_s12v08_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v08_encode(double value)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009f12:	f04f 0200 	mov.w	r2, #0
 8009f16:	4b10      	ldr	r3, [pc, #64]	@ (8009f58 <can1_ams_s12_voltages_2_s12v08_encode+0x50>)
 8009f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f1c:	f7f6 f958 	bl	80001d0 <__aeabi_dsub>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4610      	mov	r0, r2
 8009f26:	4619      	mov	r1, r3
 8009f28:	a309      	add	r3, pc, #36	@ (adr r3, 8009f50 <can1_ams_s12_voltages_2_s12v08_encode+0x48>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f7f6 fc31 	bl	8000794 <__aeabi_ddiv>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	4610      	mov	r0, r2
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f7f6 fd13 	bl	8000964 <__aeabi_d2uiz>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	b2db      	uxtb	r3, r3
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	f3af 8000 	nop.w
 8009f50:	fcce1c58 	.word	0xfcce1c58
 8009f54:	3f800e6a 	.word	0x3f800e6a
 8009f58:	40040000 	.word	0x40040000
 8009f5c:	00000000 	.word	0x00000000

08009f60 <can1_ams_s12_voltages_2_s12v09_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v09_encode(double value)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	4b10      	ldr	r3, [pc, #64]	@ (8009fb0 <can1_ams_s12_voltages_2_s12v09_encode+0x50>)
 8009f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f74:	f7f6 f92c 	bl	80001d0 <__aeabi_dsub>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	a309      	add	r3, pc, #36	@ (adr r3, 8009fa8 <can1_ams_s12_voltages_2_s12v09_encode+0x48>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 fc05 	bl	8000794 <__aeabi_ddiv>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4610      	mov	r0, r2
 8009f90:	4619      	mov	r1, r3
 8009f92:	f7f6 fce7 	bl	8000964 <__aeabi_d2uiz>
 8009f96:	4603      	mov	r3, r0
 8009f98:	b2db      	uxtb	r3, r3
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	f3af 8000 	nop.w
 8009fa8:	fcce1c58 	.word	0xfcce1c58
 8009fac:	3f800e6a 	.word	0x3f800e6a
 8009fb0:	40040000 	.word	0x40040000
 8009fb4:	00000000 	.word	0x00000000

08009fb8 <can1_ams_s12_voltages_2_s12v10_encode>:

    return (true);
}

uint8_t can1_ams_s12_voltages_2_s12v10_encode(double value)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	4b10      	ldr	r3, [pc, #64]	@ (800a008 <can1_ams_s12_voltages_2_s12v10_encode+0x50>)
 8009fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fcc:	f7f6 f900 	bl	80001d0 <__aeabi_dsub>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	a309      	add	r3, pc, #36	@ (adr r3, 800a000 <can1_ams_s12_voltages_2_s12v10_encode+0x48>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 fbd9 	bl	8000794 <__aeabi_ddiv>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	4619      	mov	r1, r3
 8009fea:	f7f6 fcbb 	bl	8000964 <__aeabi_d2uiz>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	b2db      	uxtb	r3, r3
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	f3af 8000 	nop.w
 800a000:	fcce1c58 	.word	0xfcce1c58
 800a004:	3f800e6a 	.word	0x3f800e6a
 800a008:	40040000 	.word	0x40040000

0800a00c <can1_ams_parameters_set_unpack>:

int can1_ams_parameters_set_unpack(
    struct can1_ams_parameters_set_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b07      	cmp	r3, #7
 800a01c:	d802      	bhi.n	800a024 <can1_ams_parameters_set_unpack+0x18>
        return (-EINVAL);
 800a01e:	f06f 0315 	mvn.w	r3, #21
 800a022:	e05f      	b.n	800a0e4 <can1_ams_parameters_set_unpack+0xd8>
    }

    dst_p->cell_under_voltage_treshold = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	22ff      	movs	r2, #255	@ 0xff
 800a02a:	2100      	movs	r1, #0
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fb fe92 	bl	8005d56 <unpack_right_shift_u8>
 800a032:	4603      	mov	r3, r0
 800a034:	461a      	mov	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	701a      	strb	r2, [r3, #0]
    dst_p->cell_over_voltage_treshold = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	3301      	adds	r3, #1
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	22ff      	movs	r2, #255	@ 0xff
 800a042:	2100      	movs	r1, #0
 800a044:	4618      	mov	r0, r3
 800a046:	f7fb fe86 	bl	8005d56 <unpack_right_shift_u8>
 800a04a:	4603      	mov	r3, r0
 800a04c:	461a      	mov	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	705a      	strb	r2, [r3, #1]
    dst_p->voltage_time_constraint = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	3302      	adds	r3, #2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	22ff      	movs	r2, #255	@ 0xff
 800a05a:	2100      	movs	r1, #0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fb fe7a 	bl	8005d56 <unpack_right_shift_u8>
 800a062:	4603      	mov	r3, r0
 800a064:	461a      	mov	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	709a      	strb	r2, [r3, #2]
    dst_p->temperature_time_constraint = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	3303      	adds	r3, #3
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	22ff      	movs	r2, #255	@ 0xff
 800a072:	2100      	movs	r1, #0
 800a074:	4618      	mov	r0, r3
 800a076:	f7fb fe6e 	bl	8005d56 <unpack_right_shift_u8>
 800a07a:	4603      	mov	r3, r0
 800a07c:	461a      	mov	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	70da      	strb	r2, [r3, #3]
    dst_p->current_time_constraint = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	3304      	adds	r3, #4
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	22ff      	movs	r2, #255	@ 0xff
 800a08a:	2100      	movs	r1, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fb fe62 	bl	8005d56 <unpack_right_shift_u8>
 800a092:	4603      	mov	r3, r0
 800a094:	461a      	mov	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	711a      	strb	r2, [r3, #4]
    dst_p->voltage_drive_lower_bound = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	3305      	adds	r3, #5
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	22ff      	movs	r2, #255	@ 0xff
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fb fe56 	bl	8005d56 <unpack_right_shift_u8>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	715a      	strb	r2, [r3, #5]
    dst_p->voltage_lower_bound = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	3306      	adds	r3, #6
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	22ff      	movs	r2, #255	@ 0xff
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fb fe4a 	bl	8005d56 <unpack_right_shift_u8>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	719a      	strb	r2, [r3, #6]
    dst_p->start_balancing = unpack_right_shift_u8(src_p[7], 0u, 0x01u);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	3307      	adds	r3, #7
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fb fe3e 	bl	8005d56 <unpack_right_shift_u8>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	461a      	mov	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	71da      	strb	r2, [r3, #7]

    return (0);
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <unpack_left_shift_u32>:

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	71fb      	strb	r3, [r7, #7]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	71bb      	strb	r3, [r7, #6]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	717b      	strb	r3, [r7, #5]
    return (uint32_t)((uint32_t)(value & mask) << shift);
 800a0fe:	79fa      	ldrb	r2, [r7, #7]
 800a100:	797b      	ldrb	r3, [r7, #5]
 800a102:	4013      	ands	r3, r2
 800a104:	b2db      	uxtb	r3, r3
 800a106:	461a      	mov	r2, r3
 800a108:	79bb      	ldrb	r3, [r7, #6]
 800a10a:	fa02 f303 	lsl.w	r3, r2, r3
}
 800a10e:	4618      	mov	r0, r3
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	4603      	mov	r3, r0
 800a122:	71fb      	strb	r3, [r7, #7]
 800a124:	460b      	mov	r3, r1
 800a126:	71bb      	strb	r3, [r7, #6]
 800a128:	4613      	mov	r3, r2
 800a12a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800a12c:	79fa      	ldrb	r2, [r7, #7]
 800a12e:	797b      	ldrb	r3, [r7, #5]
 800a130:	4013      	ands	r3, r2
 800a132:	b2db      	uxtb	r3, r3
 800a134:	461a      	mov	r2, r3
 800a136:	79bb      	ldrb	r3, [r7, #6]
 800a138:	fa42 f303 	asr.w	r3, r2, r3
 800a13c:	b2db      	uxtb	r3, r3
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <unpack_right_shift_u32>:

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	4603      	mov	r3, r0
 800a152:	71fb      	strb	r3, [r7, #7]
 800a154:	460b      	mov	r3, r1
 800a156:	71bb      	strb	r3, [r7, #6]
 800a158:	4613      	mov	r3, r2
 800a15a:	717b      	strb	r3, [r7, #5]
    return (uint32_t)((uint32_t)(value & mask) >> shift);
 800a15c:	79fa      	ldrb	r2, [r7, #7]
 800a15e:	797b      	ldrb	r3, [r7, #5]
 800a160:	4013      	ands	r3, r2
 800a162:	b2db      	uxtb	r3, r3
 800a164:	461a      	mov	r2, r3
 800a166:	79bb      	ldrb	r3, [r7, #6]
 800a168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <can2_ivt_msg_result_wh_unpack>:

int can2_ivt_msg_result_wh_unpack(
    struct can2_ivt_msg_result_wh_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_wh;

    if (size < 6u) {
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b05      	cmp	r3, #5
 800a188:	d802      	bhi.n	800a190 <can2_ivt_msg_result_wh_unpack+0x18>
        return (-EINVAL);
 800a18a:	f06f 0315 	mvn.w	r3, #21
 800a18e:	e077      	b.n	800a280 <can2_ivt_msg_result_wh_unpack+0x108>
    }

    dst_p->ivt_id_result_wh = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	22ff      	movs	r2, #255	@ 0xff
 800a196:	2100      	movs	r1, #0
 800a198:	4618      	mov	r0, r3
 800a19a:	f7ff ffbe 	bl	800a11a <unpack_right_shift_u8>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_wh_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	2280      	movs	r2, #128	@ 0x80
 800a1ae:	2107      	movs	r1, #7
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff ffb2 	bl	800a11a <unpack_right_shift_u8>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_wh_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2240      	movs	r2, #64	@ 0x40
 800a1c6:	2106      	movs	r1, #6
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff ffa6 	bl	800a11a <unpack_right_shift_u8>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_wh_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	2105      	movs	r1, #5
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7ff ff9a 	bl	800a11a <unpack_right_shift_u8>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_wh_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	2210      	movs	r2, #16
 800a1f6:	2104      	movs	r1, #4
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff ff8e 	bl	800a11a <unpack_right_shift_u8>
 800a1fe:	4603      	mov	r3, r0
 800a200:	461a      	mov	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_wh = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	3301      	adds	r3, #1
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	220f      	movs	r2, #15
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff ff82 	bl	800a11a <unpack_right_shift_u8>
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	715a      	strb	r2, [r3, #5]
    ivt_result_wh = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	3302      	adds	r3, #2
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	22ff      	movs	r2, #255	@ 0xff
 800a226:	2118      	movs	r1, #24
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff ff5f 	bl	800a0ec <unpack_left_shift_u32>
 800a22e:	6178      	str	r0, [r7, #20]
    ivt_result_wh |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	3303      	adds	r3, #3
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	22ff      	movs	r2, #255	@ 0xff
 800a238:	2110      	movs	r1, #16
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff ff56 	bl	800a0ec <unpack_left_shift_u32>
 800a240:	4602      	mov	r2, r0
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	4313      	orrs	r3, r2
 800a246:	617b      	str	r3, [r7, #20]
    ivt_result_wh |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	3304      	adds	r3, #4
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	22ff      	movs	r2, #255	@ 0xff
 800a250:	2108      	movs	r1, #8
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff ff4a 	bl	800a0ec <unpack_left_shift_u32>
 800a258:	4602      	mov	r2, r0
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	617b      	str	r3, [r7, #20]
    ivt_result_wh |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	3305      	adds	r3, #5
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	22ff      	movs	r2, #255	@ 0xff
 800a268:	2100      	movs	r1, #0
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7ff ff6d 	bl	800a14a <unpack_right_shift_u32>
 800a270:	4602      	mov	r2, r0
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	4313      	orrs	r3, r2
 800a276:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_wh = (int32_t)ivt_result_wh;
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	609a      	str	r2, [r3, #8]

    return (0);
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <can2_ivt_msg_result_as_unpack>:

int can2_ivt_msg_result_as_unpack(
    struct can2_ivt_msg_result_as_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_as;

    if (size < 6u) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b05      	cmp	r3, #5
 800a298:	d802      	bhi.n	800a2a0 <can2_ivt_msg_result_as_unpack+0x18>
        return (-EINVAL);
 800a29a:	f06f 0315 	mvn.w	r3, #21
 800a29e:	e077      	b.n	800a390 <can2_ivt_msg_result_as_unpack+0x108>
    }

    dst_p->ivt_id_result_as = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	22ff      	movs	r2, #255	@ 0xff
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7ff ff36 	bl	800a11a <unpack_right_shift_u8>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_as_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2280      	movs	r2, #128	@ 0x80
 800a2be:	2107      	movs	r1, #7
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff ff2a 	bl	800a11a <unpack_right_shift_u8>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_as_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2240      	movs	r2, #64	@ 0x40
 800a2d6:	2106      	movs	r1, #6
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff ff1e 	bl	800a11a <unpack_right_shift_u8>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_as_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	2105      	movs	r1, #5
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7ff ff12 	bl	800a11a <unpack_right_shift_u8>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_as_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	3301      	adds	r3, #1
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2210      	movs	r2, #16
 800a306:	2104      	movs	r1, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f7ff ff06 	bl	800a11a <unpack_right_shift_u8>
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_as = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	3301      	adds	r3, #1
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	220f      	movs	r2, #15
 800a31e:	2100      	movs	r1, #0
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff fefa 	bl	800a11a <unpack_right_shift_u8>
 800a326:	4603      	mov	r3, r0
 800a328:	461a      	mov	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	715a      	strb	r2, [r3, #5]
    ivt_result_as = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	3302      	adds	r3, #2
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	22ff      	movs	r2, #255	@ 0xff
 800a336:	2118      	movs	r1, #24
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff fed7 	bl	800a0ec <unpack_left_shift_u32>
 800a33e:	6178      	str	r0, [r7, #20]
    ivt_result_as |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	3303      	adds	r3, #3
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	22ff      	movs	r2, #255	@ 0xff
 800a348:	2110      	movs	r1, #16
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff fece 	bl	800a0ec <unpack_left_shift_u32>
 800a350:	4602      	mov	r2, r0
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	4313      	orrs	r3, r2
 800a356:	617b      	str	r3, [r7, #20]
    ivt_result_as |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	3304      	adds	r3, #4
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	22ff      	movs	r2, #255	@ 0xff
 800a360:	2108      	movs	r1, #8
 800a362:	4618      	mov	r0, r3
 800a364:	f7ff fec2 	bl	800a0ec <unpack_left_shift_u32>
 800a368:	4602      	mov	r2, r0
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	617b      	str	r3, [r7, #20]
    ivt_result_as |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	3305      	adds	r3, #5
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	22ff      	movs	r2, #255	@ 0xff
 800a378:	2100      	movs	r1, #0
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff fee5 	bl	800a14a <unpack_right_shift_u32>
 800a380:	4602      	mov	r2, r0
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	4313      	orrs	r3, r2
 800a386:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_as = (int32_t)ivt_result_as;
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	609a      	str	r2, [r3, #8]

    return (0);
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <can2_ivt_msg_result_w_unpack>:

int can2_ivt_msg_result_w_unpack(
    struct can2_ivt_msg_result_w_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_w;

    if (size < 6u) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	d802      	bhi.n	800a3b0 <can2_ivt_msg_result_w_unpack+0x18>
        return (-EINVAL);
 800a3aa:	f06f 0315 	mvn.w	r3, #21
 800a3ae:	e077      	b.n	800a4a0 <can2_ivt_msg_result_w_unpack+0x108>
    }

    dst_p->ivt_id_result_w = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	22ff      	movs	r2, #255	@ 0xff
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff feae 	bl	800a11a <unpack_right_shift_u8>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_w_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2280      	movs	r2, #128	@ 0x80
 800a3ce:	2107      	movs	r1, #7
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff fea2 	bl	800a11a <unpack_right_shift_u8>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	461a      	mov	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_w_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2240      	movs	r2, #64	@ 0x40
 800a3e6:	2106      	movs	r1, #6
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff fe96 	bl	800a11a <unpack_right_shift_u8>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_w_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	2105      	movs	r1, #5
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff fe8a 	bl	800a11a <unpack_right_shift_u8>
 800a406:	4603      	mov	r3, r0
 800a408:	461a      	mov	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_w_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	3301      	adds	r3, #1
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2210      	movs	r2, #16
 800a416:	2104      	movs	r1, #4
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff fe7e 	bl	800a11a <unpack_right_shift_u8>
 800a41e:	4603      	mov	r3, r0
 800a420:	461a      	mov	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_w = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	3301      	adds	r3, #1
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	220f      	movs	r2, #15
 800a42e:	2100      	movs	r1, #0
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fe72 	bl	800a11a <unpack_right_shift_u8>
 800a436:	4603      	mov	r3, r0
 800a438:	461a      	mov	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	715a      	strb	r2, [r3, #5]
    ivt_result_w = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	3302      	adds	r3, #2
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	22ff      	movs	r2, #255	@ 0xff
 800a446:	2118      	movs	r1, #24
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff fe4f 	bl	800a0ec <unpack_left_shift_u32>
 800a44e:	6178      	str	r0, [r7, #20]
    ivt_result_w |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	3303      	adds	r3, #3
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	22ff      	movs	r2, #255	@ 0xff
 800a458:	2110      	movs	r1, #16
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fe46 	bl	800a0ec <unpack_left_shift_u32>
 800a460:	4602      	mov	r2, r0
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	4313      	orrs	r3, r2
 800a466:	617b      	str	r3, [r7, #20]
    ivt_result_w |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	3304      	adds	r3, #4
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	22ff      	movs	r2, #255	@ 0xff
 800a470:	2108      	movs	r1, #8
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff fe3a 	bl	800a0ec <unpack_left_shift_u32>
 800a478:	4602      	mov	r2, r0
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	617b      	str	r3, [r7, #20]
    ivt_result_w |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	3305      	adds	r3, #5
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	22ff      	movs	r2, #255	@ 0xff
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff fe5d 	bl	800a14a <unpack_right_shift_u32>
 800a490:	4602      	mov	r2, r0
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	4313      	orrs	r3, r2
 800a496:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_w = (int32_t)ivt_result_w;
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	609a      	str	r2, [r3, #8]

    return (0);
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <can2_ivt_msg_result_t_unpack>:

int can2_ivt_msg_result_t_unpack(
    struct can2_ivt_msg_result_t_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_t;

    if (size < 6u) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b05      	cmp	r3, #5
 800a4b8:	d802      	bhi.n	800a4c0 <can2_ivt_msg_result_t_unpack+0x18>
        return (-EINVAL);
 800a4ba:	f06f 0315 	mvn.w	r3, #21
 800a4be:	e077      	b.n	800a5b0 <can2_ivt_msg_result_t_unpack+0x108>
    }

    dst_p->ivt_id_result_t = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	22ff      	movs	r2, #255	@ 0xff
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff fe26 	bl	800a11a <unpack_right_shift_u8>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_t_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2280      	movs	r2, #128	@ 0x80
 800a4de:	2107      	movs	r1, #7
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff fe1a 	bl	800a11a <unpack_right_shift_u8>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_t_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2240      	movs	r2, #64	@ 0x40
 800a4f6:	2106      	movs	r1, #6
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fe0e 	bl	800a11a <unpack_right_shift_u8>
 800a4fe:	4603      	mov	r3, r0
 800a500:	461a      	mov	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_t_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	3301      	adds	r3, #1
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2220      	movs	r2, #32
 800a50e:	2105      	movs	r1, #5
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff fe02 	bl	800a11a <unpack_right_shift_u8>
 800a516:	4603      	mov	r3, r0
 800a518:	461a      	mov	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_t_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	3301      	adds	r3, #1
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2210      	movs	r2, #16
 800a526:	2104      	movs	r1, #4
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff fdf6 	bl	800a11a <unpack_right_shift_u8>
 800a52e:	4603      	mov	r3, r0
 800a530:	461a      	mov	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_t = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	3301      	adds	r3, #1
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	220f      	movs	r2, #15
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff fdea 	bl	800a11a <unpack_right_shift_u8>
 800a546:	4603      	mov	r3, r0
 800a548:	461a      	mov	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	715a      	strb	r2, [r3, #5]
    ivt_result_t = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	3302      	adds	r3, #2
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	22ff      	movs	r2, #255	@ 0xff
 800a556:	2118      	movs	r1, #24
 800a558:	4618      	mov	r0, r3
 800a55a:	f7ff fdc7 	bl	800a0ec <unpack_left_shift_u32>
 800a55e:	6178      	str	r0, [r7, #20]
    ivt_result_t |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	3303      	adds	r3, #3
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	22ff      	movs	r2, #255	@ 0xff
 800a568:	2110      	movs	r1, #16
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff fdbe 	bl	800a0ec <unpack_left_shift_u32>
 800a570:	4602      	mov	r2, r0
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	4313      	orrs	r3, r2
 800a576:	617b      	str	r3, [r7, #20]
    ivt_result_t |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3304      	adds	r3, #4
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	22ff      	movs	r2, #255	@ 0xff
 800a580:	2108      	movs	r1, #8
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff fdb2 	bl	800a0ec <unpack_left_shift_u32>
 800a588:	4602      	mov	r2, r0
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]
    ivt_result_t |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	3305      	adds	r3, #5
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	22ff      	movs	r2, #255	@ 0xff
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fdd5 	bl	800a14a <unpack_right_shift_u32>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_t = (int32_t)ivt_result_t;
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	609a      	str	r2, [r3, #8]

    return (0);
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u3;

    if (size < 6u) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b05      	cmp	r3, #5
 800a5c8:	d802      	bhi.n	800a5d0 <can2_ivt_msg_result_u3_unpack+0x18>
        return (-EINVAL);
 800a5ca:	f06f 0315 	mvn.w	r3, #21
 800a5ce:	e077      	b.n	800a6c0 <can2_ivt_msg_result_u3_unpack+0x108>
    }

    dst_p->ivt_id_result_u3 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	22ff      	movs	r2, #255	@ 0xff
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7ff fd9e 	bl	800a11a <unpack_right_shift_u8>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u3_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2280      	movs	r2, #128	@ 0x80
 800a5ee:	2107      	movs	r1, #7
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7ff fd92 	bl	800a11a <unpack_right_shift_u8>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u3_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	3301      	adds	r3, #1
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2240      	movs	r2, #64	@ 0x40
 800a606:	2106      	movs	r1, #6
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fd86 	bl	800a11a <unpack_right_shift_u8>
 800a60e:	4603      	mov	r3, r0
 800a610:	461a      	mov	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u3_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	3301      	adds	r3, #1
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2220      	movs	r2, #32
 800a61e:	2105      	movs	r1, #5
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff fd7a 	bl	800a11a <unpack_right_shift_u8>
 800a626:	4603      	mov	r3, r0
 800a628:	461a      	mov	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u3_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	3301      	adds	r3, #1
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	2210      	movs	r2, #16
 800a636:	2104      	movs	r1, #4
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff fd6e 	bl	800a11a <unpack_right_shift_u8>
 800a63e:	4603      	mov	r3, r0
 800a640:	461a      	mov	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u3 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	3301      	adds	r3, #1
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	220f      	movs	r2, #15
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f7ff fd62 	bl	800a11a <unpack_right_shift_u8>
 800a656:	4603      	mov	r3, r0
 800a658:	461a      	mov	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	715a      	strb	r2, [r3, #5]
    ivt_result_u3 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	3302      	adds	r3, #2
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	22ff      	movs	r2, #255	@ 0xff
 800a666:	2118      	movs	r1, #24
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff fd3f 	bl	800a0ec <unpack_left_shift_u32>
 800a66e:	6178      	str	r0, [r7, #20]
    ivt_result_u3 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	3303      	adds	r3, #3
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	22ff      	movs	r2, #255	@ 0xff
 800a678:	2110      	movs	r1, #16
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff fd36 	bl	800a0ec <unpack_left_shift_u32>
 800a680:	4602      	mov	r2, r0
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	4313      	orrs	r3, r2
 800a686:	617b      	str	r3, [r7, #20]
    ivt_result_u3 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	3304      	adds	r3, #4
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	22ff      	movs	r2, #255	@ 0xff
 800a690:	2108      	movs	r1, #8
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff fd2a 	bl	800a0ec <unpack_left_shift_u32>
 800a698:	4602      	mov	r2, r0
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]
    ivt_result_u3 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	3305      	adds	r3, #5
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	22ff      	movs	r2, #255	@ 0xff
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff fd4d 	bl	800a14a <unpack_right_shift_u32>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u3 = (int32_t)ivt_result_u3;
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	609a      	str	r2, [r3, #8]

    return (0);
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <can2_ivt_msg_result_u2_unpack>:

int can2_ivt_msg_result_u2_unpack(
    struct can2_ivt_msg_result_u2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u2;

    if (size < 6u) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b05      	cmp	r3, #5
 800a6d8:	d802      	bhi.n	800a6e0 <can2_ivt_msg_result_u2_unpack+0x18>
        return (-EINVAL);
 800a6da:	f06f 0315 	mvn.w	r3, #21
 800a6de:	e077      	b.n	800a7d0 <can2_ivt_msg_result_u2_unpack+0x108>
    }

    dst_p->ivt_id_result_u2 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	22ff      	movs	r2, #255	@ 0xff
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7ff fd16 	bl	800a11a <unpack_right_shift_u8>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u2_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2280      	movs	r2, #128	@ 0x80
 800a6fe:	2107      	movs	r1, #7
 800a700:	4618      	mov	r0, r3
 800a702:	f7ff fd0a 	bl	800a11a <unpack_right_shift_u8>
 800a706:	4603      	mov	r3, r0
 800a708:	461a      	mov	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u2_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	3301      	adds	r3, #1
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2240      	movs	r2, #64	@ 0x40
 800a716:	2106      	movs	r1, #6
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fcfe 	bl	800a11a <unpack_right_shift_u8>
 800a71e:	4603      	mov	r3, r0
 800a720:	461a      	mov	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u2_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	3301      	adds	r3, #1
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2220      	movs	r2, #32
 800a72e:	2105      	movs	r1, #5
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff fcf2 	bl	800a11a <unpack_right_shift_u8>
 800a736:	4603      	mov	r3, r0
 800a738:	461a      	mov	r2, r3
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u2_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	3301      	adds	r3, #1
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2210      	movs	r2, #16
 800a746:	2104      	movs	r1, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f7ff fce6 	bl	800a11a <unpack_right_shift_u8>
 800a74e:	4603      	mov	r3, r0
 800a750:	461a      	mov	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u2 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	3301      	adds	r3, #1
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	220f      	movs	r2, #15
 800a75e:	2100      	movs	r1, #0
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff fcda 	bl	800a11a <unpack_right_shift_u8>
 800a766:	4603      	mov	r3, r0
 800a768:	461a      	mov	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	715a      	strb	r2, [r3, #5]
    ivt_result_u2 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	3302      	adds	r3, #2
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	22ff      	movs	r2, #255	@ 0xff
 800a776:	2118      	movs	r1, #24
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff fcb7 	bl	800a0ec <unpack_left_shift_u32>
 800a77e:	6178      	str	r0, [r7, #20]
    ivt_result_u2 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	3303      	adds	r3, #3
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	22ff      	movs	r2, #255	@ 0xff
 800a788:	2110      	movs	r1, #16
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fcae 	bl	800a0ec <unpack_left_shift_u32>
 800a790:	4602      	mov	r2, r0
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	4313      	orrs	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
    ivt_result_u2 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	3304      	adds	r3, #4
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	22ff      	movs	r2, #255	@ 0xff
 800a7a0:	2108      	movs	r1, #8
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff fca2 	bl	800a0ec <unpack_left_shift_u32>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]
    ivt_result_u2 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	3305      	adds	r3, #5
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	22ff      	movs	r2, #255	@ 0xff
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff fcc5 	bl	800a14a <unpack_right_shift_u32>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u2 = (int32_t)ivt_result_u2;
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	609a      	str	r2, [r3, #8]

    return (0);
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u1;

    if (size < 6u) {
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b05      	cmp	r3, #5
 800a7e8:	d802      	bhi.n	800a7f0 <can2_ivt_msg_result_u1_unpack+0x18>
        return (-EINVAL);
 800a7ea:	f06f 0315 	mvn.w	r3, #21
 800a7ee:	e077      	b.n	800a8e0 <can2_ivt_msg_result_u1_unpack+0x108>
    }

    dst_p->ivt_id_result_u1 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	22ff      	movs	r2, #255	@ 0xff
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7ff fc8e 	bl	800a11a <unpack_right_shift_u8>
 800a7fe:	4603      	mov	r3, r0
 800a800:	461a      	mov	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u1_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	3301      	adds	r3, #1
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2280      	movs	r2, #128	@ 0x80
 800a80e:	2107      	movs	r1, #7
 800a810:	4618      	mov	r0, r3
 800a812:	f7ff fc82 	bl	800a11a <unpack_right_shift_u8>
 800a816:	4603      	mov	r3, r0
 800a818:	461a      	mov	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u1_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	3301      	adds	r3, #1
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2240      	movs	r2, #64	@ 0x40
 800a826:	2106      	movs	r1, #6
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fc76 	bl	800a11a <unpack_right_shift_u8>
 800a82e:	4603      	mov	r3, r0
 800a830:	461a      	mov	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u1_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	3301      	adds	r3, #1
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	2220      	movs	r2, #32
 800a83e:	2105      	movs	r1, #5
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff fc6a 	bl	800a11a <unpack_right_shift_u8>
 800a846:	4603      	mov	r3, r0
 800a848:	461a      	mov	r2, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u1_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	3301      	adds	r3, #1
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2210      	movs	r2, #16
 800a856:	2104      	movs	r1, #4
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fc5e 	bl	800a11a <unpack_right_shift_u8>
 800a85e:	4603      	mov	r3, r0
 800a860:	461a      	mov	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u1 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	3301      	adds	r3, #1
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	220f      	movs	r2, #15
 800a86e:	2100      	movs	r1, #0
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff fc52 	bl	800a11a <unpack_right_shift_u8>
 800a876:	4603      	mov	r3, r0
 800a878:	461a      	mov	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	715a      	strb	r2, [r3, #5]
    ivt_result_u1 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	3302      	adds	r3, #2
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	22ff      	movs	r2, #255	@ 0xff
 800a886:	2118      	movs	r1, #24
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fc2f 	bl	800a0ec <unpack_left_shift_u32>
 800a88e:	6178      	str	r0, [r7, #20]
    ivt_result_u1 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	3303      	adds	r3, #3
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	22ff      	movs	r2, #255	@ 0xff
 800a898:	2110      	movs	r1, #16
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff fc26 	bl	800a0ec <unpack_left_shift_u32>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	617b      	str	r3, [r7, #20]
    ivt_result_u1 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	22ff      	movs	r2, #255	@ 0xff
 800a8b0:	2108      	movs	r1, #8
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fc1a 	bl	800a0ec <unpack_left_shift_u32>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	617b      	str	r3, [r7, #20]
    ivt_result_u1 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	3305      	adds	r3, #5
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	22ff      	movs	r2, #255	@ 0xff
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7ff fc3d 	bl	800a14a <unpack_right_shift_u32>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u1 = (int32_t)ivt_result_u1;
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	609a      	str	r2, [r3, #8]

    return (0);
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_i;

    if (size < 6u) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d802      	bhi.n	800a900 <can2_ivt_msg_result_i_unpack+0x18>
        return (-EINVAL);
 800a8fa:	f06f 0315 	mvn.w	r3, #21
 800a8fe:	e077      	b.n	800a9f0 <can2_ivt_msg_result_i_unpack+0x108>
    }

    dst_p->ivt_id_result_i = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	22ff      	movs	r2, #255	@ 0xff
 800a906:	2100      	movs	r1, #0
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff fc06 	bl	800a11a <unpack_right_shift_u8>
 800a90e:	4603      	mov	r3, r0
 800a910:	461a      	mov	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_i_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	3301      	adds	r3, #1
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2280      	movs	r2, #128	@ 0x80
 800a91e:	2107      	movs	r1, #7
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff fbfa 	bl	800a11a <unpack_right_shift_u8>
 800a926:	4603      	mov	r3, r0
 800a928:	461a      	mov	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_i_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	3301      	adds	r3, #1
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2240      	movs	r2, #64	@ 0x40
 800a936:	2106      	movs	r1, #6
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff fbee 	bl	800a11a <unpack_right_shift_u8>
 800a93e:	4603      	mov	r3, r0
 800a940:	461a      	mov	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_i_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	3301      	adds	r3, #1
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	2220      	movs	r2, #32
 800a94e:	2105      	movs	r1, #5
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fbe2 	bl	800a11a <unpack_right_shift_u8>
 800a956:	4603      	mov	r3, r0
 800a958:	461a      	mov	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_i_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	3301      	adds	r3, #1
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2210      	movs	r2, #16
 800a966:	2104      	movs	r1, #4
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fbd6 	bl	800a11a <unpack_right_shift_u8>
 800a96e:	4603      	mov	r3, r0
 800a970:	461a      	mov	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_i = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	3301      	adds	r3, #1
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	220f      	movs	r2, #15
 800a97e:	2100      	movs	r1, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fbca 	bl	800a11a <unpack_right_shift_u8>
 800a986:	4603      	mov	r3, r0
 800a988:	461a      	mov	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	715a      	strb	r2, [r3, #5]
    ivt_result_i = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	3302      	adds	r3, #2
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	22ff      	movs	r2, #255	@ 0xff
 800a996:	2118      	movs	r1, #24
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fba7 	bl	800a0ec <unpack_left_shift_u32>
 800a99e:	6178      	str	r0, [r7, #20]
    ivt_result_i |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	3303      	adds	r3, #3
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	22ff      	movs	r2, #255	@ 0xff
 800a9a8:	2110      	movs	r1, #16
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff fb9e 	bl	800a0ec <unpack_left_shift_u32>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	617b      	str	r3, [r7, #20]
    ivt_result_i |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	22ff      	movs	r2, #255	@ 0xff
 800a9c0:	2108      	movs	r1, #8
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff fb92 	bl	800a0ec <unpack_left_shift_u32>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]
    ivt_result_i |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	3305      	adds	r3, #5
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	22ff      	movs	r2, #255	@ 0xff
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fbb5 	bl	800a14a <unpack_right_shift_u32>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_i = (int32_t)ivt_result_i;
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	609a      	str	r2, [r3, #8]

    return (0);
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <memset>:
 800a9f8:	4402      	add	r2, r0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d100      	bne.n	800aa02 <memset+0xa>
 800aa00:	4770      	bx	lr
 800aa02:	f803 1b01 	strb.w	r1, [r3], #1
 800aa06:	e7f9      	b.n	800a9fc <memset+0x4>

0800aa08 <__libc_init_array>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	4d0d      	ldr	r5, [pc, #52]	@ (800aa40 <__libc_init_array+0x38>)
 800aa0c:	4c0d      	ldr	r4, [pc, #52]	@ (800aa44 <__libc_init_array+0x3c>)
 800aa0e:	1b64      	subs	r4, r4, r5
 800aa10:	10a4      	asrs	r4, r4, #2
 800aa12:	2600      	movs	r6, #0
 800aa14:	42a6      	cmp	r6, r4
 800aa16:	d109      	bne.n	800aa2c <__libc_init_array+0x24>
 800aa18:	4d0b      	ldr	r5, [pc, #44]	@ (800aa48 <__libc_init_array+0x40>)
 800aa1a:	4c0c      	ldr	r4, [pc, #48]	@ (800aa4c <__libc_init_array+0x44>)
 800aa1c:	f000 f818 	bl	800aa50 <_init>
 800aa20:	1b64      	subs	r4, r4, r5
 800aa22:	10a4      	asrs	r4, r4, #2
 800aa24:	2600      	movs	r6, #0
 800aa26:	42a6      	cmp	r6, r4
 800aa28:	d105      	bne.n	800aa36 <__libc_init_array+0x2e>
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa30:	4798      	blx	r3
 800aa32:	3601      	adds	r6, #1
 800aa34:	e7ee      	b.n	800aa14 <__libc_init_array+0xc>
 800aa36:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa3a:	4798      	blx	r3
 800aa3c:	3601      	adds	r6, #1
 800aa3e:	e7f2      	b.n	800aa26 <__libc_init_array+0x1e>
 800aa40:	0800ac80 	.word	0x0800ac80
 800aa44:	0800ac80 	.word	0x0800ac80
 800aa48:	0800ac80 	.word	0x0800ac80
 800aa4c:	0800ac84 	.word	0x0800ac84

0800aa50 <_init>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	bf00      	nop
 800aa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa56:	bc08      	pop	{r3}
 800aa58:	469e      	mov	lr, r3
 800aa5a:	4770      	bx	lr

0800aa5c <_fini>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	bf00      	nop
 800aa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa62:	bc08      	pop	{r3}
 800aa64:	469e      	mov	lr, r3
 800aa66:	4770      	bx	lr
